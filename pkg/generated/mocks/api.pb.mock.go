// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/samsung-cnct/cluster-manager-api/pkg/generated/api (interfaces: ClusterClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	api "github.com/samsung-cnct/cluster-manager-api/pkg/generated/api"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockClusterClient is a mock of ClusterClient interface
type MockClusterClient struct {
	ctrl     *gomock.Controller
	recorder *MockClusterClientMockRecorder
}

// MockClusterClientMockRecorder is the mock recorder for MockClusterClient
type MockClusterClientMockRecorder struct {
	mock *MockClusterClient
}

// NewMockClusterClient creates a new mock instance
func NewMockClusterClient(ctrl *gomock.Controller) *MockClusterClient {
	mock := &MockClusterClient{ctrl: ctrl}
	mock.recorder = &MockClusterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterClient) EXPECT() *MockClusterClientMockRecorder {
	return m.recorder
}

// CreateCluster mocks base method
func (m *MockClusterClient) CreateCluster(arg0 context.Context, arg1 *api.CreateClusterMsg, arg2 ...grpc.CallOption) (*api.CreateClusterReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCluster", varargs...)
	ret0, _ := ret[0].(*api.CreateClusterReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCluster indicates an expected call of CreateCluster
func (mr *MockClusterClientMockRecorder) CreateCluster(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCluster", reflect.TypeOf((*MockClusterClient)(nil).CreateCluster), varargs...)
}

// DeleteCluster mocks base method
func (m *MockClusterClient) DeleteCluster(arg0 context.Context, arg1 *api.DeleteClusterMsg, arg2 ...grpc.CallOption) (*api.DeleteClusterReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCluster", varargs...)
	ret0, _ := ret[0].(*api.DeleteClusterReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster
func (mr *MockClusterClientMockRecorder) DeleteCluster(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockClusterClient)(nil).DeleteCluster), varargs...)
}

// DeleteHelmChart mocks base method
func (m *MockClusterClient) DeleteHelmChart(arg0 context.Context, arg1 *api.DeleteHelmChartMsg, arg2 ...grpc.CallOption) (*api.DeleteHelmChartReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteHelmChart", varargs...)
	ret0, _ := ret[0].(*api.DeleteHelmChartReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteHelmChart indicates an expected call of DeleteHelmChart
func (mr *MockClusterClientMockRecorder) DeleteHelmChart(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHelmChart", reflect.TypeOf((*MockClusterClient)(nil).DeleteHelmChart), varargs...)
}

// GetCluster mocks base method
func (m *MockClusterClient) GetCluster(arg0 context.Context, arg1 *api.GetClusterMsg, arg2 ...grpc.CallOption) (*api.GetClusterReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCluster", varargs...)
	ret0, _ := ret[0].(*api.GetClusterReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster
func (mr *MockClusterClientMockRecorder) GetCluster(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockClusterClient)(nil).GetCluster), varargs...)
}

// GetClusterList mocks base method
func (m *MockClusterClient) GetClusterList(arg0 context.Context, arg1 *api.GetClusterListMsg, arg2 ...grpc.CallOption) (*api.GetClusterListReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusterList", varargs...)
	ret0, _ := ret[0].(*api.GetClusterListReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterList indicates an expected call of GetClusterList
func (mr *MockClusterClientMockRecorder) GetClusterList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterList", reflect.TypeOf((*MockClusterClient)(nil).GetClusterList), varargs...)
}

// GetPodCount mocks base method
func (m *MockClusterClient) GetPodCount(arg0 context.Context, arg1 *api.GetPodCountMsg, arg2 ...grpc.CallOption) (*api.GetPodCountReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPodCount", varargs...)
	ret0, _ := ret[0].(*api.GetPodCountReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodCount indicates an expected call of GetPodCount
func (mr *MockClusterClientMockRecorder) GetPodCount(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodCount", reflect.TypeOf((*MockClusterClient)(nil).GetPodCount), varargs...)
}

// GetVersionInformation mocks base method
func (m *MockClusterClient) GetVersionInformation(arg0 context.Context, arg1 *api.GetVersionMsg, arg2 ...grpc.CallOption) (*api.GetVersionReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVersionInformation", varargs...)
	ret0, _ := ret[0].(*api.GetVersionReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersionInformation indicates an expected call of GetVersionInformation
func (mr *MockClusterClientMockRecorder) GetVersionInformation(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionInformation", reflect.TypeOf((*MockClusterClient)(nil).GetVersionInformation), varargs...)
}

// HelloWorld mocks base method
func (m *MockClusterClient) HelloWorld(arg0 context.Context, arg1 *api.HelloWorldMsg, arg2 ...grpc.CallOption) (*api.HelloWorldReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HelloWorld", varargs...)
	ret0, _ := ret[0].(*api.HelloWorldReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HelloWorld indicates an expected call of HelloWorld
func (mr *MockClusterClientMockRecorder) HelloWorld(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelloWorld", reflect.TypeOf((*MockClusterClient)(nil).HelloWorld), varargs...)
}

// InstallHelmChart mocks base method
func (m *MockClusterClient) InstallHelmChart(arg0 context.Context, arg1 *api.InstallHelmChartMsg, arg2 ...grpc.CallOption) (*api.InstallHelmChartReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstallHelmChart", varargs...)
	ret0, _ := ret[0].(*api.InstallHelmChartReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallHelmChart indicates an expected call of InstallHelmChart
func (mr *MockClusterClientMockRecorder) InstallHelmChart(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallHelmChart", reflect.TypeOf((*MockClusterClient)(nil).InstallHelmChart), varargs...)
}

// ProvisionTiller mocks base method
func (m *MockClusterClient) ProvisionTiller(arg0 context.Context, arg1 *api.ProvisionTillerMsg, arg2 ...grpc.CallOption) (*api.ProvisionTillerReply, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProvisionTiller", varargs...)
	ret0, _ := ret[0].(*api.ProvisionTillerReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProvisionTiller indicates an expected call of ProvisionTiller
func (mr *MockClusterClientMockRecorder) ProvisionTiller(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionTiller", reflect.TypeOf((*MockClusterClient)(nil).ProvisionTiller), varargs...)
}
