// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdf\x6f\xdb\x38\xf2\x7f\xcf\x5f\x31\xd0\xf7\x0b\x5c\x17\x68\xe2\x6e\xef\xad\x2f\x7b\x41\xb2\xe8\x06\x6d\xba\xc1\xb9\x68\x1e\xae\x85\x41\x4b\x63\x89\x1b\x8a\x54\xc9\x91\x7d\xbe\x43\xfe\xf7\x03\x29\xc9\xfa\x61\xc9\x96\x25\x5f\xe2\x5c\x77\x5f\xb6\x11\xc9\xf9\xf9\xe1\x70\xc8\x99\xe4\xdf\x67\x00\x9e\x59\xb1\x30\x44\xed\xbd\x03\xef\xed\xc5\x1b\xef\xb5\xfd\xc6\xe5\x42\x79\xef\xc0\x8e\x03\x78\xc4\x49\xa0\x1d\xbf\x12\xa9\x21\xd4\x70\xcb\x24\x0b\x51\xc3\xe5\xdd\x8d\x9b\x0f\xe0\x2d\x51\x1b\xae\xa4\x9d\xb5\x7c\x73\xf1\x73\x4e\x08\xc0\xf3\x95\x24\xe6\xd3\x86\x1a\x80\x27\x59\xec\xc8\xdd\x72\x3f\x62\x28\xe0\x0b\x4a\xfc\x17\x67\xf9\x0a\x00\x2f\xd5\xc2\x8e\x47\x44\x89\x79\x37\x99\x84\x9c\xa2\x74\x7e\xe1\xab\x78\xb2\x6c\x4e\xc5\x98\x71\x37\x39\xce\x87\xfe\x16\xda\x2f\x76\xb2\xe7\xe6\x3c\x9e\x01\x3c\x3a\xa5\x8c\x1f\x61\x8c\xc6\x7b\x07\xff\xc8\x44\xb3\xf4\x0b\x31\x1d\x2f\xbb\xe2\x9b\x9b\xeb\x2b\x69\xd2\xda\x64\x96\x24\x82\xfb\x8c\xb8\x92\x93\x3f\x8c\x92\xe5\xdc\x44\xab\x20\xf5\x7b\xce\x65\x14\x99\xd2\xb2\x13\x96\xf0\xc9\xf2\xe7\x89\x9f\x19\xb6\x6a\xa4\x10\xab\x36\xb3\xe2\xa7\x71\xcc\xf4\xda\xea\x7a\xcf\x85\x00\x8d\xa4\x39\x2e\x11\x28\x42\x30\xc4\x28\x35\xa0\x16\xc0\x20\x27\x06\x4c\x06\xc0\xc9\xc0\x43\x3a\x47\x5f\xc9\x05\x0f\x61\xa1\x34\xf8\x4a\x4a\xf4\x89\x2f\x39\xad\x37\x76\x04\xf0\x54\x82\xda\x89\x7c\x13\x58\x1e\xef\x91\x72\x77\x57\x27\x69\x34\x89\x92\x06\x4d\x4d\x36\x00\xef\xed\x9b\x37\x8d\x4f\x00\x5e\x80\xc6\xd7\x3c\xa1\x1c\x18\x15\x42\x99\x46\xd6\x21\x6c\x6b\x19\x80\xf7\xff\x1a\x17\x76\xc5\xff\x4d\x02\x5c\x70\xc9\x2d\x05\x53\x58\x69\x16\x67\xf0\x9b\xb1\x84\x97\x52\xfe\x1d\x13\xb1\xf6\x6a\x84\x1e\xcf\xda\xfe\xfd\x58\x51\x27\x61\x9a\xc5\x48\xa8\x4b\xe7\x65\xff\x35\x14\x29\x10\xeb\xfe\xff\x7a\xa7\x92\x9f\x58\x8c\xd6\x0f\xd6\x2b\x85\x27\x48\xc1\x1c\x41\x28\xf5\x80\x01\xa4\xc9\x45\x93\x04\x77\x2b\xbf\xa7\xa8\xd7\xcd\x21\x8d\xdf\x53\xae\xd1\xba\x64\xc1\x84\xc1\xc6\x30\xad\x13\x27\x98\x21\xcd\x65\xe8\xb5\x2a\xfc\xad\xa2\x30\xb1\xb0\xa9\x6a\xb1\xab\xcb\xc5\xdf\xce\x1a\x96\xf2\x02\x14\x48\xb8\x1b\x8f\xd9\x9c\x12\x7f\x3b\xb0\x75\xed\xa6\xbe\x00\x78\xd5\x04\x3d\x15\x84\xdd\x47\x8c\x80\x9b\x2a\xc2\xfe\x62\xc0\x2e\xb4\x40\x0b\xd0\x90\x56\xeb\x97\x87\xb1\x24\xdd\x13\xf0\x12\xad\x96\xdc\x1e\x32\xbd\x30\x76\xa5\x91\xbd\x08\x8c\xd5\x04\x7d\x12\x8c\xcd\x55\xb0\x85\x81\x0c\x1e\x6d\x23\x15\x74\x90\x4e\x9b\xe0\x38\xb6\x01\x6e\x4d\xd8\x47\xfd\xe1\x78\x3b\xab\x58\xaf\x79\xfe\x4e\x04\x37\x34\xec\x10\x66\x60\xd7\xda\xc0\x9f\xd3\x32\xbd\xce\xd6\x8f\x96\xe1\x09\x83\xb3\x2e\xe9\x20\x74\x1e\xc1\x3d\x21\x52\xa2\x02\x5f\xa5\xb2\xe6\x9d\x44\x99\x6e\xf7\x4c\x79\x9c\x08\x84\x44\x05\xe0\x16\x42\x61\xda\x0b\x80\xdc\x75\xf6\xe7\x00\x56\x9c\x22\x17\x4b\x65\x1a\xcf\x51\x5b\x17\x26\x2a\x30\xc0\x65\xf6\x95\xc5\x68\x12\xe6\x63\x16\x7f\x02\x0c\x76\x3b\xf6\x4e\x05\x57\x4e\xd0\xd3\xf6\x6a\x21\xe6\x8f\x18\x70\x2a\xea\x3f\x4f\xb8\x89\x50\x08\xb5\x52\x5a\x04\x87\xc2\xf9\x37\xbb\x12\xee\xed\x52\x98\xa2\x5e\x72\x1f\xe1\x1c\x56\x19\x9e\x13\x64\x04\x0c\x42\x8d\x48\x5c\x86\x36\x1b\x28\x10\xdc\x07\xbc\x8e\xb6\x23\x7d\xca\xd8\x2d\xa5\xfc\x11\xa1\x5b\x6a\xff\x6c\xc8\x8d\xab\x98\x3d\xe0\x62\x10\x60\x22\xd4\x1a\x03\xb0\x34\xc0\x8f\x98\xa6\xbd\x57\x84\xdf\x50\xc4\x57\xcd\x99\xa7\x86\xc8\x86\xa8\x4f\x02\xcb\xed\xfc\xb7\x4d\xd9\xe2\xbd\x86\xb8\x10\xa8\xc1\x44\x2a\x15\x81\xbd\x8a\x72\x69\x88\x09\x81\x01\x28\xf9\x34\x37\x85\xd7\xfb\x75\xca\xa4\xbc\xd8\x1c\xb8\x07\x5c\x83\x72\x05\x37\x4b\x4f\x4d\xa7\xe2\x75\xac\xbf\x46\xf9\x0a\xf7\x92\xe0\x68\xb8\xad\x77\x32\x7a\x35\xb7\x6f\x9b\x3a\x6e\x37\xc0\x27\x16\x3f\x91\x3b\x8e\x10\xf3\xfa\x5f\x46\xf3\x1d\x04\xaf\x94\x06\x8d\xf9\x4f\x3f\x55\x62\xdb\x57\xf9\x39\xe2\x26\x3b\x9a\xe7\x98\x5d\xcb\x53\x9f\xf8\x12\x81\xbb\x57\x3a\x67\x9d\x88\x19\x60\x42\x23\x0b\xd6\x30\x47\x94\x65\x94\xdc\xa4\xa5\xc6\x1e\xdf\x8d\x67\x81\x66\xb4\xbc\xc9\xf8\xbf\x88\x70\xd9\x94\xf5\x47\x3c\xc6\x9b\x36\x78\x9e\xc3\x3c\x0b\x2c\xbd\x53\xd0\x5d\xb8\xcf\x49\x75\x23\xf4\xae\x78\xbc\xf9\xbc\x35\xf3\xd4\x00\xda\x10\xf5\x47\xc4\x67\xc3\x04\xcf\x03\xcf\xb2\xa4\x74\xd0\x7b\x4c\xaa\xe5\xe6\xf4\xe4\x72\xa1\x74\xec\x60\x08\x6c\xae\x52\x02\x96\x70\x30\xa8\x97\x3b\xc1\xfa\x1e\xe9\x4b\x46\xe1\xa6\x24\x70\xca\x90\x2d\x05\x7e\xb2\x27\x9a\x4d\x59\xad\x22\x5a\x59\xd8\x6a\x08\xd4\x62\xcd\x8a\x57\x8b\x33\x5d\xcd\xff\x40\xbf\x3c\xbb\xbc\x44\x5b\xbf\x10\x6f\x98\xd9\x0b\x39\xcd\xb6\xc1\x01\x2d\xe9\xc1\xeb\xda\x58\x51\xc6\xfc\x6c\x33\x46\x16\x82\xca\x5e\x78\x42\x4e\xf6\xf2\xac\x0c\x27\xa5\x2b\xb6\xab\x5a\xc8\xb2\xf4\x55\x1c\x73\x1a\xcc\x31\x62\x26\x2a\x0a\x43\x96\x65\x4e\xae\x93\x1d\x69\xc4\x99\x21\xd6\xb8\x5e\xf5\x65\x79\x1f\x21\x45\xa8\x41\x69\x90\x8a\xb2\x2c\x59\x23\xc2\x8a\x19\xf0\x05\x32\x09\xab\x08\x25\xcc\x53\x2e\x3a\x84\xb0\x43\xc1\x2c\x18\x2a\xc0\x35\x23\x57\x08\x73\x64\x3a\xd4\x54\xa3\xfc\xf8\xa5\xcc\x91\x43\x05\xa9\xc1\x00\x48\x59\xbb\x26\x5c\x60\x3b\xc7\x7c\x50\x0f\xe2\x77\x95\x2f\x76\xac\xda\xe9\x27\x82\x91\xc5\xf8\x20\xfa\x77\xf9\x62\xe0\x94\xb9\x29\xe3\x17\xb8\xb2\xed\x04\x74\x2a\x25\x97\x16\xb6\x15\xde\xad\x11\xb4\xed\x91\x3d\xfb\x74\x8d\xc4\xb8\xb8\x21\x8c\xc7\x6c\x40\x1e\x0c\xd2\xef\xe6\xba\x51\x18\x6d\xb7\x61\x7e\x26\x1e\x4e\xbf\xa5\xf4\xda\xce\x21\xab\x96\x0f\xdc\x56\xe5\x1d\xad\x2c\xba\xef\xe5\x58\xd6\xe0\x47\x73\xad\x94\xf3\x1d\xda\x5d\x35\xbf\x78\xeb\xdb\x16\xe2\x40\x80\xfc\x09\x8d\x27\x81\x46\x6f\xaf\x54\x6b\x63\x97\xf7\xd3\x69\x82\xfe\x18\xf7\x68\x0c\xc7\x9c\x9a\xd9\x72\x17\x8f\x2e\xef\xa7\x1d\x16\x44\x5f\x23\xcd\x1e\x70\x3d\x1b\x08\x06\xcb\x69\xea\xa8\x7c\xc0\xf5\x4d\x16\xfe\x2e\xef\x6e\xe0\xd2\xf7\xd1\x98\x9d\x5c\x99\x9b\x62\x99\x8f\xe4\x9c\xf1\xfa\x80\xeb\x0d\x77\xd6\xe4\x3e\xc8\x87\xb7\x8c\x8d\x76\x22\xca\x20\x51\x5c\x0e\x4f\x45\xac\x10\x4e\xa7\x0d\xa5\x56\x9b\xa6\x06\xf5\xe0\x1d\x67\xf9\x14\x04\x8a\x5a\x5a\xc1\xb7\x9d\x9d\x62\x29\x45\xa3\x5c\xf7\xfb\x65\x4a\x11\x3c\xe4\x4e\xb3\x1c\x5b\x14\x1c\xe6\x36\x13\x8e\xf1\xd8\x31\xe3\x56\xde\x4d\xb4\xe9\x86\xe8\x4c\x45\xb2\x8a\xcf\x56\xaa\x33\xac\x2e\x7f\x97\x53\x73\xd8\xed\xf6\x40\xc1\x14\x4c\x82\x3e\x5f\xe4\x4d\x70\x63\xad\x5f\x63\xfe\x1c\x6e\xa8\x86\xf6\x8d\x8a\xe7\xe0\xa7\x5a\xa3\x24\xb1\x06\x8a\xb8\xb1\x13\xd8\xca\xd8\x8c\x3b\x66\xac\x23\x4e\xb9\x91\xa3\x78\x64\x13\x49\xf6\xec\xf3\x2e\x4f\x54\x84\x62\xab\x23\xc9\x54\x9c\x50\xdd\x22\x5d\xde\x77\x4b\x34\x08\x1b\xd9\x85\x77\x04\x28\xd4\x43\x17\x24\xe6\x4a\xd9\x8b\x52\x5d\x9b\xec\x06\xdb\x39\xbc\xeb\xfe\x55\x6c\x60\x9b\xdb\x57\xb6\x2f\xcc\x73\xfc\x68\xfc\x9e\xa2\xe9\x08\xc6\xdb\x2d\xa2\x07\xfa\xa9\x92\xdf\xb5\x32\x40\xad\xd5\x70\xf2\xbf\xba\xd5\x87\xfb\xb2\xa5\xc3\xee\xf4\x7c\x79\xe5\xea\x66\x55\x17\x16\x2f\xfa\x6a\xdd\x15\x7e\x47\x24\x92\xd3\x5a\xf2\xb8\x8d\x8a\xc3\x6c\xdb\x78\x68\x3f\x3d\xeb\xde\xb3\x2c\xb0\x6e\x1e\xe1\xc0\xa4\x2e\xd7\x5a\xa4\xa2\x23\x88\xa2\x31\x2c\x1c\x11\xca\x73\x02\x06\x56\xa8\x11\x42\xbe\xc4\x21\x71\xe8\xd7\xc6\x8e\x39\xd8\xa0\xbe\x0a\x86\x27\x57\x6e\xbf\x82\x23\x71\x74\x23\x95\xf4\x0b\x2a\x87\x5b\xe7\x3d\x4a\xd4\xdc\x2f\x6b\x52\xcf\x7d\x70\xcb\x4a\x2e\x95\x95\xd9\x62\xec\x4a\x7d\xcb\x22\xf4\x31\xb8\x66\xfd\x63\xae\x39\xd7\xb2\x75\xdf\x2b\xbf\x23\x00\xa4\xda\xa5\xd0\x98\xa8\xd1\x02\x64\x85\xc6\x7d\x0f\x9c\x7e\xc3\x45\x63\x78\x39\x6f\xb5\x72\x59\x32\x91\x6e\x3f\x9a\xf7\x67\xc3\x34\xe6\xa1\xc2\x1d\x44\xf0\x4a\xa2\x21\x0c\x60\xcd\x62\x01\xe7\x6e\xe8\x8b\x63\x71\xe1\xbe\xf8\x4a\x12\x4a\x32\x3f\x0d\x87\x6f\x56\x00\x99\x22\x91\x15\x6d\x24\x84\x8f\x83\xa8\x66\xb3\x43\x87\xa9\x47\x3c\xac\xee\x6f\x44\x18\x64\xd0\xed\x56\xd2\xd3\x3b\x8c\x6e\x6a\x7d\xf5\xc5\xc5\xd5\xac\x4d\x67\xde\xb4\xe9\xf7\xed\x10\x87\x69\xcd\xea\x15\x3c\x8f\x13\xc6\xcd\xf9\xa3\x73\xb9\x46\xe3\x46\xa9\xd2\xc7\x66\x63\xf2\x18\xdf\xfd\xcf\xf9\x6d\x6c\x42\x5d\x79\x51\x3f\xa1\xb4\xba\xd1\xe2\xfa\x6c\x71\xeb\x53\xf5\xf4\x5b\x20\xf9\x59\x4f\xcb\xa6\x2b\xfb\xab\xfc\x88\x6c\x89\x80\x71\x42\x6b\x3b\xc7\xf5\x04\x01\x13\xa2\x8c\x6f\x03\x01\x5b\xef\x70\x1e\x61\x81\x44\x05\x9d\x9b\x9b\x4b\xc2\xb0\xd1\x87\x57\xc1\x2c\x97\xf4\xd7\xb7\x5d\xa6\xd9\xd3\x6e\xfe\x4a\xe9\x86\x1d\x86\x1d\x63\xf5\xca\xf0\x09\xee\xdc\x45\x25\xf3\xb7\x57\xe3\xdf\x3f\xec\x3c\xd1\x66\xbc\xb5\x8a\x0c\xdd\xfb\x6a\x7f\x31\x7a\x77\x7d\xb1\x3a\xf3\x70\x0f\xd4\x5b\x76\xff\xbb\x49\xf0\xb6\x74\x1b\xaa\xb5\xdc\xbe\xda\x46\x5e\xbb\x5f\xf6\xd2\x63\x34\x92\xfa\x5d\x4d\xfa\x2a\x53\x34\x63\xd8\xf0\x51\x51\x6c\xaf\x42\x6d\x4d\x58\x63\x2e\x73\xed\xe7\x49\xbf\xca\x72\x9f\x46\xdd\xf6\x5d\xb1\xd5\xc4\xb5\x63\x23\xf4\x4d\x73\x3b\x2e\x85\xb9\x70\xd9\xa4\x8e\xf7\xcd\xd6\x7b\xc4\xa1\xd2\xb4\xf5\x31\xd6\xcc\xe5\xae\x19\xd3\x6d\x41\xfa\xee\xc9\xf6\x1e\xc4\xd3\x8b\x8d\x2f\xf6\x69\xa4\xa5\x81\xec\xe5\x6d\xad\xa3\xa5\x3e\xdd\xac\x79\x07\xeb\xd1\x6d\x31\x52\x35\x6e\x6c\x36\x3a\x16\xcd\x9b\x13\x48\x93\x50\xb3\x00\x3b\x5f\x1e\x0a\x97\xae\x78\xf7\x0b\xd5\x31\xf2\xf5\xdc\x34\x9b\x5f\xe8\x3d\xb7\x0c\xf3\xaf\xbf\x7c\x95\xd3\xcc\x64\x9c\x20\xb2\x59\x62\x6d\x12\x0b\x62\x2e\x21\xd1\x7c\xc9\x05\x86\x68\x7e\xe9\xa8\x6d\xd8\x69\xb3\x4a\x32\x39\xfa\x9a\xd6\xb3\x73\xbe\x05\x09\x56\x67\x7b\xb3\xa6\x0a\x16\xd8\x5c\xb8\x93\x2b\x53\x67\x50\x86\xd1\xda\xb0\xfa\x67\x30\x3b\x30\x98\x6d\x1a\x1a\xf1\x9f\x84\x5a\x32\x71\xad\xfc\x4a\x47\x63\xa3\x89\xf3\x56\x69\xcc\x5b\x4a\x77\xfc\x55\x94\xee\x3f\x64\x62\x58\x6c\x52\x19\x9e\xfb\xd2\xa7\xe2\x24\x3c\xcf\x7d\x7a\xce\x12\x6e\xc5\x7c\x3c\x7b\x3c\xfb\x4f\x00\x00\x00\xff\xff\x98\x3c\xf5\x27\xa3\x45\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 17827, mode: os.FileMode(420), modTime: time.Unix(1528326238, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
