// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xeb\x6e\xdb\xc6\x12\xfe\xef\xa7\x18\xf0\x1c\xe0\xe4\x00\xb6\xe5\xb8\x28\x50\xf8\x57\x5d\x19\x0d\x84\xc4\x89\x51\x05\x31\x8a\x26\x10\x46\xcb\x11\xb5\x31\xb9\x4b\xef\x45\xae\x52\xf8\xdd\x8b\x5d\x92\xe2\x45\xa4\x6e\x74\x53\xa7\x68\x80\x20\x8a\x76\x76\x6e\xdf\xec\xec\xcc\xac\xfe\x38\x02\x08\xf4\x03\x46\x11\xa9\xe0\x02\x82\xf3\xd3\xb3\xe0\xd8\x7d\xc7\xc5\x4c\x06\x17\xe0\xd6\x01\x02\xc3\x4d\x4c\x6e\x7d\x18\x5b\x6d\x48\xc1\x35\x0a\x8c\x48\xc1\xe5\xcd\xc8\xd3\x03\x04\x0b\x52\x9a\x4b\xe1\xa8\x16\x67\xa7\x05\x23\x80\x80\x49\x61\x90\x99\x15\x37\x80\x40\x60\xe2\xd9\x8d\x31\xd1\x56\x44\x30\x7c\x3b\x7c\x9f\x93\x03\x04\x56\xc5\x6e\x71\x6e\x4c\xaa\x2f\x06\x83\x88\x9b\xb9\x9d\x9e\x32\x99\x0c\x74\x46\x7f\xc2\x04\x33\x03\x96\xe9\x72\x92\x64\xba\x9c\x60\xca\x4b\x1e\x94\x20\xf7\x5c\x30\x4c\xb8\xf8\xb1\xba\xf1\x94\xcb\xc0\x93\x3d\x1e\x01\x3c\x7a\x6b\x35\x9b\x53\x42\x3a\xb8\x80\xdf\x32\x9d\xbd\xec\xc2\x00\xf7\x1f\xb7\xe3\x93\xa7\x65\x52\x68\x5b\x23\xc6\x34\x8d\x39\x43\xc3\xa5\x18\x7c\xd6\x52\x94\xb4\xa9\x92\xa1\x65\x3b\xd2\xa2\x99\xeb\xd2\xe5\x03\x4c\xf9\x60\xf1\xb2\xb0\xb2\xea\xbd\x88\xaa\xce\x74\xea\xdb\x24\x41\xb5\x74\xe6\xde\xf2\x38\x06\x45\x46\x71\x5a\x10\x98\x39\x81\x36\x68\xac\x06\x39\x03\x84\x9c\x19\xa0\x08\x81\x1b\x0d\x77\x76\x4a\x4c\x8a\x19\x8f\x60\x26\x15\x30\x29\x04\x31\xc3\x17\xdc\x2c\x57\xae\x04\x08\x64\x4a\xca\xab\x3c\x0a\x9d\x8c\x57\x64\xf2\x38\xa8\x12\x29\xd2\xa9\x14\x9a\x74\x4d\x37\x80\xe0\xfc\xec\xac\xf1\x15\x40\x10\x92\x66\x8a\xa7\x26\x8f\x98\x0a\xa3\xcc\x22\x07\x08\xae\x6d\x03\x08\xfe\xab\x68\xe6\x76\xfc\x67\x10\xd2\x8c\x0b\xee\x38\xe8\xc2\x4b\x93\x3c\x16\x26\x98\xf2\x52\xcb\x5f\x28\x8d\x97\x41\x8d\xd1\xe3\x51\xdb\xe7\xc7\x8a\x39\x29\x2a\x4c\xc8\x90\x2a\xc1\xcb\xfe\x34\x0c\x29\x42\xd9\xff\x7b\xbc\xd1\xc8\xb7\x98\x90\xc3\xc1\xa1\x52\x20\x61\x24\x4c\x09\x62\x29\xef\x28\x04\x9b\x9e\x36\x59\x70\xbf\xf3\xde\x92\x5a\x36\x97\x14\xdd\x5b\xae\xc8\x41\x32\xc3\x58\x53\x63\xd9\x2c\x53\xaf\x98\x36\x8a\x8b\x28\x68\x35\xf8\x53\xc5\x60\x83\x51\xd3\xd4\xe2\xb8\x97\x9b\x3f\x1d\x35\x3c\x15\x84\x14\x93\xa1\xcd\xf1\x98\xd1\x94\xf1\xb7\x21\xb6\xae\x3c\xe9\x37\x10\x5e\x35\x45\x9f\x4b\x84\xdd\xce\xd1\x00\xd7\xd5\x08\xfb\x9f\x06\xb7\xd1\x05\x5a\x48\xda\x28\xb9\xfc\xf6\x62\x2c\xb5\x5b\x12\x5e\xaa\xe4\x82\xbb\xdb\x67\xa7\x18\x1b\x2a\xc2\x6f\x22\xc6\x6a\x8a\x7e\x95\x18\x9b\xca\x70\x2d\x06\xb2\xf0\x68\x5b\xa9\x44\x87\x51\xb6\x19\x1c\x4f\xed\x80\x6b\x1d\xed\x62\xfe\xe1\xf1\x76\x54\xf1\x5e\xf3\xfe\x1d\xc4\x5c\x9b\xc3\x2e\x61\x04\xb7\xd7\x25\xfe\x9c\x97\xde\xe9\x6e\x7d\xe3\x04\x3e\xe3\xe0\xac\x6b\x7a\x50\x74\x3e\x01\x3c\x65\xd5\xb9\x17\x32\x56\x09\xc8\xb7\x82\x2b\x75\x55\xe2\x31\x00\x9c\x4a\x6b\x00\x53\x0e\x9a\xd4\x62\x63\x16\x79\x45\xe6\x43\xc6\x61\x54\x32\x78\xe6\x80\xe5\x0a\x7f\x35\xb0\x56\x05\x76\x45\xb5\xb2\xc4\xad\x9d\xee\xcb\xdb\xf1\x38\x25\x76\x79\x3b\x1e\x2a\x0a\x49\x18\x8e\x71\xd5\x73\xab\xbb\x46\x4e\x3f\x13\x2b\x4f\x86\xab\xb1\x53\x52\x86\x37\xfc\x1c\x68\x62\x8a\xcc\xe4\x8e\x96\x13\x1e\x36\x21\x68\x5c\x5c\xc7\xb5\xb5\xa2\xd9\x79\x3f\x27\x18\x7b\x2e\xaf\x69\x39\x0a\x7d\x89\x7c\x79\x33\x82\x4b\xc6\x48\xeb\xa0\xd5\x4b\xb9\x54\xf4\x24\x4e\x78\x4f\xc9\x99\xac\xd7\xb4\x5c\x49\xc7\xa6\xf4\xb5\xeb\xb2\xc6\x86\x95\xde\x74\x35\x80\xd5\x94\x95\xfa\xce\xf7\x5c\x44\xd5\x52\x21\xa8\x9d\xb0\x0e\x74\xae\xd0\xe0\x90\x44\xa3\x25\xd9\x17\x1c\x45\x51\xfd\xd4\xee\xee\x9b\xdb\x39\x67\x73\xc8\x18\xc0\x0b\xab\x4f\x08\xb5\x39\x79\x79\x0c\x64\xd8\xe9\xff\xdb\x51\xc1\x05\xf2\x18\xa7\x3c\xe6\x66\x39\xf9\x22\xc5\xfa\x99\x2c\x44\xa3\x52\x58\xbf\xe7\x02\x6e\x28\x69\xd2\x6f\xae\x7d\x36\x29\x5e\x55\x05\xbc\x2a\x15\x23\xa6\xc7\x50\x7c\x3e\x67\xfe\xf3\x03\xb9\xcf\xe1\xba\x75\xdd\xa8\x67\x72\x1c\x4e\x90\x03\xb5\x0b\xae\x23\xa1\x0d\x0a\x46\xaf\x94\xb4\x69\x1f\x68\x73\xfa\xfd\x81\x2d\x34\x00\x47\x0d\x2f\x92\xef\x4f\x63\x54\x11\x6d\x04\xf6\xde\xa2\x30\xae\x5b\xed\x10\xc8\x85\xa1\xa8\x96\xc6\x01\x82\x2c\x5b\xe7\xcb\xdf\x9d\x77\xa8\xf3\xd6\x26\x53\x52\xee\xda\xe6\xb9\x62\x1a\x5e\x84\x34\x43\x1b\x1b\x7f\x94\xbe\x90\x92\xbb\x21\xb2\xb2\x2c\x72\xce\xd5\xe0\xb3\xa1\x2b\x0c\xbc\xa5\xae\x19\x17\xeb\xc2\x76\x42\xed\x46\xe5\xfd\xbb\x55\x14\x8e\x1a\x81\xba\x37\x74\x8b\x94\xf5\xc9\x95\x1f\x6e\x86\xc0\xc3\x63\x98\xc6\x28\xee\x7c\x96\x71\x7f\x3f\x06\x3e\xd7\x10\x48\x91\xa5\x9e\xa5\xb4\x1f\x83\x63\x98\xf1\x38\xa6\x10\xf8\xcc\x7d\x01\xa8\x08\x7e\xfa\xf5\x9d\xe3\xd1\x99\x58\xad\x72\xc7\xd7\xfb\xf0\x50\x35\xc7\x39\x97\x0c\x89\x9d\xc0\xfb\x59\x2a\x78\x98\x93\x00\x2d\x5d\x1b\x35\xe7\x22\xd2\x5e\x5d\x8c\x15\x61\xb8\xcc\x52\x29\x85\x75\xbc\x1a\x97\x6d\x4b\xa5\xd0\x03\xa7\x88\x9b\xc9\x7a\xe1\xb3\x1f\x58\x06\x23\x90\xc2\xa7\xff\x88\x1b\x50\x94\x4a\xcd\x8d\x54\xcb\x76\xf7\x3b\x91\x4c\x26\x09\x37\x07\x4b\x9c\xa3\x9e\x17\xe3\x0f\x27\x32\x67\xd7\x29\xce\x28\xa2\x89\x36\x68\x0e\x4b\x27\xb7\x73\x32\x73\x77\xa6\x14\x08\x69\xbc\x54\xc7\x11\x1e\x50\x03\x8b\x09\x45\x86\xea\xd4\xf2\xb8\x43\x09\xb7\x14\x4e\xc2\x43\x15\xb8\xf2\x41\x3f\xf3\x12\xc2\x0e\x33\x65\x2f\x1c\xf3\xa8\x72\x42\x22\x7f\xb5\x87\x2e\x2f\x31\x99\xa4\x3c\xa6\x76\x89\xf9\xa2\x3a\x48\xde\x30\xdf\xec\x45\xb5\xf3\x4f\x63\x34\x2e\xc6\x0f\xe2\x7f\x93\x6f\x06\x6e\x32\x98\x32\x79\x59\xe5\x35\x00\x65\x85\x70\x25\x4b\x36\x35\xcd\x65\xb7\x76\x07\x6d\xad\x64\xf6\xd5\x15\x19\xe4\xb1\xcb\x94\x7d\x0e\xe0\x81\xd9\x67\x74\xd5\x18\xff\xb5\xfb\x30\x6f\xc6\xf7\xe7\xdf\x32\x60\xec\x48\xa6\x7e\x26\x7c\xe0\xb1\x2a\x47\x4c\xe5\x68\x79\xab\xc4\x72\xd2\xdc\x5b\x6a\x65\x68\xed\xa3\xdd\xcf\xac\xdd\xc7\x76\x25\xf6\x0c\x90\x7f\x43\xe3\xab\x84\xc6\xce\xa8\xb4\xd4\x3d\x7d\xe0\x09\xd1\xe0\x84\x35\xfb\x17\xe8\x6e\xa4\xb7\xb7\x41\xdd\x37\xde\xe5\xed\x78\xbd\x0e\x6f\x3a\x9c\xb5\xb6\xbb\xfb\x6b\x54\x6d\x9b\x3b\xd2\x77\xbd\x15\xf4\xf7\xd2\xf6\x80\x50\xa4\xa5\x55\x6c\xbd\x65\xda\x4b\xbb\x96\x42\xb5\x5d\x49\x57\x04\x66\x1d\x57\xab\x36\x45\x79\x9c\x95\x81\x4f\xd0\xc6\xed\x65\x45\xbd\x49\xda\xde\xf2\x35\x0a\xff\xbe\xf1\x7f\xad\xa3\x3e\xb1\xff\x94\xc9\x23\x7f\xb8\x5a\x0d\xde\x3b\xeb\x01\x47\x10\xee\x7a\xd8\xb6\x39\xe0\x26\xe7\xe6\xb3\x40\xf7\xb9\x2b\x84\x82\x4e\x89\xf1\x59\xfe\xde\xda\xd7\xfb\x35\xe1\x7f\x07\x0c\xd5\xfc\xba\x32\xf1\x04\x98\x55\x8a\x84\x89\x97\xae\x39\xd1\x8e\x00\x1f\xb4\x2b\x7b\x13\xc4\x8e\x53\x74\xf7\x83\xde\xb1\xf0\x6c\xdd\x8e\x0f\x3b\x26\x83\x5d\x13\xfa\xe6\x14\xfa\xa4\x28\x66\xb3\xcf\x1e\xf0\xc9\xbb\x2e\x97\x4d\xa5\x74\x7d\x45\xd7\xb0\xa1\x75\x79\x53\xbb\x52\x1c\x35\x57\x0a\x57\x0e\x1a\x4c\x73\xa4\x15\xdd\x5b\xd2\x1d\xcd\xcb\xfa\xef\x06\xf6\xc4\xa9\x52\x0e\x75\xc3\x13\xfa\x72\xba\x79\xcf\x17\x9a\x41\x31\x02\x3f\x00\xb4\x96\xf7\xd5\xe7\x07\xda\x50\xda\xfa\x15\xea\x72\x62\xfe\xcc\xda\x95\x11\x7b\x14\x58\xe3\x5a\x51\xb5\x0e\xff\xae\xbe\x6d\x7b\xba\x79\x7e\xce\x1d\xd5\xde\xb1\x81\x67\xc3\x0a\xbd\xd4\x2e\x24\x37\xc5\xfc\x5f\x56\x15\x6c\x39\x26\xdb\xeb\x81\x37\xcd\x87\xc0\x3e\xd8\xfd\xe3\x70\xeb\x9b\xab\x2a\xbd\xfd\x41\x7e\xad\xbd\x8e\x3d\x43\xbf\xce\x60\xf5\x04\xe9\xef\x84\x77\xaf\xdb\xdd\x99\xdf\xec\x13\xde\x3a\x6d\xdc\xe0\xda\xed\x43\xcb\xcd\x73\xa8\x2a\xe5\x3a\x02\xeb\xa3\x55\x2f\xc5\x0f\x77\x8a\xb7\xd8\x5a\x4e\x2b\x9f\x0f\xe9\x77\x43\x4a\x60\x7c\x25\x59\xe5\xfd\xb0\xf1\x64\x7a\x2d\x15\xe5\x0f\xb8\x1b\x7e\xa6\xd8\xe3\xc7\x85\x4e\x9d\xa3\xc7\xa3\x3f\x03\x00\x00\xff\xff\x41\x96\xcf\xb2\x34\x29\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 10548, mode: os.FileMode(420), modTime: time.Unix(1534551523, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
