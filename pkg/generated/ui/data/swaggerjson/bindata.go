// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xff\x6f\xdb\x36\x16\xff\xbd\x7f\xc5\x83\xef\x80\x6b\x81\x26\xee\x7a\xd8\x61\xe8\x30\xec\xb2\x14\xd7\x05\x6d\xba\xa0\xee\x1a\x0c\xd7\xc1\xa0\xa5\x67\x9b\x8b\x44\xaa\x24\x65\xcf\x3b\xf4\x7f\x3f\xf0\x8b\x6c\x49\x16\x6d\x59\x72\x62\x25\xf1\x80\xa1\x8e\xc4\x2f\xef\x1b\xc9\xcf\x7b\x7c\xa4\xfe\xf7\x04\xa0\x27\xe7\x64\x32\x41\xd1\x7b\x05\xbd\x97\xa7\x2f\x7a\xcf\xf5\x33\xca\xc6\xbc\xf7\x0a\xf4\x7b\x80\x9e\xa2\x2a\x42\xfd\xfe\x3c\x4a\xa5\x42\x01\x97\x84\x91\x09\x0a\x38\xbb\xba\x30\xe5\x01\x7a\x33\x14\x92\x72\xa6\x4b\xcd\x5e\x9c\x66\x0d\x01\xf4\x02\xce\x14\x09\xd4\xb2\x35\x80\x1e\x23\xb1\x69\x6e\x40\x62\x99\xb2\x09\x9c\xbf\x3f\xff\xe8\x8a\x03\xf4\x52\x11\xe9\x97\x53\xa5\x12\xf9\xaa\xdf\x9f\x50\x35\x4d\x47\xa7\x01\x8f\xfb\xd2\x96\x3f\x09\x58\xa0\xfa\x81\xa5\xe5\x24\xb6\xb4\x9c\x90\x84\xae\xda\xc0\x98\x50\xd3\x0a\x09\x63\xca\xfe\x9d\xaf\x78\x4a\x79\xcf\x14\xfb\xfa\x04\xe0\xab\xe1\x56\x06\x53\x8c\x51\xf6\x5e\xc1\x7f\x2d\xcd\xa6\xef\x8c\x01\xfd\x87\xae\xf1\xbb\x29\x1b\x70\x26\xd3\x42\x61\x92\x24\x11\x0d\x88\xa2\x9c\xf5\xff\x90\x9c\xad\xca\x26\x82\x87\x69\x50\xb3\x2c\x51\x53\xb9\x12\x79\x9f\x24\xb4\x3f\xfb\x26\xe3\x32\x2f\xbd\x09\xe6\x85\xa9\xc9\x4f\xe3\x98\x88\x85\x66\xf7\x9a\x46\x11\x08\x54\x82\xe2\x0c\x41\x4d\x11\xa4\x22\x2a\x95\xc0\xc7\x40\xc0\x35\x06\x84\x85\x40\x95\x84\x9b\x74\x84\x01\x67\x63\x3a\x81\x31\x17\x10\x70\xc6\x30\x50\x74\x46\xd5\x62\x29\x4a\x80\x1e\x4f\x50\x18\x92\x2f\x42\xdd\xc7\x1b\x54\xce\x0e\xf2\x85\x04\xca\x84\x33\x89\xb2\x40\x1b\x40\xef\xe5\x8b\x17\xa5\x47\x00\xbd\x10\x65\x20\x68\xa2\x9c\xc5\xe4\x1a\xb2\x1c\x69\x85\x90\xb5\x6a\x00\xbd\xbf\x0b\x1c\xeb\x1a\x7f\xeb\x87\x38\xa6\x8c\xea\x16\x64\x26\xa5\xa1\xb3\x85\x21\x49\xe8\x8a\xca\x0f\x98\x44\x8b\x5e\xa1\xa1\xaf\x4f\xaa\x7e\x7f\xcd\xb1\x93\x10\x41\x62\x54\x28\x56\xca\xb3\xff\x95\x18\xc9\x4c\xd9\xfc\xfb\x7c\x23\x93\xef\x49\x8c\x5a\x0f\x5a\x2b\x99\x26\x14\x87\x11\x42\xc4\xf9\x0d\x86\x90\x26\xa7\xe5\x26\xa8\xa9\xf9\x25\x45\xb1\x28\xbf\x12\xf8\x25\xa5\x02\xb5\x4a\xc6\x24\x92\x58\x7a\xad\x16\x89\x21\x4c\x2a\x41\xd9\x24\xcf\xfe\xd7\xe7\xdb\xd9\x21\x73\x79\x2a\x31\x10\xa8\x86\x37\xb8\x18\xd2\x70\x0b\x6f\x1f\xa7\x08\x03\x53\xfe\x2d\x2e\x2e\x42\x63\x4e\x67\x57\x17\x70\x16\x04\x28\x65\x17\xd9\x22\x86\x32\xcd\x5d\x6d\xd6\x2c\x33\x6f\x71\xb1\x64\x8f\x74\x8f\x3d\x81\x13\x4d\xf8\x76\x9e\x3e\x98\x82\x9d\x65\xe5\xaf\x54\xe0\x29\x49\x92\x7a\xb6\x77\x96\x24\x1d\xb6\x3a\xc3\x8b\x42\x46\x98\xaa\xc1\xcb\x47\x53\xb0\xdb\x8a\x49\x88\x94\x73\x2e\xea\xa8\xe6\xca\x15\xed\x36\x43\x32\x1d\x2d\x29\xaf\x39\xdd\xe5\x6a\x74\x95\xb7\x44\xf0\x19\x0d\x0b\x0b\x75\x15\x3b\xf9\x95\x29\xab\x22\xe1\x29\x99\xcb\xbe\x91\x4e\x7f\x16\xcf\x89\xc0\x3e\xaa\xe0\xd9\xed\xf1\x56\x7a\x8b\x2c\x8d\x4b\x6b\xaf\x79\x9e\x32\xb3\xf2\x63\x59\x47\x60\xe6\xbf\x8a\x87\x9a\x83\xf5\xc7\x96\xa5\x22\x2c\xf8\x7d\x4d\x4c\x63\x92\x46\x1a\x6d\xe5\x7a\xad\x84\x0e\xb9\x9a\x3d\x45\x26\x65\xd0\x90\x01\xe7\x55\xe5\xdf\xdd\xaf\xa5\x16\x7b\x21\x46\xa8\x70\x33\xb2\xb3\x65\x56\x48\x6e\x03\x4a\x7b\x6d\x8a\xde\x03\xa0\x56\x20\xb4\x2b\x58\xed\x7a\x4a\x14\x50\x99\xc7\x6a\xff\x90\xa0\x2b\x6a\xc8\x16\xa2\x54\x82\x2f\x3a\x33\xcc\x8f\x68\xed\x88\xd6\x0e\xcb\xca\x11\xad\x75\x59\x31\x47\xb4\x76\x44\x6b\xfb\xe6\xed\x1e\xa2\xb5\x1a\x2a\x08\x48\x14\x8d\x48\x70\x73\x9a\x8a\xa8\x86\x55\xfd\xfa\xe1\x9d\xc6\x03\xba\x16\xe8\x6a\xa0\x78\x67\xac\x69\xc9\x8a\xee\x05\xa5\xaa\x37\x4e\x2e\x5e\x67\xa6\xe5\xaa\xdd\x0d\x3f\xfb\x04\xd2\x09\x97\x5b\x02\xa4\x66\xd4\x48\x3d\x13\xd4\x41\xd2\xe7\x02\xc9\xbd\x40\xd2\x05\x42\xef\x04\x49\x8f\x78\xb8\x66\x04\xd6\x3e\xaa\xde\xe4\xcc\x43\x89\xb4\x6c\x1d\xfb\x16\xc0\xa5\x9c\xd4\x61\x7f\x1f\x06\x97\x6e\xb1\x37\x12\xfe\x91\x4a\x05\x64\x47\xc3\x3b\x33\xd5\x1c\x01\xef\x79\x88\xb2\xcb\xd6\x57\xa0\xf6\x31\x5a\x5f\x41\x00\xb7\x6e\x7d\x4f\x72\xd2\x2b\xef\x16\xf5\x23\x5a\x98\x02\x77\xd8\x32\x22\xa0\xeb\xea\x35\xc0\xb5\x25\x6b\xed\x04\xbd\xd3\x1d\x76\xd8\x38\x8b\x94\xde\x89\x75\x1e\x9d\xf2\xa3\x53\x7e\x58\x56\x8e\x4e\x79\x97\x15\x73\x74\xca\x8f\x4e\xf9\xbe\x79\xbb\x87\x4e\xf9\x6d\x43\xa1\x34\x99\x08\x12\xe2\xae\x68\x28\x15\x0c\x5c\x55\xe0\x46\xcb\xd2\x58\x28\x81\x09\x9d\x21\xab\x81\xde\xdf\xa0\xfa\xd5\x36\xe0\x28\xbf\x60\x63\x2e\x62\x53\xa2\xe3\x50\xc9\x4b\xf7\x9d\x00\xa7\xe3\x88\x3b\x78\x18\xec\x88\x5d\x8f\xd8\xf5\xb0\xac\x1c\xb1\x6b\x97\x15\x73\xc4\xae\xf7\x02\xbb\x36\x4b\x74\x00\xa5\x9f\xcd\x11\x88\x40\x08\x38\x93\x7a\x65\xa5\xcc\xe6\x08\x3b\x4c\x74\x0f\x77\x05\xb6\x06\x69\x95\xc2\x38\x51\xa0\xf8\x12\xf8\xd5\x09\xd2\x16\xb1\x52\x97\x81\x5d\x91\xd2\xc7\x18\xa1\x2d\x4a\xe0\x40\x21\x5a\x81\x21\x32\x45\x49\x24\xfb\x1a\xfa\xe5\xfc\x92\xad\x26\x9a\x26\x21\x51\x08\x64\x2e\x21\xd7\x0c\xa4\x12\x43\xe7\x9c\xd4\xb1\x57\xdd\xc6\xd9\xf5\xe0\x7c\xd5\x42\xb7\xad\x76\x9d\xde\xc7\x69\xbb\xeb\x72\xe8\x80\x05\x1b\x3f\xa5\x89\x0d\xeb\x8a\xad\xad\x58\x37\x72\xbf\xec\xb8\x44\xf1\x23\xb6\xe4\x92\x24\x0e\x63\xcb\x53\x8c\xe2\xbc\xf9\xee\x90\x84\x1b\x62\x12\xf1\x05\x86\xa0\xdb\x80\x60\x4a\x84\xda\x60\xb0\x36\xcb\xf5\x67\x8c\xe2\xf3\x72\xc9\xae\x59\x6a\x89\xd4\x3b\x31\xd1\xf5\x11\x5f\xc5\x6c\x76\xfc\x50\xd1\x28\x42\x01\x72\xca\xd3\x28\x84\x11\x02\x65\x52\x91\x28\xc2\x10\x38\xeb\x0c\xfa\x4e\x48\x70\x43\x26\x98\x89\xb6\x0e\x10\x5f\x63\x4c\x4f\x8a\x9d\x61\xa8\x6c\xe3\x95\x2a\xd2\x65\xe0\x3d\x89\xef\xc8\x45\x38\x06\xb3\x8e\xc1\xac\x63\x30\xeb\xae\x79\x39\x06\xb3\xba\xcc\xd0\xc3\x0c\x66\x1d\xb7\x85\x0e\xbe\x2d\x54\x3b\x93\xf8\x0c\x52\x46\xbf\xa4\x08\x34\x04\xc5\x81\xb2\x90\x06\xda\xeb\x53\x53\x2a\xef\x36\xb1\xb8\x0e\xac\x39\xe6\x7c\x3f\x82\x9c\x6f\xe7\x22\xc0\x53\x2e\x40\xa0\xfb\xeb\x59\xce\x79\xfb\xcc\x3e\x6a\xeb\x9c\xeb\xc2\x23\xb4\x67\xfc\xd2\x40\xd1\x19\x02\x35\x97\x67\x18\x64\x3b\x25\x12\x48\x24\x90\x84\x0b\x18\x21\xb2\x95\x1b\x38\xa7\x6a\x6a\x6f\xdc\xd0\x33\x50\x29\xf4\x5e\x76\x07\x2f\x6c\xff\xf7\xc2\x1f\x2c\xd3\xfa\x18\x63\x16\x65\x19\x1c\x26\x5a\x61\xdd\xc3\x42\xb8\xad\xa9\xdd\xbb\xa6\xfc\x16\x7a\x95\xa5\xaa\x7f\x5c\x2b\xd9\x35\x03\x2d\x91\xfa\x18\xed\xb3\x24\x82\xc3\x98\xe7\xea\x0a\xa8\x9d\x53\xad\x5c\x55\xa0\xab\x5c\x23\x20\x23\x9e\x2a\x20\x09\x05\x89\x62\xb6\x2d\xd7\xea\x93\x6d\xe1\xfe\x24\x59\x39\x82\x1b\x59\x6b\x13\x65\x2d\x6f\xbb\xca\x91\xb6\xba\x6f\xaa\x7c\x78\xa1\xf0\xf7\xa7\xcb\x6b\x22\x70\x90\x60\x90\xd7\x6d\xb6\xb4\xf3\xd1\x1f\x18\xac\x56\x30\x0d\xd4\x13\x14\x8a\x96\x84\xdd\x23\x61\x38\x64\xe6\x14\x4b\x49\x07\x59\x43\x44\x08\x52\x1c\x3a\x3d\xaa\x30\x2e\x97\xdf\x45\xce\x96\xf2\x4b\x12\x4c\x29\xb3\x0c\xf8\x10\xd5\xea\x92\x33\x57\x5a\xc2\x7c\x4a\x83\x29\xcc\x11\xe6\xda\x87\x55\x1c\x48\x68\xe0\x6c\x6e\xaf\xbc\x57\xa9\x1e\x81\x31\x9f\xe1\xed\x32\x5b\x56\x98\xe5\xf4\x83\xe9\x79\x5f\xfc\x5a\x3e\x60\x2c\x78\xec\x61\xba\x72\x3e\xa8\x4b\x5a\x0b\x5b\x9a\x96\xd7\xbd\xcd\x2e\xd8\x8a\x59\x8d\x77\x75\x65\xe3\xe5\x0e\x06\x3f\x3b\x2f\x77\x1b\x4b\x85\x93\x65\x67\x6f\x07\x9a\xfe\xb3\xb7\x03\x03\x0b\x58\x80\x6f\x04\x4f\x93\x36\xfc\xb8\x65\xa5\x19\x3f\x2c\xe7\xf2\x4e\x0c\x25\xd5\x93\x86\x6d\x6f\xf7\x3e\x32\x2e\x41\x97\x86\xa7\x03\x45\x58\x48\x44\x38\x7c\xfd\x72\x38\x7b\xf9\x1c\x50\x05\xa7\xcf\xaa\xbb\x8c\x29\x1b\x7e\x49\x09\x53\x54\x2d\x7c\x5d\x53\xa6\xb0\x1c\x1e\xef\xd9\x49\xdc\xbd\xfe\xe7\x4b\x0f\x61\x97\x94\xd1\x38\x8d\x81\xa5\xf1\x08\x85\x16\x01\x75\xa4\x4a\x78\xea\x1c\x5e\xa9\x0d\xf9\x2f\x14\xdc\x47\x22\xf9\xf3\x56\x49\x24\x7f\x36\x23\x71\xcd\xc5\x59\x57\x87\xd1\xb5\x04\xeb\xcc\x03\xb1\xea\x21\x2c\xac\xea\xac\xb7\xc1\x9c\xaf\xad\x39\x5f\x0f\x5e\x13\x45\xce\x91\x95\xee\x1b\xdc\xd5\x96\x5d\xd4\xb6\x89\xa5\x5d\x9b\x19\xc8\x36\x00\x4f\x53\x79\x82\x44\xaa\x93\x6f\x36\xda\x18\x99\x11\x1a\x91\x11\x8d\xa8\x5a\x0c\xff\xe2\x6c\x1f\x53\x6e\x4d\x2f\xbc\x4c\x78\x9e\x14\x30\xa4\xe4\x98\x18\x3d\x87\xec\xf7\xcb\xc0\xfc\x9e\xa3\xfe\x1d\xae\x73\xe7\xd7\xbd\xed\x47\xeb\x09\x9c\xa2\xea\xe8\x75\x6f\xd3\xd4\xbe\xa6\x90\xf8\xdb\xd3\x88\x88\x09\x1e\x27\x8f\x87\x33\x79\x5c\x09\x77\x97\x68\x2a\x30\xbc\x28\x8d\xab\x9d\x2d\x6d\x96\x04\x43\x1a\x36\x5e\x12\x3f\x5d\x9d\x03\x0d\x9f\xc3\x28\x22\xec\xc6\xac\xf5\xfa\xff\xcf\xbd\xc0\xd0\x0e\x9c\xa1\x79\xb0\xe0\xe9\xe7\xde\x73\x18\x53\xb3\x77\x4c\xc7\xfa\x81\x49\x7b\xfc\xe9\xb7\x5f\x74\x1b\xd5\x5a\x97\x18\xa4\x42\xcf\x36\x46\x86\x4d\xc9\x1c\xb8\x56\x36\x2d\xd9\x94\xc4\x43\xc1\x23\x1c\x12\xd1\x6c\x42\x35\xe1\xbd\xb3\x4b\xd0\x8d\x18\x8e\xf3\x79\x9e\x4f\x89\x60\xcf\x32\x3d\x4a\xc9\x03\x6a\xfc\xa6\x30\xac\x65\x49\xff\xe1\x02\xe6\x53\x64\x20\x79\x6c\x22\xbb\x6c\x22\x8d\xec\xb2\xf0\x98\x95\x75\x58\x34\x9e\x92\xe3\x53\xe1\xb5\xb5\x30\x9a\x09\x55\xc3\x75\x27\x74\x37\x69\x29\x32\x01\xce\x2c\x96\xa2\x0a\x04\x26\x5c\x52\xc5\xc5\xa2\x5a\x43\xba\xcb\x80\xc7\x31\x6d\x01\x47\x89\x9c\x2e\xe1\x1b\x55\xe0\x9a\xf3\x76\xa7\x04\xe2\x50\x2a\xa2\x9a\x4d\xc5\xd7\x53\x54\x53\x3d\xc0\x05\x30\xae\x4c\xaf\xba\x45\x98\x13\x09\x41\x84\x84\x59\xad\x8e\x52\x1a\x79\x88\xd0\xaf\xc2\x61\xd8\x94\x80\xd7\x66\x04\x8e\x4d\x0f\xa1\x87\x4d\xde\x4a\x8f\xce\xaa\x74\x27\x13\x6e\x13\xcb\x14\xd7\x72\x4d\x68\x84\xd5\x3d\xba\x97\xa2\x51\x7f\xe7\xae\xb2\xe9\xaa\xba\xfd\x24\x22\x4a\xdb\x78\xa3\xf6\xaf\x5c\x65\xa0\xca\xaa\xc9\xf6\x67\xb7\x21\xfb\x20\x52\xc6\x28\xd3\x66\xbb\xcd\x8d\xa9\xba\xb5\xa0\x98\x09\xda\x62\xf4\x15\x73\x2c\x9a\x8e\x06\x7f\xe6\x85\x77\x32\x2e\xa5\x40\xb4\xeb\xd9\x97\x18\xe1\xf3\xf4\x1b\x63\x5d\x6f\xde\x42\xad\xd9\x57\xd7\xce\x67\x4f\x2a\x63\xe7\xf6\x1a\x6f\x3d\xef\x6a\x7b\x58\x73\xd9\x37\x99\x41\xf9\xf2\x8a\x43\x38\xb3\x0d\x0f\x23\x78\x46\x5c\xb6\x5f\x5c\xa2\x64\xb7\x98\x6a\x79\xc3\x79\x45\xec\x2e\x1b\xcd\x1e\xcf\x65\xbe\xe6\xaa\xd4\xbf\x6c\xc4\x97\xc0\x9d\x27\xf1\xec\x7a\x00\xf9\x52\xd5\x54\x94\x52\x78\x77\xa4\xc3\x9f\x82\x5b\xa0\xc4\xa4\xfb\x6e\xa5\xc5\x6d\x64\xd7\x22\xa6\x6e\xc4\xd2\x3f\xfa\xb4\x78\x64\x82\x01\x1d\xbb\x2b\xf9\x3f\xb3\x42\x23\x0e\xdb\x9a\x7c\xfb\x1f\xe0\xdb\xef\xcb\xaf\xdf\xba\xd7\x86\xb7\x1f\xe0\x5f\xdf\x7b\x96\x16\xb7\x29\xdb\x58\xc6\xe7\x59\x03\x9e\xd5\xc7\xbd\xce\x07\xcf\x9b\x2c\x04\xeb\xf7\xf7\xb4\x98\x03\xf8\x1a\xbb\x59\x0b\x23\xce\x35\xca\xf0\xf9\x43\x95\xaf\x57\x33\x04\x91\x36\x89\x80\x80\x4c\xcd\x6c\x39\x4e\xa3\x6c\xdb\xba\x09\xd3\x65\xf3\x6d\x13\xdf\x4e\x1a\xfb\x02\xbe\xb4\x2f\x4f\x20\xcf\x66\x5f\x35\xed\xa8\x32\x27\xcb\x33\x87\x66\xa9\x51\x4d\xfb\xf2\x24\x4c\x79\x96\xf2\x52\xde\x52\xe3\x85\xdc\x9f\xcd\x74\x90\xb5\xf5\x7c\x7d\x02\xd8\xd9\xb8\xec\x47\x51\x9a\xc9\xa3\x22\x63\xc5\x87\x66\x96\x59\x23\x8d\x9d\xcd\x72\x2e\x49\x83\x41\xe9\xe6\xa0\xd7\xa8\x08\x8d\x2e\x14\xc6\x6d\x04\xd7\x90\x97\x15\x1f\x1b\x77\x7a\x1a\x43\x9d\x8a\x8f\x81\x78\x06\x85\xf9\x7e\x4b\x6b\x38\xb5\xfa\x0c\xcc\xd6\x1e\x57\x5f\x85\x69\xdd\x6b\xee\x03\x33\xc6\x01\x33\xdf\x97\xf1\x6f\xa1\xed\x68\x20\x47\xd3\xb8\x13\xd3\xa8\xad\x95\x8a\x3d\xb2\x36\xea\x89\x78\x50\x8e\x08\xd5\x67\xd0\xac\xa8\x06\x98\xad\x05\xcb\xcb\x62\x0c\x2a\x97\x7f\xb8\x0d\x18\x7c\x5e\x5c\x55\x4c\x04\x64\xbb\x9e\xb3\x38\xac\x8d\x37\xde\xda\x8e\x72\xad\x3d\xce\x5c\x43\x9e\xad\x90\x52\x84\xb9\xb5\x21\x5d\xb7\x36\xa4\x90\x28\x32\x0c\xca\xfb\x5a\xb5\x25\x51\xb5\x3d\xb6\xd9\xa9\xb8\x1b\x93\xab\xe3\x01\x36\x33\x38\x81\x92\xa7\x22\x58\xdf\x49\xdb\x49\x5c\x15\x1b\x02\xd5\x44\xfe\xf4\xdb\x2f\x60\x2d\xb5\x3b\xe6\xef\xd9\x3b\xbb\x73\xf3\x3f\x54\x28\xc6\xff\xb1\xb2\xe5\x1d\xb6\xde\x50\x67\xdb\xc0\x4b\x41\x00\x59\x14\x66\x8b\x2f\x9f\x75\x5a\x74\xe8\xef\xb5\x43\xee\x17\xc3\xa1\x63\x73\x4b\x61\x9f\x40\x90\x0a\x81\x4c\x45\x0b\xeb\x96\x6b\xcf\x7c\x2e\x81\x0b\x88\x09\xf1\x8c\xe7\x9b\xef\x64\xeb\x5d\x9a\xd9\x2a\xc2\xff\x36\x1d\xa1\x60\xa8\xd0\x17\xdf\x6a\x11\x65\xab\x5c\x89\x76\x08\x28\xdd\x46\xc4\xad\x12\x66\x55\xf6\xb3\x4b\x34\x6d\x5b\x47\xb9\x80\x5a\x65\x5f\x53\x3a\x99\x0e\xf3\xf9\x0f\xb7\x13\xfe\x59\xdf\xbb\xca\x26\x27\x2a\xe1\xe7\x33\x0f\x12\x47\x35\xe7\xe2\x66\x38\x26\x23\x41\x83\xc6\x36\x67\xab\xbb\x59\xb0\xb4\xd3\xd3\x68\x4c\x77\x36\xc8\xe6\x97\xf2\x9c\xc8\xfc\x02\x00\xa3\x45\xe1\x4c\x8f\x67\xbe\x75\x58\xa3\xb1\x21\xe6\xdc\x3d\xbf\x7a\x42\x13\x2e\x28\xfb\x31\x19\x65\x90\x65\x00\xb7\x55\xda\x7e\x72\x61\x03\xce\x94\xe0\xd1\x30\x89\x08\xbb\xe5\x44\xd1\xdb\xc9\x8a\x0d\x78\x9c\x08\x2a\x71\x3b\x98\xd4\x43\x0f\xc5\xc3\xe6\x91\x24\x74\x88\x2c\x4c\x38\x6d\x1c\x97\xa5\x32\x77\xec\x9f\xc0\x8c\x44\x29\x42\x44\x6f\x10\x68\xf2\x2a\xe1\x42\xb9\x9d\x30\x77\x3c\x89\xc0\x8c\x0a\x95\x92\x08\x2e\xae\xfa\xfa\xf5\x67\x76\x45\xa4\xd4\x43\xd2\x46\xf8\x00\xff\x54\x28\x18\x89\x20\x48\xa5\xe2\x31\x0a\xe9\xa6\x2e\x32\x8a\xd0\xed\x87\xc7\x29\x73\x07\xf3\xda\x86\x64\x2a\xbe\xe2\xd6\xbd\x89\xed\xdc\xc8\x37\x3f\x3b\x64\x07\xbd\xf8\xc2\x87\x66\x5b\x04\x59\x06\x85\xc0\x4a\xf3\x78\x68\xe5\x85\x1c\xdd\x93\xae\xdd\x9b\x41\x58\x9e\xcd\xc8\x6d\xd1\x78\xd2\xe7\x50\x4a\x32\x69\x81\x47\x5d\x03\x12\xe6\x28\xd0\xde\xcc\xdb\x40\xbe\x6f\x90\xa1\xa0\xc1\xea\x30\xde\xa1\xf1\x75\x3e\xa1\xdb\x9e\x2f\x8c\x91\x79\x16\x57\x5d\x56\x26\x24\xd8\x4f\xaf\xa6\x25\xfb\x89\x43\xdd\xad\x79\x9e\xfb\x66\xf9\x86\x9d\x83\x84\xb7\xdf\xf2\x37\x27\x2c\xb7\x65\x5c\x05\x25\x15\xb5\xe9\xcb\x68\xab\x1a\x3b\xeb\xf9\xb7\x45\x6c\x95\x08\x74\x83\xc1\xde\x1d\xfd\x94\xa1\x54\x18\xc2\x82\xc4\x11\x9c\x98\x57\x9f\x4c\x17\xa7\xe6\x89\xc6\x03\xc8\x94\xac\x4a\xe2\xdc\x6e\xbe\x6a\xed\xdb\x16\xdd\x9b\x1d\x2e\x8a\x69\x1d\xd4\xa6\xd8\xc9\x85\xd4\xa8\x6e\x13\x6c\xbc\x4b\xd0\x90\x47\x9a\xdb\xe1\xc2\xbb\xf2\x97\x52\xda\xe8\xee\xc1\xe9\xad\x2d\xdc\xcf\x6d\xff\x35\x92\xeb\x96\x4b\xcc\xbb\x27\xe9\x73\xc2\xca\xd8\xc4\x25\x38\x79\xa0\x89\x0b\x82\x1c\xe6\xbc\x03\x51\x59\x10\xc6\x66\xfd\x26\x5c\x4a\xaa\x91\xa5\xa0\x93\xa9\x02\xc6\xe7\xcd\xd4\x56\x38\x16\xd9\x3d\x25\x5d\x8c\x73\xf8\x46\x7b\xc3\xbf\xbc\xdd\xa8\x9c\x21\xad\x4c\x6d\x06\xff\x88\xd8\x9e\x21\x5d\x4d\x59\x96\xf4\x7a\xb1\x31\xe8\xb8\x9e\xed\x60\x7a\x31\xc9\x0d\x59\x50\xad\x80\x54\x37\x68\xab\xea\x50\x7c\x1b\x9f\xb8\x7a\xde\xa8\x97\x81\x5b\xe7\x66\x38\x5f\x8e\xcb\xf2\x9a\xb6\x49\xc3\xde\xfd\x77\xb7\xed\x00\x61\x76\x38\x3b\x5c\x82\xab\x1e\x91\x18\x84\x33\x40\xa5\x28\x9b\xdc\x42\x6c\xf4\x61\x66\x20\x76\x3f\x6b\xf4\x9e\xec\x5e\x54\xdf\x1a\xd2\xbd\x09\xfd\xde\x7a\xad\xab\x7d\x8f\x77\x64\x84\xd1\x41\x9c\xd6\xfc\xe9\x63\x02\x91\xa1\xc3\xef\x4e\x35\xdf\xed\x31\xc1\xb0\xca\x3e\xea\x4a\xeb\x6a\x7d\x5c\xfb\xfa\x5f\xbf\xad\xab\xf2\x9e\xae\xd2\x0d\x5d\x6b\x77\x73\x95\x6e\xe5\x5a\xde\xb5\xb1\xe1\x26\xae\x6d\xf4\x17\x2f\xf8\xb8\x7f\x4b\x6d\xbb\x58\xc5\xfb\x55\x7c\xc2\xdf\x35\xf5\x74\xdd\xfa\x38\x11\xe3\x66\xda\x36\x3d\x9b\x6b\x83\xed\xc5\x66\xf6\x72\x9d\xfe\xf2\x93\x01\xbe\x00\x49\xa6\xd2\x39\x0d\xbd\xdc\xef\xc3\x4f\x73\xa2\x59\xde\xa1\x7d\xa2\x3b\x74\x4f\x7f\xfc\xcc\x06\x56\x64\x54\xc1\x94\xcc\xb0\x58\x88\x84\x31\x65\x90\x08\x3a\xa3\x11\x4e\x50\xfe\xe8\x59\xad\x75\xb1\xe1\x52\x95\x87\xf0\x3e\x96\x96\x20\x6d\x50\x9c\xaa\x7c\xec\xdc\x85\xb7\x2d\x3b\xde\x3d\xd8\x23\xf2\x39\x22\x9f\x12\x85\x7b\x42\x3e\x95\xd7\x51\x1d\x81\xcf\xde\x80\x8f\xef\x4b\x08\x87\x00\x40\xd9\x62\xe8\x0f\x24\x77\x31\xd5\xaf\x8d\xa4\xbb\x6d\xce\xfb\x3b\x19\xe4\xff\x4a\xc1\x03\xb6\xb3\xbd\x67\x31\xb7\x93\xf6\xe3\xb1\xb5\xf2\x77\x89\x5a\xf0\xdc\xfd\x75\xfc\x88\xbd\xca\xb4\x74\xe3\xc4\x74\x1b\x1f\x29\xbf\x21\x60\x7a\x9e\x67\xbb\x17\xe6\xb4\x1c\xf7\x38\x13\xf7\x04\xd2\x55\x7d\x3a\xed\xe1\x4f\x4b\xeb\x29\x54\x2d\x78\x4e\x25\x8a\x56\x71\xa6\xac\x01\xff\xcd\x7d\x39\xbb\xba\xc5\xfb\x01\xf3\x2e\x13\xf7\x67\x22\xb4\xb8\xf6\xc9\xe4\xb3\x73\x51\x93\x86\x06\x47\x74\x2b\xee\x00\xbf\xf9\x4e\x2e\x87\xef\xf2\x9e\x20\x9b\xa4\x08\x26\x49\xf1\x14\x4c\x8e\x1a\xe3\x21\xea\x09\x87\xb3\x68\x01\x04\x62\x62\x77\x85\xc7\xd6\xf0\xc6\x14\xa3\x50\xbf\x76\x61\xad\xd3\x6a\x9a\x4d\x10\xef\x2e\xf7\xf5\xcb\xb1\xd2\x5c\x33\x9e\x10\x83\x96\x89\x25\x73\x29\x8e\xd8\x65\x07\xd6\x3e\x43\x5c\x48\x05\x77\x9f\x36\xcb\x9e\x19\x41\xba\xa8\xdf\xf2\x66\xd6\x2c\x65\xef\x35\x0f\x72\x57\xb3\x96\xb4\x75\xc9\x05\xba\xbb\x71\x33\x54\x78\x69\x39\x85\xb3\xab\x0b\x27\x37\x77\x5e\xb8\x37\x55\x2a\x91\xaf\xfa\xfd\x09\x55\xd3\x74\x74\x1a\xf0\xb8\x2f\x49\x2c\x53\x36\x39\x09\x58\xa0\x32\x59\x9d\x38\x59\x9d\x90\x84\x6a\xa2\xbe\x3e\xf9\xfa\xe4\xff\x01\x00\x00\xff\xff\xaa\x73\x78\xa2\x1c\xa2\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 41500, mode: os.FileMode(420), modTime: time.Unix(1537515632, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": {apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
