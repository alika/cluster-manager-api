// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x6f\x8f\xdb\x36\xd2\x7f\x9f\x4f\x31\xf0\xf3\x00\xb7\x01\x76\xed\x34\x87\x03\x8a\x7d\xd3\xdb\xee\xe2\x52\x23\xdd\x76\x51\xe7\xb2\x28\x2e\x85\x31\x96\xc6\x36\xbb\x12\xa9\x90\x94\x1d\xe7\x90\xef\x7e\x20\x29\xd9\x92\x2c\xd9\xb2\xe4\xec\x6a\x53\x17\x28\xe2\xb5\x28\x72\xfe\x71\xf8\x9b\x19\x92\xfe\xef\x0b\x80\x9e\x5a\xe2\x6c\x46\xb2\x77\x09\xbd\xd7\xfd\x57\xbd\x73\xf3\x1d\xe3\x53\xd1\xbb\x04\xf3\x1c\xa0\xa7\x99\x0e\xc8\x3c\xbf\x0e\x62\xa5\x49\xc2\x2d\x72\x9c\x91\x84\xab\xbb\xa1\x6d\x0f\xd0\x5b\x90\x54\x4c\x70\xd3\x6a\xf1\xaa\x9f\x76\x04\xd0\xf3\x04\xd7\xe8\xe9\x75\x6f\x00\x3d\x8e\xa1\xed\x6e\x84\xa1\x8a\xf9\x0c\xae\x7f\xb9\x7e\x97\x34\x07\xe8\xc5\x32\x30\x0f\xe7\x5a\x47\xea\x72\x30\x98\x31\x3d\x8f\x27\x7d\x4f\x84\x03\xe5\xda\x5f\x78\xdc\xd3\x03\xcf\xd1\x72\x11\x3a\x5a\x2e\x30\x62\x9b\x3e\x28\x44\x66\x7b\x41\x3f\x64\xfc\x9f\xd9\x17\xfb\x4c\xf4\x6c\xb3\x2f\x2f\x00\xbe\x58\x6e\x95\x37\xa7\x90\x54\xef\x12\xfe\xe3\x68\xb6\x63\xa7\x0c\x98\x3f\xcc\x1b\x7f\xd8\xb6\x9e\xe0\x2a\xce\x35\xc6\x28\x0a\x98\x87\x9a\x09\x3e\xf8\x53\x09\xbe\x69\x1b\x49\xe1\xc7\x5e\xcd\xb6\xa8\xe7\x6a\x23\xf2\x01\x46\x6c\xb0\xf8\x2e\xe5\x32\x2b\xbd\x19\x65\x85\x69\xc8\x8f\xc3\x10\xe5\xca\xb0\x7b\xcf\x82\x00\x24\x69\xc9\x68\x41\xa0\xe7\x04\x4a\xa3\x8e\x15\x88\x29\x20\x24\x9d\x01\x72\x1f\x98\x56\xf0\x10\x4f\xc8\x13\x7c\xca\x66\x30\x15\x12\x3c\xc1\x39\x79\x9a\x2d\x98\x5e\xad\x45\x09\xd0\x13\x11\x49\x4b\xf2\xd0\x37\x63\xbc\x21\x9d\xd8\x41\xb6\x91\x24\x15\x09\xae\x48\xe5\x68\x03\xe8\xbd\x7e\xf5\xaa\xf0\x15\x40\xcf\x27\xe5\x49\x16\xe9\xc4\x62\x32\x1d\x39\x8e\x8c\x42\x70\xeb\x35\x80\xde\xff\x4b\x9a\x9a\x37\xfe\x6f\xe0\xd3\x94\x71\x66\x7a\x50\xa9\x94\xc6\x89\x2d\x8c\x31\x62\x1b\x2a\x7f\xa3\x28\x58\xf5\x72\x1d\x7d\x79\x51\xf6\xf9\x4b\x86\x9d\x08\x25\x86\xa4\x49\x6e\x94\xe7\xfe\x2b\x30\x92\x9a\xb2\xfd\xf7\x7c\x27\x93\xbf\x60\x48\x46\x0f\x46\x2b\xa9\x26\xb4\x80\x09\x41\x20\xc4\x03\xf9\x10\x47\xfd\x62\x17\xcc\xbe\xf9\x31\x26\xb9\x2a\x3e\x92\xf4\x31\x66\x92\x8c\x4a\xa6\x18\x28\x2a\x3c\xd6\xab\xc8\x12\xa6\xb4\x64\x7c\x96\x65\xff\xcb\xf9\x7e\x76\x70\xa9\xfa\x8a\x3c\x49\x7a\xfc\x40\xab\x31\xf3\xf7\xf0\xf6\x6e\x4e\x30\xb2\xed\xdf\xd2\x6a\xe8\x5b\x73\xba\xba\x1b\xc2\x95\xe7\x91\x52\x5d\x64\x0b\x2d\x65\x86\xbb\xda\xac\x39\x66\xde\xd2\x6a\xcd\x1e\x76\x8f\x3d\x49\x33\x43\xf8\x7e\x9e\x7e\xb3\x0d\x3b\xcb\xca\xe7\x58\x52\x1f\xa3\xa8\x9e\xed\x5d\x45\x51\x87\xad\xce\xf2\xa2\x89\x23\xd7\x35\x78\x79\x67\x1b\x76\x5b\x31\x11\x2a\xb5\x14\xb2\x8e\x6a\xee\x92\xa6\xdd\x66\x48\xc5\x93\x35\xe5\x35\xdd\x5d\xe6\x8d\xae\xf2\x16\x49\xb1\x60\x7e\x6e\xa1\x2e\x63\x27\xbb\x32\xa5\xaf\x28\x38\xc3\xa5\x1a\xe0\x83\x1a\x2c\xc2\x25\x4a\x1a\x90\xf6\x5e\x3e\x0e\x67\xeb\xcf\x7f\x64\x56\x64\x8d\xb3\xe2\x5a\x9c\xe2\xd1\xcd\xcb\x7f\xbc\x28\x08\xa7\xe7\x53\x40\x9a\x76\x03\x26\xd7\x66\x03\x90\x76\x80\x9f\x1b\xdb\xf4\x19\xe0\x9f\x1c\xa1\x5d\x81\x40\xf7\x73\xd4\xc0\x54\x16\x02\xfd\x4d\x81\x79\xd1\x20\x21\x9f\x94\x96\x62\xd5\x99\xd9\x73\x02\x41\x27\x10\xf4\xb4\xac\x9c\x40\x50\x97\x15\x73\x02\x41\x27\x10\xf4\xf5\x38\x3b\x26\x08\x8a\xe2\x3d\x29\x23\xcb\xb0\x32\x4a\xac\x03\x82\xae\x25\xe1\xb3\x00\x41\x39\x42\x1f\x05\x04\x4d\x84\xbf\x65\x03\xce\x3c\xca\x9e\x64\xac\x43\xcb\xb8\x68\x1c\xc7\x16\xc0\xad\x9a\xd5\x61\xbf\xb9\xbd\xbd\xc8\x48\xaf\x98\xc1\x1c\x04\x4c\xe9\x66\x69\x4c\x04\xf3\xae\x99\x9b\x49\x5f\xaa\x56\x76\xf2\x67\x33\x60\x87\x8d\x33\x4f\xe9\xa3\x58\xe7\x09\xd1\x9e\x10\xed\xd3\xb2\x72\x42\xb4\x5d\x56\xcc\x09\xd1\x9e\x10\xed\xd7\xe3\xec\x6b\x23\x8c\x38\x9a\x49\xf4\xe9\x50\x90\x11\x4b\x0e\xc9\xab\x20\xac\xf0\x94\x55\x3c\xc2\x8c\x2d\x88\xd7\xc0\xc3\x6f\x48\xff\xdb\x75\x90\x50\x3e\xe4\x53\x21\x43\xdb\xa2\xe3\x08\xa4\x92\xee\x47\xc1\x23\xcf\xd4\x90\x4f\xb9\xc3\x13\xd2\x3a\x21\xad\xc7\xe6\xe5\x84\xb4\xba\xcc\xd0\xb7\x89\xb4\x9a\xd5\xb4\x40\x9b\xef\x96\x04\x28\x09\x3c\xc1\x95\x59\xb0\x18\x77\xbb\xac\x12\xa8\xf1\x6c\x20\xd7\x26\x89\x28\xd4\x1e\x30\x85\x5a\x53\x18\x69\xd0\x62\x0d\xa8\xea\xa4\x13\xf3\x18\xa4\xcb\x80\x29\x4f\xe9\x5f\x31\xa1\x98\x97\xc0\xd3\x64\x14\xe7\x14\x84\x59\x90\x7f\x40\x89\xdf\xa7\x28\x10\x2b\xf2\xc1\xf4\x01\xde\x1c\xa5\xde\x5b\xec\xff\x89\x82\xf0\xba\xd8\xb2\x6b\x96\x59\x20\xf5\x51\x4c\x73\x7b\x66\x97\x31\x9b\xee\x19\xd6\x2c\x08\x48\x82\x9a\x8b\x38\xf0\x61\x42\xc0\xb8\xd2\x18\x04\xe4\x83\xe0\x9d\x71\xf8\x8e\xca\xbe\xf9\x53\x45\xe8\x1d\xe2\xfc\x13\x06\xd7\xaf\x76\x8d\xa7\x74\x87\x76\x7d\x8e\x92\x37\x6c\xe8\x65\xfb\xb0\x53\xaf\x33\x7c\x15\xa7\x6f\x19\x3b\x76\x36\x80\x09\x20\x3b\x43\xf6\x29\xe8\x3d\x05\xbd\x5d\x63\xef\x14\xf4\x76\xcf\xea\x4e\x41\xef\x29\xe8\xed\x78\x44\xb8\x6f\x5b\x49\x02\xf1\xe0\x4c\x48\x90\x94\xfc\xf5\x32\x03\xbe\x3f\xf0\x77\x73\xa6\x60\x69\x1a\x4f\xc8\xed\x00\x8d\x3d\xcd\x16\x04\xcc\x9e\x58\xb2\xcb\xf7\x1c\x15\x60\x20\x09\xfd\x15\x4c\x88\xf8\x06\xc6\x2f\x99\x9e\xbb\x63\x4e\x66\xb5\x2c\x44\xeb\x45\x38\x3f\x74\xe3\x3f\x0b\x3c\x5f\xa4\xf5\xaf\x18\x6b\x16\x65\xf0\x34\xd1\xa6\x43\xbe\xd9\x78\x73\x7f\x22\xa4\xc2\xee\x93\xae\xaa\x2d\xf4\x2e\xdd\x86\xf5\x6e\xab\x65\xd7\x0c\xb4\x40\xea\x5f\xd1\x3e\x0b\x22\x78\x1a\xf3\xdc\x9c\xbb\x3d\xb8\xe8\x99\x86\x77\x6c\x53\xf5\x03\x9c\x88\x58\x03\x46\x0c\x14\xc9\xc5\xbe\xaa\xe7\x7b\xd7\xc3\xf3\x29\x77\x26\x04\x37\xb2\xd6\x26\xca\x5a\x1f\x31\xce\x90\xb6\x39\xe4\x9b\xdb\x9d\x77\xf5\x76\x34\x8a\xc8\xbb\x7a\x3b\xb2\x7e\x8f\x7b\xf4\x46\x8a\x38\xca\x2a\x36\x5d\xd6\xc5\xe4\x4f\xf2\x36\xcb\x97\x89\x28\x23\x92\x9a\x15\x24\x9d\xce\x9b\x9c\xec\x0b\xd0\xe0\x3c\xf7\x2c\x3d\xe7\x6d\x90\x0a\xcf\xc4\x9f\x33\x4b\x49\xb9\x54\x5c\x7f\x87\x8f\x91\x72\x09\xa6\x35\x9c\x8d\x34\x72\x1f\xa5\x3f\xbe\x79\x3d\x5e\xbc\x3e\x07\xd2\x5e\xff\x65\xf9\x90\x21\xe3\xe3\x8f\x31\x72\xcd\xf4\xaa\x6a\x68\xc6\x35\xcd\x0a\x31\x76\xcf\x59\x69\xf2\xf8\xef\xaf\x2b\x08\xbb\x65\x9c\x85\x71\x08\x3c\x0e\x27\x24\x8d\x08\x58\x42\xaa\x82\x33\x9f\xa6\x18\x07\x5a\x81\x16\xf0\x99\xa4\xa8\x22\x11\x3f\x7d\x55\x12\xf1\x53\x33\x12\xb7\x20\xdc\xb6\x3a\xac\xae\x15\x58\x83\x25\x40\xa7\x1e\xe4\x7e\xd9\x60\xbd\x9c\x4b\xca\x9b\xf3\xbd\x33\xe7\xfb\xd1\x0d\x6a\xbc\x26\x5e\x38\xc5\x7e\xa8\x2d\x27\x11\x6a\x13\x4b\xbb\x9f\x33\x6f\x0e\xae\x03\x38\x8b\xd5\x05\xa1\xd2\x17\xdf\xed\xb4\x31\x5c\x20\x0b\x70\xc2\x02\xa6\x57\xe3\xcf\x82\x6f\x3b\xb1\x74\x68\x94\x12\xf3\x6b\x4f\x8f\x69\x0a\x8b\xed\xeb\x47\x1c\x45\xc2\xb3\xa4\x80\x25\x25\xc3\xc4\xe4\x1c\xd2\xcf\xaf\x3d\xfb\x79\x49\xe6\xb3\xbf\xcd\x5d\xb5\xee\xdd\x38\x46\x4f\x90\x28\xaa\x8e\x5e\x8f\xe6\xa6\x8e\xe5\x42\xc2\x7f\xf4\x03\x94\x33\x3a\x39\x8f\x6f\xc7\x79\xdc\xc9\xe4\x86\x8a\x58\x92\x3f\x2c\xcc\xab\x83\x2d\x6d\x11\x79\x26\x4c\x6f\xba\x24\xbe\xbf\xbb\x06\xe6\x9f\xc3\x24\x40\xfe\x60\xa3\x77\xf3\xff\x87\x9e\x67\x69\x07\xc1\xc9\x7e\xb1\x12\xf1\x87\xde\x39\x4c\x99\x2d\x6e\xb0\xa9\xf9\xc2\x96\x82\x7f\xfc\xfd\x57\xd3\x47\xb9\xd6\x15\x79\xb1\x34\xde\xc6\xca\xb0\x29\x99\xa3\xa4\x97\x5d\x4b\x36\xc3\x70\x2c\x45\x40\x63\x94\xcd\x1c\xaa\x91\xc5\xf0\xea\x16\x4c\x27\x96\xe3\x6c\xed\xfb\x0c\x25\x7f\x99\xea\x51\x29\xe1\x31\x0b\x0c\x7d\xbf\x96\x25\xfd\x4b\x48\x58\xce\x89\x83\x12\x21\x81\x9e\x33\x3e\x53\x56\x76\x69\xfc\xef\x64\xed\xef\x30\x9e\xf7\xb7\xf7\x28\xc9\xd8\xcf\xdb\x78\x42\x92\x93\x26\xf5\x33\x4e\x28\x78\x72\x28\x85\x10\x58\x3a\x4a\xb5\xb2\xc0\x20\x6e\x3e\x84\x7d\xbb\x7c\x8c\xd2\xf0\xa1\x42\x62\xee\xd3\x2d\x7a\x73\xc6\xed\x17\x6d\x64\x16\x2b\x92\xad\xe4\x96\x76\x60\x6d\x6c\x34\xfa\x29\x49\x94\x95\xcb\x6f\x5e\x8c\xca\x0f\x19\xc9\xbc\x5c\x6b\x94\x48\xc8\xca\x51\x5a\xf8\x64\x43\x83\xe9\xba\x1e\x0d\x69\x1a\xf5\x00\x6e\x4b\x52\x91\x0f\xdf\xab\x75\x08\xb8\x9e\xc4\x82\x6b\x29\x02\x88\x02\xe4\xd4\x07\x9b\x9c\xe3\xc2\x27\x60\x0a\x04\x0f\x56\x80\x10\xa2\x9d\xe6\xcc\x44\x06\x4c\xc1\x94\x51\xe0\x9b\xc7\xce\xe7\xfb\xfd\x72\x9a\xad\x51\x1e\x01\x43\x95\x07\x7b\x35\xe7\xff\x7e\xc4\x65\xe4\xe2\x48\x5d\x8b\x24\x74\x93\x41\xd5\x72\x5f\xe6\x7d\x15\x91\xc7\xa6\xc9\x2d\x4f\xc9\x4e\xe2\xf4\x3b\x2b\xcc\xbc\xef\x2a\x44\xa5\x25\x21\x75\x8b\x29\x38\x63\x7a\xbc\x9d\x21\xd8\x6b\x2d\x39\x7e\x34\xce\x40\x70\x17\x07\x32\x0d\x92\x22\xa1\x98\x16\x72\x55\xae\x69\x33\xa4\x27\xc2\x90\xb5\x98\x8d\xa8\xe6\xeb\xd0\x93\x69\x48\xba\xab\x1c\x4e\x4b\xa2\xb1\xd2\xa8\x9b\xb9\x9a\xfb\x39\xe9\xb9\x01\x27\x12\xb8\xd0\xae\x96\x2f\x89\x60\x89\x0a\xbc\x80\x90\xbb\x15\x69\x12\xb3\xa0\x82\x08\xf3\xc8\x1f\xfb\x4d\x09\xb8\xb1\xe8\x61\x6a\x47\xf0\x2b\xd8\x14\xad\xf4\xf8\x7e\x53\xc9\x9f\x09\xe3\x57\x7d\x03\xf0\x3c\x11\x46\x2c\xa0\xf2\x11\x93\x87\xb2\xd1\x78\xd7\xc9\xcb\x76\xa8\x0a\x2f\x16\xa0\x36\x36\xde\xa8\xff\xbb\xe4\x65\x60\xda\xa9\xc9\x8d\xe7\xca\x45\x03\x90\x31\xe7\x8c\x1b\xb3\xdd\xb7\x0e\x96\xa4\x89\xae\xee\x47\xd7\x92\x7c\xe2\x9a\x61\xd0\x0a\x6e\xe6\x6b\xe1\x4d\x67\x43\x75\x85\xbc\x12\x48\x16\x4a\xd5\xed\x46\xae\x2a\x60\x97\x8f\xde\x22\x4e\xaf\xac\x2f\xd7\x76\xbd\xde\x46\x6f\x76\x13\xa2\x72\xd0\xc1\x62\x46\x63\x0f\x19\x9c\xda\xdb\x6b\x06\x9f\x63\x99\x2e\x29\x23\x92\x0b\xe6\xd1\x95\xe7\x89\x98\xeb\x36\x26\xe1\x05\x8c\xb8\x6e\x63\x0e\xd7\xb6\x87\xa1\x0f\x67\xf8\x80\x97\xb6\x86\x7d\x53\x11\x48\x26\x83\x39\x83\x68\x39\xa0\xb3\x85\x64\xd0\x14\x81\xd4\x8b\x0e\x8d\xd4\xd1\x89\xce\xb9\x9e\xc9\xaa\x78\x09\x5e\x12\x41\xd9\xaa\x2a\x48\x52\x22\x96\x36\x1c\xa5\x4f\x97\x10\x08\xf4\x61\x82\x81\x09\x1a\xe5\xcb\x9a\x7a\x3b\xce\x04\x4e\x76\x12\x34\x95\x5c\xd9\xfe\x82\x8a\x2c\xaa\x2b\xf3\x37\x1d\xa8\xb4\xf8\x7f\x3c\xf0\x98\x1b\xab\xa2\x32\x5f\xe1\x8b\x0a\x05\xf2\xc6\x9e\xa8\xba\x6c\xfe\x24\xce\x21\xf1\x0b\x37\xa4\x91\x05\x43\x4d\x61\x1b\x2b\x6b\x28\x97\xe1\x4d\xe1\x36\xc9\x72\x15\x34\x8e\xc0\x4a\xee\xab\xac\x50\xb2\xbd\x62\xb4\x21\xf4\xda\xec\x36\xdc\xdc\x54\xba\x77\xc4\xcd\xc5\xa5\xad\x47\xcd\xdc\x81\x6a\x11\x91\xbd\x02\xd5\x7c\x2c\x27\xa2\x2e\x88\x48\x0f\xd4\x9d\x4c\xe3\x31\x4c\xa3\xb6\x56\x4a\x0a\x6e\x6d\xd4\x13\x08\xaf\x18\xa2\xd5\x67\xd0\xae\x10\x76\xc1\xdb\xca\xbc\x17\xc5\xe8\x95\x2e\x67\x50\x1d\x10\xd7\x59\x17\x2b\x90\x7b\xde\x4b\xda\x90\x64\xbf\x9e\x93\x87\xdb\x00\xa9\x09\x8d\xa5\x98\xab\x82\xda\x04\x42\x28\xd7\x38\x0f\x33\xcc\x24\xc6\xe0\xc1\xfc\xeb\x80\x85\x85\x13\x6b\x7f\x5f\x86\x2b\x8a\x7c\xa5\xc9\x6a\x97\x94\x7d\x9c\xfc\x45\x55\x21\x38\xd3\x51\x45\xf6\xa2\x90\x86\x6f\x3d\x41\xee\x5b\x4f\x10\x1f\x35\x8e\xbd\x62\xf1\xaf\xb6\x24\xca\x6a\x88\x3b\x26\xd3\xfd\xe8\x91\xa6\x52\x3e\x42\x3c\xe6\x44\x5a\x63\xdf\x56\xe2\x2a\xa9\x9a\x94\x13\xf9\xe3\xef\xbf\x82\xb3\xd4\xee\x98\x7f\x45\x81\xf1\xd1\xcd\xff\x56\xcd\x9e\xa4\x62\x50\x7d\x4f\xf8\xfa\x96\xae\xca\x9c\x4a\x7a\xb4\xa0\xa9\x65\xe7\x04\x70\x97\xf4\x66\x9d\xc0\x8e\xbc\x75\xd2\x2c\x9f\xf8\x6c\x2b\xfd\xdc\xe0\x4f\xa1\x86\x2c\xfe\x58\xb3\x78\x01\x5e\x2c\x25\x71\x1d\xac\x5c\xfa\x9b\x29\xc0\xa5\x02\x21\x21\x44\xac\x98\x45\x0f\xdf\xab\xd6\x49\xd8\xcc\x51\x9c\x4d\x56\xbb\x62\xeb\xc2\xb2\xb9\x67\x2b\xf5\xff\xbb\x3d\x6e\x95\xd6\xb3\x14\x99\xd5\xf7\x48\x34\x25\xa0\xad\x74\x1c\x77\x26\xe6\x38\x03\x6d\xaa\x08\x15\xe5\x26\x36\x9b\x8f\xb3\x5b\x33\xaa\x54\x3b\x11\x22\x20\xe4\x55\x55\xa1\xd2\xc7\xbb\x52\xd3\xa9\x4b\x60\x0a\x7e\xba\xaa\xc0\xf5\xa4\x97\x42\x3e\x8c\xa7\x38\x91\xcc\x6b\x6c\x73\xee\xf5\xc4\xf7\x14\x12\xb9\x8d\xe6\xb4\xdb\x76\xd7\x62\x32\x8b\x87\xc7\x96\xf2\x12\x55\xd6\xed\xba\xd4\x15\x53\x20\xe9\x63\x4c\xaa\xa2\x1c\xb0\xfd\xa3\x1d\x07\x1a\x62\x26\x78\xac\x56\x8f\x6f\x93\x0f\xc5\xa8\x28\xa5\x0c\xd2\xdd\x97\x6d\x95\x96\x99\x08\x6d\xf2\x9e\xae\xb0\x38\xb6\x85\xc5\x31\x17\xfe\x31\x36\x54\x1d\x54\x0c\xdc\x2e\x6d\xef\x47\x14\x49\x6b\x05\x4b\xbb\x43\xca\x13\x61\x24\x99\xa2\xfd\x30\xce\x4c\x3f\x92\xdf\x3e\x9f\x18\xb1\x31\x71\x3f\x12\xac\x71\xf6\x92\xa9\xcc\x99\x60\x4c\x36\x32\x04\xec\x81\x80\x45\x97\xb6\x26\xee\x6e\x53\x48\x8e\x88\x20\x2c\x98\xd4\x31\x06\x30\xbc\x1b\x98\xc7\x1f\xf8\x1d\x2a\x9b\x55\x46\xcf\xc6\x7a\xf4\x49\x93\xe4\x18\x80\x17\x2b\x2d\x42\x92\x2a\x71\x61\x38\x09\x28\x29\x7b\x85\x31\x37\x2b\x16\xb5\x4f\xf4\x94\xdc\xb3\xde\x3d\x07\x77\x6d\xe5\x9b\xf5\x12\xe9\x61\x1b\xb1\xaa\xc2\x92\x2d\x52\x37\xa3\x5c\xba\x66\xdb\x55\x1e\x26\xdb\xc2\x19\x98\xee\x49\xf7\x1e\x1d\x4a\x5c\xef\x8f\x07\x15\xdb\xd4\xf4\x34\xae\xd8\xeb\x13\x92\x52\x38\x6b\x81\x4b\x93\x0e\x14\x2c\x49\x92\xbb\xa7\xac\x81\x7c\xdf\x10\x27\xc9\xbc\xcd\x81\xa8\xa7\xc6\xd9\xd9\x3d\xe7\xee\x8c\x57\x48\xbc\x62\x91\xdd\x1c\xd1\x3f\xc6\xa8\xb6\x27\xf7\x23\x04\x66\x58\xfb\x7d\xe6\xc7\xba\x40\x8b\xaa\x78\x3d\x12\xad\x09\x70\xa7\xdc\xf6\x6d\xac\xf0\x0a\x2a\x6a\x33\x96\xd5\x56\x39\x86\x36\xfe\xb7\x45\xc6\x16\x25\x25\x93\xc1\xdd\xa4\x77\xc6\x49\x69\xf2\x61\x85\x61\x00\x17\xf6\xd1\x7b\x3b\x44\xdf\x7e\x63\x70\x01\x71\xad\xca\x2a\x89\x35\xcd\xd7\x9d\xbe\x19\x91\xd6\x86\xb4\x96\x26\x7c\x1c\x8b\x2a\x5e\x05\x51\x21\xea\x16\x31\xe1\xfe\x6b\x1a\x1a\x09\x54\x6f\xdd\x48\xdc\x3d\x77\x3b\xcc\xdf\xb5\xc4\xdc\xd6\x24\xb5\x52\x06\x2e\xef\xc2\xe3\x5f\x0d\x89\xed\x81\xf0\xfb\xf1\xd7\xcf\xc5\xfb\xad\xdb\xe8\xee\x9b\xd3\x5b\xdb\x38\x2a\x53\xa5\x6d\x24\xd7\x3d\x77\x64\x76\x4f\xd2\xd7\xc8\x8b\x60\x2f\xb9\x8f\xab\x02\xeb\x25\x1e\xe4\x69\xce\xb8\xa0\x4e\x3d\x98\xdb\xe9\x1d\x09\xa5\x98\x81\xea\x92\xcd\xe6\x1a\xb8\x58\x36\x53\x5b\xee\xac\x5f\xf7\x94\x34\x9c\x66\x00\xe3\x12\x15\xfc\xfa\x76\xa7\x72\xc6\xac\x74\x4b\x28\x54\xcf\x88\xfd\x3b\x4b\xcb\x29\x4b\x37\x0b\x66\x5b\x6e\x6b\x60\x7b\x93\x85\x1d\xc5\xee\xa9\x48\x57\xa4\x1c\xf4\xdf\xa1\xad\xb2\x93\xde\xad\x36\x59\x95\xfa\x8d\x7a\x3b\x17\xeb\x5c\x57\x55\xb1\x89\xa7\x78\x52\x7c\x87\x6e\xea\xc2\x99\x8a\xa8\x39\x21\xce\x35\xaa\xc8\x03\x97\xe2\xc5\x43\xa9\x29\xbb\x2c\x21\x27\x2e\x0b\x27\x47\x3b\x09\xa9\xaa\x4a\x1c\x5c\x0d\xd9\x7d\x0d\xd2\xf1\xb3\xe1\xb5\xea\x7c\x57\xf7\x23\xc8\xb6\x2a\xa7\xa2\x55\x06\xbc\x66\xe9\xde\x6d\x26\x28\xa7\xa5\xae\xdf\x2c\xbf\x77\xa2\x7b\xde\xf3\xd9\xc6\xdc\x25\x97\x06\x3c\x3f\x4f\xd7\x2e\x52\xfa\x65\x13\x6f\x57\x0f\xcd\x2a\x86\x6e\xbd\x0b\x9e\x8b\x42\xa0\x64\xa2\xfe\xf4\xc2\x8e\xc1\xfa\xe2\xd2\xaa\x80\x3f\x55\xe9\x92\xf9\x95\xdc\x1f\x03\x26\x27\xa2\x59\xdf\x9f\x7a\x61\x06\x4c\xbe\xfd\xe1\x03\x1f\x39\x91\x31\x0d\x73\x5c\x50\xbe\x91\xfd\xcd\x73\x88\x24\x5b\xb0\x80\x66\xa4\x7e\xa8\xf0\x49\xa6\xd9\x78\xad\xca\xa7\x00\x7f\x6b\x4b\x50\x2e\xc9\xcb\x74\x36\x17\x9c\xa4\x6b\x1d\x3b\x55\xa6\x78\x5a\x5c\x9e\xcf\xe2\x52\x7a\x67\xcc\x69\x6d\x39\xda\xda\xb2\x7d\x39\x6f\x0b\xe1\x9e\x26\xd6\xd3\x4f\xac\xc2\x92\xdb\x3e\xf9\x9b\x2e\xf9\xfb\xef\x27\xff\x4a\x29\xcb\x34\x32\x34\x23\x2f\xd3\xb4\x84\xdd\x7d\x2f\x7e\x68\x6d\xf1\xdd\x76\x28\x4c\x01\x66\x3c\xc9\xde\xba\xd8\xfa\xee\xa0\xb4\xa0\x79\x23\xbc\xcc\xe5\x41\x85\x13\xbd\xb7\x42\x52\x72\x7b\x53\x0a\xec\x6e\x9d\x9c\xe0\xea\x6e\x98\x10\xd6\x8b\x65\x60\x1a\xcf\xb5\x8e\xd4\xe5\x60\x30\x63\x7a\x1e\x4f\xfa\x9e\x08\x07\x0a\x43\x15\xf3\xd9\x85\xc7\x3d\x9d\x5a\xf3\x45\x22\xe9\x0b\x8c\x98\x21\xf3\xcb\x8b\x2f\x2f\xfe\x17\x00\x00\xff\xff\x8c\xd4\xf4\x46\x33\x86\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 34355, mode: os.FileMode(420), modTime: time.Unix(1537160184, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": {apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
