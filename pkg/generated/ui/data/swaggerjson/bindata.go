// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\xdb\xc8\x11\xfe\xee\x5f\x31\x60\x0b\x34\x05\x6c\x2b\x97\xa2\x40\xe1\x4f\xf5\xd9\x68\x20\xe4\x7c\x31\xea\x22\xc6\xa1\x17\x08\xa3\xe5\x88\xdc\x98\xdc\xa5\x77\x87\x72\x99\xc2\xff\xbd\xd8\x25\x29\x91\x14\xa9\x37\xba\xa9\x53\x5c\x80\x20\x8a\x76\x76\x66\x76\x9e\xd9\x79\x5b\xfd\xfb\x04\x20\xb0\x4f\x18\x45\x64\x82\x0b\x08\xde\x9d\xbf\x0d\x4e\xdd\x77\x52\x2d\x74\x70\x01\x6e\x1d\x20\x60\xc9\x09\xb9\xf5\xab\x24\xb7\x4c\x06\x6e\x50\x61\x44\x06\x2e\x6f\xa7\x9e\x1e\x20\x58\x92\xb1\x52\x2b\x47\xb5\x7c\x7b\x5e\x33\x02\x08\x84\x56\x8c\x82\x57\xdc\x00\x02\x85\xa9\x67\x77\x23\x45\x8c\x94\xc0\x27\x52\xf4\x55\x62\xb5\x03\x20\xc8\x4d\xe2\xd6\x63\xe6\xcc\x5e\x4c\x26\x91\xe4\x38\x9f\x9f\x0b\x9d\x4e\x96\x5d\x52\x4a\x51\x7a\xe2\xb4\x5a\xfa\x6b\xe4\xbe\x71\xc4\x81\xa7\x79\x3e\x01\x78\xf6\x87\xb2\x22\xa6\x94\x6c\x70\x01\xff\x2c\x55\xf3\xfc\x6b\x3d\xdd\x7f\xdc\x8e\xcf\x9e\x56\x68\x65\xf3\x16\x31\x66\x59\x22\x05\xb2\xd4\x6a\xf2\xc5\x6a\xb5\xa6\xcd\x8c\x0e\x73\xb1\x27\x2d\x72\x6c\xd7\x96\x9d\x60\x26\x27\xcb\x1f\x26\xa2\x34\x6c\xd3\x48\x11\x35\x6d\xe6\xd4\xcf\xd3\x14\x4d\xe1\xce\x7a\x2f\x93\x04\x0c\xb1\x91\xb4\x24\xe0\x98\xc0\x32\x72\x6e\x41\x2f\x00\xa1\x62\x06\xa8\x42\x90\x6c\xe1\x21\x9f\x93\xd0\x6a\x21\x23\x58\x68\x03\x42\x2b\x45\x82\xe5\x52\x72\xb1\xb2\x23\x40\xa0\x33\x32\x5e\xe5\x69\xe8\x64\xbc\x27\xae\xe0\x6e\x12\x19\xb2\x99\x56\x96\x6c\x4b\x37\x80\xe0\xdd\xdb\xb7\x9d\xaf\x00\x82\x90\xac\x30\x32\xe3\xca\x31\x1a\x8c\xca\x13\x39\x40\x70\x63\x1b\x40\xf0\x7b\x43\x0b\xb7\xe3\x77\x93\x90\x16\x52\x49\xc7\xc1\xd6\x56\x9a\xa5\xa5\xfb\xcd\x30\x93\x6b\x2d\xff\x4e\x59\x52\x04\x2d\x46\xcf\x27\x7d\x9f\x9f\x1b\xc7\xc9\xd0\x60\x4a\x4c\x66\x0d\x5e\xf9\xa7\x73\x90\xda\x63\xfd\xbf\xa7\x5b\x0f\xf9\x33\xa6\xe4\x70\x70\xa8\xd4\x48\xb0\x86\x39\x41\xa2\xf5\x03\x85\x90\x67\xe7\x5d\x16\xd2\xef\x7c\xcc\xc9\x14\xdd\x25\x43\x8f\xb9\x34\xe4\x20\x59\x60\x62\xa9\xb3\xcc\x45\xe6\x15\xb3\x6c\xa4\x8a\x82\xde\x03\x7f\x6e\x1c\x98\x31\xea\x1e\xb5\xbe\xd5\xeb\xcd\x9f\x4f\x3a\x96\x0a\x42\x4a\x88\x69\xbb\x3f\x96\x34\x6b\xff\xdb\xe2\x5b\xd7\x9e\xf4\x3b\x70\xaf\x96\xa2\xaf\xc5\xc3\xee\x63\x64\x90\xb6\xe9\x61\x7f\xb0\xe0\x36\x3a\x47\x0b\xc9\xb2\xd1\xc5\xf7\xe7\x63\x59\xbe\x23\xe0\x65\x46\x2f\xa5\x4b\x32\x7b\xf9\xd8\x95\x21\xfc\x2e\x7c\xac\xa5\xe8\x37\xf1\xb1\xb9\x0e\x37\x7c\xa0\x74\x8f\xbe\x95\x86\x77\xb0\xc9\xbb\xce\xf1\xd2\x06\xb8\xb1\xd1\x3e\xc7\x3f\xde\xdf\x4e\x1a\xd6\xeb\xe6\xdf\x49\x22\x2d\x1f\x97\x84\x11\xdc\x5e\x17\xf8\x2b\x5e\x76\xaf\xdc\xfa\x93\x13\xf8\x8a\x9d\xb3\xad\xe9\x51\xde\xf9\x02\xf0\xac\x8b\xcb\x83\x90\xc9\x8d\x82\x6a\x2b\xb8\x8a\xd6\xa4\x1e\x03\xc0\xb9\xce\x19\x30\x93\x60\xc9\x2c\xb7\x46\x91\xf7\xc4\x9f\x4a\x0e\xd3\x35\x83\x57\x0e\x58\xa5\xf0\x37\x03\x6b\x55\x60\x37\x54\x5b\x97\xb8\xad\xdb\x7d\x79\x7f\x77\x97\x91\xb8\xbc\xbf\xfb\xf1\x97\x8f\x53\xa6\xb4\x69\xb6\x55\xa2\xd1\xf3\x2f\x24\xd6\xd7\xc2\x15\xd8\x19\x19\x96\x1d\x23\x07\xcb\x4c\xcc\x64\xd8\x35\x7c\x27\x5d\x9d\xb6\xd6\xea\x4e\xe6\x1f\x31\xc1\xa7\xdb\x2b\x90\xe1\x29\xcc\x13\x54\x0f\xbe\x34\x76\x7f\x7f\x0d\x84\xd7\x18\xb4\x22\xff\x45\xa1\xf3\x5f\x83\x53\x58\xc8\x24\xa1\x10\xe4\xc2\x7d\x01\x68\x08\x7e\xfc\xe5\xa3\xe3\x11\xf4\x1a\xd2\x92\xc8\x8d\xe4\x62\x16\x19\x9d\x67\xc7\xaa\x79\x57\x71\x01\xcf\xa5\x21\x69\x23\x7b\xae\xb6\xfc\x4d\x1b\x78\x8a\x49\x81\xd5\xae\x20\x88\xa5\x8a\xac\x57\x17\x13\x43\x18\x16\x50\x1e\x2f\x0c\x5a\x37\x6d\x00\xa5\x2b\x43\x21\x29\x96\x98\x8c\x02\xca\x92\x30\xc4\xb3\x07\x2a\xc6\xe0\x75\xe7\xb9\x7c\xa0\x62\x1a\x7a\x60\x2e\x6f\xa7\x70\x29\x04\x59\x3b\x08\x81\x93\x8a\x9e\xc4\x09\x1f\x29\xb9\x94\xf5\x81\x8a\x95\x74\xec\x4a\x1f\x86\xc5\xb1\x11\x6b\x6b\xba\x4a\x2d\xb7\xa5\x83\x79\x40\xa4\x8a\x9a\x05\xdd\x5e\xe8\x5c\x23\xe3\x15\xa9\x4e\xe3\x78\x28\x38\x86\xa2\x76\x6c\xdd\xdf\x36\xf7\xb1\x14\x31\x94\x0c\xe0\x4d\x6e\xcf\x08\x2d\x9f\xfd\x70\x0a\xc4\xe2\xfc\x8f\xfd\xa8\xe0\x12\x65\x82\x73\x99\xb8\xcb\xf1\x55\xab\xcd\xc8\x59\x8b\x46\x63\xb0\x5d\x8d\x04\xb2\x13\x32\xfa\x95\x6d\x46\xb9\x6d\x8a\x37\x55\x01\xaf\x4a\xe3\x10\xf3\x53\xa8\x3f\xbf\x13\xfe\xf3\x13\xb9\xcf\xe1\xe6\xe9\x86\x51\x2f\xe5\x38\x9c\xa0\x02\x6a\x1f\x5c\xa7\xca\x32\x2a\x41\xef\xfd\xa5\x1f\x01\x6d\x45\x7f\x38\xb0\xb5\x06\xe0\xa8\xe1\x4d\xfa\xe7\xf3\x04\x4d\x44\x5b\x81\x7d\xcc\x51\xb1\xe4\xc1\x5b\x26\x15\x53\xd4\x4a\xb6\x00\x41\x99\x53\xab\xe5\x3f\xbd\x1b\x50\xe7\xe7\x3c\x9d\x93\x71\xc5\x95\xac\x14\xb3\xf0\x26\xa4\x05\xe6\x09\xfb\xab\xf4\x95\x8c\xde\x0f\x91\xd5\xc9\x7c\x44\xb5\xe0\x73\x96\x2b\xdf\xfc\x49\x51\x85\xa0\x36\x85\xb5\x51\xeb\xa4\xd8\x9e\xfa\x60\x04\x64\x91\xe4\xd9\x66\xb9\xb3\x3f\x72\x2e\xce\x30\x46\xa0\x95\x0f\x27\x91\x64\x30\x94\x69\x2b\x59\x9b\xa2\x1f\x38\x27\x52\xe8\x34\x95\x7c\xb4\xc4\x18\x6d\x5c\x0f\x3d\x9c\xc8\x8a\xdd\xa0\x38\x36\x44\x33\xcb\xc8\xc7\xb9\xe7\x7d\x4c\x1c\x3b\x8c\x0c\x28\xcd\x5e\xaa\xe3\x08\x4f\x68\x41\x24\x84\xaa\xcc\x80\xf3\x5c\x26\x03\x4a\xb8\xa5\x70\x16\x1e\xab\xc0\xb5\x2f\x10\x16\x5e\x42\x38\x70\x4c\x3d\x0a\xc7\xca\xab\x9c\x90\xc8\xa7\x8a\xd0\xf9\xb9\xd0\x69\x26\x13\xea\x97\x58\x2d\x9a\xa3\xe4\x5d\x55\x9b\xbd\xa8\x7e\xfe\x59\x82\xec\x7c\xfc\x28\xfe\xb7\xd5\x66\x90\x5c\xc2\x54\xca\x2b\x33\xf9\x04\x4c\xae\x94\x4b\x81\xe5\xac\xb4\x92\xdd\xdb\x13\xf4\x35\x90\xe5\x57\xd7\xc4\x28\x13\x57\x55\x8e\xb9\x80\x47\x16\x28\xd3\xeb\xce\xd0\xaf\xdf\x86\x55\x0b\x7e\x38\xff\x9e\xb1\xe2\x40\xd5\xe3\x27\xc1\x47\x5e\xab\xf5\x60\x69\x3d\x50\xde\x29\x71\x3d\x5f\x1e\x2d\xb5\x31\xaa\xf6\xde\xee\x27\xd5\xee\x63\xbf\x12\x07\x3a\xc8\x6f\xae\xf1\x4d\x5c\x63\x6f\x54\x7a\xaa\x9f\x31\xf0\x84\xc8\x38\x13\xdd\x7a\x18\x86\xdb\xe7\xdd\x65\xf5\x70\xc6\xbb\xbc\xbf\xdb\xac\xeb\xba\x06\x17\xbd\xed\xd3\xe1\x1a\x35\xdb\xb0\x81\xf0\xdd\x6e\x2d\x7c\x5e\xda\xed\x10\xf3\x42\x8f\xd2\x6b\xd5\xc4\xf7\x2b\xe5\x1a\xe4\xb2\x62\xef\x95\x5e\x97\x57\x65\x8b\xfc\x02\x6d\xc0\x41\xba\xb7\x8b\xec\xdd\x2d\x43\xa7\x70\x1c\xeb\xef\x37\x36\x1a\xe3\xeb\x2f\x19\x2c\xaa\xe7\xa9\xd5\x78\x7d\x30\xff\x3b\x82\x70\xdf\xcb\xb5\xcb\x00\xb7\x15\x37\x7f\xeb\x87\xef\x59\x2d\x14\x6c\x46\x42\x2e\xaa\x57\xd5\xb1\xd6\x6f\x09\xff\x5f\xc0\xd0\x8c\xa7\xab\x23\x9e\x81\xc8\x8d\x21\xc5\x49\x01\x1c\x4b\xeb\x08\xf0\xc9\xba\x32\x37\x45\x1c\xb8\x45\x0f\x7f\xb1\x7b\x16\x9a\xbd\xdb\xf1\x69\xcf\xd0\xb4\x6f\x00\xdf\x1e\x32\x5f\x14\xc5\x72\xc2\x39\x02\x3e\xfd\x30\x64\xb2\xb9\xd6\xae\x8f\x18\x6a\x56\x7b\x97\xb7\xb5\x27\xf5\x55\x73\xa5\x6f\xe3\xa2\xc1\xbc\x42\xda\xd0\x63\x4e\x76\xa0\x59\xd9\xfc\x75\xc0\x81\x38\x35\xca\x9f\x61\x78\x42\x5f\x3e\x77\xf3\x7a\xad\x19\xd4\x83\xee\x23\x40\xeb\x79\x45\x7d\x7d\xa0\x5d\xe9\xbc\x9d\x32\x5d\x4c\xac\x1e\x53\x87\x22\xe2\x88\x82\xea\xae\x55\x44\x6d\xc2\xbf\xaf\x6d\xfb\x1e\x68\x5e\x9f\x71\xa7\xad\xd7\x6a\x90\xe5\x70\xc2\x16\xd6\xb9\xe4\x36\x9f\xff\xaf\x55\x05\x3b\xae\xc9\xee\x7a\xe0\xa7\xee\x73\xdf\x18\xec\xfe\xef\x70\x1b\x1b\xab\x1a\xbd\xfc\x51\x76\x6d\xbd\x81\xbd\x42\xbb\x2e\x60\xf5\xd0\xe8\x73\xc2\xc7\x0f\xfd\xe6\xac\x32\xfb\x4c\xf6\x4e\x17\xb7\x98\x76\xf7\x90\x72\xfb\xdc\xa9\x49\xb9\x89\xc0\xe6\x5c\xd5\x4b\xf1\xc3\x9c\xfa\xc5\xb5\x15\xd3\xd6\x8f\x84\xf4\x2f\x26\xa3\x30\xb9\xd6\xa2\xf1\x4a\xd8\x79\x18\xbd\xd1\x86\xaa\x67\xda\x2d\xbf\x39\x1c\xfe\x99\xa0\xc5\xd4\xe6\x2a\x3a\x13\x4a\x70\xed\x65\x67\x95\x87\x9c\x61\x26\x9d\x52\xcf\x27\xcf\x27\xff\x09\x00\x00\xff\xff\xa3\x55\x7d\x57\x01\x29\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 10497, mode: os.FileMode(420), modTime: time.Unix(1534549606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
