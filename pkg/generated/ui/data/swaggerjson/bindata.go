// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x7d\x6f\xe3\x36\xd2\xff\x7f\x3f\xc5\xc0\xcf\x03\x5c\x16\x48\xe2\xed\xf6\x0e\x28\x52\x14\xbd\x34\xc1\x6d\x83\x6d\xb6\x41\xbd\xb7\x41\x71\x5b\x18\xb4\x34\xb6\xd9\x48\xa4\x96\xa4\xec\x75\x0f\xfb\xdd\x0f\x7c\x91\x2d\xc9\x62\x2c\x4b\x4e\xac\x6c\x5c\xa0\x58\xc7\xa2\xc8\x79\x23\xf9\xe3\xcc\x70\xfc\xdf\x17\x00\x3d\x39\x27\x93\x09\x8a\xde\x19\xf4\x5e\x9f\xbe\xea\x1d\xeb\xef\x28\x1b\xf3\xde\x19\xe8\xe7\x00\x3d\x45\x55\x84\xfa\xf9\x45\x94\x4a\x85\x02\xae\x09\x23\x13\x14\x70\x7e\x73\x65\xda\x03\xf4\x66\x28\x24\xe5\x4c\xb7\x9a\xbd\x3a\xcd\x3a\x02\xe8\x05\x9c\x29\x12\xa8\x65\x6f\x00\x3d\x46\x62\xd3\xdd\x80\xc4\x32\x65\x13\xb8\x78\x77\xf1\xde\x35\x07\xe8\xa5\x22\xd2\x0f\xa7\x4a\x25\xf2\xac\xdf\x9f\x50\x35\x4d\x47\xa7\x01\x8f\xfb\xd2\xb6\x3f\x09\x58\xa0\xfa\x81\xa5\xe5\x24\xb6\xb4\x9c\x90\x84\xae\xfa\xc0\x98\x50\xd3\x0b\x09\x63\xca\xfe\x99\x7f\xf1\x94\xf2\x9e\x69\xf6\xe5\x05\xc0\x17\xc3\xad\x0c\xa6\x18\xa3\xec\x9d\xc1\x7f\x2c\xcd\x66\xec\x8c\x01\xfd\x87\x7e\xe3\x0f\xd3\x36\xe0\x4c\xa6\x85\xc6\x24\x49\x22\x1a\x10\x45\x39\xeb\xff\x29\x39\x5b\xb5\x4d\x04\x0f\xd3\xa0\x66\x5b\xa2\xa6\x72\x25\xf2\x3e\x49\x68\x7f\xf6\x4d\xc6\x65\x5e\x7a\x13\xcc\x0b\x53\x93\x9f\xc6\x31\x11\x0b\xcd\xee\x2d\x8d\x22\x10\xa8\x04\xc5\x19\x82\x9a\x22\x48\x45\x54\x2a\x81\x8f\x81\x80\xeb\x0c\x08\x0b\x81\x2a\x09\x77\xe9\x08\x03\xce\xc6\x74\x02\x63\x2e\x20\xe0\x8c\x61\xa0\xe8\x8c\xaa\xc5\x52\x94\x00\x3d\x9e\xa0\x30\x24\x5f\x85\x7a\x8c\x37\xa8\x9c\x1d\xe4\x1b\x09\x94\x09\x67\x12\x65\x81\x36\x80\xde\xeb\x57\xaf\x4a\x5f\x01\xf4\x42\x94\x81\xa0\x89\x72\x16\x93\xeb\xc8\x72\xa4\x15\x42\xd6\x5e\x03\xe8\xfd\xbf\xc0\xb1\x7e\xe3\xff\xfa\x21\x8e\x29\xa3\xba\x07\x99\x49\x69\xe8\x6c\x61\x48\x12\xba\xa2\xf2\x37\x4c\xa2\x45\xaf\xd0\xd1\x97\x17\x55\x9f\xbf\xe4\xd8\x49\x88\x20\x31\x2a\x14\x2b\xe5\xd9\xff\x4a\x8c\x64\xa6\x6c\xfe\x3d\xbe\x97\xc9\x77\x24\x46\xad\x07\xad\x95\x4c\x13\x8a\xc3\x08\x21\xe2\xfc\x0e\x43\x48\x93\xd3\x72\x17\xd4\xbc\xf9\x29\x45\xb1\x28\x3f\x12\xf8\x29\xa5\x02\xb5\x4a\xc6\x24\x92\x58\x7a\xac\x16\x89\x21\x4c\x2a\x41\xd9\x24\xcf\xfe\x97\xe3\xcd\xec\x90\xb9\x3c\x95\x18\x08\x54\xc3\x3b\x5c\x0c\x69\xb8\x81\xb7\xf7\x53\x84\x81\x69\xff\x16\x17\x57\xa1\x31\xa7\xf3\x9b\x2b\x38\x0f\x02\x94\xb2\x8b\x6c\x11\x43\x99\xe6\xae\x36\x6b\x96\x99\xb7\xb8\x58\xb2\x47\xba\xc7\x9e\xc0\x89\x26\x7c\x33\x4f\xbf\x99\x86\x9d\x65\xe5\xaf\x54\xe0\x29\x49\x92\x7a\xb6\x77\x9e\x24\x1d\xb6\x3a\xc3\x8b\x42\x46\x98\xaa\xc1\xcb\x7b\xd3\xb0\xdb\x8a\x49\x88\x94\x73\x2e\xea\xa8\xe6\xc6\x35\xed\x36\x43\x32\x1d\x2d\x29\xaf\xb9\xdc\xe5\xde\xe8\x2a\x6f\x89\xe0\x33\x1a\x16\x36\xea\x2a\x76\xf2\x3b\x53\xf6\x8a\x84\x23\x32\x97\x7d\x72\x27\xfb\xb3\x78\x4e\x04\xf6\x51\x05\x2f\x1f\x87\xb3\xe5\xe7\x3f\x72\x3b\xb2\x22\x93\xf2\x5e\x9c\xe1\xd1\xd5\xcb\x7f\xbc\x28\x09\xa7\x17\x62\x84\x0a\xef\x07\x4c\xb6\xcd\x0a\x20\xdd\x03\x7e\x2e\x4d\xd3\x27\x80\x7f\x0a\x84\x76\x05\x02\xdd\x4e\x89\x02\x2a\xf3\x10\xe8\x6f\x12\xf4\x8b\x1a\x09\x85\x28\x95\xe0\x8b\xce\xcc\x9e\x03\x08\x3a\x80\xa0\xfd\xb2\x72\x00\x41\x5d\x56\xcc\x01\x04\x1d\x40\xd0\xc3\x71\xb6\x4b\x10\x94\x70\xb9\xc1\x67\x44\xc2\x3f\x53\xa9\x80\x58\xd6\xa5\x56\x67\x1d\x38\x74\x6e\x5e\x73\x14\xbc\xe3\x21\xca\x2e\x63\xa2\x02\xb5\x8f\x82\x89\x46\x3c\x5c\x33\x09\x6b\x2d\x55\x4f\x72\xc6\xa2\x44\x5a\xb6\x95\x5d\x0b\xe0\x5a\x4e\xea\xb0\xbf\x0b\xf3\x4b\x37\x58\xdf\x76\x46\x77\x21\x90\x3c\x09\x0c\x5e\x20\xf4\x39\xda\x5b\x41\x00\x0f\x6e\x6f\x2f\x72\xd2\x2b\x3b\xd0\xfb\x11\x2d\x2c\x81\x5b\x78\xd1\x09\xe8\x77\xf5\xd6\xe0\xfa\x92\xb5\x9c\xe3\xbf\xe8\x01\x3b\x6c\x9c\x45\x4a\x1f\xc5\x3a\x0f\x07\xaa\xc3\x81\x6a\xbf\xac\x1c\x0e\x54\x5d\x56\xcc\xe1\x40\x75\x38\x50\x3d\x1c\x67\x0f\x8d\x30\xd2\x64\x22\x48\x88\xdb\x82\x8c\x54\x30\x70\xaf\x02\x37\xc2\x93\x46\xf1\x04\x26\x74\x86\xac\x06\x1e\x7e\x83\xea\xdf\xb6\x03\x47\xf9\x15\x1b\x73\x11\x9b\x16\x1d\x47\x20\x5e\xba\x1f\x05\x8f\x3c\x51\x43\x3e\xb8\xae\x0f\x48\xeb\x80\xb4\x1e\x9b\x97\x03\xd2\xea\x32\x43\x5f\x27\xd2\x6a\x16\x52\x05\xa5\xbf\x9b\x23\x10\x81\x10\x70\x26\xf5\x86\x45\x99\x4d\xf2\x73\x50\xe3\xc9\x40\xae\x6d\x7c\xd8\x4a\x61\x9c\x28\x50\x7c\x09\xa8\xea\xb8\x13\x8b\x18\xa4\xcb\x80\xa9\x48\xe9\x73\x74\x28\x16\x25\xb0\x27\x8f\xa2\xc0\x10\x99\xa2\x24\x92\x7d\x32\xcf\xdb\x46\x0d\x1b\x4d\x93\x90\x28\x04\x32\x97\x90\xeb\x07\x52\x89\xa1\x43\xfd\x75\x0c\x56\xf7\x71\x7e\x3b\xb8\x58\xf5\xd0\x6d\xb3\x5d\xa7\xf7\x79\x1a\xef\xba\x1c\x3a\x60\xc2\x7a\xff\x6c\x66\xc4\xfa\xcd\xd6\x66\xac\x3b\x79\x5a\x86\x5c\xa2\xf8\x19\x9b\x72\x49\x12\xfb\x31\xe6\x29\x46\x71\xde\x7e\xb7\xc8\xf8\x0b\x31\x89\xf8\x02\x43\xd0\x7d\x40\x30\x25\x42\x6d\xcc\xfd\xfb\x19\xa3\xf8\xa2\xdc\xb2\x6b\x96\x5a\x22\xf5\x51\x4c\x74\x7d\xc6\x57\x31\x9b\x5d\x21\x52\x34\x8a\x50\x80\x9c\xf2\x34\x0a\x61\x84\x40\x99\x54\x24\x8a\x30\x04\xce\x3a\x03\xc0\x2d\x95\xa7\xfa\x4f\x99\x90\x60\x1b\x30\xee\x18\x5c\xbe\xda\x35\x9e\xb2\x0b\x5b\xf5\x39\x72\x6f\x18\x57\x98\xe9\xc3\x4c\xbd\xce\xf0\x55\x9e\xbe\x55\xec\x98\xd9\x00\xef\x48\xdc\x1d\x75\x1c\x9c\x90\x07\x27\x64\xd7\xd8\x3b\x38\x21\xbb\x67\x75\x07\x27\xe4\xc1\x09\xd9\x71\x0f\xdd\xa6\x34\x3f\x07\xf1\xe0\x88\x0b\x10\xe8\xfe\x7a\x99\x03\xdf\x1f\xd9\xfb\x29\x95\x30\xd7\x8d\x47\x68\x2f\x84\xa4\x81\xa2\x33\x04\x6a\x2e\x30\x9b\xed\x7b\x4a\x24\x90\x48\x20\x09\x17\x30\x42\x64\x2b\x18\x3f\xa7\x6a\x6a\x6f\x3d\xeb\xdd\xb2\xe4\x3d\x2d\xc3\xf9\x2b\x3b\xfe\x93\xc0\xf3\x65\x5a\x9f\xe3\x99\xb3\x2c\x83\xfd\x9c\x36\x2d\xf2\xdd\xce\x5f\xe2\xb1\x7b\xd7\x95\xdf\x42\x6f\xb2\xb4\xd8\xf7\x6b\x2d\xbb\x66\xa0\x25\x52\x9f\xa3\x7d\x96\x44\xb0\x1f\xf3\x5c\x95\xe1\xd8\x3a\x09\x25\x3b\xde\xd1\x55\x16\x06\x90\x11\x4f\x15\x90\x84\x82\x44\x31\xdb\x94\x85\xf2\xc1\xf6\xf0\x74\xd2\x4f\x1c\xc1\x8d\xac\xb5\x89\xb2\x96\x15\x47\x72\xa4\xad\x6a\x7e\x94\xb3\xf3\x0b\x7f\x7f\xb8\xbe\x25\x02\x07\x09\x06\x79\xdd\x66\x3b\x3b\x1f\xfd\x89\xc1\x6a\x07\xd3\x87\xca\x04\x85\xa2\x25\x61\xf7\x48\x18\x0e\x99\xb9\xa6\x51\xd2\x41\xd6\x11\x11\x82\x14\xa7\x4e\x8f\x2a\x8c\xcb\xed\xb7\x91\xb3\xa5\xfc\x9a\x04\x53\xca\x2c\x03\x3e\x70\xb5\x2a\x34\xe3\x5a\x4b\x98\x4f\x69\x30\x85\x39\xc2\x5c\xc3\x59\xc5\x81\x84\xa1\xfe\x27\x17\xee\xec\x55\xaa\x47\x60\xcc\x67\xf8\xb0\xcc\x96\x15\x66\x39\xfd\xcd\x8c\xbc\x2b\x7e\x2d\x1f\x30\x16\x3c\xf6\x30\x5d\xb9\x1e\xd4\x25\xad\x85\x2d\x4d\xcb\xfb\xde\x3a\xd2\xac\x66\x56\x03\x5f\xfd\xb2\x01\xbc\x83\xc1\xcf\x0e\xf0\x6e\x62\xa9\x70\x99\xe0\xfc\xed\x40\xd3\x7f\xfe\x76\x60\x60\x01\x0b\xf0\x8d\xe0\x69\xd2\x86\x1f\xb7\xad\x34\xe3\x87\xe5\xdc\x33\x13\x43\x49\xf5\xa2\x61\xfb\xdb\x7e\x8c\x8c\x4b\xd0\xad\xe1\x68\xa0\x08\x0b\x89\x08\x87\x97\xaf\x87\xb3\xd7\xc7\x80\x2a\x38\x7d\x59\x3d\x64\x4c\xd9\xf0\x53\x4a\x98\xa2\x6a\xe1\x1b\x9a\x32\x85\x93\x92\x0b\xaa\x67\x17\x71\xf7\xf8\xdb\xd7\x1e\xc2\xae\x29\xa3\x71\x1a\x03\x4b\xe3\x11\x0a\x2d\x02\xea\x48\x95\x70\x14\xe2\x98\xa4\x91\x92\xda\x90\xff\x42\xc1\x7d\x24\x92\xcf\x0f\x4a\x22\xf9\xdc\x8c\xc4\xb5\x13\xce\xba\x3a\x8c\xae\x25\x98\x55\x01\x81\x58\xf5\x10\x16\x56\x0d\xd6\xbb\xc7\x9c\x6f\xad\x39\xdf\x0e\x2e\x89\x22\x17\xc8\x4a\x35\x9f\xb6\xb5\x65\xe7\xc0\x69\x62\x69\xb7\x66\x05\xb2\x1d\xc0\x51\x2a\x4f\x90\x48\x75\xf2\xcd\xbd\x36\x46\x66\x84\x46\x64\x44\x23\xaa\x16\xc3\xbf\x38\xdb\xc5\x92\x5b\xf3\x40\x5e\x26\x3c\x4f\x0a\x18\x52\x72\x4c\x8c\x8e\x21\xfb\xfc\x3a\x30\x9f\xe7\xa8\x3f\x87\xeb\xdc\xf9\x75\x6f\xc7\xd1\x7a\x02\xa7\xa8\x3a\x7a\xdd\xd9\x32\xb5\xab\x25\x24\xfe\xc7\x69\x44\xc4\x04\x0f\x8b\xc7\xd7\xb3\x78\xdc\x08\x57\xcf\x2d\x15\x18\x5e\x95\xe6\xd5\xd6\x96\x36\x4b\x82\x21\x0d\x1b\x6f\x89\x1f\x6e\x2e\x80\x86\xc7\x30\x8a\x08\xbb\x33\x7b\xbd\xfe\xff\x63\x2f\x30\xb4\x03\x67\x68\xbe\x58\xf0\xf4\x63\xef\x18\xc6\xd4\xc4\xfe\xe8\x58\x7f\x61\x32\xd7\x7e\xfa\xfd\x57\xdd\x47\xb5\xd6\x25\x06\xa9\xd0\xab\x8d\x91\x61\x53\x32\x07\xae\x97\xfb\xb6\x6c\x4a\xe2\xa1\xe0\x11\x0e\x89\x68\xb6\xa0\x6a\x59\x5c\x9d\x5f\x83\xee\xc4\x70\x9c\x4f\xd5\x3b\x22\x82\xbd\xcc\xf4\x28\x25\x0f\xa8\x39\x37\x85\x61\x2d\x4b\xfa\x17\x17\x30\x9f\x22\x03\xc9\x63\x04\x35\xa5\x6c\x22\x8d\xec\x32\xf7\x98\x95\x75\x58\x34\x9e\xd2\xc1\xa7\xe2\xd4\xd6\xc2\x68\x26\x54\x0d\xd7\x0f\xa1\xdb\x49\x4b\x91\x09\x70\x66\xb1\x14\x55\x20\x30\xe1\x92\x2a\x2e\x16\xd5\x1a\xd2\x43\x06\x3c\x8e\x69\x0b\x38\x4a\xe4\x74\x09\xdf\xa8\x02\xd7\x9d\x77\x38\x25\x10\x87\x52\x11\xd5\x6c\x29\xbe\x9d\xa2\x9a\xea\x09\x2e\x80\x71\x65\xc3\xc5\x02\x35\xe8\x97\x10\x44\x48\x98\xd5\xea\x28\xa5\x91\x87\x08\xfd\x28\x1c\x86\x4d\x09\xb8\x34\x33\x70\x6c\x46\x08\x3d\x6c\xf2\x56\x7a\xfc\xb0\x0a\x16\x4f\xb8\x4d\x0c\x52\x5c\xcb\x35\xa1\x11\x56\x8f\xe8\x1e\x8a\x46\xe3\x5d\xb8\x97\xcd\x50\xd5\xfd\x27\x11\x51\xda\xc6\x1b\xf5\x7f\xe3\x5e\x06\xaa\xac\x9a\xec\x78\x36\x22\xd1\x07\x91\x32\x46\x99\x36\xdb\x4d\xc7\x98\xaa\x6b\xf9\xc5\x54\xbe\x16\xb3\xaf\x18\x6e\x6d\x3a\x1b\xfc\x41\x58\xef\x62\x5c\x8a\x86\xb6\x1b\xd9\x17\x23\xf5\x9d\xf4\x1b\x63\x5d\x6f\x08\xb3\xd6\xea\xab\xdf\xce\x67\xbf\x29\x63\xe7\xb6\x94\xaa\x5e\x77\xb5\x3d\xac\x1d\xd9\xef\x33\x83\x72\x75\x86\x7d\x1c\x66\x1b\xe6\x93\x57\xab\xc6\x66\x25\x94\xe9\xa8\xe7\x4c\xf1\x79\xbf\xfc\x9a\x3c\xbf\x1d\x80\x4c\x30\xa0\x63\x57\x62\xf7\x23\x2b\x74\xe2\x70\x92\x49\xbe\xfd\x01\xbe\xfd\xbe\xfc\xf8\xad\x7b\x6c\xd2\x1a\x7f\x80\xbf\x7f\xdf\x64\x2a\xaf\x97\x18\x69\xa1\x45\x7e\xe7\xd3\xe1\x88\x73\xbd\x4f\xf8\x10\x6d\xe5\xe3\x95\x8e\x89\xd6\x2f\x95\x40\x40\xa6\xc6\xde\xc7\x69\x04\x02\x3f\xa5\x28\x55\x13\xa6\x4d\x1e\xa0\xfd\x7e\x80\x62\x46\x03\x3c\x0f\x02\x9e\x32\xd5\x86\xf9\x20\xa2\xc8\x54\x9b\x75\xec\xc2\xf4\x70\x15\xc2\x11\xb9\x23\x67\x26\xbe\x7f\xe9\x39\x45\xb8\xc1\xec\x4a\xd6\x72\x40\xbb\x88\xb9\x41\xb3\x20\x77\xbd\xa3\x81\x9e\x75\xc4\x8a\xce\xee\x99\xa3\x45\xb9\x5e\xb0\x83\xcf\xd6\x4a\x05\x4a\x9e\x0a\x73\x16\xc1\xcf\x67\x10\x71\x12\xc2\x88\x44\xfa\xc4\x20\x5e\x6e\x5e\x70\xca\xb9\xb7\x6d\x3c\xcb\x49\x63\x14\xee\xcb\xbd\xf0\xb8\xd0\x6c\x0a\x44\xd3\x81\x2a\x13\x23\x3c\x78\x21\xcb\x4f\x68\x3a\x96\x27\x6b\xc1\xb3\x89\x96\x92\x07\x1a\x6f\xa1\xfe\x94\x82\xbd\xec\x6a\x6e\x5d\xb8\x44\x45\x68\xa4\xcf\xa4\x6d\xac\xac\xa1\x5c\xae\x2e\x4b\x85\xb7\xab\x55\xd0\x78\xd3\xac\x28\xed\xed\x51\xb2\xa9\xc6\xde\x7a\x63\x5e\x15\x75\xdf\x38\xe2\xaa\xc6\x7b\xeb\x51\x73\xe5\xe2\x0d\x94\x37\xd5\xe2\xfd\xc1\x98\xba\xbb\x47\x76\xf9\xfb\x60\x1a\x8f\x61\x1a\xb5\xb5\x52\x11\x6d\x69\xa3\x9e\x88\x07\x65\xdf\x42\x7d\x06\xcd\x0e\x61\x36\xbc\x35\xb7\x6b\x59\x8c\x41\xe5\x76\x06\x7e\xdc\x59\x67\x5f\xf4\x1c\x39\x8b\xab\xa4\x39\x4b\x6f\xd6\xb3\x7b\xb8\x0e\x90\x9a\xd0\x58\x89\xb9\x3c\xd4\x3a\x08\x21\x6d\xe3\x22\xcc\xd0\x93\x98\x44\x77\x26\xc0\x6a\xe4\x6c\xe0\xc4\x72\xbd\xaf\xc2\x15\x65\xbe\x32\x4f\xa5\xf5\xc8\x3d\x58\xcc\xb5\x56\x14\x30\xd7\x91\x27\x58\x50\xf2\xc1\xb6\x9e\x20\xb7\xad\x27\x48\x48\x14\x19\x06\xe5\xc8\x4f\x6d\x49\x54\x05\x90\xee\x3f\x2a\x3d\xce\x54\xf2\xdd\x52\x6c\x3f\x91\x96\xd8\xb7\x95\xb8\x2a\x5c\xe6\xd5\x44\xfe\xf4\xfb\xaf\x60\x2d\xb5\x3b\xe6\xef\x89\x2e\x3d\xba\xf9\xef\xcb\x59\xe1\xff\x49\x95\x65\x45\x49\xaf\x33\x30\xbb\x76\xd1\xd4\xb2\x0b\x02\xb8\x71\xbd\x6d\xf0\x50\x64\x83\x16\xdd\x14\x6d\xa5\x5f\x18\x7c\xdf\x3e\xa3\x25\x8b\x27\x10\xa4\x42\x20\x53\xd1\xc2\x3a\x1b\xa8\x34\x9e\x17\x2e\x20\x26\xc4\x33\x8b\xee\xbe\x93\xad\xa3\x07\xb9\x6b\x4a\x6f\xd3\x11\x0a\x86\x0a\x3d\xc3\x15\xaf\x6f\xb7\xd0\x7f\xb6\xfe\x6f\xe1\x9c\xf2\x50\x54\xba\x8d\xdb\x86\x26\x07\xda\x2a\xc7\xd9\xc6\x33\xb7\x69\xa0\x9c\x73\xae\x72\xac\x29\x9d\x4c\x87\xf9\xb8\xfc\xc3\x38\xb5\xd6\x63\x2a\xd9\x92\x40\x25\xfc\x7c\xee\xc1\xf5\xa8\xe6\x5c\xdc\x0d\xc7\x64\x24\x68\xd0\xd8\xe6\xec\xeb\x6e\xed\x29\x45\x20\x1a\xcd\xe9\xce\xba\x0e\xfd\x52\x9e\x13\x99\x5f\x76\xad\xeb\x8a\xca\x0a\xbf\xe2\x3a\x1a\x6e\x6e\x88\xb9\xc3\xa3\x5f\x3d\xa1\x71\x3e\x94\x4f\x45\x19\x65\x90\x65\xa6\xb6\x55\xda\x6e\x72\x34\x03\xce\x94\xe0\xd1\x30\x89\x08\x7b\xe0\x04\xc6\x87\xc9\xd6\x0c\x78\x9c\x08\x2a\x71\x33\x84\xd3\x53\x0f\xc5\xd7\xcd\x23\x49\xe8\x10\x59\x98\x70\xda\xd8\x6b\x49\x65\xee\x9e\x34\x81\x19\x89\x52\x84\x88\xde\x21\xd0\xe4\x2c\xe1\x42\xb9\x08\x8d\xbb\x36\x43\x60\x46\x85\x4a\x49\x04\x57\x37\x7d\xfd\xf8\x23\xbb\x21\xd2\x78\x93\x49\x60\xce\x78\xf8\x59\xa1\x60\x24\x82\x20\x95\x8a\xc7\x28\xa4\x5b\xba\xc8\x28\x42\x17\xa7\x8d\x53\xa6\x77\x2a\x6c\xef\xe0\xa9\xf8\x29\x9a\xee\x2d\x6c\x17\x46\xbe\xf9\xd5\x21\xbb\x80\xc4\x17\x3e\x0c\xd9\xc2\x65\x33\x28\xb8\x69\x9a\x87\x5e\x2a\x2f\xfa\x77\x4f\xba\x36\xe2\x84\xb0\xbc\x33\x90\x0b\x3c\x79\xd2\xba\x50\x4a\x32\x69\x81\x47\x5d\x07\x12\xe6\x28\xd0\xd6\xd2\x6c\x20\xdf\x37\xc8\x50\xd0\x60\x75\x49\x6c\xdf\xf8\x3a\x9f\x68\x6c\xef\xbd\xc5\xc8\x3c\x9b\xeb\xaa\x6c\xc1\x2e\x46\x35\x3d\xd9\xdf\x69\xd2\xc3\x9a\xef\x73\xbf\x67\x0a\x8a\xfb\xce\xe9\x09\x6f\x1f\x8a\x36\x37\xff\x36\x65\x02\x05\x25\x15\xb5\x19\xcb\x68\xab\x1a\x3b\xeb\xf5\xb7\x85\xa7\x96\x08\x74\x93\xc1\x56\x7b\x3d\x62\x28\x15\x86\xb0\x20\x71\x04\x27\xe6\xd1\x07\x33\xc4\xa9\xf9\x46\xe3\x01\x64\x4a\x56\x45\x10\x6b\x9a\xaf\xbd\x91\x34\x40\xa5\x34\x69\x2d\x4d\x78\x37\x16\x55\x2e\x8f\xe1\x11\x75\x8b\xb3\xe0\xe6\xd2\x15\x8d\x04\xaa\xd6\xaa\xe6\x77\x6f\xb9\xbd\x2a\xe6\x6f\x50\x9b\x4b\x27\x17\x52\xc3\xe4\xfb\x70\xf8\x63\xa2\xb0\x3c\x74\xdf\x8c\xbf\x7e\x29\xff\x06\x43\x1b\xdd\x7d\x75\x7a\x6b\x7b\x7e\xca\x45\x67\x1b\xc9\x75\x43\x1d\xe7\xee\x49\xfa\x82\xb0\x32\xd8\x73\x99\x4c\x1e\xac\xe7\x56\x90\xfd\x5c\x6c\x20\x2a\x5b\xc1\x6c\x7a\x6f\xc2\xa5\xa4\x1a\xaa\x0b\x3a\x99\x2a\x60\x7c\xde\x4c\x6d\x85\xfb\x8f\xdd\x53\xd2\xd5\x38\x07\x18\xe7\x44\xc2\xaf\x6f\xef\x55\xce\x90\x56\xe6\x30\x83\x7f\x46\x6c\x4e\x85\xae\xa6\x2c\xcb\x6e\xcd\xb7\x5c\xd7\xc0\x7a\x72\x85\x19\xc5\xe4\x52\x64\x3b\x52\x01\xfa\xdf\xa3\xad\xaa\xdb\xef\xad\x92\xab\x2a\xd7\x8d\x7a\xa9\xb6\x75\x4a\x78\x79\x92\x77\xca\xb7\xe7\xef\xd1\x4d\x5d\x38\xe3\x39\x35\x3b\xe2\x6c\x23\x8f\xff\xb7\x12\x2f\x6e\x4b\x4d\x55\x01\x89\x82\xb8\x0c\x9c\x1c\xdc\x4b\x88\x2f\x1a\xb1\x75\x14\xe4\xfe\xd2\x50\xbb\xf7\x82\xd7\x8a\xef\x9d\xdf\x0e\x20\xdf\xaa\x9a\x8a\x56\x9e\xef\x9a\x21\x7b\x9b\x44\x50\x4d\x4b\xdd\x75\xb3\xba\x16\x47\xf7\x56\xcf\x27\x7b\xe6\x5e\x45\x6d\x7e\x21\x23\x8c\xf6\x72\xe4\xce\xdf\xe9\x25\x10\x19\x3a\xaa\xb7\x1e\x7d\x52\x6b\x1e\xab\x32\xae\xbc\xca\x31\xea\x4a\xab\xa2\xec\xc4\xd3\xdb\x17\xda\x9d\x2b\xdf\xad\xbc\x13\xfe\xa1\xa9\x67\xe8\xd6\x97\x5c\x18\x2f\x1d\x2b\x41\xf1\x65\xc9\x97\xfe\xb2\x14\xb9\xcf\x3d\x92\xa9\x74\x4e\x43\x2f\xf7\xbb\x38\x54\x38\xd1\x2c\x2b\xf3\x9e\xe8\x01\xdd\xb7\x3f\x7e\x64\x03\x2b\x32\xaa\x60\x4a\x66\x58\x6c\x44\xc2\x98\x32\x48\x04\x9d\xd1\x08\x27\x28\x7f\xf4\xac\xe0\xba\xd9\x70\xa9\xca\x7d\x40\xe5\xa5\x25\x48\xeb\x12\xa7\x2a\xef\x39\x77\xce\x6d\xcb\x8e\xcf\x14\x0f\x5b\xf1\xd3\xd9\x8a\x2b\xab\x0e\x1d\x76\xe2\x9d\xed\xc4\xbe\x8a\xe5\xfb\xd8\x91\xb3\xdd\xc5\xef\x97\xed\x62\xbe\x5a\x1b\x49\x77\xdb\x9c\x77\x77\x7d\xc8\x5f\x4c\xfc\x2b\xb6\xb3\x9d\xa7\x18\xb7\x93\xf6\xf3\xb1\xb5\xf2\x0f\x88\xb4\xe0\xf9\x00\x15\xf6\x0f\x15\x8e\x77\x30\xe5\x77\x7b\xe7\xb5\x6d\xc8\x2a\xf3\x0c\xea\x91\xe7\x99\x5b\xda\xdc\xba\xe2\x3f\xb6\xb6\xf8\xe7\x32\xcf\xd7\x53\x7c\x5a\xf0\x9c\x4a\x14\xad\x3c\x09\x59\x07\xfe\x8a\x67\x39\x03\x7a\xc0\xba\x6a\xf9\x63\x0e\xf7\x47\xca\x5b\x94\xcb\x31\x59\xce\x5c\xd4\xa4\xa1\xc1\x05\xcb\x8a\x22\xca\x77\xdf\xc9\xe5\xa4\x59\xd6\x57\xb1\x49\x74\x60\x92\xe8\x4e\xc1\xe4\x50\x31\x1e\xa2\x9e\xe6\x9c\x45\x0b\x20\x10\x13\x1b\x64\x1b\x5b\xc3\x1b\x53\xd4\xe7\xdf\xac\x1c\x4f\x78\x5a\x4d\xb3\x71\xd3\x3c\x66\x98\xb4\xec\x0d\xcb\x75\xe3\x39\x04\x6b\x99\x58\x32\x97\xe2\x88\x5d\xf6\x5a\xed\x1b\xa0\x85\x54\x65\xf7\x93\x3e\xd9\x77\x46\x90\x2e\x60\xb1\xac\x68\x99\xa5\x94\x5d\xf2\x20\x57\xd2\xb2\xa4\xad\x6b\x2e\xd0\xd5\x14\xcd\x60\xd6\xb5\xe5\x14\xce\x6f\xae\x9c\xdc\x7a\xa9\x88\x74\xe3\xa9\x52\x89\x3c\xeb\xf7\x27\x54\x4d\xd3\xd1\x69\xc0\xe3\xbe\x24\xb1\x4c\xd9\xe4\x24\x60\x81\xca\x64\x75\xe2\x64\x75\x42\x12\xaa\x89\xfa\xf2\xe2\xcb\x8b\xff\x05\x00\x00\xff\xff\xed\x37\x24\xb8\xd8\x98\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 39128, mode: os.FileMode(420), modTime: time.Unix(1537205112, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": {apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
