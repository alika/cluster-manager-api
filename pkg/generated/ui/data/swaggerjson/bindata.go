// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x6f\xe3\x36\xf2\x7f\x9f\x4f\x31\xf0\xff\x0f\x5c\x16\x48\xec\x6d\x0e\x07\x14\xb9\x37\x97\x26\xb8\xd6\x48\xd3\x06\xf5\xa2\x41\x71\x5d\x18\x63\x6a\x6c\xb3\x96\x48\x2d\x49\xd9\xeb\x3d\xe4\xbb\x1f\x48\x4a\xb6\x24\x4b\x8e\x22\x25\x59\xb7\x70\x81\x22\x5e\xf3\x61\x1e\x39\xfc\x71\x86\xf4\x7f\x4f\x00\x7a\x7a\x85\xb3\x19\xa9\xde\x25\xf4\x2e\xfa\xef\x7b\x67\xf6\x3b\x2e\xa6\xb2\x77\x09\xb6\x1d\xa0\x67\xb8\x09\xc9\xb6\x5f\x87\x89\x36\xa4\xe0\x0e\x05\xce\x48\xc1\xd5\xfd\xd0\xf5\x07\xe8\x2d\x49\x69\x2e\x85\xed\xb5\x7c\xdf\xcf\x26\x02\xe8\x31\x29\x0c\x32\xb3\x99\x0d\xa0\x27\x30\x72\xd3\x8d\x30\xd2\x89\x98\xc1\xf5\x4f\xd7\x1f\xd2\xee\x00\xbd\x44\x85\xb6\x71\x6e\x4c\xac\x2f\x07\x83\x19\x37\xf3\x64\xd2\x67\x32\x1a\x68\xdf\xff\x9c\x09\x66\x06\xcc\xf3\x72\x1e\x79\x5e\xce\x31\xe6\xdb\x39\x28\x42\xee\x66\xc1\x20\xe2\xe2\x5f\xf9\x81\x7d\x2e\x7b\xae\xdb\xe3\x09\xc0\xa3\x93\x56\xb3\x39\x45\xa4\x7b\x97\xf0\x1f\xcf\xb3\xa3\x9d\x09\x60\xff\x61\x47\x7c\x74\x7d\x99\x14\x3a\x29\x74\xc6\x38\x0e\x39\x43\xc3\xa5\x18\xfc\xa1\xa5\xd8\xf6\x8d\x95\x0c\x12\xd6\xb0\x2f\x9a\xb9\xde\xaa\x7c\x80\x31\x1f\x2c\xbf\xc9\xa4\xcc\x6b\x6f\x46\x79\x65\x5a\xf6\x93\x28\x42\xb5\xb6\xe2\x3e\xf0\x30\x04\x45\x46\x71\x5a\x12\x98\x39\x81\x36\x68\x12\x0d\x72\x0a\x08\xe9\x64\x80\x22\x00\x6e\x34\x2c\x92\x09\x31\x29\xa6\x7c\x06\x53\xa9\x80\x49\x21\x88\x19\xbe\xe4\x66\xbd\x51\x25\x40\x4f\xc6\xa4\x1c\xcb\xc3\xc0\xd2\xf8\x9e\x4c\xea\x07\xf9\x4e\x8a\x74\x2c\x85\x26\x5d\xe0\x0d\xa0\x77\xf1\xfe\x7d\xe9\x2b\x80\x5e\x40\x9a\x29\x1e\x9b\xd4\x63\x72\x13\x79\x89\xac\x41\x70\x67\x18\x40\xef\xff\x15\x4d\xed\x88\xff\x1b\x04\x34\xe5\x82\xdb\x19\x74\xa6\xa5\x71\xea\x0b\x63\x8c\xf9\x96\xcb\x5f\x28\x0e\xd7\xbd\xc2\x44\x8f\x27\x55\x9f\x1f\x73\xe2\xc4\xa8\x30\x22\x43\x6a\x6b\x3c\xff\x5f\x49\x90\xcc\x95\xdd\xdf\xb3\xbd\x42\xfe\x84\x11\x59\x3b\x58\xab\x64\x96\x30\x12\x26\x04\xa1\x94\x0b\x0a\x20\x89\xfb\xe5\x29\xb8\x1b\xf9\x29\x21\xb5\x2e\x37\x29\xfa\x94\x70\x45\xd6\x24\x53\x0c\x35\x95\x9a\xcd\x3a\x76\x8c\x69\xa3\xb8\x98\xe5\xc5\x7f\x3c\x7b\x5a\x1c\x5c\xe9\xbe\x26\xa6\xc8\x8c\x17\xb4\x1e\xf3\xe0\x09\xd9\x3e\xcc\x09\x46\xae\xff\x2d\xad\x87\x81\x73\xa7\xab\xfb\x21\x5c\x31\x46\x5a\x1f\xa2\x58\xe8\x38\xb3\xd2\x35\x16\xcd\x0b\x73\x4b\xeb\x8d\x78\x78\x78\xe2\x29\x9a\x59\xc6\x9f\x96\xe9\x17\xd7\xf1\x60\x45\xf9\x92\x28\xea\x63\x1c\x37\xf3\xbd\xab\x38\x3e\x60\xaf\x73\xb2\x18\x12\x28\x4c\x03\x59\x3e\xb8\x8e\x87\x6d\x98\x18\xb5\x5e\x49\xd5\xc4\x34\xf7\x69\xd7\xc3\x16\x48\x27\x93\x0d\xe7\x0d\xc3\x5d\x6e\xc4\xa1\xca\x16\x2b\xb9\xe4\x41\x61\xa3\xae\x12\x27\xbf\x33\x65\x43\x34\x9c\xe2\x4a\x0f\x70\xa1\x07\xcb\x68\x85\x8a\x06\x64\xd8\xbb\xb7\x91\x6c\xf3\xf9\x63\x6e\x47\x36\x38\x2b\xef\xc5\x19\x1e\xdd\x0e\xfe\x78\x52\x52\x4e\x2f\xa0\x90\x0c\xed\x07\x4c\xbe\xcf\x16\x20\xed\x01\x3f\x37\xae\xeb\x9f\x00\xff\x14\x18\x3d\x14\x08\xf4\x30\x47\x03\x5c\xe7\x21\xd0\xdf\x34\xd8\x81\x16\x09\x05\xa4\x8d\x92\xeb\x83\x59\x3d\x47\x10\x74\x04\x41\x5f\x57\x94\x23\x08\x3a\x64\xc3\x1c\x41\xd0\x11\x04\xbd\x9e\x64\x2f\x09\x82\xe2\xe4\x89\x94\x91\x13\x58\x5b\x23\x36\x01\x41\xd7\x8a\xf0\x4f\x01\x82\x0a\x8c\xbe\x09\x08\x9a\xc8\x60\xc7\x07\xbc\x7b\x54\xb5\xe4\xbc\xc3\xa8\xa4\xec\x1c\x2f\xad\x80\x3b\x3d\x6b\x22\x7e\x7b\x7f\x3b\xc9\x69\xaf\x9c\xc1\x1c\x84\x5c\x9b\x76\x69\x4c\x04\x3b\xd6\xae\xcd\x74\x2e\xdd\x28\x3b\xf9\xa3\x25\x78\xc0\xce\x59\xe4\xf4\x4d\xbc\xf3\x88\x68\x8f\x88\xf6\xeb\x8a\x72\x44\xb4\x87\x6c\x98\x23\xa2\x3d\x22\xda\xd7\x93\xec\xb5\x10\xc6\xb6\xf4\xfc\x2c\x70\x91\x28\x01\xe9\x50\xe0\x62\x2a\x55\xe4\x60\x04\xe0\x44\x26\x06\x30\xe6\xa0\x49\x2d\xf7\x02\xe1\xef\xc9\xfc\xea\x67\x18\x6e\x27\x38\x70\xcc\x91\x32\xdc\x0a\x6f\xb4\x31\xd6\xa6\xca\x9e\x63\x6d\x5b\xe7\x2e\x00\xd4\xab\xdb\xd1\x28\x26\x76\x75\x3b\x1a\x0a\x6d\x50\x30\xfa\x5e\xc9\x24\xce\x1b\x36\x73\x2f\x39\xf9\x83\xd8\x36\xec\xda\x25\x11\x93\x32\xbc\xa4\xe9\x6c\xc9\x14\x74\x5f\x72\xd1\xb3\x42\x5b\x76\xd5\xc1\xc6\x02\x91\x5b\x40\x33\xc7\x49\xb5\x56\xfc\x7c\xcf\xa7\x91\x49\x09\xb6\x37\x9c\x8e\x0c\x8a\x00\x55\x30\xbe\xb9\x18\x2f\x2f\xce\x80\x0c\xeb\xbf\xab\x26\x19\x71\x31\xfe\x94\xa0\x30\xdc\xac\xeb\x48\x73\x61\x68\x56\x0a\x12\x3d\xef\xa5\x69\xf3\xdf\x2f\x6a\x18\xbb\xe3\x82\x47\x49\x04\x22\x89\x26\xa4\xac\x0a\x78\xca\xaa\x86\xd3\x80\xa6\x98\x84\x46\x83\x91\xf0\x85\x94\xac\x63\x11\x3f\xbf\x2a\x8b\xf8\xb9\x1d\x8b\x27\x25\x56\x2b\xcc\xe1\x6c\xad\xc1\x39\xac\x3d\x7e\x38\xf3\xa0\x08\xaa\x88\xf5\x0a\x21\xa9\xe8\xce\x0f\xde\x9d\x1f\x46\x37\x68\xf0\x9a\x44\xe9\x22\xc7\x73\x7d\x39\xc5\x80\x6d\x3c\xed\x61\xce\xd9\x1c\xfc\x04\x70\x9a\xe8\x73\x42\x6d\xce\xbf\xd9\xeb\x63\xb8\x44\x1e\xe2\x84\x87\xdc\xac\xc7\x5f\xa4\xd8\x0d\x62\x19\x69\x54\x0a\x8b\xfb\x44\x8f\x1b\x8a\xca\xfd\x9b\xef\x7b\x65\xc6\xf3\xac\x80\x63\x25\x27\xc4\xe4\x0c\xb2\xcf\x17\xcc\x7d\x5e\x91\xfd\x1c\xec\x4a\x57\x6f\x7b\x4f\xc7\xda\x09\x52\x43\x35\xb1\xeb\x8b\x85\xa9\x97\x0a\x21\xd1\x3f\xfa\x21\xaa\x19\x1d\x83\xc7\x5f\x27\x78\xdc\xab\xf4\x92\x56\xa2\x28\x18\x96\xd6\xd5\xb3\x3d\x6d\x19\x33\x0b\x84\xdb\x6e\x89\xbf\xde\x5f\x03\x0f\xce\x60\x12\xa2\x58\x38\x7c\x6c\xff\xff\xbd\xc7\x1c\xef\x20\x05\xb9\x2f\xd6\x32\xf9\xbd\x77\x06\x53\x1e\x86\x14\x00\x9f\xda\x2f\x00\x15\xc1\x77\xbf\xfd\x6c\xe7\xa8\xb6\xba\x26\x96\x28\x1b\x6d\x9c\x0e\xdb\xb2\x39\x4a\x67\xd9\xb7\x65\x73\x8c\xc6\x4a\x86\x34\x46\xd5\x2e\xa0\x5a\x5d\x0c\xaf\xee\xc0\x4e\xe2\x24\xce\xdf\xea\x3a\x45\x25\xde\x65\x76\xd4\x5a\x32\xee\x80\x61\x10\x34\xf2\xa4\x7f\x4b\x05\xab\x39\x09\xd0\x32\x22\x30\x73\x2e\x66\xda\xe9\x0e\x43\x45\x18\xac\xc1\xeb\x3a\xd8\xe3\x3c\xbf\xde\x3d\xa0\x22\xeb\x3f\xfe\xd3\x1d\xb2\x39\x17\xee\x8b\x2e\xbe\x93\x68\x52\x9d\x00\x55\x36\x81\xd3\xd8\x68\xf4\x43\x7a\xb0\xaa\xb6\xd1\x5c\x6a\xd3\x9a\x92\x1d\xdc\x88\x4a\x2c\x55\x2d\x95\x0e\x11\xc6\xf2\x60\xa7\x6e\xc4\x03\x93\xc2\x28\x19\x8e\xe3\x10\x05\x8d\x77\x8f\x33\x4f\x8a\x5e\x71\x8e\x5d\x7c\xab\x37\xa7\x9b\x8d\x7f\x7a\x3a\xe0\xe8\xf4\xe1\xc3\x9c\x6b\x10\x32\x20\xe0\x1a\xa4\x08\xd7\x80\x10\xa1\xf3\x60\x6e\x41\x2f\xd7\x30\xe5\x14\x06\xb6\xd9\x87\xb3\xa0\xdf\xc8\x83\x2d\x7d\xa6\x28\x20\x61\x38\x86\x2e\x90\x26\xda\x1b\xdd\xf9\x2e\x17\xb3\xfc\x7a\x29\x3a\x72\xe9\x88\x52\x71\xbe\xea\xe0\xc1\x33\x6e\xda\xe8\xb7\x20\x99\xc1\x19\x48\xe1\x0f\x05\xdc\x80\xa2\x58\x6a\x6e\xa4\x5a\x57\x1b\xd7\x92\x64\x32\x8a\x78\x07\x67\x46\x3d\xdf\x9c\x43\xb8\x81\x74\xba\x5a\x72\x46\x11\x8d\xb5\x41\xd3\x6e\xa5\x3e\xcc\xc9\xcc\xed\x4e\xa5\x40\x48\xe3\xa8\xda\x19\x61\x85\x1a\x58\x48\x28\x7c\x78\x9a\x24\x3c\xac\x61\xc2\x36\x05\xe3\xa0\x2d\x03\x37\x6e\x2b\x99\x3a\x0a\x41\x8d\x98\xb2\x93\x1d\x53\xaf\xb2\x44\x66\xce\x39\x03\xeb\xa4\x4c\x46\x31\x0f\xa9\x6e\x91\xba\x46\xd5\x8a\xde\x75\x3a\xd8\x91\xaa\x09\x44\x21\x1a\xeb\xe3\xad\xe6\xbf\x4f\x07\x03\x37\xde\x4c\x9e\x9e\xcf\xce\x0d\x40\x25\x42\xd8\x45\xe7\x2f\x9c\xa7\xb4\x4f\xf2\x7f\xb3\xd5\x57\x91\x33\xb8\x7a\x18\x5d\x6f\x17\x73\x97\xd5\x57\x2c\x3d\xb4\x5d\x0d\xf5\x05\x89\x5a\x54\x51\xaa\x0c\x74\xa3\x5c\x57\x2f\xa8\xa6\xde\xe1\xd0\x56\x9b\xce\x7f\xfd\x20\x5c\xe5\x06\x5f\x12\x95\xe1\x8b\x11\xa9\x25\x67\x74\xc5\x98\x4c\x84\xe9\xe2\x12\x2c\xe4\x24\x4c\x17\x77\xb8\x76\x33\x0c\x03\x38\xc5\x05\x5e\xba\x92\xc1\x4d\xcd\xa9\x22\x25\xe6\x1d\xa2\x23\x41\xef\x0b\x29\xd1\x2c\x6f\xde\xec\xa8\x60\xb5\x8e\x5e\x75\x3e\xf4\x4c\xd6\xe5\x47\x01\x29\x9c\x76\x49\x6c\x50\xa4\x65\xa2\xdc\xd9\x84\x3e\x5f\x42\x28\x31\x80\x09\x86\xf6\x04\xa1\xde\x35\xb4\xdb\xcb\x2c\xe0\xb4\x70\xd3\x56\x73\x55\xe5\x9c\x9a\x94\x9a\xaf\xaa\xb4\x25\x54\x59\x6b\xa9\x09\xbb\x59\xc9\xa3\x2d\xad\x9a\x42\x48\x4d\x2c\x2a\xd5\x23\x5a\x47\xa2\xfa\x2a\xc5\x57\x09\x0e\x69\x5c\xb8\x21\x83\x3c\xb4\x67\xd4\x2e\x5e\xd6\x52\x2f\xc3\x9b\xd2\xeb\x9a\x6a\x13\xb4\x3e\xc0\x54\xbc\xdf\xa9\x31\xb2\x7b\x72\xd5\x12\x7a\x6d\x2f\xc8\x6e\x5f\x6e\x3d\x49\x71\xfb\x90\xab\x33\xd5\xdc\x9b\x30\x87\x88\xdc\x93\x30\xfb\xb1\x9a\x89\xa6\x20\x22\x75\x90\xa3\x6b\xbc\x89\x6b\x34\xb6\x4a\x45\xf5\xa5\x8b\x79\x42\xc9\xca\x47\xb4\xe6\x02\xba\x1d\xc2\x6d\x78\x3b\x69\xd8\xb2\x1a\x59\xe5\x76\xe6\x9a\x1a\x97\xc2\x76\xf6\xc5\x1a\xe4\x5e\x8c\x92\xee\x48\xf2\xb4\x9d\xd3\xc6\x5d\x80\xd4\x86\xc7\x4a\xcc\x55\xc3\x6d\x0a\x21\xb4\xef\x5c\x84\x19\x76\x11\x63\xb8\xb0\x7f\x3d\xb0\x70\x70\x62\x13\xef\xab\x70\x45\x59\xae\x2c\x73\xe9\x33\x74\x2f\x50\x10\xa8\x56\x45\xa3\xaa\x60\x6e\xa2\x9a\xe2\x41\x29\x27\xdb\x79\x81\x3c\x74\x5e\x20\x01\x1a\x1c\xb3\x72\x25\xa8\xb1\x26\xaa\x0a\x4a\x7b\x16\xd3\xc3\xe8\x8d\x96\x52\xf1\x84\xf8\x92\x0b\x69\x83\x7d\x3b\xa9\xab\x22\x85\x5e\xcd\xe4\x77\xbf\xfd\x0c\xde\x53\x0f\xc7\xfd\x6b\xaa\x4d\x6f\xee\xfe\x77\x7a\xf6\x55\x2a\xf1\xf5\xef\xa6\x37\xb7\x96\x6b\x73\x2a\xd9\x45\x99\xb6\x9e\x5d\x50\xc0\x7d\x3a\x9b\x0b\x02\x7b\xd2\xbe\x69\x37\xd0\x31\x31\x3e\x4d\x9f\xfb\x77\xd5\x7e\x81\xf8\xd7\x30\x43\x1e\x7f\x6c\x44\x3c\x07\x96\x28\x45\xc2\x84\x6b\x9f\x30\xe6\x1a\x70\xa5\x41\x2a\x88\x10\x6b\x56\xd1\xe2\x5b\xdd\x39\x09\xbb\xdc\x26\xf0\x6e\x93\x09\x29\x41\x86\x6a\xc8\xe1\xaa\x7d\x64\xab\x8c\xff\xfb\x23\x6e\x9d\xd5\xf3\x1c\xd9\xdd\xf7\x85\x78\x4a\x41\x5b\x25\x1d\x7f\xc3\xeb\x65\x08\x6d\x4b\x4a\x35\xd5\x1a\x3e\x9b\x8f\xf3\x75\xfa\x3a\xd3\x4e\xa4\x0c\x09\x45\x5d\x51\xa5\xb2\x79\x5f\x6a\x3a\x0b\x09\x5c\xc3\x0f\x57\x35\xb8\x9e\xcc\x4a\xaa\xc5\x78\x8a\x13\xc5\x59\x6b\x9f\xf3\xc3\xd3\xd8\x53\x4a\xe4\xb6\x5a\xd3\xfe\x0e\x56\x87\xc5\x2c\x17\x6f\xad\xe5\x15\xea\x7c\xd8\xf5\xa9\x2b\xae\x41\xd1\xa7\x84\x74\x4d\x39\x60\xf7\x47\x4c\x9e\xe9\x88\xb9\xc3\x63\xbd\x79\x02\x97\x7c\x28\x9f\x8a\x32\xce\x20\xbb\x8a\xd7\xd5\x68\xb9\x85\xd0\x31\x0c\xeb\x18\x59\xdb\x5a\x2a\xf7\xcf\x66\xdd\x14\x80\xa1\x14\x33\x58\x71\x33\xcf\x4b\xee\x0a\xad\xee\xcb\xda\x8d\x04\x12\xc1\x3f\x25\x14\xae\x81\x3b\x6c\x36\xf5\x25\x40\x2b\x78\xb0\x1f\x97\xc5\x8a\x2f\xd1\xd0\x73\xd3\xe9\xa5\x42\xe5\xbd\x9f\x05\x16\x69\x32\x1d\xc3\xd0\x15\x24\x35\x70\x91\x17\xe5\x9f\xd6\x0f\x09\x8c\xdb\x82\x7c\x4b\x76\xd2\xb9\xba\x1f\xba\xfa\xea\x66\x4b\x32\x73\xd2\x04\x0c\x85\x5d\xa5\x69\x30\xa6\x00\xb8\x08\x28\x26\x11\xb8\xbd\xaa\x5f\x77\xeb\xc4\x95\xc9\xdf\x06\xd7\xed\xab\xd1\x3f\x8d\xed\xd2\xde\x1a\x56\xee\xe2\x12\x93\x51\xac\xb8\xa6\x8e\xf9\x80\x8a\x47\xe3\x87\x17\x9d\xae\x65\x52\x3c\x39\x58\x43\xa7\x6f\xc7\xeb\x80\x60\x87\xbc\xcb\xa8\x90\x6b\xd9\x8d\x73\x4d\x75\x5b\xf5\xdc\xe7\xf0\x94\x3b\xd4\xc5\x4d\xd5\x2f\x36\xbd\xd6\x36\xf6\xee\x0b\xee\xaf\xb6\x68\x9e\xd8\x0f\x9e\x5e\x2a\x3f\x96\x1f\x8f\x75\xb1\xdd\x5f\xce\x6e\x5d\x37\xe5\x5c\xca\xbf\x95\x5e\x0b\xd7\xd1\x0f\x50\xaf\x53\xd8\xdc\xf9\x77\xe0\xe7\xe7\xdb\x1a\xac\xed\xe5\x18\xf3\xca\x8b\x2a\x7b\x54\xfb\xf4\x7d\x97\xfd\x57\x18\xf2\x3d\x77\x2d\xb0\x5b\xfa\x71\x54\xdc\x6e\x9b\x9d\xa1\x0a\x31\x6d\x7b\x5f\x9f\x3e\x3b\x10\x11\xde\x48\x96\xbb\xb0\x5f\xda\xc1\xef\xa4\xa2\xf4\xc5\xc4\x9e\x1f\x07\xec\xf0\x93\x7e\x96\x9d\x93\xc7\x93\xff\x05\x00\x00\xff\xff\xdc\x37\xd6\x51\xaa\x50\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 20650, mode: os.FileMode(420), modTime: time.Unix(1537144389, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
