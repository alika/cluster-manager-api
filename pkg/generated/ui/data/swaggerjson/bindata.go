// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x6f\xdc\xb8\x11\x7f\xf7\xa7\x18\xa8\x05\x9a\x03\x62\x6f\x2e\x7d\xcb\xcb\xd5\x70\x0e\x77\xc6\xc5\xa9\xd1\x0d\xe2\x87\x26\x30\xb8\xd2\xac\xc4\x33\x45\xea\xc8\xd1\x6e\xb7\x85\xbf\x7b\x41\xea\x3f\x57\xb2\x77\xa5\xad\xbd\x6e\x72\x2f\x17\x8b\xe4\xfc\xfd\x71\x38\x1c\xce\xfe\xe7\x04\x20\x30\x6b\x16\xc7\xa8\x83\x77\x10\xbc\x3d\x7b\x13\xbc\xb6\xdf\xb8\x5c\xaa\xe0\x1d\xd8\x71\x80\x80\x38\x09\xb4\xe3\x17\x22\x37\x84\x1a\xae\x98\x64\x31\x6a\x38\xbf\xbe\x74\xf3\x01\x82\x15\x6a\xc3\x95\xb4\xb3\x56\x6f\xce\x7e\x2c\x09\x01\x04\xa1\x92\xc4\x42\xaa\xa9\x01\x04\x92\xa5\x8e\xdc\x15\x0f\x13\x86\x02\x3e\xa3\xc4\x7f\x73\x56\xae\x00\x08\x72\x2d\xec\x78\x42\x94\x99\x77\xb3\x59\xcc\x29\xc9\x17\x67\xa1\x4a\x67\x2b\x7f\x2a\xa6\x8c\xbb\xc9\x69\x39\xf4\xb7\xd8\x7e\xb1\x93\x03\x37\xe7\xfe\x04\xe0\xde\x29\x65\xc2\x04\x53\x34\xc1\x3b\xf8\x67\x21\x9a\xa5\x5f\x89\xe9\x78\xd9\x15\x5f\xdd\xdc\x50\x49\x93\x77\x26\xb3\x2c\x13\x3c\x64\xc4\x95\x9c\xfd\x6e\x94\x6c\xe6\x66\x5a\x45\x79\xb8\xe3\x5c\x46\x89\x69\x2c\x3b\x63\x19\x9f\xad\x7e\x9c\x85\x85\x61\xdb\x46\x8a\xb1\x6d\x33\x2b\x7e\x9e\xa6\x4c\x6f\xac\xae\x37\x5c\x08\xd0\x48\x9a\xe3\x0a\x81\x12\x04\x43\x8c\x72\x03\x6a\x09\x0c\x4a\x62\xc0\x64\x04\x9c\x0c\xdc\xe5\x0b\x0c\x95\x5c\xf2\x18\x96\x4a\x43\xa8\xa4\xc4\x90\xf8\x8a\xd3\xa6\xb6\x23\x40\xa0\x32\xd4\x4e\xe4\xcb\xc8\xf2\xf8\x05\xa9\x74\x77\x7b\x92\x46\x93\x29\x69\xd0\x74\x64\x03\x08\xde\xbe\x79\xe3\x7d\x02\x08\x22\x34\xa1\xe6\x19\x95\xc0\x68\x11\x2a\x34\xb2\x0e\x61\x5b\xcb\x00\x82\x3f\x6b\x5c\xda\x15\x7f\x9a\x45\xb8\xe4\x92\x5b\x0a\xa6\xb2\xd2\x6d\x5a\xc0\xef\x96\x65\xbc\x91\xf2\x1f\x98\x89\x4d\xd0\x21\x74\x7f\xd2\xf7\xef\xfb\x96\x3a\x19\xd3\x2c\x45\x42\xdd\x38\xaf\xf8\xcf\x53\xa4\x42\xac\xfb\xff\xeb\x07\x95\xfc\xc8\x52\xb4\x7e\xb0\x5e\xa9\x3c\x41\x0a\x16\x08\x42\xa9\x3b\x8c\x20\xcf\xce\x7c\x12\xdc\xad\xfc\x23\x47\xbd\xf1\x87\x34\xfe\x91\x73\x8d\xd6\x25\x4b\x26\x0c\x7a\xc3\xb4\xc9\x9c\x60\x86\x34\x97\x71\xd0\xab\xf0\xd7\x96\xc2\xc4\x62\x5f\xd5\x6a\x57\x37\x8b\xbf\x9e\x78\x96\x0a\x22\x14\x48\xf8\x30\x1e\x8b\x39\x0d\xfe\x1e\xc0\xd6\x7b\x37\xf5\x05\xc0\xab\x23\xe8\xb1\x20\xec\x26\x61\x04\xdc\xb4\x11\xf6\x17\x03\x76\xa1\x05\x5a\x84\x86\xb4\xda\xbc\x3c\x8c\x65\xf9\x23\x01\x2f\xd3\x6a\xc5\xed\x21\xb3\x13\xc6\x2e\x34\xb2\x17\x81\xb1\x8e\xa0\x4f\x82\xb1\x85\x8a\xb6\x30\x50\xc0\xa3\x6f\xa4\x85\x0e\xd2\xb9\x0f\x8e\x43\x1b\xe0\xca\xc4\xbb\xa8\x3f\x1e\x6f\x27\x2d\xeb\xf9\xe7\xef\x4c\x70\x43\xe3\x0e\x61\x06\x76\xad\x0d\xfc\x25\x2d\xb3\xd3\xd9\xfa\xc1\x32\x3c\x62\x70\x76\x25\x1d\x85\xce\x03\xb8\x27\x46\xca\x54\x14\xaa\x5c\x76\xbc\x93\x29\x33\xec\x9e\x39\x4f\x33\x81\x90\xa9\x08\xdc\x42\xa8\x4c\x7b\x06\x50\xba\xce\xfe\x1d\xc1\x9a\x53\xe2\x62\xa9\xcc\xd3\x05\x6a\xeb\xc2\x4c\x45\x06\xb8\x2c\xbe\xb2\x14\x4d\xc6\x42\x2c\xe2\x4f\x84\xd1\xc3\x8e\xbd\x56\xd1\x85\x13\xf4\xb8\xbd\x5a\x89\xf9\x2d\x06\x9c\x96\xfa\xcf\x13\x6e\x12\x14\x42\xad\x95\x16\xd1\xbe\x70\xfe\xd5\xae\x84\x1b\xbb\x14\xe6\xa8\x57\x3c\x44\x38\x85\x75\x81\xe7\x0c\x19\x01\x83\x58\x23\x12\x97\xb1\xcd\x06\x2a\x04\xef\x02\x5e\x47\xdb\x91\x3e\x66\xec\x36\x52\x7e\x8b\xd0\x6d\xb4\x7f\x36\xe4\xa6\x6d\xcc\xee\x71\x31\x88\x30\x13\x6a\x83\x11\x58\x1a\x10\x26\x4c\xd3\xa3\x57\x84\x5f\x51\xa4\x17\xfe\xcc\x63\x43\xa4\x27\xea\x93\xc0\x72\x3b\xff\xed\x53\xb6\xaa\xd7\x10\x17\x02\x35\x98\x44\xe5\x22\xb2\x57\x51\x2e\x0d\x31\x21\x30\x02\x25\x9f\xe6\xa6\xf0\xfa\x71\x9d\x0a\x29\xcf\xea\x03\x77\x8f\x6b\x50\xa9\x60\xbd\xf4\xd8\x74\xaa\xaa\x63\xbb\x6b\x54\xae\x70\x95\x04\x47\xc3\x6d\xbd\xa3\xd1\xcb\xdf\xbe\x7d\xea\xb8\xdd\x00\x1f\x59\xfa\x44\xee\x38\x40\xcc\xdb\xfd\x32\x5a\xee\x20\x78\xa5\x34\x68\x2c\xff\xfa\xa1\x15\xdb\xbe\xc8\x4f\x09\x37\xc5\xd1\xbc\xc0\xe2\x5a\x9e\x87\xc4\x57\x08\xdc\x55\xe9\x9c\x75\x12\x66\x80\x09\x8d\x2c\xda\xc0\x02\x51\x36\x51\xb2\x4e\x4b\x8d\x3d\xbe\xbd\xb2\x80\x1f\x2d\x2f\x0b\xfe\x2f\x22\x5c\xfa\xb2\x7e\x8b\xc7\xb8\x6f\x83\xe7\x39\xcc\x8b\xc0\xb2\x73\x0a\xfa\x10\xee\x4b\x52\xc3\x08\xbd\xae\x8a\x37\x9f\xb6\x66\x1e\x1b\x40\x3d\x51\xbf\x45\x7c\x7a\x26\x78\x22\x78\xd6\x2f\x35\x2d\xe9\x9a\xb7\x92\xbe\xca\x51\xf1\xe9\x3d\x12\xe3\xe2\x92\xb0\x93\x9a\x56\x27\x85\x5a\xfc\x8e\x61\x13\x11\x83\x4c\x5b\x68\x12\xf7\xf0\x16\xf0\xc8\xc7\x9f\x77\xd6\xbc\xee\x8c\x55\x6f\x62\x97\xef\xbd\x6a\x7f\xd0\x0b\x88\xd2\xd1\xfb\xd3\xef\x79\x4f\xe8\xe7\x50\x3c\x01\x8d\xe2\xd1\x4e\x3c\x9a\x97\xa4\x47\x39\x36\x0f\x4b\x93\xb9\xb6\xde\xa8\x48\x55\x4f\x54\xd5\x05\x76\x5b\x88\xde\xb0\x36\x0c\x90\xef\xd0\x78\x12\x68\xec\xec\x95\x76\xc1\xf7\xfc\x66\x3e\xcf\x30\x9c\xe2\x1e\x8d\x71\x71\x1a\xec\xaf\xde\xa7\x04\xa1\x58\xee\xde\x46\xcf\x6f\xe6\x03\x16\xc4\x50\x23\xdd\xde\xe1\xe6\x76\x24\x18\x2c\xa7\xb9\xa3\xf2\x1b\x6e\x2e\xa3\x82\xdd\xf5\x25\x9c\x87\x21\x1a\xf3\x20\x57\xe6\xa6\x58\xe6\x13\x39\x17\xbc\x7e\xc3\x4d\xcd\x9d\xf9\xdc\x47\xf9\xf0\x8a\xb1\xc9\x4e\x44\x19\x65\x8a\x4b\x1a\xad\xa2\x15\xc2\xe9\x54\x53\xea\xb5\x69\x6e\x50\x8f\xde\x71\x96\x4f\x45\xa0\x2a\x10\x57\x7c\xfb\xd9\x29\x96\x53\x32\xc9\x75\x7f\x3f\xcf\x29\x81\xbb\xd2\x69\x96\x63\x8f\x82\xe3\xdc\x66\xe2\x29\x1e\x3b\x64\xdc\x2a\x9f\xc8\xeb\x27\x3e\x8c\xfa\xcd\x59\x96\x31\xb5\xcf\x77\xdc\x63\xd3\x75\x49\xcd\x61\x77\xd8\x03\x15\x53\x30\x19\x86\x7c\x59\x76\x76\x4c\xb5\x7e\x87\xf9\x73\xb8\xa1\x1d\xda\x6b\x15\x4f\x21\xcc\xb5\x46\x49\x62\x03\x64\x2f\xb0\xdc\x00\x5b\x1b\x50\x1a\x52\xc6\x06\xe2\x94\x1b\x39\x88\x47\xea\x48\xf2\xc8\x3e\x1f\xf2\x44\x4b\x28\xb6\x3e\x90\x4c\xd5\x09\x35\x2c\xd2\xf9\xcd\xb0\x44\xa3\xb0\x51\xdc\x39\x26\x80\x42\xdd\x0d\x41\x62\xa1\x94\x40\xd6\x2d\x45\x05\x4b\xa5\x53\x46\x83\xc3\x2d\xc8\x20\x25\xa8\x2d\x1a\xa4\xa2\xce\x06\x5e\x33\xd3\xde\xbe\xb0\x28\xf1\x63\xef\x2a\x68\x06\x82\xf1\x76\xdf\xd3\x9e\x7e\x6a\xe5\x77\xbd\x0c\x50\x6b\x35\x9e\xfc\xcf\x6e\xf5\xfe\xbe\xec\x69\x1b\x39\x3e\x5f\x5e\xb8\x62\x70\xdb\x85\x55\x99\x4a\x6d\x86\xc2\xef\x84\x44\x72\xde\x49\x1e\xb7\x51\xb1\x9f\x6d\xbd\xea\xd1\xf1\x59\xf7\x86\x15\x81\xb5\x2e\x83\x80\xc9\x5d\xae\xb5\xcc\xc5\x40\x10\x45\x63\x58\x3c\x21\x94\x97\x04\x0c\xac\x51\x23\xc4\x7c\x85\x63\xe2\xd0\xcf\xde\x8e\xd9\xdb\xa0\xa1\x8a\xc6\x27\x57\x6e\xbf\x82\x23\x71\x70\x23\x35\xf4\x2b\x2a\xfb\x5b\xe7\x17\x94\xa8\x79\xd8\x14\x5a\x9f\xfb\xe0\x96\xad\x5c\xaa\xa8\x1d\xa7\x38\x94\xfa\x36\x2f\x2b\x87\xe0\x5a\x34\x45\xb8\x8e\x33\xcb\xd6\x7d\x6f\x35\xbe\x02\xa9\x7e\x29\x34\x66\x6a\xb2\x00\x45\xf5\xdc\x92\x32\x9c\x94\xde\x0c\x1c\x2f\x9e\x8b\xa6\xf0\x72\xde\xea\xe5\xb2\x62\x22\xdf\x2e\x5e\xee\xce\x86\x69\x2c\x43\x85\x3b\x88\xe0\x95\x44\x43\x18\xc1\x86\xa5\x02\x4e\xdd\xd0\x67\xc7\xe2\xcc\x7d\x09\x95\x24\x94\x64\x7e\x18\x0f\xdf\xa2\xaa\x37\x47\x22\x2b\xda\x44\x08\x1f\x06\x51\xfe\x0b\xde\x80\xa9\xeb\x2e\xf3\x69\xdc\xfa\x5f\xd7\x46\x19\x74\xbb\x3f\xea\xf8\x0e\xa3\xcb\x4e\xb3\x68\x75\x71\x35\x1b\x33\x98\x37\xd5\x4d\x6c\x03\xe2\x30\xad\x59\xb7\x2c\x1d\x70\xc2\xd4\x9f\x3f\x39\x97\xf3\x5e\x23\x1b\x95\x3e\xf8\xdd\x76\x53\x7c\xf7\x7f\xe7\xb7\xa9\x09\x75\xab\xa2\x7e\x44\x69\xb5\xd7\xb7\xf5\x6c\x71\xeb\x63\xfb\xf4\x5b\x22\x85\xc5\x43\x6d\xdd\x6a\xf8\x45\x7e\x40\xb6\x42\xc0\x34\xa3\x8d\x9d\xe3\x1e\xba\x81\x09\xd1\xc4\xb7\x91\x80\xed\xb6\xed\x4d\xb0\x40\xa6\xa2\xc1\xcd\xcd\x25\x61\xec\x35\x97\xb4\x30\xcb\x25\xfd\xf5\xed\x90\x69\x1e\xe9\xa1\x7c\xa5\xb4\x67\x87\x31\xc7\x58\xb7\x0b\xea\x7f\x9b\x82\x6d\x4b\x57\x53\xed\x64\x96\xed\xce\xbc\xce\xed\x66\x27\x3d\x26\xfb\x73\xb7\xc4\x78\x57\x65\xaa\x27\x59\x0b\xde\x96\x62\x8f\x2a\xd4\xf7\xae\x3d\xe5\x2a\xd1\x1f\xcd\x76\xda\xa4\x3b\xf5\x3e\xf5\x47\xb7\xad\x77\x71\xd8\x2b\xbc\xf5\x26\x59\x03\x57\x92\x52\xb8\x62\xd2\x40\x75\xad\x37\x8b\xdd\x57\x9a\xbe\xd6\x90\x8e\xb9\x5c\x92\x3b\xdf\x16\x64\xd7\x3d\xd9\xdf\xd6\x71\x7c\x67\xea\x8b\xbd\x98\xf7\xbc\xc9\xbf\xbc\xad\x75\xb0\x83\x77\x98\x35\x1f\x60\x3d\xe5\xee\xf0\xd9\xae\x95\xca\xbb\x2f\xd8\xe8\x58\xf5\xc3\xcc\x20\xcf\x62\xcd\x22\x1c\xbc\xf7\x56\x2e\x5d\xf3\xe1\xfa\xc8\x21\xb2\xc5\xd2\x34\xf5\x6f\xa4\x4e\x2d\xc3\xf2\xeb\x4f\x5f\xe4\xbc\x30\x19\x27\x48\x6c\x8e\xd2\x99\xc4\xa2\x94\x4b\xc8\x34\x5f\x71\x81\x31\x9a\x9f\x06\x2a\xeb\x76\xda\x6d\x2b\x95\x99\x7c\x49\xd8\xb1\x19\xb1\x07\x09\x56\x67\x7b\xaf\xa3\x16\x16\xd8\x42\xb8\x93\xab\x50\x67\x54\x35\xbe\xb7\x07\xe8\x7b\x30\xdb\x33\x98\xd5\x0d\x3d\xf8\x2f\x42\x2d\x99\x78\xaf\xc2\x56\x47\x8f\xd7\xca\x75\xa5\xb4\xf5\x9d\xca\x09\x1e\xf8\xa1\xf9\xf0\x6f\xc3\x0d\x4b\x4d\x2e\xe3\xd3\x50\x86\x54\x9d\x84\xa7\xa5\x4f\x4f\x59\xc6\xad\x98\xf7\x27\xf7\x27\xff\x0d\x00\x00\xff\xff\x17\x0f\xbb\x43\xf6\x3e\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 16118, mode: os.FileMode(420), modTime: time.Unix(1527193095, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
