// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x7d\x6f\xdb\xb6\xba\xff\xbf\x9f\xe2\x81\xef\x05\x6e\x0a\x24\x71\xd7\xdd\x0b\x0c\x19\x86\xdd\x2c\xc1\xe9\x82\x2e\x5d\x30\xf7\x34\x18\x4e\x07\x83\x96\x1e\xdb\x5c\x24\x52\x25\x29\xbb\xee\x41\xbe\xfb\x01\x5f\x64\x4b\xb2\x18\xcb\x92\x13\x2b\xad\x07\x0c\x4d\x24\x8a\x7c\xde\x48\xfe\x9e\x17\x32\xff\x7e\x01\xd0\x93\x73\x32\x99\xa0\xe8\x9d\x41\xef\xf5\xe9\xab\xde\xb1\x7e\x46\xd9\x98\xf7\xce\x40\xbf\x07\xe8\x29\xaa\x22\xd4\xef\x2f\xa2\x54\x2a\x14\x70\x4d\x18\x99\xa0\x80\xf3\x9b\x2b\xd3\x1e\xa0\x37\x43\x21\x29\x67\xba\xd5\xec\xd5\x69\xd6\x11\x40\x2f\xe0\x4c\x91\x40\x2d\x7b\x03\xe8\x31\x12\x9b\xee\x06\x24\x96\x29\x9b\xc0\xc5\xbb\x8b\xf7\xae\x39\x40\x2f\x15\x91\x7e\x39\x55\x2a\x91\x67\xfd\xfe\x84\xaa\x69\x3a\x3a\x0d\x78\xdc\x97\xb6\xfd\x49\xc0\x02\xd5\x0f\x2c\x2d\x27\xb1\xa5\xe5\x84\x24\x74\xd5\x07\xc6\x84\x9a\x5e\x48\x18\x53\xf6\xff\xf9\x0f\x4f\x29\xef\x99\x66\xf7\x2f\x00\xee\x0d\xb7\x32\x98\x62\x8c\xb2\x77\x06\xff\xb2\x34\x9b\xb1\x33\x06\xf4\x2f\xfa\x8b\xbf\x4c\xdb\x80\x33\x99\x16\x1a\x93\x24\x89\x68\x40\x14\xe5\xac\xff\xb7\xe4\x6c\xd5\x36\x11\x3c\x4c\x83\x9a\x6d\x89\x9a\xca\x95\xc8\xfb\x24\xa1\xfd\xd9\x77\x19\x97\x79\xe9\x4d\x30\x2f\x4c\x4d\x7e\x1a\xc7\x44\x2c\x34\xbb\xb7\x34\x8a\x40\xa0\x12\x14\x67\x08\x6a\x8a\x20\x15\x51\xa9\x04\x3e\x06\x02\xae\x33\x20\x2c\x04\xaa\x24\xdc\xa5\x23\x0c\x38\x1b\xd3\x09\x8c\xb9\x80\x80\x33\x86\x81\xa2\x33\xaa\x16\x4b\x51\x02\xf4\x78\x82\xc2\x90\x7c\x15\xea\x31\xde\xa0\x72\x76\x90\x6f\x24\x50\x26\x9c\x49\x94\x05\xda\x00\x7a\xaf\x5f\xbd\x2a\x3d\x02\xe8\x85\x28\x03\x41\x13\xe5\x2c\x26\xd7\x91\xe5\x48\x2b\x84\xac\x7d\x06\xd0\xfb\x6f\x81\x63\xfd\xc5\x7f\xf5\x43\x1c\x53\x46\x75\x0f\x32\x93\xd2\xd0\xd9\xc2\x90\x24\x74\x45\xe5\x1f\x98\x44\x8b\x5e\xa1\xa3\xfb\x17\x55\x3f\xdf\xe7\xd8\x49\x88\x20\x31\x2a\x14\x2b\xe5\xd9\xff\x4a\x8c\x64\xa6\x6c\xfe\x3d\x7e\x90\xc9\x77\x24\x46\xad\x07\xad\x95\x4c\x13\x8a\xc3\x08\x21\xe2\xfc\x0e\x43\x48\x93\xd3\x72\x17\xd4\x7c\xf9\x29\x45\xb1\x28\xbf\x12\xf8\x29\xa5\x02\xb5\x4a\xc6\x24\x92\x58\x7a\xad\x16\x89\x21\x4c\x2a\x41\xd9\x24\xcf\xfe\xfd\xf1\x66\x76\xc8\x5c\x9e\x4a\x0c\x04\xaa\xe1\x1d\x2e\x86\x34\xdc\xc0\xdb\xfb\x29\xc2\xc0\xb4\x7f\x8b\x8b\xab\xd0\x98\xd3\xf9\xcd\x15\x9c\x07\x01\x4a\xd9\x45\xb6\x88\xa1\x4c\x73\x57\x9b\x35\xcb\xcc\x5b\x5c\x2c\xd9\x23\xdd\x63\x4f\xe0\x44\x13\xbe\x99\xa7\x3f\x4c\xc3\xce\xb2\xf2\x25\x15\x78\x4a\x92\xa4\x9e\xed\x9d\x27\x49\x87\xad\xce\xf0\xa2\x90\x11\xa6\x6a\xf0\xf2\xde\x34\xec\xb6\x62\x12\x22\xe5\x9c\x8b\x3a\xaa\xb9\x71\x4d\xbb\xcd\x90\x4c\x47\x4b\xca\x6b\x2e\x77\xb9\x2f\xba\xca\x5b\x22\xf8\x8c\x86\x85\x8d\xba\x8a\x9d\xfc\xce\x94\x7d\x22\xe1\x88\xcc\x65\x9f\xdc\xc9\xfe\x2c\x9e\x13\x81\x7d\x54\xc1\xcb\xa7\xe1\x6c\xf9\xf3\x5f\xb9\x1d\x59\x91\x49\x79\x2f\xce\xf0\xe8\xea\xe3\xbf\x5e\x94\x84\xd3\x0b\x31\x42\x85\x0f\x03\x26\xdb\x66\x05\x90\x1e\x00\x3f\x97\xa6\xe9\x33\xc0\x3f\x05\x42\xbb\x02\x81\x6e\xa7\x44\x01\x95\x79\x08\xf4\x3f\x12\xf4\x87\x1a\x09\x85\x28\x95\xe0\x8b\xce\xcc\x9e\x03\x08\x3a\x80\xa0\xfd\xb2\x72\x00\x41\x5d\x56\xcc\x01\x04\x1d\x40\xd0\xe3\x71\xb6\x4b\x10\x94\x70\xb9\x21\x66\x44\xc2\xbf\x53\xa9\x80\x58\xd6\xa5\x56\x67\x1d\x38\x74\x6e\x3e\x73\x14\xbc\xe3\x21\xca\x2e\x63\xa2\x02\xb5\x4f\x82\x89\x46\x3c\x5c\x33\x09\x6b\x2d\x55\x6f\x72\xc6\xa2\x44\x5a\xb6\x95\x5d\x0b\xe0\x5a\x4e\xea\xb0\xbf\x0b\xf3\x4b\x37\x58\xdf\x76\x46\x77\x21\x90\x3c\x0b\x0c\x5e\x20\xf4\x5b\xb4\xb7\x82\x00\x1e\xdd\xde\x5e\xe4\xa4\x57\x0e\xa0\xf7\x23\x5a\x58\x02\xb7\x88\xa2\x13\xd0\xdf\xea\xad\xc1\xf5\x25\x6b\x05\xc7\x7f\xd3\x03\x76\xd8\x38\x8b\x94\x3e\x89\x75\x1e\x1c\xaa\x83\x43\xb5\x5f\x56\x0e\x0e\x55\x97\x15\x73\x70\xa8\x0e\x0e\xd5\xe3\x71\xf6\xd8\x08\x23\x4d\x26\x82\x84\xb8\x2d\xc8\x48\x05\x03\xf7\x29\x70\x23\x3c\x69\x14\x4f\x60\x42\x67\xc8\x6a\xe0\xe1\x37\xa8\xfe\x69\x3b\x70\x94\x5f\xb1\x31\x17\xb1\x69\xd1\x71\x04\xe2\xa5\xfb\x49\xf0\xc8\x33\x35\xe4\x43\xe8\xfa\x80\xb4\x0e\x48\xeb\xa9\x79\x39\x20\xad\x2e\x33\xf4\x75\x22\xad\x66\x29\x55\x50\xfa\xd9\x1c\x81\x08\x84\x80\x33\xa9\x37\x2c\xca\x6c\x91\x9f\x83\x1a\xcf\x06\x72\x6d\x13\xc3\x56\x0a\xe3\x44\x81\xe2\x4b\x40\x55\x27\x9c\x58\xc4\x20\x5d\x06\x4c\x45\x4a\xbf\xc5\x80\x62\x51\x02\xfb\x89\x28\x4e\x31\x8a\xf3\x20\x7f\x8b\x0a\x93\x10\x93\x88\x2f\x30\x04\xdd\x07\x04\x53\x22\xd4\xc6\x5a\x93\x5f\x31\x8a\x2f\xca\x2d\xbb\x66\x99\x25\x52\x9f\xc4\x34\xd7\x67\x76\x15\xb3\x59\xc9\xba\xa2\x51\x84\x02\xe4\x94\xa7\x51\x08\x23\x04\xca\xa4\x22\x51\x84\x21\x70\xd6\x99\x05\xdf\x52\x79\xaa\x7f\x95\x09\x09\xb6\x59\xfc\x1d\x83\xcb\x4f\xbb\xc6\x53\x76\x40\xa0\x3e\x47\xee\x0b\xe3\x7a\x99\x3e\xcc\xd4\xeb\x0c\x5f\xe5\xe9\x5b\xc5\x8e\x99\x0d\xa0\x1d\xc8\xce\x90\x7d\x70\x7a\x0f\x4e\x6f\xd7\xd8\x3b\x38\xbd\xdd\xb3\xba\x83\xd3\x7b\x70\x7a\x3b\xee\x11\x6e\x2a\x2b\x71\x10\x0f\x8e\xb8\x00\x81\xee\xb7\x97\x39\xf0\xfd\x91\xbd\x9f\x52\x09\x73\xdd\x78\x84\xb6\x00\x39\x0d\x14\x9d\x21\x50\x73\x60\xce\x6c\xdf\x53\x22\x81\x44\x02\x49\xb8\x80\x11\x22\x5b\xc1\xf8\x39\x55\x53\x7b\xca\x4e\xef\x96\x25\x6f\xbd\x0c\xe7\xaf\xec\xf8\xcf\x02\xcf\x97\x69\xfd\x16\x7d\xcd\xb2\x0c\xf6\xe3\x6d\x5a\xe4\x9b\xf7\x37\x37\x07\x42\x3c\x76\xef\xba\xf2\x5b\xe8\x4d\x56\x86\xf5\x7e\xad\x65\xd7\x0c\xb4\x44\xea\xb7\x68\x9f\x25\x11\xec\xc7\x3c\x57\xc7\xbe\xb7\x4e\x7a\x66\xee\x1d\x5d\x65\xfd\x80\x8c\x78\xaa\x80\x24\x14\x24\x8a\xd9\xa6\xac\xe7\x07\xdb\xc3\xf3\x49\x77\x3a\x82\x1b\x59\x6b\x13\x65\x2d\x4f\xb8\xe7\x48\x5b\x9d\x31\x2f\x57\x83\x16\x7e\xff\x70\x7d\x4b\x04\x0e\x12\x0c\xf2\xba\xcd\x76\x76\x3e\xfa\x1b\x83\xd5\x0e\xa6\x9d\xca\x04\x85\xa2\x25\x61\xf7\x48\x18\x0e\x99\x29\x0b\x2e\xe9\x20\xeb\x88\x08\x41\x8a\x53\xa7\x47\x15\xc6\xe5\xf6\xdb\xc8\xd9\x52\x7e\x4d\x82\x29\x65\x96\x01\x1f\xb8\x5a\x5d\x6c\xe0\x5a\x4b\x98\x4f\x69\x30\x85\x39\xc2\x5c\xc3\x59\xc5\x81\x84\xa1\xfe\x27\x17\x5e\xef\x55\xaa\x47\x60\xcc\x67\xf8\xb8\xcc\x96\x15\x66\x39\xfd\xc3\x8c\xbc\x2b\x7e\x2d\x1f\x30\x16\x3c\xf6\x30\x5d\xb9\x1e\xd4\x25\xad\x85\x2d\x4d\xcb\xfb\xde\x3a\xd2\xac\x66\x56\x03\x5f\xfd\xb1\x01\xbc\x83\xc1\xaf\x0e\xf0\x6e\x62\xa9\x50\xbc\x7a\xfe\x76\xa0\xe9\x3f\x7f\x3b\x30\xb0\x80\x05\xf8\x46\xf0\x34\x69\xc3\x8f\xdb\x56\x9a\xf1\xc3\x72\xe1\x99\x89\xa1\xa4\x7a\xd1\xb0\xfd\x6d\x3f\x46\xc6\x25\xe8\xd6\x70\x34\x50\x84\x85\x44\x84\xc3\xcb\xd7\xc3\xd9\xeb\x63\x40\x15\x9c\xbe\xac\x1e\x32\xa6\x6c\xf8\x29\x25\x4c\x51\xb5\xf0\x0d\x4d\x99\xc2\x49\x29\x04\xd5\xb3\x8b\xb8\x7b\xfd\xfd\x6b\x0f\x61\xd7\x94\xd1\x38\x8d\x81\xa5\xf1\x08\x85\x16\x01\x75\xa4\x4a\x38\x0a\x71\x4c\xd2\x48\x49\x6d\xc8\x5f\x50\x70\x1f\x89\xe4\xf3\xa3\x92\x48\x3e\x37\x23\x71\xcd\xc3\x59\x57\x87\xd1\xb5\x04\xb3\x2a\x20\x10\xab\x1e\xc2\xc2\xaa\xc1\x7a\x0f\x98\xf3\xad\x35\xe7\xdb\xc1\x25\x51\xe4\x02\x59\xe9\x8e\x91\x6d\x6d\xd9\x05\x70\x9a\x58\xda\xad\x59\x81\x6c\x07\x70\x94\xca\x13\x24\x52\x9d\x7c\xf7\xa0\x8d\x91\x19\xa1\x11\x19\xd1\x88\xaa\xc5\xf0\x0b\x67\xbb\x58\x72\x6b\x3a\xe4\x65\xc2\xf3\xa4\x80\x21\x25\xc7\xc4\xe8\x18\xb2\x9f\x5f\x07\xe6\xe7\x39\xea\x9f\xc3\x75\xee\xfc\xba\xb7\xe3\x68\x3d\x81\x53\x54\x1d\xbd\xee\x6c\x99\xda\xd5\x12\x12\xff\xdf\x69\x44\xc4\x04\x0f\x8b\xc7\xd7\xb3\x78\xdc\x08\x77\x7f\x50\x2a\x30\xbc\x2a\xcd\xab\xad\x2d\x6d\x96\x04\x43\x1a\x36\xde\x12\x3f\xdc\x5c\x00\x0d\x8f\x61\x14\x11\x76\x67\xf6\x7a\xfd\xff\xc7\x5e\x60\x68\x07\xce\xd0\x3c\x58\xf0\xf4\x63\xef\x18\xc6\xd4\xe4\xfe\xe8\x58\x3f\x30\x95\x12\xbf\xfc\xf9\xbb\xee\xa3\x5a\xeb\x12\x83\x54\xe8\xd5\xc6\xc8\xb0\x29\x99\x03\xd7\xcb\x43\x5b\x36\x25\xf1\x50\xf0\x08\x87\x44\x34\x5b\x50\xb5\x2c\xae\xce\xaf\x41\x77\x62\x38\xce\x97\x86\x1c\x11\xc1\x5e\x66\x7a\x94\x92\x07\xd4\xf8\x4d\x61\x58\xcb\x92\xfe\xc1\x05\xcc\xa7\xc8\x40\xf2\x18\x41\x4d\x29\x9b\x48\x23\xbb\x2c\x3c\x66\x65\x1d\x16\x8d\xa7\xe4\xf8\x54\x78\x6d\x2d\x8c\x66\x42\xd5\x70\xdd\x09\xdd\x4e\x5a\x8a\x4c\x80\x33\x8b\xa5\xa8\x02\x81\x09\x97\x54\x71\xb1\xa8\xd6\x90\x1e\x32\xe0\x71\x4c\x5b\xc0\x51\x22\xa7\x4b\xf8\x46\x15\xb8\xee\xbc\xc3\x29\x81\x38\x94\x8a\xa8\x66\x4b\xf1\xed\x14\xd5\x54\x4f\x70\x01\x8c\x2b\x9b\x2e\x16\xa8\x41\xbf\x84\x20\x42\xc2\xac\x56\x47\x29\x8d\x3c\x44\xe8\x57\xe1\x30\x6c\x4a\xc0\xa5\x99\x81\x63\x33\x42\xe8\x61\x93\xb7\xd2\xe3\x87\x55\xb2\x78\xc2\x21\x95\x68\xdc\xb6\x80\xc7\x09\x8d\xb0\x7a\x44\xf7\x52\x34\x1a\xef\xc2\x7d\x6c\x86\xaa\xee\x3f\x89\x88\xd2\x36\xde\xa8\xff\x1b\xf7\x31\x50\x65\xd5\x64\xc7\xb3\x19\x89\x3e\x88\x94\x31\xca\xb4\xd9\x6e\x72\x63\xaa\x8e\x81\xde\x0e\x2e\x04\x86\xc8\x14\x25\x51\xab\x25\xbb\x98\x6e\x6d\x3a\x1b\xfc\x49\x58\xef\x62\x5c\xca\x86\xb6\x1b\xd9\x97\x23\xf5\x79\xfa\x8d\xb1\xae\x37\x85\x59\x6b\xf5\xd5\x5f\x07\x2b\xbd\x99\x3a\x37\x69\x97\x78\xb3\xee\x6a\x7b\x58\x73\xd9\x1f\x32\x83\xf2\x69\xe0\x7d\x38\xb3\x0d\xeb\x17\xab\x55\x63\xab\x12\xca\x74\xd4\x0b\xa6\xf8\xa2\x5f\x7e\x4d\x9e\xdf\x0e\x40\x26\x18\xd0\xb1\xbb\xd2\xf1\x23\x2b\x74\xe2\x70\x12\x90\xb9\x84\x9f\xe0\xfb\x1f\xcb\xaf\xdf\xba\xd7\x5f\x52\x81\xf0\x13\xfc\xef\x8f\x4d\xa6\xf2\xfa\x91\xf6\x16\x5a\xe4\x77\x3e\x1d\x8e\x38\xd7\xfb\x84\x0f\xd1\x56\xbe\x5e\xe9\x98\x68\xfd\x52\x09\x04\x64\x6a\xec\x7d\x9c\x46\x20\xf0\x53\x8a\x52\x35\x61\x5a\x4b\xcc\xf1\x3c\x40\x31\xa3\x01\x9e\x07\x01\x4f\x99\x6a\xc3\x7c\x10\x51\x64\xaa\xcd\x3a\x76\x61\x7a\xb8\x0a\xe1\x88\xdc\x91\x33\x93\xdf\xbf\xf4\x78\x11\x6e\x30\xbb\x92\xb5\x1c\xd0\x2e\x62\x6e\xd0\x2c\xc9\x5d\xcf\x35\xd0\xb3\x8e\x58\xd1\xd9\x3d\x73\xb4\x28\xdf\x4f\xe9\xe0\xb3\xb5\x52\x81\x92\xa7\xc2\xf8\x22\xf8\xf9\x0c\x22\x4e\x42\x18\x91\x48\x7b\x0c\xe2\xe5\xe6\x05\xc7\xe8\x6d\x37\x3b\x8f\xab\xb2\x68\x2a\xb9\xaa\xda\x0b\x4f\x08\xcd\x96\x40\x34\x1d\xa8\xb2\x30\xc2\x83\x17\xb2\xfa\x84\xa6\x63\x79\xaa\x16\x3c\x9b\x68\xa9\x78\xa0\xf1\x16\xea\x2f\x29\xd8\xcb\xae\xe6\xd6\x85\x4b\x54\x84\x46\xda\x27\x6d\x63\x65\x0d\xe5\x72\x75\x59\xba\xe8\xb5\x5a\x05\x8d\x37\xcd\x8a\xab\x64\x3d\x4a\x36\xb7\xff\xb6\xde\x98\x57\x97\x08\x6f\x1c\x71\x75\xa7\x70\xeb\x51\x73\xd7\x13\x1b\x28\x6f\x6e\x27\xf6\x27\x63\xea\xee\x1e\xd9\x61\xc3\x83\x69\x3c\x85\x69\xd4\xd6\x4a\x45\xb6\xa5\x8d\x7a\x22\x1e\x94\x63\x0b\xf5\x19\x34\x3b\x84\xd9\xf0\xd6\xc2\xae\x65\x31\x06\x95\xdb\x19\xf8\x71\x67\x9d\x7d\xd1\xe3\x72\x16\x57\x49\xe3\x4b\x6f\xd6\xb3\x7b\xb9\x0e\x90\x9a\xd0\x58\x89\xb9\x3c\xd4\x3a\x08\x21\x6d\xe3\x22\xcc\xd0\x93\x98\x44\x77\x26\xc1\x6a\xe4\x6c\xe0\xc4\x72\xbd\xaf\xc2\x15\x65\xbe\xb2\x48\xa5\x8d\xc8\x3d\x5a\xce\xb5\x56\x16\x30\xd7\x91\x27\x59\x50\x8a\xc1\xb6\x9e\x20\xb7\xad\x27\x48\x48\x14\x19\x06\xe5\xcc\x4f\x6d\x49\x54\x25\x90\x1e\x76\x95\x9e\x66\x2a\x15\x43\x1b\xbb\x9c\x48\x4b\xec\xdb\x4a\x5c\x15\x21\xf3\x6a\x22\x7f\xf9\xf3\x77\xb0\x96\xda\x1d\xf3\xf7\x64\x97\x9e\xdc\xfc\xf7\x15\xac\xf0\x5f\xe1\xbf\xbc\xc1\xcc\x1b\x0c\xcc\x8e\x5d\x34\xb5\xec\x82\x00\x6e\x5c\x6f\x1b\x22\x14\xd9\xa0\xc5\x30\x45\x5b\xe9\x17\x06\xdf\x77\xcc\x68\xc9\xe2\x09\x04\xa9\x10\xc8\x54\xb4\xb0\xc1\x06\x2a\x4d\xe4\x85\x0b\x88\x09\xf1\xcc\xa2\xbb\x1f\x64\xeb\xec\x41\xee\x98\xd2\xdb\x74\x84\x82\xa1\x42\xcf\x70\x64\xde\x7c\x65\xab\x5c\xff\xb7\x08\x4e\x79\x28\xd2\xbb\xef\x8e\x68\x72\xa0\xad\x72\x9c\x6d\x22\x73\x9b\x06\xca\x05\xe7\x2a\xc7\x9a\xd2\xc9\x74\x98\xcf\xcb\x3f\x4e\x50\x6b\x3d\xa7\x92\x2d\x09\x54\xc2\xaf\xe7\x1e\x5c\x8f\x6a\xce\xc5\xdd\x70\x4c\x46\x82\x06\x8d\x6d\xce\x7e\xee\xd6\x9e\x52\x06\xa2\xd1\x9c\xee\x6c\xe8\xd0\x2f\xe5\x39\x91\xf9\x65\xd7\x86\xae\xa8\xac\x88\x2b\xae\xa3\xe1\xe6\x86\x98\x73\x1e\xfd\xea\x09\x4d\xf0\xa1\xec\x15\x65\x94\x41\x56\x99\xda\x56\x69\xbb\xa9\xd1\x0c\x38\x53\x82\x47\xc3\x24\x22\xec\x91\x0b\x18\x1f\xa7\x5a\x33\xe0\x71\x22\xa8\xc4\xcd\x10\x4e\x4f\x3d\x14\x5f\x37\x8f\x24\xa1\x43\x64\x61\xc2\x69\xe3\xa8\x25\x95\xb9\x73\xd2\x04\x66\x24\x4a\x11\x22\x7a\x87\x40\x93\xb3\x84\x0b\xe5\x32\x34\xee\xd8\x0c\x81\x19\x15\x2a\x25\x11\x5c\xdd\xf4\xf5\xeb\x8f\xec\x86\x48\x13\x4d\x26\x81\xf1\xf1\xf0\xb3\x42\xc1\x48\x04\x41\x2a\x15\x8f\x51\x48\xb7\x74\x91\x51\x84\x2e\x4f\x1b\xa7\x4c\xef\x54\xd8\x3e\xc0\x53\xf1\xa7\x0f\xba\xb7\xb0\x5d\x18\xf9\xe6\x57\x87\xec\x00\x12\x5f\xf8\x30\x64\x8b\x90\xcd\xa0\x10\xa6\x69\x9e\x7a\xa9\x3c\xe8\xdf\x3d\xe9\xda\x8c\x13\xc2\xf2\xcc\x40\x2e\xf1\xe4\x29\xeb\x42\x29\xc9\xa4\x05\x1e\x75\x1d\x48\x98\xa3\x40\x7b\x77\x5b\x03\xf9\xbe\x41\x86\x82\x06\xab\x43\x62\xfb\xc6\xd7\xf9\x42\x63\x7b\xee\x2d\x46\xe6\xd9\x5c\x57\xd7\x16\xec\x62\x54\xd3\x93\xfd\xbb\x20\x7a\x58\xf3\x3c\xf7\xf7\xf3\x40\x71\x9f\x9f\x9e\xf0\xf6\xa9\x68\x73\xf2\x6f\x53\x25\x50\x50\x52\x51\x9b\xb1\x8c\xb6\xaa\xb1\xb3\x5e\x7f\x5b\x44\x6a\x89\x40\x37\x19\xec\xed\x82\x47\x0c\xa5\xc2\x10\x16\x24\x8e\xe0\xc4\xbc\xfa\x60\x86\x38\x35\x4f\x34\x1e\x40\xa6\x64\x55\x06\xb1\xa6\xf9\xda\x13\x49\x03\x54\x4a\x93\xd6\xd2\x84\x77\x63\x51\xe5\xeb\x31\x3c\xa2\x6e\xe1\x0b\x6e\xbe\xba\xa2\x91\x40\xd5\xda\x2d\xcd\xdd\x5b\x6e\xaf\x8a\xf5\x1b\xd4\xd6\xd2\xc9\x85\xd4\x30\xf9\x21\x1c\xfe\x94\x28\x2c\x0f\xdd\x37\xe3\xaf\xdf\xca\x77\x7e\xb7\xd1\xdd\x57\xa7\xb7\xb6\xfe\x53\x2e\x3b\xdb\x48\xae\x1b\xee\x0d\xed\x9e\xa4\x2f\x08\x2b\x83\x3d\x57\xc9\xe4\xc1\x7a\x6e\x05\xd9\xcf\xc1\x06\xa2\xb2\x15\xcc\x96\xf7\x26\x5c\x4a\xaa\xa1\xba\xa0\x93\xa9\x02\xc6\xe7\xcd\xd4\x56\x38\xff\xd8\x3d\x25\x5d\x8d\x73\x80\x71\x4e\x24\xfc\xfe\xf6\x41\xe5\x0c\x69\x65\x0d\x33\xf8\x67\xc4\xe6\x52\xe8\x6a\xca\xb2\xea\xd6\x7c\xcb\x75\x0d\xac\x17\x57\x98\x51\x4c\x2d\x45\xb6\x23\x15\xa0\xff\x03\xda\xaa\x3a\xfd\xde\xaa\xb8\xaa\x72\xdd\xa8\x57\x6a\x5b\xe7\x0a\x2f\x4f\xf1\x4e\xf9\xf4\xfc\x03\xba\xa9\x0b\x67\x3c\x5e\xb3\x23\xce\x36\xf2\xc4\x7f\x2b\xf1\xe2\xb6\xd4\x54\x5d\x20\x51\x10\x97\x81\x93\x83\x07\x09\xf1\x65\x23\xb6\xce\x82\x3c\x7c\x35\xd4\xee\xa3\xe0\xb5\xf2\x7b\xe7\xb7\x03\xc8\xb7\xaa\xa6\xa2\x55\xe4\xbb\x66\xca\xde\x16\x11\x54\xd3\x52\x77\xdd\xac\xbe\x8b\xa3\x7b\xab\xe7\xb3\xf5\xb9\x57\x59\x9b\xdf\xc8\x08\xa3\xbd\xb8\xdc\xf9\x33\xbd\x04\x22\x43\x47\xf5\xd6\xa3\x3d\xb5\xe6\xb9\x2a\x13\xca\xab\x1c\xa3\xae\xb4\x2a\xae\x9d\x78\x7e\xfb\x42\x3b\xbf\xf2\xdd\x2a\x3a\xe1\x1f\x9a\x7a\x86\x6e\x7d\xc8\x85\xf1\x92\x5b\x09\x8a\x2f\xaf\x7c\xe9\x2f\xaf\xbe\xf5\x85\x47\x32\x95\xce\x69\xe8\xe5\x7e\x17\x4e\x85\x13\xcd\xf2\x06\xde\x13\x3d\xa0\x7b\xfa\xf3\x47\x36\xb0\x22\xa3\x0a\xa6\x64\x86\xc5\x46\x24\x8c\x29\x83\x44\xd0\x19\x8d\x70\x82\xf2\x67\xcf\x0a\xae\x9b\x0d\x97\xaa\xdc\x07\x54\x5e\x5a\x82\xb4\x21\x71\xaa\xf2\x91\x73\x17\xdc\xb6\xec\xf8\x4c\xf1\xb0\x15\x3f\x9f\xad\xb8\xf2\xd6\xa1\xc3\x4e\xbc\xb3\x9d\x78\xfd\x7a\xe7\x16\xc2\x3d\x4c\xac\xfd\x4f\xac\xe3\x1d\x40\xa3\xdd\x9e\x10\x6b\x1b\xe0\xcd\xfc\x68\x3d\xf2\x3c\x0b\xe2\x98\x33\x0a\xfc\xe7\xd6\x16\xdf\xed\x05\x65\x77\x07\xb8\xd6\x13\xe2\x2d\x78\x4e\x25\x8a\x56\xb8\x3b\xeb\xc0\x7f\x3f\x50\xce\x80\x1e\xf1\x16\xa2\x3c\x28\xe0\xfe\xbc\x52\x8b\xcb\x25\x4c\x4d\x20\x17\x35\x69\x68\x70\x1c\xa9\xe2\xca\xd1\xbb\x1f\xe4\x72\xd2\x2c\x6f\x23\xb0\x25\x27\x60\x4a\x4e\x4e\xc1\x54\x1c\x30\x1e\xa2\x9e\xe6\x9c\x45\x0b\x20\x10\x13\x1b\x92\x1e\x5b\xc3\x1b\x53\xd4\x68\x31\xbb\xbc\x22\x3c\xad\xa6\xd9\x38\x35\x4f\x99\x54\x28\xfb\x8e\x9b\x21\xa3\x96\x89\x25\x73\x29\x8e\xd8\xd5\x7a\xd4\x3e\x2f\x55\x28\xec\x73\x7f\x2d\x2c\x7b\x66\x04\xe9\xc2\x7b\xcb\xfb\xdf\xb2\x02\x8c\x4b\x1e\xe4\x2e\x80\x2b\x69\xeb\x9a\x0b\x74\x37\xf0\x65\xae\xd5\xb5\xe5\x14\xce\x6f\xae\x9c\xdc\x7a\xa9\xd0\x1e\x72\x6f\xaa\x54\x22\xcf\xfa\xfd\x09\x55\xd3\x74\x74\x1a\xf0\xb8\x2f\x49\x2c\x53\x36\x39\x09\x58\xa0\x32\x59\x9d\x38\x59\x9d\x90\x84\x6a\xa2\xee\x5f\xdc\xbf\xf8\x4f\x00\x00\x00\xff\xff\x37\x85\x3c\x52\x76\x8e\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 36470, mode: os.FileMode(420), modTime: time.Unix(1537166106, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": {apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
