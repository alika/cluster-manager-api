// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x7d\x6f\xdb\x38\x9a\xff\xbf\x9f\xe2\x81\xef\x80\x6b\x81\x26\x9e\xed\x61\x0f\x8b\x2c\x16\x7b\xd9\x04\x37\x13\x74\xd2\x09\xc6\xbd\x06\x8b\xeb\xc0\xa0\xa5\xc7\x36\x27\x12\xa9\x21\x29\x7b\x3c\x87\x7e\xf7\x05\x5f\x64\x4b\xb4\x18\xcb\x92\x13\x2b\xad\x07\x18\xd4\x91\x28\xf2\x79\x23\xf9\x7b\x5e\x44\xfd\xff\x2b\x80\x81\x5c\x92\xd9\x0c\xc5\xe0\x02\x06\xef\xce\xbf\x1b\xbc\xd5\xd7\x28\x9b\xf2\xc1\x05\xe8\xfb\x00\x03\x45\x55\x82\xfa\xfe\x55\x92\x4b\x85\x02\x6e\x09\x23\x33\x14\x70\x79\x77\x63\xda\x03\x0c\x16\x28\x24\xe5\x4c\xb7\x5a\x7c\x77\x5e\x74\x04\x30\x88\x38\x53\x24\x52\xeb\xde\x00\x06\x8c\xa4\xa6\xbb\x11\x49\x65\xce\x66\x70\xf5\xe1\xea\xa3\x6b\x0e\x30\xc8\x45\xa2\x6f\xce\x95\xca\xe4\xc5\x70\x38\xa3\x6a\x9e\x4f\xce\x23\x9e\x0e\xa5\x6d\x7f\x16\xb1\x48\x0d\x23\x4b\xcb\x59\x6a\x69\x39\x23\x19\xdd\xf4\x81\x29\xa1\xa6\x17\x12\xa7\x94\xfd\x77\xf9\xc1\x73\xca\x07\xa6\xd9\x97\x57\x00\x5f\x0c\xb7\x32\x9a\x63\x8a\x72\x70\x01\xff\x67\x69\x36\x63\x17\x0c\xe8\x3f\xf4\x13\xbf\x98\xb6\x11\x67\x32\xaf\x34\x26\x59\x96\xd0\x88\x28\xca\xd9\xf0\x57\xc9\xd9\xa6\x6d\x26\x78\x9c\x47\x0d\xdb\x12\x35\x97\x1b\x91\x0f\x49\x46\x87\x8b\x3f\x15\x5c\x96\xa5\x37\xc3\xb2\x30\x35\xf9\x79\x9a\x12\xb1\xd2\xec\xde\xd3\x24\x01\x81\x4a\x50\x5c\x20\xa8\x39\x82\x54\x44\xe5\x12\xf8\x14\x08\xb8\xce\x80\xb0\x18\xa8\x92\xf0\x90\x4f\x30\xe2\x6c\x4a\x67\x30\xe5\x02\x22\xce\x18\x46\x8a\x2e\xa8\x5a\xad\x45\x09\x30\xe0\x19\x0a\x43\xf2\x4d\xac\xc7\xf8\x1e\x95\xb3\x83\x72\x23\x81\x32\xe3\x4c\xa2\xac\xd0\x06\x30\x78\xf7\xdd\x77\xde\x25\x80\x41\x8c\x32\x12\x34\x53\xce\x62\x4a\x1d\x59\x8e\xb4\x42\xc8\xd6\x63\x00\x83\x7f\x17\x38\xd5\x4f\xfc\xdb\x30\xc6\x29\x65\x54\xf7\x20\x0b\x29\x8d\x9d\x2d\x8c\x49\x46\x37\x54\xfe\x8c\x59\xb2\x1a\x54\x3a\xfa\xf2\xaa\xee\xf7\x97\x12\x3b\x19\x11\x24\x45\x85\x62\xa3\x3c\xfb\x9f\xc7\x48\x61\xca\xe6\xdf\xb7\x8f\x32\xf9\x81\xa4\xa8\xf5\xa0\xb5\x52\x68\x42\x71\x98\x20\x24\x9c\x3f\x60\x0c\x79\x76\xee\x77\x41\xcd\x93\xbf\xe5\x28\x56\xfe\x2d\x81\xbf\xe5\x54\xa0\x56\xc9\x94\x24\x12\xbd\xdb\x6a\x95\x19\xc2\xa4\x12\x94\xcd\xca\xec\x7f\x79\xbb\x9b\x1d\xb2\x94\xe7\x12\x23\x81\x6a\xfc\x80\xab\x31\x8d\x77\xf0\xf6\x71\x8e\x30\x32\xed\xdf\xe3\xea\x26\x36\xe6\x74\x79\x77\x03\x97\x51\x84\x52\xf6\x91\x2d\x62\x28\xd3\xdc\x35\x66\xcd\x32\xf3\x1e\x57\x6b\xf6\x48\xff\xd8\x13\x38\xd3\x84\xef\xe6\xe9\x67\xd3\xb0\xb7\xac\xfc\x91\x0b\x3c\x27\x59\xd6\xcc\xf6\x2e\xb3\xac\xc7\x56\x67\x78\x51\xc8\x08\x53\x0d\x78\xf9\x68\x1a\xf6\x5b\x31\x19\x91\x72\xc9\x45\x13\xd5\xdc\xb9\xa6\xfd\x66\x48\xe6\x93\x35\xe5\x0d\x97\xbb\xd2\x13\x7d\xe5\x2d\x13\x7c\x41\xe3\xca\x46\x5d\xc7\x4e\x79\x67\x2a\x1e\x91\xf0\x9a\x2c\xe5\xd0\x48\x67\xb8\x48\x97\x44\xe0\x10\x55\xf4\xe6\xe9\x78\xf3\xee\x22\xcb\x53\x6f\xef\x35\xd7\x73\x66\x76\x7e\xf4\x75\x04\x66\xfd\xab\xb9\xa8\x39\xd8\xbe\x6c\x59\xaa\xc2\x82\x5f\xb6\xc4\x34\x25\x79\xa2\xd1\x56\x69\xd4\x5a\xe8\x50\x7a\x72\xa0\xc8\xcc\x07\x0d\x05\x70\xde\x3c\xfc\x8b\xfb\xb5\xd6\xe2\x20\xc6\x04\x15\x3e\x8e\xec\x6c\x9b\x0d\x92\x7b\x04\xa5\x5d\x9b\xa6\x2f\x00\xa8\x55\x08\xed\x0b\x56\xbb\x9f\x13\x05\x54\x96\xb1\xda\x7f\x48\xd0\x0f\x6a\xc8\x16\xa3\x54\x82\xaf\x7a\x33\xcd\x4f\x68\xed\x84\xd6\x8e\xcb\xca\x09\xad\xf5\x59\x31\x27\xb4\x76\x42\x6b\x87\xe6\xed\x05\xa2\xb5\x06\x2a\xd0\x32\x40\xa9\x76\xdb\xd4\x25\xe4\x8c\xfe\x96\x23\xd0\x58\x23\x02\xca\x62\x1a\x11\x85\xa0\xe6\x54\x82\xeb\xe5\x79\x0c\xeb\x90\x18\x34\xe3\x72\x47\x6c\xd1\x18\x9c\xd4\x93\xa8\x09\x08\xbd\x12\x48\x5e\x04\x08\xad\x10\xfa\x2c\x20\x74\xc2\xe3\x2d\x23\xb0\xf6\x51\x77\xa7\x64\x1e\x4a\xe4\xbe\x75\x1c\x5a\x00\xb7\x72\xd6\x84\xfd\x43\x18\x5c\xbe\xc3\xde\x48\xfc\x6b\x2e\x15\x90\x3d\x0d\xef\xd2\x3c\xe6\x08\xf8\xc0\x63\x94\x7d\xb6\xbe\x0a\xb5\xdf\xa2\xf5\x55\x04\xf0\xe4\xd6\xf7\xaa\x24\x3d\x3f\xd1\x32\x4c\x68\x65\x09\xdc\x23\xdb\x42\x40\x3f\xab\x77\x66\xd7\x97\x6c\x94\x44\xf9\x51\x0f\xd8\x63\xe3\xac\x52\xfa\x2c\xd6\x79\xf2\x67\x4f\xfe\xec\x71\x59\x39\xf9\xb3\x7d\x56\xcc\xc9\x9f\x3d\xf9\xb3\x87\xe6\xed\x05\xfa\xb3\x4f\x0d\x85\xf2\x6c\x26\x48\x8c\xfb\xa2\xa1\x5c\x30\x70\x8f\x02\x37\x5a\x96\xc6\x42\x09\xcc\xe8\x02\x59\x03\xf4\xfe\x3d\xaa\xff\xb5\x1d\x38\xca\x6f\xd8\x94\x8b\xd4\xb4\xe8\x39\x54\x0a\xd2\xfd\x2c\xc0\xe9\x34\xe3\x8e\x1e\x41\x3a\x61\xd7\x13\x76\x3d\x2e\x2b\x27\xec\xda\x67\xc5\x9c\xb0\xeb\x8b\xc0\xae\xed\x6a\x04\x40\xe9\x6b\x4b\x04\x22\x10\x22\xce\xa4\xde\x59\x29\xb3\xe5\xb5\x0e\x13\xbd\xc0\xac\xc0\xce\x20\xad\x52\x98\x66\x0a\x14\x5f\x03\xbf\x26\x41\xda\x2a\x56\xea\x33\xb0\xab\x52\xfa\x2d\x46\x68\xab\x12\x38\x52\x88\x56\x60\x8c\x4c\x51\x92\xc8\xa1\x86\x7e\x25\xbf\x64\xa7\x89\xe6\x59\x4c\x14\x02\x59\x4a\x28\x75\x03\xb9\xc4\xd8\x39\x27\x4d\xec\x55\xf7\x71\x79\x3f\xba\xda\xf4\xd0\x6f\xab\xdd\xa6\xf7\xdb\xb4\xdd\x6d\x39\xf4\xc0\x82\x8d\x9f\xd2\xc6\x86\xf5\x83\x9d\xad\x58\x77\xf2\xb2\xec\xd8\xa3\xf8\x1b\xb6\x64\x4f\x12\xc7\xb1\xe5\x39\x26\x69\xd9\x7c\xf7\xa8\x5f\x8d\x31\x4b\xf8\x0a\x63\xd0\x7d\x40\x34\x27\x42\xed\xac\x64\xfd\x01\x93\xf4\xca\x6f\xd9\x37\x4b\xf5\x48\x7d\x16\x13\xdd\x9e\xf1\x75\xcc\x16\x6f\xee\x29\x9a\x24\x28\x40\xce\x79\x9e\xc4\x30\x41\xa0\x4c\x2a\x92\x24\x18\x03\x67\xbd\x41\xdf\x96\xca\x73\xfd\xa7\xcc\x48\xb4\x0f\x12\x77\x0c\xae\x1f\xed\x1b\x4f\xc5\x7b\x92\xcd\x39\x72\x4f\x98\x80\x9d\xe9\xc3\x4c\xbd\xde\xf0\xe5\x4f\xdf\x3a\x76\xcc\x6c\x80\x0f\x24\xed\x8f\x3a\x4e\x71\xba\x53\x9c\xee\xb8\xac\x9c\xe2\x74\x7d\x56\xcc\x29\x4e\xf7\x22\xe2\x74\xa7\x8c\xd7\xd1\x33\x5e\xa7\x9a\xe9\x1d\x7e\xbb\x83\xd8\xf0\x9a\x0b\x10\xe8\xfe\x7a\x53\x72\x7e\x3e\xb3\x8f\x5a\x04\x4b\xdd\x78\x82\xf6\xf5\xb2\x3c\x52\x74\x81\x40\xcd\xb9\x0d\x06\x3e\xcd\x89\x04\x92\x08\x24\xf1\x0a\x26\x88\x6c\xe3\x46\x2d\xa9\x9a\xdb\xc3\x1e\xb4\x99\x7b\xa1\x6b\xdf\x9d\xba\xb1\xe3\xbf\x08\x7f\xca\xa7\xf5\x5b\xf4\xf9\x7d\x19\x1c\xc7\xdb\xb7\x9e\x47\x25\x5c\xd5\xd6\xee\x5d\x57\x61\x0b\xbd\x2b\x4a\xbd\x3f\x6e\xb5\xec\x9b\x81\x7a\xa4\x7e\x8b\xf6\xe9\x89\xe0\x38\xe6\xb9\x39\x7d\x68\xef\x52\xa5\xc2\xbd\xa6\x9b\x5a\x1d\x20\x13\x9e\x2b\x20\x19\x05\x89\x62\xb1\xab\x56\xe9\x93\xed\xe1\xe5\x14\x29\x39\x82\x5b\x59\x6b\x1b\x65\xad\x0f\x5a\x2a\x91\xb6\x39\xea\xc8\x2f\xfe\xaf\xfc\xfd\xe9\xf6\x9e\x08\x1c\x65\x18\x95\x75\x5b\x6c\xed\x7c\xf2\x2b\x46\x9b\x1d\x4c\xa3\xc1\x0c\x85\xa2\x9e\xb0\x07\x24\x8e\xc7\xcc\xbc\x05\xe2\xe9\xa0\xe8\x88\x08\x41\xaa\x53\x67\x40\x15\xa6\x7e\xfb\x7d\xe4\x6c\x29\xbf\x25\xd1\x9c\x32\xcb\x40\x08\x57\x6d\xce\xd7\x72\xad\x25\x2c\xe7\x34\x9a\xc3\x12\x61\xa9\x1d\x25\xc5\x81\xc4\x06\x33\x95\x72\xcd\x83\x5a\xf5\x08\x4c\xf9\x02\x9f\x96\x59\x5f\x61\x96\xd3\x9f\xcd\xc8\x87\xe2\xd7\xf2\x01\x53\xc1\xd3\x00\xd3\xb5\xeb\x41\x53\xd2\x3a\xd8\xd2\xdc\xdf\xf7\x1e\xc7\xf9\x1b\x66\xb5\x4b\xa5\x1f\x36\xae\xd4\x68\xf4\x83\x73\xa5\x76\xb1\x54\x79\x33\xeb\xf2\xfd\x48\xd3\x7f\xf9\x7e\x64\x60\x01\x8b\xf0\x7b\xc1\xf3\xac\x0b\x3f\x6e\x5b\x69\xc7\x0f\x2b\xf9\x55\x33\x43\x49\xfd\xa2\x61\xfb\xdb\x7f\x8c\x82\x4b\xd0\xad\xe1\xf5\x48\x11\x16\x13\x11\x8f\xaf\xdf\x8d\x17\xef\xde\x02\xaa\xe8\xfc\x4d\xfd\x90\x29\x65\xe3\xdf\x72\xc2\x14\x55\xab\xd0\xd0\x94\x29\x9c\x79\xbe\xe3\xc0\x2e\xe2\xee\xf6\x7f\xbe\x0b\x10\x76\x4b\x19\x4d\xf3\x14\x58\x9e\x4e\x50\x68\x11\x50\x47\xaa\x84\xd7\xce\xab\x92\xda\x90\xff\x40\xc1\x43\x24\x92\xdf\x9f\x94\x44\xf2\x7b\x3b\x12\xb7\x5c\x9c\x6d\x75\x18\x5d\x4b\xb0\x1e\x23\x10\xab\x1e\xc2\xe2\xba\xc1\x06\x8f\x98\xf3\xbd\x35\xe7\xfb\xd1\x35\x51\xe4\x0a\x99\x77\xd4\xdd\xbe\xb6\xec\x42\x83\x6d\x2c\xed\xde\xac\x40\xb6\x03\x78\x9d\xcb\x33\x24\x52\x9d\xfd\xe9\x51\x1b\x23\x0b\x42\x13\x32\xa1\x09\x55\xab\xf1\x1f\x9c\x1d\x62\xc9\x6d\x18\x0e\xf1\x09\x2f\x93\x02\x86\x94\x12\x13\x93\xb7\x50\xfc\x7e\x17\x99\xdf\x4b\xd4\xbf\xe3\x6d\xee\xc2\xba\xb7\xe3\x68\x3d\x81\x53\x54\x13\xbd\x1e\x6c\x99\x3a\xd4\x12\x92\xfe\xf9\x3c\x21\x62\x86\xa7\xc5\xe3\xeb\x59\x3c\xee\x84\x3b\xc6\x32\x17\x18\xdf\x78\xf3\x6a\x6f\x4b\x5b\x64\xd1\x98\xc6\xad\xb7\xc4\x4f\x77\x57\x40\xe3\xb7\x30\x49\x08\x7b\x30\x7b\xbd\xfe\xff\xf3\x20\x32\xb4\x03\x67\x68\x2e\xac\x78\xfe\x79\xf0\x16\xa6\xd4\xe4\x5e\xe9\x54\x5f\x30\x65\x83\xff\xf8\xe7\x4f\xba\x8f\x7a\xad\x4b\x8c\x72\xa1\x57\x1b\x23\xc3\xb6\x64\x8e\x5c\x2f\x8f\x6d\xd9\x94\xa4\x63\xc1\x13\x1c\x13\xd1\x6e\x41\xd5\xb2\xb8\xb9\xbc\x05\xdd\x89\xe1\xb8\x5c\x27\xf9\x9a\x08\xf6\xa6\xd0\xa3\x94\x3c\xa2\xc6\x6f\x8a\xe3\x46\x96\xf4\x3f\x5c\xc0\x72\x8e\x0c\x24\x4f\x4d\xf8\x90\xcd\xa4\x91\x5d\x11\x1e\xb3\xb2\x8e\xab\xc6\xe3\x39\x3e\x35\x5e\x5b\x07\xa3\x99\x51\x35\xde\x76\x42\xf7\x93\x96\x22\x33\xe0\xcc\x62\x29\xaa\x40\x60\xc6\x25\x55\x5c\xac\xea\x35\xa4\x87\x8c\x78\x9a\xd2\x0e\x70\x94\xc8\xf9\x1a\xbe\x51\x05\xae\xbb\xe0\x70\x4a\x20\x8e\xa5\x22\xaa\xdd\x52\x7c\x3f\x47\x35\xd7\x13\x5c\x00\xe3\xca\xa6\xeb\x05\x6a\xd0\x2f\x21\x4a\x90\x30\xab\xd5\x49\x4e\x93\x00\x11\xfa\x56\x3c\x8e\xdb\x12\x70\x6d\x66\xe0\xd4\x8c\x10\x07\xd8\xe4\x9d\xf4\xf8\x69\x93\xac\x9f\x71\x5b\x98\xa5\xb8\x96\x6b\x46\x13\xac\x1f\xd1\xdd\x14\xad\xc6\xbb\x72\x0f\x9b\xa1\xea\xfb\xcf\x12\xa2\xb4\x8d\xb7\xea\xff\xce\x3d\x0c\x54\x59\x35\xd9\xf1\x6c\xae\x6b\x08\x22\x67\x8c\x32\x6d\xb6\xbb\xdc\x98\xba\xb7\xfe\xab\x95\x94\x1d\x66\x5f\x35\x91\xdf\x76\x36\x84\xd3\xfb\xc1\xc5\xd8\xcb\xb3\x77\x1b\x39\x94\x7d\x0f\x79\xfa\xad\xb1\x6e\x30\x39\xde\x68\xf5\xd5\x4f\x97\xab\x0f\x95\xb1\x73\x7b\x82\xb4\x5e\x77\xb5\x3d\x6c\xb9\xec\x8f\x99\x81\x7f\xf8\xc3\x31\x9c\xd9\x96\xc5\xfc\x81\x19\x57\x24\x25\x3d\x4a\xf6\x8b\xa9\xfa\x59\xcd\x0d\xb1\xfb\x64\x33\x03\x9e\xcb\x72\xcb\x55\x69\x7e\x58\x47\xa8\x00\xba\x4c\xe2\xe5\xfd\x08\xca\xad\xea\xa9\xf0\x4a\x60\xf7\xa4\x23\x5c\xc2\x5a\xa1\xc4\x94\xcb\xee\xa4\xc5\x65\x4b\x1b\x11\xd3\x34\x62\x19\x9e\x7d\x5a\x3c\x32\xc3\x88\x4e\xdd\x69\xf0\x9f\x59\xa5\x13\x87\x6d\x4d\xbd\xfa\xdf\xe0\xcf\x7f\xf5\x6f\xbf\x77\xb7\x0d\x6f\x7f\x83\xff\xfa\x6b\x68\x8d\x58\xa7\x66\xdb\x4c\x8a\x26\x09\xdb\x36\xeb\xfe\xf6\x71\x37\x1d\xa6\x3c\x7f\x08\xf1\x36\xe1\x5c\x83\x8a\x90\xfb\x53\x7b\x7b\xb3\x20\x10\x69\xf9\x24\x20\x73\xb3\x38\x4e\xf3\xa4\x0b\xd3\xc6\x5a\xed\xf5\x11\x8a\x05\x8d\xf0\x32\x8a\x78\xce\x54\x17\xe6\xa3\x84\x22\x6b\xad\x5f\x6d\x89\x57\xa6\x87\x9b\x18\x5e\x93\x07\x72\x61\xca\x8c\xae\x03\x8b\x86\x1b\xcc\x6e\x7b\x1d\x07\xb4\x3b\x9e\x1b\xb4\xa8\xb5\x69\xe6\x47\xea\x55\x8f\x58\xd1\x59\x80\x35\x59\xf9\x67\xea\x3b\x5f\xcb\x4e\x0f\x81\x92\xe7\xc2\x38\xae\xf8\xfb\x05\x24\x9c\xc4\x30\x21\x89\x76\x2f\xc5\x9b\xdd\xbb\x93\xbf\xca\x74\x49\x43\x64\xad\x5d\xb6\x50\x09\x58\x20\xde\x6a\x2b\xb1\xda\x0e\x54\x5b\x9f\x15\xd8\xea\x8a\x32\xa9\xb6\x63\x05\x8a\xa7\x02\x88\xcb\xab\x61\x6a\x8d\xb7\xc2\x95\x4d\x47\x81\x40\x6e\x5d\xb8\x46\x45\x68\x72\xa3\x30\xed\x62\x65\x2d\xe5\x72\x73\xed\x7d\x9c\xa2\x5e\x05\xad\x11\x56\xcd\xe7\x2f\x02\x4a\x36\x5f\x2c\xe9\x8c\xe2\x36\x1f\x3e\xd9\x39\xe2\xe6\x3b\x28\x9d\x47\x2d\x7d\x52\xc5\xf8\x7d\xe6\x8b\x2a\xe1\xcc\x5d\xd3\xdd\xa3\x38\x4f\xe2\x64\x1a\xcf\x61\x1a\x8d\xb5\x52\x93\x9a\xeb\xa2\x9e\x84\x47\x7e\x20\xaa\x39\x83\x66\x87\x30\x1b\xde\x56\x8c\xde\x17\x63\x54\xbb\x9d\xc1\x53\xa0\xef\xab\xea\x2a\x69\x02\x2f\xbb\xf5\xec\x6e\x6e\x03\xa4\x36\x34\xd6\x62\xae\x00\xb5\x0e\x42\x48\xdb\xb8\x0a\x33\xf4\x24\x26\xc9\x83\xc9\xc6\x1b\x39\x1b\x38\xb1\x5e\xef\xeb\x70\x85\xcf\x57\x11\xd6\xb6\xe1\xdb\x27\x4b\xd0\x37\x4a\x19\x97\x3a\x0a\x64\x96\xbc\x80\x7d\xe7\x09\x72\xdf\x79\x82\xc4\x44\x91\x71\xe4\xa7\x09\x1b\x4b\xa2\x2e\xdb\xf8\xb8\x8f\xf6\x3c\x53\xa9\x89\x43\xdd\x6e\x22\xad\xb1\x6f\x27\x71\xd5\xe4\x57\xea\x89\xfc\xc7\x3f\x7f\x02\x6b\xa9\xfd\x31\xff\x40\x2a\xf2\xd9\xcd\xff\x58\x91\xad\xf0\x67\xc7\xd6\x47\xea\x06\x23\xc7\x5d\xe3\x58\x15\x01\x14\x41\xad\x1d\xa1\x91\x62\xd0\x6a\x7c\xe4\x25\xc5\x37\xc2\x5c\x1f\x3b\xb2\xb9\x96\xed\x19\x44\xb9\x10\xc8\x54\xb2\xb2\xdc\x52\x69\x62\x4d\x5c\x40\x4a\x48\x60\xfa\x3e\xfc\x45\x76\xce\x71\x95\x5e\x66\x7c\x9f\x4f\x50\x30\x54\x18\x8a\x0e\x76\x88\x51\xd6\x6e\x3c\x7b\x84\xe3\x9e\x22\x5e\x59\x8b\x16\x6b\xc7\xd9\x27\x16\xb9\x6b\xa0\x52\x38\xb2\x76\xac\x39\x9d\xcd\xc7\xe5\xea\x91\xa7\x89\xa6\x6d\x67\xfe\x8a\xb5\x88\x4a\xf8\xe1\x32\xe0\x50\xa0\x5a\x72\xf1\x30\x9e\x92\x89\xa0\x51\x6b\x9b\xb3\x8f\xbb\x45\xcf\xcb\x93\xb5\x9a\xd3\xbd\x8d\x59\x86\xa5\xbc\x24\xb2\xbc\xde\xdb\x98\x59\xed\x2a\xb7\x0d\xc3\xdb\x1b\x62\xc9\x6b\x0d\xab\x27\x36\x51\x0f\xdf\x1d\x2b\x28\x83\xa2\x7e\xba\xab\xd2\x0e\x53\x49\x1c\x71\xa6\x04\x4f\xc6\x59\x42\xd8\x13\x97\xd9\x3e\x4d\x4d\x71\xc4\xd3\x4c\x50\x89\xbb\xb1\xa3\x9e\x7a\x28\xbe\x6e\x1e\x49\x46\xc7\xc8\xe2\x8c\xd3\xd6\xe1\x52\x2a\x4b\xa7\x29\x10\x58\x90\x24\x47\x48\xe8\x03\x02\xcd\x2e\x32\x2e\x94\xcb\x23\xba\x97\xbb\x08\x2c\xa8\x50\x39\x49\xe0\xe6\x6e\xa8\x6f\x7f\x66\x77\x44\x9a\x30\x36\x89\x8c\x73\x89\xbf\x2b\x14\x8c\x24\x10\xe5\x52\xf1\x14\x85\x74\x4b\x17\x99\x24\xe8\xaa\x09\xd2\x9c\x39\xa8\xd2\x35\xb2\x54\xf3\xf9\xb5\xfe\x2d\x6c\x57\x46\xbe\xe5\xd5\xa1\x78\x4d\x8e\xaf\x42\xe0\xb5\x43\xac\x68\x54\x89\x0f\xb5\x07\x82\xb5\xc7\x81\xf4\x4f\xba\x36\xd5\x85\xb0\x7e\xb3\xa5\x94\xf1\x0a\x14\x1f\xa2\x94\x64\xd6\x01\x8f\xba\x0e\x24\x2c\x51\xa0\x3d\x17\xb8\x85\x7c\xbf\x47\x86\x82\x46\x9b\x57\x19\x8f\x8d\xaf\xcb\xe5\xf0\xf6\xed\xcc\x14\x59\x60\x73\xdd\x1c\x6e\x72\x88\x51\x4d\x4f\xf6\xdb\x84\x7a\x58\x73\xbd\xf4\xb1\x71\x50\x3c\xe4\x41\x65\xbc\x7b\xc1\x84\x79\x3f\x75\x57\xbd\x5a\xe4\xa9\xa8\xcb\x58\x46\x5b\xf5\xd8\x59\xaf\xbf\x1d\x42\xc4\x44\xa0\x9b\x0c\xf6\xe4\xea\xd7\x0c\xa5\xc2\x18\x56\x24\x4d\xe0\xcc\xdc\xfa\x64\x86\x38\x37\x57\x34\x1e\x40\xa6\x64\x5d\xea\xb2\xa1\xf9\xda\xf7\xe6\x46\xa8\x94\x26\xad\xa3\x09\x1f\xc6\xa2\xfc\x43\x74\x02\xa2\xee\xe0\x0b\xee\x3e\xe0\xa6\x95\x40\xd5\xd6\xa7\x4a\xfa\xb7\xdc\xde\x54\xab\x8c\xa8\xad\xf8\x94\x2b\xa9\x61\xf2\x63\x38\xfc\x39\x51\x58\x19\xba\xef\xc6\x5f\x3f\xfa\x1f\xbe\xe9\xa2\xbb\xaf\x4e\x6f\x5d\xfd\xa7\x52\x5a\xb8\x95\x5c\x77\x9c\x49\xdf\x3f\x49\x5f\x11\xe6\x83\x3d\x57\x6f\x17\xc0\x7a\x6e\x05\x39\xce\xeb\x37\x44\x15\x2b\x98\x2d\x42\xcf\xb8\x94\x54\x43\x75\x41\x67\x73\x05\x8c\x2f\xdb\xa9\xad\xf2\x96\x6e\xff\x94\x74\x33\x2d\x01\xc6\x25\x91\xf0\xd3\xfb\x47\x95\x33\xa6\xb5\x95\xf6\x10\x9e\x11\xbb\x0b\xf6\xeb\x29\x2b\x6a\xb0\xcb\x2d\xb7\x35\xb0\x5d\xd5\x61\x46\x31\x45\x1c\xc5\x8e\x54\x81\xfe\x8f\x68\xab\xee\x8c\x86\x4e\x55\x5d\xb5\xeb\x46\xb3\x82\xf0\x26\x07\xfd\x05\xaa\x86\xfc\x33\x1e\x1e\xd1\x4d\x53\x38\x13\xf0\x9a\x1d\x71\xb6\x51\x20\xfe\x5b\x8b\x17\xf7\xa5\xa6\xee\x98\x93\x8a\xb8\x0c\x9c\x1c\x3d\x4a\xc8\xa9\x58\xd6\xa7\xa5\xff\x05\xce\xfd\xcc\x0c\xd5\x9f\x67\xd3\xbf\xb5\xfd\xc5\x46\x04\x36\x39\xa5\x1f\xc9\x04\x93\xa3\x04\x04\xca\xef\xc5\x13\x48\x0c\x1d\xf5\x1b\xa3\xf6\x23\xdb\x67\xd2\x4c\xa0\xb1\x76\x8c\xa6\xd2\xba\xdb\x9e\xc6\xa1\xf1\xb7\x0f\x2b\xab\x3d\xa6\xcc\x3b\xa0\x6c\xeb\x68\x32\xef\x50\xb2\xf5\x29\x30\x8f\x1c\x44\xb6\x8b\xfe\xea\xd1\x33\x2f\x6f\xd7\xed\xe6\xb5\x7f\xd8\xc4\x7e\xc2\x43\xd3\xc0\xd0\x9d\x5f\x74\x63\xdc\x73\xda\xed\x62\x69\x8f\x7d\x1a\xae\x3f\x06\x11\x0a\x3e\x15\x2a\x5d\xd2\x38\xc8\xfd\x21\x5c\x36\x27\x9a\xf5\xe9\xe8\x67\x7a\x40\x77\xf5\xef\x9f\xd9\xc8\x8a\x8c\x2a\x98\x93\x05\x56\x1b\x91\x38\xa5\x0c\x32\x41\x17\x34\xc1\x19\xca\xbf\x07\x36\x67\xdd\x6c\xbc\x56\xe5\x31\x1c\x91\xb5\x25\x48\x9b\x70\xa0\xaa\x9c\x97\x70\xa9\x03\xcb\x4e\x30\xbf\x7d\x02\x3a\x27\xa0\x73\x10\xa0\x53\x7b\x2e\xda\x09\xe7\x1c\x0c\xe7\x84\x3e\x69\x71\x0c\xbc\x53\xec\x7d\xe1\x98\x7c\x1f\x8b\x24\xbb\x48\xba\xdf\xe6\x7c\xb8\x77\xd6\xc2\x9f\x9b\xf8\x8a\xed\xec\xe0\x75\xed\xdd\xa4\xfd\xed\xd8\x9a\xff\x81\xa9\x0e\x3c\xf7\x7f\xdb\x3e\x41\x2d\x9f\x96\x7e\xbc\xba\xdf\x39\xa7\x59\x84\x8e\xf5\xc8\xcb\x22\x6f\x61\xde\x07\xe4\x01\xdf\xa1\x9f\x08\xae\xee\x93\x77\x5f\xff\x2a\xb4\x5d\x7c\xd6\x81\xe7\x5c\xa2\xe8\x14\x45\x2a\x3a\x08\x9f\x18\x59\x32\xa3\x27\x3c\x97\xb2\xec\x10\xf1\x70\x0d\x47\x87\xe3\xc6\x4c\xe1\x3f\x17\x0d\x69\x68\xf1\xce\x71\xcd\xe7\x0d\x1e\xfe\x22\xd7\xb3\x75\x7d\x3e\x95\x2d\xef\x04\x53\xde\x79\x0e\xa6\xba\x8f\xf1\x18\xf5\xfa\xc2\x59\xb2\x02\x02\x29\xb1\xe9\xdf\xa9\x35\xbc\x29\xc5\x24\xd6\xb7\x5d\xd0\xea\xbc\x9e\x66\x13\xa2\x7b\xce\x04\xbe\x1f\x09\x2d\x75\x13\x08\x20\x68\x99\x58\x32\xd7\xe2\x48\x5d\x5d\x65\xe3\x97\xa2\x2b\x45\xf4\xee\x93\x74\xc5\x35\x23\x48\x17\xd3\x5b\x9f\x08\x5c\x14\x3b\x5e\xf3\xa8\x74\x24\xb0\xa7\xad\x5b\x2e\xd0\x9d\xc9\x5c\x80\xc0\x5b\xcb\x29\x5c\xde\xdd\x38\xb9\x0d\x72\x91\xe8\xc6\x73\xa5\x32\x79\x31\x1c\xce\xa8\x9a\xe7\x93\xf3\x88\xa7\x43\x49\x52\x99\xb3\xd9\x59\xc4\x22\x55\xc8\xea\xcc\xc9\xea\x8c\x64\x54\x13\xf5\xe5\xd5\x97\x57\xff\x0a\x00\x00\xff\xff\x1e\x95\x81\x18\x0f\xa3\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 41743, mode: os.FileMode(420), modTime: time.Unix(1537427649, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": {apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
