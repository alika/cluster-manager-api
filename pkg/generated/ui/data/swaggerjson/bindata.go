// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x6f\xe3\xb8\x11\xfe\x9e\x5f\x31\x50\x0b\x34\x07\xe4\x65\x2f\x45\x81\x22\x9f\xea\x73\xd0\xad\x91\xcb\x6d\x70\x5e\x5c\x70\xe8\x2d\x8c\x31\x35\x96\x79\x91\x48\x2d\x49\xd9\xeb\x2d\xf2\xdf\x0b\x52\x92\x2d\xc9\x92\xad\x48\xb9\xc4\xb7\xf0\x02\x8b\x38\xe6\xcb\xbc\x3d\x1c\x3e\x1a\x52\xf9\xdf\x09\x80\xa7\x97\x18\x04\xa4\xbc\x6b\xf0\xae\x2e\xde\x79\x67\xf6\x3b\x2e\x66\xd2\xbb\x06\xdb\x0e\xe0\x19\x6e\x42\xb2\xed\xc3\x30\xd1\x86\x14\xdc\xa1\xc0\x80\x14\x0c\xee\x47\xae\x3f\x80\xb7\x20\xa5\xb9\x14\xb6\xd7\xe2\xdd\x45\x3e\x11\x80\xc7\xa4\x30\xc8\xcc\x7a\x36\x00\x4f\x60\xe4\xa6\x1b\x63\xa4\x13\x11\xc0\xf0\xa7\xe1\xc7\xac\x3b\x80\x97\xa8\xd0\x36\xce\x8d\x89\xf5\xf5\xe5\x65\xc0\xcd\x3c\x99\x5e\x30\x19\x5d\xea\xb4\xff\x39\x13\xcc\x5c\xb2\x54\x97\xf3\x28\xd5\xe5\x1c\x63\xbe\x99\x83\x22\xe4\x6e\x16\xf4\x23\x2e\xfe\x55\x1c\x78\xc1\xa5\xe7\xba\x3d\x9d\x00\x3c\x39\x6b\x35\x9b\x53\x44\xda\xbb\x86\xff\xa6\x3a\x3b\xd9\xb9\x01\xf6\x17\x3b\xe2\x93\xeb\xcb\xa4\xd0\x49\xa9\x33\xc6\x71\xc8\x19\x1a\x2e\xc5\xe5\xef\x5a\x8a\x4d\xdf\x58\x49\x3f\x61\x2d\xfb\xa2\x99\xeb\x8d\xcb\x2f\x31\xe6\x97\x8b\xef\x73\x2b\x8b\xde\x0b\xa8\xe8\x4c\xab\x7e\x12\x45\xa8\x56\xd6\xdc\x07\x1e\x86\xa0\xc8\x28\x4e\x0b\x02\x33\x27\xd0\x06\x4d\xa2\x41\xce\x00\x21\x9b\x0c\x50\xf8\xc0\x8d\x86\xc7\x64\x4a\x4c\x8a\x19\x0f\x60\x26\x15\x30\x29\x04\x31\xc3\x17\xdc\xac\xd6\xae\x04\xf0\x64\x4c\xca\xa9\x3c\xf2\xad\x8c\xf7\x64\x32\x1c\x14\x3b\x29\xd2\xb1\x14\x9a\x74\x49\x37\x00\xef\xea\xdd\xbb\xca\x57\x00\x9e\x4f\x9a\x29\x1e\x9b\x0c\x31\x85\x89\x52\x8b\x6c\x40\x70\x6b\x18\x80\xf7\x57\x45\x33\x3b\xe2\x2f\x97\x3e\xcd\xb8\xe0\x76\x06\x9d\x7b\x69\x92\x61\x61\x82\x31\xdf\x68\xf9\x33\xc5\xe1\xca\x2b\x4d\xf4\x74\x52\xf7\xf9\xa9\x60\x4e\x8c\x0a\x23\x32\xa4\x36\xc1\x4b\xff\x55\x0c\xc9\xa1\xec\x7e\x9e\xed\x34\xf2\x27\x8c\xc8\xc6\xc1\x46\x25\x8f\x84\x91\x30\x25\x08\xa5\x7c\x24\x1f\x92\xf8\xa2\x3a\x05\x77\x23\x3f\x27\xa4\x56\xd5\x26\x45\x9f\x13\xae\xc8\x86\x64\x86\xa1\xa6\x4a\xb3\x59\xc5\x4e\x31\x6d\x14\x17\x41\xd1\xfc\xa7\xb3\xfd\xe6\xe0\x52\x5f\x68\x62\x8a\xcc\xe4\x91\x56\x13\xee\xef\xb1\xed\xe3\x9c\x60\xec\xfa\xdf\xd2\x6a\xe4\x3b\x38\x0d\xee\x47\x30\x60\x8c\xb4\x3e\x44\xb3\xd0\x69\x66\xad\x6b\x6d\x5a\x6a\xcc\x2d\xad\xd6\xe6\xe1\xe1\x99\xa7\x28\xb0\x8a\xef\xb7\xe9\x67\xd7\xf1\x60\x4d\xf9\x9a\x28\xba\xc0\x38\x6e\x87\xbd\x41\x1c\x1f\x30\xea\x9c\x2d\x86\x04\x0a\xd3\xc2\x96\x8f\xae\xe3\x61\x07\x26\x46\xad\x97\x52\xb5\x09\xcd\x7d\xd6\xf5\xb0\x0d\xd2\xc9\x74\xad\x79\xcb\x74\x57\x18\xf1\x26\xb6\xad\x3f\x7f\x2a\xec\x5b\x06\x83\xea\x8e\x95\xb3\xb6\xcd\xe0\x4f\x27\x15\xf7\x78\x3e\x85\x64\x68\x37\xad\x48\xfb\x6c\x68\xc4\x0e\x8a\x70\xe3\xba\xfe\x09\x58\x42\x49\xd1\x43\x21\x0a\x0f\x73\x34\xc0\x75\x91\x28\xfc\x4d\x83\x1d\x68\xf9\x82\x4f\xda\x28\xb9\x3a\x9c\xf5\x73\xa4\x0a\x47\xaa\xf0\xf6\x09\xfc\x48\x15\x0e\x34\x30\x47\xaa\xf0\x6d\x51\x85\x38\xd9\x53\x7e\x88\x95\x5c\x70\x6d\x4d\x6d\x43\x15\x86\x8a\xf0\x4f\x41\x15\x4a\x8a\xbe\x0a\x55\x98\x4a\x7f\x0b\x03\x29\x3c\xea\x5a\x0a\xe8\x30\x2a\xa9\x82\xe3\xa5\x1d\x70\xa7\x83\x36\xe6\x77\xc7\xdb\x49\xc1\x7b\xd5\x6a\xd8\x65\xc8\xb5\xe9\x56\x12\x43\xb0\x63\x41\xce\x72\x68\xea\x56\x95\xae\x1f\xad\xc0\x03\x06\x67\x59\xd3\x57\x41\xe7\x91\xf7\x1d\x79\xdf\xdb\x9a\x72\xe4\x7d\x87\x1c\x98\x23\xef\xfb\x26\x78\x5f\xed\x3e\xbc\x39\xec\x7b\xd6\x16\x9c\x28\x01\xd9\x50\xe0\x62\x26\x55\xe4\x36\x5b\xc0\xa9\x4c\x0c\x60\xcc\x41\x93\x5a\xec\xa4\x8b\xef\xc9\xfc\x92\xce\x30\xda\x4c\x70\xe0\x3b\x73\xa6\x70\xa7\x5d\xb9\x4b\xb0\xd6\xe7\x9a\x05\xd5\x36\x27\x8b\x25\x1a\x37\xb8\x1d\x8f\x63\x62\x83\xdb\xf1\x48\x68\x83\x82\xd1\x7b\x25\x93\xb8\x18\xd8\x1c\x5e\x72\xfa\x3b\xb1\x4d\x72\xf2\x62\x65\x43\x63\x78\xc5\xd3\xf9\xa2\x29\xf9\xbe\x02\xd1\xb3\x52\x5b\x7e\xb8\x6c\x57\x8c\x28\x9c\x91\x05\x4e\x93\x7a\xaf\xa4\xf3\x3d\x5f\x46\x6e\x25\xd8\xde\x70\x3a\x36\x28\x7c\x54\xfe\xe4\xe6\x6a\xb2\xb8\x3a\x03\x32\xec\xe2\xbb\x7a\x91\x11\x17\x93\xcf\x09\x0a\xc3\xcd\xaa\x49\x34\x17\x86\x82\x12\x7c\x01\xbc\x14\xa5\x59\xf3\xdf\xaf\x1a\x14\xbb\xe3\x82\x47\x49\x04\x22\x89\xa6\xa4\xac\x0b\x78\xa6\xaa\x86\x53\x9f\x66\x98\x84\x46\x83\x91\xf0\x95\x94\x6c\x52\x11\xbf\xfc\xa1\x2a\xe2\x97\x6e\x2a\x9e\x54\x54\xad\x09\x87\x8b\xb5\x06\x07\x58\x4b\xd2\x5d\x78\x50\xf8\x75\xc2\xbc\x52\x4a\x2a\xc3\xf9\x21\x85\xf3\xc3\xf8\x06\x0d\x0e\x49\x54\x8e\xce\x9f\x8b\xe5\x8c\x29\x75\x41\xda\xc3\x9c\xb3\x39\xa4\x13\xc0\x69\xa2\xcf\x09\xb5\x39\xff\x7e\x27\xc6\x70\x81\x3c\xc4\x29\x0f\xb9\x59\x4d\xbe\x4a\xb1\x9d\xc4\x72\xd1\xa8\x14\x96\xf7\x09\x8f\x1b\x8a\xaa\xfd\xdb\xef\x7c\x55\xc5\x8b\xaa\x80\x53\xa5\x60\xc4\xf4\x0c\xf2\xcf\x57\xcc\x7d\x5e\x92\xfd\xec\x6f\x5b\xd7\x1c\xfb\x54\x8e\x8d\x13\x64\x81\x6a\x13\xd7\x17\x4b\x53\x2f\x95\x42\xa2\x7f\x5c\x84\xa8\x02\x3a\x26\x8f\x6f\x27\x79\xdc\xab\xec\x5a\x4c\xa2\xc8\x1f\x55\xd6\xd5\xb3\x91\xb6\x88\x99\xa5\x8b\x5d\xb7\xc4\x5f\xee\x87\xc0\xfd\x33\x98\x86\x28\x1e\x1d\x8b\xb4\xff\x7f\xf3\x98\xd3\x1d\xa4\x20\xf7\xc5\x4a\x26\xbf\x79\x67\x30\xe3\x61\x48\x3e\xf0\x99\xfd\x02\x50\x11\xfc\xf0\xeb\x07\x3b\x47\x7d\xd4\x35\xb1\x44\xd9\x6c\xe3\x7c\xd8\x55\xcd\x71\x36\xcb\xae\x2d\x9b\x63\x34\x51\x32\xa4\x09\xaa\x6e\x09\xd5\xfa\x62\x34\xb8\x03\x3b\x89\xb3\xb8\x78\x8f\xe6\x14\x95\xf8\x2e\x8f\xa3\xd6\x92\x71\x47\x0c\x7d\xbf\x15\x92\xfe\x2d\x15\x2c\xe7\x24\x40\xcb\x88\xc0\xcc\xb9\x08\xb4\xf3\x1d\x86\x8a\xd0\x5f\x41\xea\x6b\xbf\x0c\x9e\x0a\xb3\xab\xa1\xa5\x3d\x40\x13\x70\x33\xd9\x66\xd9\xcf\xf3\x96\xc1\x00\xa4\x48\xb9\x14\x37\xa0\x28\x96\x9a\x1b\xa9\x56\xf5\x11\xb2\x22\x99\x8c\x22\x6e\x3a\x4b\x9c\xa3\x9e\xaf\xe9\x1b\x37\x90\x4d\xd7\x28\xce\x28\xa2\x89\x36\x68\xba\xa5\xe2\x87\x39\x99\xb9\x5d\xe0\x0a\x84\x34\x4e\xaa\x9d\x11\x96\xa8\x81\x85\x84\x22\x8d\xea\x34\xe1\x61\x83\x12\xb6\xc9\x9f\xf8\x5d\x15\xb8\x71\x2b\x70\xe6\x24\xf8\x0d\x66\xca\x5e\x71\xcc\x50\x65\x85\x04\x12\x12\x4d\xbe\x4d\x92\x4c\x46\x31\x0f\xa9\x5e\x62\xd6\xa8\x3a\xc9\x1b\x66\x83\x9d\xa8\xfa\xf9\xe3\x10\x8d\xc5\x78\xa7\xf9\xef\xb3\xc1\xc0\x4d\x1a\xa6\x54\x5e\xfa\xe8\x7f\x09\x2a\x11\x82\x0b\x0b\xdb\x9a\x85\x5b\x5a\x7d\x35\x8f\x5a\x83\x87\xf1\x50\x91\x4f\xc2\x70\x0c\x7b\xa5\xec\x72\x5d\xb3\xeb\x6a\x68\xae\x76\x36\x26\xe3\x4a\xd9\xb1\x9f\xe4\xa6\x62\x64\xbd\xf4\x1e\x5c\xb7\xb1\x56\xd8\x2a\xfb\xda\xd1\x6c\x13\x37\x8b\xef\x44\xa7\x29\xde\xe5\x5d\x8b\x87\x42\xae\xf7\xf6\xc2\xe0\x6b\xa2\xf2\x3d\x7d\x4c\x6a\xc1\x19\x0d\x18\x93\x89\x30\x7d\x20\xc1\x42\x4e\xc2\xf4\x81\xc3\xd0\xcd\x30\xf2\xe1\x14\x1f\xf1\xda\xd5\x23\x6f\x1a\xc8\x58\x26\x2c\x05\x44\x4f\x81\x29\x16\x32\xa1\x79\x51\xae\x1d\xc3\xb2\x5e\xc7\xd4\x75\x69\xea\x99\xae\xaa\xb7\x57\x33\x16\xe2\x2a\x64\xa0\x48\xcb\x44\x39\x4a\x47\x5f\xae\x21\x94\xe8\xc3\x14\x43\x4b\xbc\xd4\x77\x2d\xe3\xf6\x32\x0b\x38\xab\x0a\x77\xf5\x5c\x5d\xad\xb8\xa1\x12\x91\x96\x6c\xbb\x0a\xaa\x2d\xe4\x36\xa4\xdd\xbc\x9e\xda\x55\x56\x43\x95\xb5\x21\x17\x55\x8a\x9d\x9d\x33\x51\x73\x09\xf4\x4d\x92\x43\x96\x17\x6e\xc8\x20\x0f\x2d\xb5\xef\x83\xb2\x8e\x7e\x19\xdd\x54\xae\x81\xd7\x87\xa0\x73\x21\xad\xe6\xa2\x79\x43\x90\xdd\xbb\x01\x1d\xa9\xd7\xe6\x8e\xda\xe6\x15\x83\xbd\x12\x37\x6f\x1c\xf4\x96\x5a\x78\x79\xc1\x31\x22\xf7\xee\x82\xfd\x58\xaf\x44\x5b\x12\x91\x01\xe4\x08\x8d\x57\x81\x46\xeb\xa8\xd4\x14\xad\xfb\x84\x27\x94\xac\xfa\x88\xd6\xde\x40\xb7\x43\xb8\x0d\x6f\xab\x7a\x55\x75\x23\xab\xdd\xce\x5c\x53\xeb\x13\x84\xad\x7d\xb1\x81\xb9\x97\xb3\xa4\x7b\x24\xd9\x1f\xe7\xac\x71\x9b\x20\x75\xd1\xb1\x96\x73\x35\x68\x9b\x51\x08\x9d\x76\x2e\xd3\x0c\xbb\x88\x31\x7c\xb4\x3f\x53\x62\xe1\xe8\xc4\x3a\xdf\xd7\xf1\x8a\xaa\x5d\x79\xc1\x27\x2d\x6c\xbc\x40\x1d\xb5\xde\x15\xad\x0e\x53\x0a\x13\x35\xd4\x5c\x2b\xa5\xac\xde\x0b\xe4\xa1\xf7\x02\xf1\xd1\xe0\x84\x55\x0b\xe8\xad\x3d\x51\x57\x87\xdf\xb1\x98\x1e\xc6\xaf\xb4\x94\xca\x4f\x88\x2f\xb9\x90\xd6\xdc\xb7\x97\xbb\x6a\x2a\x8f\xf5\x4a\xfe\xf0\xeb\x07\x48\x91\x7a\x38\xf0\x6f\x28\xd2\xbf\x3a\xfc\xef\x74\xf0\x26\x07\x98\xcd\x2f\xf8\xad\xaf\x44\x36\xd6\x54\x6c\x07\xbf\xed\x5a\xdb\xe7\x80\xfb\x6c\x36\x97\x04\x9a\x97\x5d\x2e\x14\x74\x4c\x8c\xcf\xb2\xf7\x52\xfb\x7a\xbf\x24\xfc\x2d\xc2\x50\xe4\x1f\x6b\x13\xcf\x81\x25\x4a\x91\x30\xa1\x7d\x84\xe5\xda\x76\xc0\xa5\x06\xa9\x20\x42\x6c\x58\x45\x8f\xff\xd4\xbd\x8b\xb0\x8b\x4d\x01\xef\x36\x99\x92\x12\x64\xa8\x41\x1c\x2e\xbb\x67\xb6\xda\xfc\xbf\x3b\xe3\x36\x45\xbd\xa8\x91\xdd\x7d\x5f\x48\xa7\x8c\xb4\xd5\xca\x99\xf3\x60\x3e\x29\x1e\x39\x36\xb9\x7b\x2a\x65\x48\x28\x9a\x4e\xa0\x6a\x9b\x77\x95\x8b\xf3\x65\xca\x35\xfc\x67\xd0\xc0\xb5\xc9\x2c\xa5\x7a\x9c\xcc\x70\xaa\x38\xeb\x8c\x83\x74\x78\x96\x0f\x2a\xc5\xd5\x4e\xeb\x2c\xbd\x4e\xd2\x63\x81\xc9\xc7\xd7\xf6\xf2\x12\x75\x31\x15\xa6\xe5\x24\xae\x41\xd1\xe7\x84\x74\x43\x89\x7e\xfb\x0d\xf8\x67\xa2\xb0\xf0\x40\xd7\x1c\x1e\xdf\x15\x04\xaa\x4f\x2a\xb9\x66\x90\xdf\x2a\xea\x10\xb4\x9a\x57\xcc\x0e\x2f\x68\x43\x99\x94\x49\x8e\x45\x69\xf6\xa6\x59\xd3\x9e\xd5\xe3\x11\x71\x5c\x7a\x2c\xdc\x0e\x7f\x5b\xdf\xd6\x5d\x7b\x3e\x3c\xe7\x8e\x74\x39\xd7\xa4\x47\x72\x7a\xa5\x2d\x24\x77\x61\xfe\x0f\xe3\x6d\x7b\x96\xc9\x7e\xc6\xf6\x63\xf5\x12\x7d\x9f\xd8\x7d\x73\x71\xeb\x9b\xab\x0a\xd5\xc9\x4e\x7e\x2d\x5d\x38\x3c\x40\xbf\xce\x60\x7d\xab\xd3\xed\x09\x1f\x6e\xeb\xdd\x99\x71\xa7\x09\xaf\x3d\x53\xdf\xe1\xda\xfd\x47\xf3\xbb\x4f\x5b\x8b\x3d\xb7\x23\xb0\x5d\xa5\x76\x52\x5c\x51\x3a\xa7\x7b\xa5\x9c\xb6\xb9\x91\x49\x5f\x0c\x29\x81\xe1\x8d\x64\x85\x2b\x99\x95\x5b\xa8\x77\x52\x51\x76\x27\x76\xc7\x1f\xdc\xe9\xf1\x67\x72\xac\x3a\x27\x4f\x27\xff\x0f\x00\x00\xff\xff\x60\x3c\x97\x90\xfe\x47\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 18430, mode: os.FileMode(420), modTime: time.Unix(1536706933, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
