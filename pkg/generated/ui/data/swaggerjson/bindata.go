// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\xe3\xb8\x11\xfe\x9e\x5f\x31\x50\x0b\x74\x0b\x24\xf1\xde\x16\x05\x8a\xfd\xd4\xd4\x41\xb7\x46\x2e\x77\x41\x7d\xb8\xa0\xe8\x2d\x8c\x31\x35\x96\x78\x91\x48\x85\x2f\xce\xfa\x8a\xfc\xf7\x82\x94\x64\xbd\x58\xf2\x8b\x94\x4b\xb3\xc5\x2d\xb0\x58\xaf\x49\xce\x0c\xe7\x79\x38\x9c\x19\xfa\x3f\x67\x00\x81\x7e\xc2\x28\x22\x15\x7c\x84\xe0\xc3\xe5\xfb\xe0\xdc\x7d\xc7\xc5\x4a\x06\x1f\xc1\x8d\x03\x04\x86\x9b\x84\xdc\xf8\x34\xb1\xda\x90\x82\x5b\x14\x18\x91\x82\xab\xbb\x99\x9f\x0f\x10\xac\x49\x69\x2e\x85\x9b\xb5\x7e\x7f\x59\x0a\x02\x08\x98\x14\x06\x99\xd9\x4a\x03\x08\x04\xa6\x5e\xdc\x1c\x53\x6d\x45\x04\xd3\xef\xa6\x3f\x14\xd3\x01\x02\xab\x12\x37\x18\x1b\x93\xe9\x8f\x93\x49\xc4\x4d\x6c\x97\x97\x4c\xa6\x13\x9d\xcf\xbf\x60\x82\x99\x09\xcb\x6d\xb9\x48\x73\x5b\x2e\x30\xe3\x95\x0c\x4a\x91\x7b\x29\x18\xa6\x5c\xfc\xb5\xbe\xf0\x92\xcb\xc0\x4f\x7b\x3e\x03\x78\xf6\xbb\xd5\x2c\xa6\x94\x74\xf0\x11\xfe\x9d\xdb\xec\x75\x97\x1b\x70\xff\x71\x2b\x3e\xfb\xb9\x4c\x0a\x6d\x1b\x93\x31\xcb\x12\xce\xd0\x70\x29\x26\x3f\x6b\x29\xaa\xb9\x99\x92\xa1\x65\x47\xce\x45\x13\xeb\xca\xe5\x13\xcc\xf8\x64\xfd\x4d\xb9\xcb\xba\xf7\x22\xaa\x3b\xd3\x99\x6f\xd3\x14\xd5\xc6\x6d\xf7\x9e\x27\x09\x28\x32\x8a\xd3\x9a\xc0\xc4\x04\xda\xa0\xb1\x1a\xe4\x0a\x10\x0a\x61\x80\x22\x04\x6e\x34\x3c\xd8\x25\x31\x29\x56\x3c\x82\x95\x54\xc0\xa4\x10\xc4\x0c\x5f\x73\xb3\xd9\xba\x12\x20\x90\x19\x29\x6f\xf2\x2c\x74\x3a\x3e\x91\x29\x78\x50\x9f\xa4\x48\x67\x52\x68\xd2\x0d\xdb\x00\x82\x0f\xef\xdf\xb7\xbe\x02\x08\x42\xd2\x4c\xf1\xcc\x14\x8c\xa9\x09\xca\x77\xe4\x00\xc1\x9d\x65\x00\xc1\xef\x15\xad\xdc\x8a\xdf\x4d\x42\x5a\x71\xc1\x9d\x04\x5d\x7a\x69\x51\x70\x61\x81\x19\xaf\xac\xfc\x27\x65\xc9\x26\x68\x08\x7a\x3e\xeb\xfa\xfc\x5c\xdb\x4e\x86\x0a\x53\x32\xa4\x2a\xf0\xf2\x3f\xad\x8d\x94\x54\xf6\xff\x9e\xef\xdd\xe4\x77\x98\x92\xc3\xc1\xa1\x52\x22\x61\x24\x2c\x09\x12\x29\x1f\x28\x04\x9b\x5d\xb6\x45\x70\xbf\xf2\xd1\x92\xda\xb4\x87\x14\x3d\x5a\xae\xc8\x41\xb2\xc2\x44\x53\x6b\xd8\x6c\x32\x6f\x98\x36\x8a\x8b\x28\xe8\xdc\xf0\xe7\xda\x86\x0d\x46\xed\xad\x96\xc7\xbd\x5a\xfc\xf9\xac\xe5\xa9\x20\xa4\x84\x0c\xed\xe7\x63\x3e\xa7\xe2\xdf\x1e\x6e\x5d\xfb\xa9\x5f\x01\xbd\x1a\x86\xbe\x15\x86\xdd\xc7\x68\x80\xeb\x3a\xc3\xfe\xa0\xc1\x2d\x74\x44\x0b\x49\x1b\x25\x37\x5f\x1f\xc7\x32\x7b\x20\xe0\x65\x4a\xae\xb9\xbb\x7d\x8e\xe2\xd8\x54\x11\x7e\x15\x1c\x6b\x18\xfa\x2a\x1c\x5b\xca\x70\x87\x03\x39\x3d\xba\x46\x6a\xec\x30\xca\xb6\xc9\xf1\xd2\x0e\xb8\xd5\xd1\x31\xdb\x1f\xce\xb7\xb3\x9a\xf7\xda\xf7\xef\x24\xe1\xda\x0c\xbb\x84\x11\xdc\x5a\x17\xf8\x0b\x59\xfa\xa8\xbb\xf5\x5b\xa7\xf0\x0d\x93\xb3\x69\xe9\x20\x76\xbe\x00\x3c\x55\xd6\x79\x12\x32\x56\x09\x28\x96\x82\x4b\x75\x55\xea\x31\x00\x5c\x4a\x6b\x00\x33\x0e\x9a\xd4\x7a\x6f\x14\xf9\x44\xe6\xc7\x5c\xc2\xac\x12\xf0\xc6\x01\x2b\x0c\x7e\x35\xb0\xb6\x09\x76\xcd\xb4\x2a\xc5\x6d\x9c\xee\xab\xfb\xf9\x3c\x23\x76\x75\x3f\x9f\x2a\x0a\x49\x18\x8e\x49\xdd\x73\xdb\xbb\x46\x2e\x7f\x26\x56\x9d\x0c\x97\x63\x67\xa4\x0c\x6f\xf9\x39\xd0\xc4\x14\x99\xc5\x03\x6d\x16\x3c\x6c\x43\xd0\xba\xb8\xce\x1b\x63\x65\xb1\xf3\x43\x4c\x30\xf7\x52\x6e\x68\x33\x0b\x7d\x8a\x7c\x75\x37\x83\x2b\xc6\x48\xeb\xa0\xd3\x4b\x85\x56\xf4\x53\x9c\xf2\x91\x9a\x73\x5d\x37\xb4\xd9\x6a\xc7\xb6\xf6\x9d\xeb\xb2\x21\x86\x55\xde\x74\x39\x80\xd5\x94\xa7\xfa\xce\xf7\x5c\x44\xf5\x54\x21\x68\x9c\xb0\x1e\x74\xae\xd1\xe0\x94\x44\xab\x24\x39\x15\x1c\x45\x51\xf3\xd4\x1e\xef\x9b\xfb\x98\xb3\x18\x72\x01\xf0\xce\xea\x0b\x42\x6d\x2e\xbe\x39\x07\x32\xec\xf2\x8f\xdd\xa8\xe0\x1a\x79\x82\x4b\x9e\x70\xb3\x59\xfc\x22\xc5\xee\x99\x2c\x55\xa3\x52\xd8\xbc\xe7\x02\x6e\x28\x6d\xcf\xdf\x9f\xfb\xec\x33\xbc\x6e\x0a\x78\x53\x6a\x9b\x58\x9e\x43\xf9\xf9\x03\xf3\x9f\x9f\xc8\x7d\x0e\x77\x77\xd7\x8f\x7a\xae\xc7\xe1\x04\x05\x50\xc7\xe0\x3a\x13\xda\xa0\x60\xf4\x49\x49\x9b\x8d\x81\xb6\x98\x7f\x3a\xb0\xa5\x05\xe0\x66\xc3\xbb\xf4\xcf\x97\x09\xaa\x88\xf6\x02\x9b\x72\xb1\x78\xb4\x28\x8c\xab\x58\x7b\x94\x72\x61\x28\x6a\x84\x72\x80\x20\x8f\xd8\xc5\xf0\x9f\x3e\xf4\x98\x74\xcb\x05\x4f\x6d\x0a\xc2\xa6\x4b\x52\xee\x0a\xe7\x85\x91\x1a\xde\x85\xb4\x42\x9b\x18\x7f\xac\x7e\x21\x25\xfb\x4c\xc4\x2f\xbf\xaa\x89\xf8\x65\x98\x89\xfd\x04\xda\x02\x11\x39\x2e\x68\xf0\xc1\xdb\xe5\x31\x1e\x18\x14\x61\x97\xb2\xa3\x48\x76\xa7\x8a\x76\x83\x55\x14\xce\x5a\xe7\xea\x64\xa6\xad\x33\x36\x26\xb4\xff\x78\x37\x05\x1e\x9e\xc3\x32\x41\xf1\xe0\x83\xa2\xfb\xfb\x53\xe0\x43\x23\x81\x14\x79\xa4\xdc\x48\xfb\x53\x70\x0e\x2b\x9e\x24\x14\x02\x5f\xb9\x2f\x00\x15\xc1\xdf\xfe\xf5\xbd\x93\xd1\x7b\x0f\x58\xe5\xa2\x8d\xf7\xe1\x50\x33\xe7\x85\x94\x1c\x89\xa3\xc0\xfb\xbb\x54\xf0\x14\x93\x00\x2d\x5d\xd5\x17\x73\x11\x69\x6f\x2e\x26\x8a\x30\xdc\xe4\x91\x9f\xc2\x26\x5e\xad\xdc\xa0\x23\xb1\x19\x81\x53\xc4\xcd\x62\x37\x4f\x3b\x0d\x2c\x83\x11\x48\xe1\x6f\xab\x88\x1b\x50\x94\x49\xcd\x8d\x54\x9b\x6e\xf7\x3b\x95\x4c\xa6\x29\x37\x83\x35\xc6\xa8\xe3\xb2\x5b\xe3\x54\x16\xe2\x7a\xd5\x19\x45\xb4\xd0\x06\xcd\xb0\xe8\x77\x1f\x93\x89\xdd\x99\x52\x20\xa4\xf1\x5a\x9d\x44\x78\x42\x0d\x2c\x21\x14\x39\xaa\x4b\xcb\x93\x1e\x23\xdc\x50\xb8\x08\x87\x1a\x70\xed\x49\xbf\xf2\x1a\xc2\x9e\x6d\xca\x51\x38\x16\xac\x72\x4a\x22\x9f\x89\x84\x2e\x2e\x31\x99\x66\x3c\xa1\x6e\x8d\xc5\xa0\x1a\xa4\x6f\x5a\x2c\xf6\xaa\xba\xe5\x67\x09\x1a\xc7\xf1\x41\xf2\xef\x8a\xc5\xc0\x4d\x0e\x53\xae\x2f\x4f\x14\x27\xa0\xac\x10\x2e\xc3\xca\x9b\xbc\x85\xee\xce\x62\xa6\xab\xf2\xcd\xbf\xba\x26\x83\x3c\x71\x91\x72\xcc\x01\x1c\x18\x7d\x66\xd7\xad\x6e\x65\xb7\x0f\x8b\xde\xc1\xe9\xf2\x3b\xfa\xa1\x3d\xc1\xd4\xb7\xb0\x07\x1e\xab\xaa\x23\x56\x75\xc2\x0f\x6a\xac\x1a\xe3\xa3\xb5\xd6\x7a\xec\x9e\xed\xbe\xc5\xee\x3e\x76\x1b\x71\x22\x41\x7e\xa3\xc6\xab\x50\xe3\x68\x54\x3a\xf2\x9e\x31\xf0\x84\x68\x70\xc1\xda\xe5\x16\xf4\xd7\xfd\x87\xab\xb6\xfe\x1b\xef\xea\x7e\xbe\x5b\x36\xb4\x1d\xce\x3a\xab\xf3\xd3\x2d\xaa\x57\xf9\x3d\xe1\xbb\x59\xb9\xfa\x7b\xe9\x30\x21\x14\x69\x69\x15\xdb\xad\xf0\x4e\xb2\xae\x23\x51\xed\x36\xd2\x25\x81\x79\x81\xd8\x69\x4d\x99\x1e\xe7\x69\xe0\x0b\x54\x9d\x27\xed\xa2\x59\xd3\xd5\x04\xf5\x54\xa8\xad\xc4\x7f\x2c\xff\x6f\x75\x34\x86\xfb\x2f\x19\x3c\x8a\x77\xb6\xed\x3b\x41\x6f\x3e\xe0\x26\x84\xc7\x1e\xb6\x43\x0e\xb8\x2b\xa4\xf9\x28\xd0\x7f\xee\x4a\xa5\xa0\x33\x62\x7c\x55\x3c\x0f\x8f\xf5\x7e\x43\xf9\xff\x02\x86\x7a\x7c\xdd\x6e\xf1\x02\x98\x55\x8a\x84\x49\x36\xae\x38\xd1\x6e\x02\x3e\x69\x97\xf6\xa6\x88\x3d\xa7\xe8\xe1\x2f\x7a\x74\x01\xb1\xae\x92\xcf\x1b\xbb\x24\x25\xc8\x50\x8f\x3a\x7c\x3a\x32\x78\x1c\x7b\x01\xec\x0f\xb9\x7d\xa8\xd7\x2c\x8a\x79\x14\x2f\xea\x9d\xa3\x3e\x37\x2c\xa5\x74\xb5\x42\x5f\x23\xa1\x73\x78\x5f\x09\x52\x1e\x1f\xae\xe1\x1f\x57\x3d\x77\x3c\x99\x27\xa9\x1e\x16\x2b\x5c\x2a\xce\x06\xe3\x93\x2f\x2f\xce\x69\x2b\x61\x1f\xc4\xff\xbc\xc9\x3d\x82\xf8\xf2\xe1\xb5\xbd\xec\x8a\x88\x5a\x88\x82\x65\x71\x46\x14\x3d\x5a\xd2\x3d\x65\xdf\xee\x0f\x44\x4e\x64\x6c\x2d\x91\xec\x87\x27\xf4\x85\x48\x3b\x43\x2a\x2d\x83\xf2\xad\x63\x00\x68\x1d\x0f\xe9\x6f\x0f\xb4\xa9\xb4\xcd\xe4\xc3\xb1\xb4\x78\x4f\xef\xbb\x4b\x46\xa4\xa6\xf3\x46\x3a\xba\x0b\xff\xb1\xbe\xed\x7a\xa3\x7b\x7b\xce\x9d\xe9\x66\xac\xc9\xdb\x3c\x7a\xa3\x1d\x25\xf7\x71\xfe\x57\xcb\xa7\x0e\x1c\x93\xc3\x99\xd4\xb7\xed\x17\xdf\x31\xd8\xfd\xdf\xe1\x36\x36\x56\xd5\xba\x22\x83\xfc\xda\x78\x06\x7d\x83\x7e\x5d\xc1\xf6\xad\xd9\xdf\x09\xdf\xdf\x74\xbb\xb3\xc8\x69\x16\xbc\xb3\x4f\xbb\xc7\xb5\x87\xdb\xbd\xfb\x3b\x78\xf5\x99\xbb\x08\xec\x36\xa5\xbd\x16\xdf\x16\x2b\xd3\xb0\x46\x4c\xab\xde\x89\xe9\x8b\x21\x25\x30\xb9\x96\xac\xf6\x50\xdc\x7a\x1b\xbf\x95\x8a\x8a\x97\xfa\x3d\xbf\x47\x1d\xf1\x2b\x52\x67\xce\xd9\xf3\xd9\x7f\x03\x00\x00\xff\xff\x50\xc8\xa3\xca\x1d\x2b\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 11037, mode: os.FileMode(420), modTime: time.Unix(1534879224, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
