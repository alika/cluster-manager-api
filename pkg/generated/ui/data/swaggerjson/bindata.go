// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x4d\x6f\xdc\x38\xd2\xbe\xfb\x57\x14\xf4\xbe\xc0\x26\x40\xec\xce\x64\x6f\xb9\xcc\x1a\x36\x90\x31\x12\x67\x8c\x38\x1b\x1f\x36\x81\xc1\x96\xaa\x25\x8e\x29\x52\x21\x4b\xdd\xdb\xbb\xf0\x7f\x5f\x90\x92\x5a\x94\x5a\xea\x0f\xa9\x37\x6e\x6f\x66\x2e\x13\x8b\x64\x7d\x3e\x2c\x16\x59\x65\xff\xfb\x04\x20\x30\x0b\x16\xc7\xa8\x83\xb7\x10\xbc\x39\x7b\x1d\xbc\xb2\xdf\xb8\x9c\xa9\xe0\x2d\xd8\x71\x80\x80\x38\x09\xb4\xe3\x17\x22\x37\x84\x1a\xae\x99\x64\x31\x6a\x38\xbf\xb9\x72\xf3\x01\x82\x39\x6a\xc3\x95\xb4\xb3\xe6\xaf\xcf\x7e\x29\x09\x01\x04\xa1\x92\xc4\x42\x5a\x51\x03\x08\x24\x4b\x1d\xb9\x6b\x1e\x26\x0c\x05\x7c\x41\x89\xff\xe2\xac\x5c\x01\x10\xe4\x5a\xd8\xf1\x84\x28\x33\x6f\x27\x93\x98\x53\x92\x4f\xcf\x42\x95\x4e\xe6\xed\xa9\x98\x32\xee\x26\xa7\xe5\xd0\xdf\x62\xfb\xc5\x4e\x0e\xdc\x9c\xc7\x13\x80\x47\xa7\x94\x09\x13\x4c\xd1\x04\x6f\xe1\x1f\x85\x68\x96\x7e\x25\xa6\xe3\x65\x57\x7c\x73\x73\x43\x25\x4d\xde\x98\xcc\xb2\x4c\xf0\x90\x11\x57\x72\xf2\x87\x51\xb2\x9e\x9b\x69\x15\xe5\xe1\x8e\x73\x19\x25\xa6\xb6\xec\x84\x65\x7c\x32\xff\x65\x12\x16\x86\xf5\x8d\x14\xa3\x6f\x33\x2b\x7e\x9e\xa6\x4c\x2f\xad\xae\x77\x5c\x08\xd0\x48\x9a\xe3\x1c\x81\x12\x04\x43\x8c\x72\x03\x6a\x06\x0c\x4a\x62\xc0\x64\x04\x9c\x0c\x3c\xe4\x53\x0c\x95\x9c\xf1\x18\x66\x4a\x43\xa8\xa4\xc4\x90\xf8\x9c\xd3\x72\x65\x47\x80\x40\x65\xa8\x9d\xc8\x57\x91\xe5\xf1\x0e\xa9\x74\xb7\x3f\x49\xa3\xc9\x94\x34\x68\x1a\xb2\x01\x04\x6f\x5e\xbf\x6e\x7d\x02\x08\x22\x34\xa1\xe6\x19\x95\xc0\xf0\x08\x15\x1a\x59\x87\xb0\xb5\x65\x00\xc1\xff\x6b\x9c\xd9\x15\xff\x37\x89\x70\xc6\x25\xb7\x14\x4c\x65\xa5\xfb\xb4\x80\xdf\x3d\xcb\x78\x2d\xe5\x27\xcc\xc4\x32\x68\x10\x7a\x3c\xe9\xfa\xf7\xa3\xa7\x4e\xc6\x34\x4b\x91\x50\xd7\xce\x2b\xfe\x6b\x29\x52\x21\xd6\xfd\xff\xd5\x46\x25\x3f\xb2\x14\xad\x1f\xac\x57\x2a\x4f\x90\x82\x29\x82\x50\xea\x01\x23\xc8\xb3\xb3\x36\x09\xee\x56\x7e\xcf\x51\x2f\xdb\x43\x1a\xbf\xe7\x5c\xa3\x75\xc9\x8c\x09\x83\xad\x61\x5a\x66\x4e\x30\x43\x9a\xcb\x38\xe8\x54\xf8\x9b\xa7\x30\xb1\xb8\xad\x6a\xb5\xab\xeb\xc5\xdf\x4e\x5a\x96\x0a\x22\x14\x48\xb8\x19\x8f\xc5\x9c\x1a\x7f\x1b\xb0\x75\xe9\xa6\x3e\x03\x78\x35\x04\x3d\x16\x84\xdd\x25\x8c\x80\x1b\x1f\x61\x7f\x31\x60\x17\x5a\xa0\x45\x68\x48\xab\xe5\xf3\xc3\x58\x96\x6f\x09\x78\x99\x56\x73\x6e\x0f\x99\x9d\x30\x76\xa1\x91\x3d\x0b\x8c\x35\x04\xfd\x21\x18\x9b\xaa\x68\x0d\x03\x05\x3c\xba\x46\x3c\x74\x90\xce\xdb\xe0\x38\xb4\x01\xae\x4d\xbc\x8b\xfa\xc3\xf1\x76\xe2\x59\xaf\x7d\xfe\x4e\x04\x37\x34\xec\x10\x66\x60\xd7\xda\xc0\x5f\xd2\x32\x3b\x9d\xad\x1f\x2c\xc3\x23\x06\x67\x53\xd2\x41\xe8\x3c\x80\x7b\x62\xa4\x4c\x45\xa1\xca\x65\xc3\x3b\x99\x32\xfd\xee\xb9\xe5\x69\x26\x10\x32\x15\x81\x5b\x08\x95\x69\xcf\x00\x4a\xd7\xd9\x9f\x23\x58\x70\x4a\x5c\x2c\x95\x79\x3a\x45\x6d\x5d\x98\xa9\xc8\x00\x97\xc5\x57\x96\xa2\xc9\x58\x88\x45\xfc\x89\x30\xda\xec\xd8\x1b\x15\x5d\x38\x41\x8f\xdb\xab\x95\x98\x3f\x63\xc0\xf1\xd4\x7f\x9a\x70\x93\xa0\x10\x6a\xa1\xb4\x88\xf6\x85\xf3\x6f\x76\x25\xdc\xd9\xa5\x70\x8b\x7a\xce\x43\x84\x53\x58\x14\x78\xce\x90\x11\x30\x88\x35\x22\x71\x19\xdb\x6c\xa0\x42\xf0\x2e\xe0\x75\xb4\x1d\xe9\x63\xc6\x6e\x2d\xe5\xcf\x08\xdd\x5a\xfb\x27\x43\x6e\xea\x63\x76\x8f\x8b\x41\x84\x99\x50\x4b\x8c\xc0\xd2\x80\x30\x61\x9a\xb6\x5e\x11\x7e\x43\x91\x5e\xb4\x67\x1e\x1b\x22\x5b\xa2\x1e\xe3\x35\x41\x7a\x97\xd2\xc2\x0f\x29\x4a\xfa\x31\x77\x84\x57\xbb\x69\xe3\xce\xd8\x3d\x55\x2a\xce\xe5\x27\xd2\xeb\x00\x5b\x6c\xf7\xbb\x0f\x97\x86\x98\x10\xf0\x42\x69\xd0\x58\xfe\xf4\xd2\xdb\x4a\x5f\xe5\xe7\x84\x9b\xe2\x24\x98\x62\x71\x0b\xcc\x43\xe2\x73\x04\xee\x1e\x85\xec\x24\x48\x98\x01\x26\x34\xb2\x68\x09\x53\x44\x59\x6f\xca\x55\x16\x64\x2c\x54\x5a\xf0\x6a\x6f\xce\xab\x82\xff\xb3\xd8\x9d\x6d\x59\x7f\xc6\x53\xa3\x6d\x83\xa7\x39\x3b\x88\x0b\xd1\x7c\xe3\xdc\x98\xf1\x6c\xc2\x7d\x49\xaa\x1f\xa1\x37\xd5\x5b\xc1\xe7\xb5\x99\xc7\x06\xd0\x96\xa8\x3f\x23\x3e\x5b\x26\x78\x1a\x78\xd6\x15\x8c\xbd\xae\xff\xb9\x96\x50\x2e\x05\x2e\x67\x4a\xa7\x0e\x86\xc0\xa6\x2a\x27\x60\x19\x07\x83\x7a\xbe\x11\xac\xef\x90\xbe\x14\x14\xae\x6a\x02\xc7\x0c\xd9\x5a\xe0\x1f\xf6\x22\xb0\xaa\xe2\x78\xa2\xd5\x75\x94\x96\x40\x1d\xd6\xf4\xbc\x5a\x9d\xe9\x6a\xfa\x07\x86\xf5\xd9\x15\x64\xda\xfa\x85\x78\xcb\xcc\x41\xcc\xe9\x7e\x1d\x1c\xd0\x91\x1e\xbc\x6a\x8c\x55\x55\xb3\xcf\x09\x02\xb1\x18\x54\xf1\xa0\x10\x73\xb2\x77\x35\x65\x38\x29\xed\xd9\xce\xb7\x90\x65\x19\xaa\x34\xe5\x34\x98\x63\xc2\x4c\x52\xa5\x46\x96\x65\x49\xae\x97\x1d\x69\xc4\x7b\x43\xac\x95\xcd\xef\xca\xf2\x2e\x41\x4a\x50\x83\xd2\x20\x15\x39\xae\x96\x22\x2c\x98\x81\x50\x20\x93\xb0\x48\x50\xc2\x34\xe7\xa2\x47\x08\x3b\x14\xdd\x47\x43\x05\xb8\x64\xe4\x52\x41\x47\xa6\x47\x4d\x35\xca\x8f\x25\xaa\x2c\x93\x58\x41\x6e\x30\xb2\x37\xec\x50\xa5\x19\x17\xd8\xcd\xb1\x1c\xd4\x83\xf8\x5d\x94\x8b\x1d\xab\x6e\xfa\x99\x60\x64\x31\x3e\x88\xfe\x4d\xb9\x18\x38\x15\x6e\x2a\xf8\x45\xae\x4a\x38\x01\x9d\x4b\xc9\xa5\x85\xad\xc7\xbb\x33\x82\x76\xbd\xe9\x16\x9f\x2e\x91\x18\x17\x57\x84\xe9\x98\x0d\xc8\xa3\x41\xfa\x5d\x5d\xb6\xea\x70\xdd\x36\x2c\xcf\xc4\xfd\xe9\x77\x54\xfa\xba\x39\x14\xc5\xd9\x81\xdb\xaa\xbe\xf1\xd4\x35\xde\xad\x1c\xeb\x92\xef\x68\xae\x5e\xf5\xd8\xa1\xdd\x15\x8f\xab\xa7\xa5\x75\x21\xf6\x04\xc8\x9f\xd0\xf8\x21\xd0\xd8\xd9\x2b\x7e\x29\xe6\xfc\xee\xf6\x36\xc3\x70\x8c\x7b\x34\xc6\x63\x4e\xcd\x62\xb9\x8b\x47\xe7\x77\xb7\x3d\x16\xc4\x50\x23\xdd\x3f\xe0\xf2\x7e\x20\x18\x2c\xa7\x5b\x47\xe5\x3d\x2e\xaf\x8a\xf0\x77\x7e\x73\x05\xe7\x61\x88\xc6\x6c\xe4\xca\xdc\x14\xcb\x7c\x24\xe7\x82\xd7\x7b\x5c\xae\xb8\xb3\x36\xf7\x41\x3e\xbc\x66\x6c\xb4\x13\x51\x46\x99\xe2\x72\x78\x2a\x62\x85\x70\x3a\xad\x28\x75\xda\x34\x37\xa8\x07\xef\x38\xcb\xa7\x22\x50\x95\x6e\x2a\xbe\xdd\xec\x14\xcb\x29\x19\xe5\xba\xdf\xcf\x73\x4a\xe0\xa1\x74\x9a\xe5\xd8\xa1\xe0\x30\xb7\x99\x78\x8c\xc7\x0e\x19\xb7\xca\xe6\x95\x55\xf1\xbd\x37\x15\x29\x0a\x0c\x6b\xa9\xce\xb0\x32\xf0\x4d\x49\xcd\x61\xb7\xdf\x03\x15\x53\x30\x19\x86\x7c\x56\xf6\x5c\x8d\xb5\x7e\x83\xf9\x53\xb8\xc1\x0f\xed\x2b\x15\x4f\x21\xcc\xb5\x46\x49\x62\x09\x94\x70\x63\x27\xb0\x85\xb1\x19\x77\xca\x58\x4f\x9c\x72\x23\x07\xf1\xc8\x2a\x92\x6c\xd9\xe7\x7d\x9e\xf0\x84\x62\x8b\x03\xc9\x54\x9d\x50\xfd\x22\x9d\xdf\xf5\x4b\x34\x08\x1b\xc5\x85\x77\x04\x28\xd4\x43\x1f\x24\xa6\x4a\xd9\x8b\x52\x53\x9b\xe2\x06\xdb\x3b\xbc\xe9\xfe\x55\x6d\x60\x9b\xdb\x7b\xdb\x17\xa6\x25\x7e\x34\x7e\xcf\xd1\xf4\x04\xe3\xf5\x8e\xc4\x3d\xfd\xe4\xe5\x77\xfd\xee\x19\x9e\xa9\x74\x74\x66\x1d\x9f\x53\x2e\x54\x2e\xa2\x86\x2f\xaa\xa7\x79\xb5\xec\x8b\xa3\x23\x32\xc2\xdb\x46\x16\xb8\xee\xde\xfd\x6c\xdb\x7a\x31\x3f\x3e\xeb\xde\xb1\x22\x42\xae\x5e\xd3\xc0\xe4\x2e\x69\x9a\xe5\xa2\x27\x1a\xa2\x31\x2c\x1e\x11\x93\x4b\x02\x06\x16\xa8\x11\x62\x3e\xc7\x21\x01\xe5\x1d\x4a\xd4\x3c\xac\xcb\x27\x4f\x7d\xc6\x74\x97\x07\xfb\xef\x44\x45\xad\xee\x10\x5c\x8b\x0a\x9e\x6b\x5b\xb4\x6c\xdd\x77\xaf\x7b\x1a\x48\x75\x4b\xa1\x31\x53\xa3\x05\x28\x6a\x62\xdb\xde\xe2\xc2\x96\x8b\xc6\xf0\x72\xde\xea\xe4\x32\x67\x22\x5f\x7f\xdf\xdd\x9d\x0d\xd3\x58\x6e\x06\x17\x92\xe1\x85\x44\x43\x18\xc1\x92\xa5\x02\x4e\xdd\xd0\x17\xc7\xe2\xcc\x7d\x09\x95\x24\x94\x64\x5e\xf6\x48\x33\xe2\x99\x6c\x5d\xeb\x8a\xda\xa8\x9d\xf2\xa9\x76\xd3\x31\x6d\x97\x6d\xe8\x29\x7e\x95\x61\x1c\xbf\xbf\x7f\xfa\xb0\x91\xdd\xee\xd6\x5c\x6f\xe6\x3b\xbe\xb0\x7e\xd5\xe8\x6c\xae\xee\x72\x66\x69\x6c\x2a\xb1\x29\x57\xe9\xdd\x3d\x4c\x6b\xd6\x2c\x6a\x05\x9c\x30\x6d\xcf\x1f\x9a\xde\x78\x24\x1e\xbb\x55\xfa\xd0\x6e\x0d\x1d\xe3\xbb\xff\x39\xbf\x8d\xcd\x31\xbd\x47\xe6\xad\x99\x26\x44\x6e\xf2\x40\x0f\xf8\x5d\x83\x23\x83\xd0\xf0\x23\xf4\xa3\x7f\x6c\xce\x90\xc2\xa2\x6f\x63\xd5\xe8\xfa\x55\x7e\x40\x36\x47\xc0\x34\xa3\xa5\x9d\xe3\xfa\x5e\x80\x09\x51\x9f\xb8\x23\xf5\x1f\x0d\xc1\x4c\x45\xbd\xbb\x95\x4b\xc2\xb8\x51\x2f\x6d\x80\x90\x4b\xfa\xeb\x9b\x3e\xd3\x6c\xe9\xe0\x7d\xa1\x74\xcb\x0e\x2f\x87\x19\xa2\x51\xfd\x3c\xc2\xad\x38\xf3\x92\x62\x7b\xfd\xfb\xfd\xfd\xc6\x73\xfe\x9e\x77\x56\x4a\xa1\x7f\x37\x6e\x2f\xb8\x6e\xae\xa1\xf9\x33\xf7\xf7\x40\xb3\x0b\xf2\xbf\x9b\x0e\xac\x4b\xb7\xa2\xda\x08\x30\x7e\x67\x6e\xe3\xea\xb5\x93\x1e\xa3\x91\xb4\xdb\xd5\x66\x57\x65\xaa\x86\x03\x1b\x3e\x3c\xc5\xb6\x2a\xd4\xd5\x68\x34\x26\x4c\xb0\xf0\x81\xc5\x58\xfe\xba\xe9\xc7\x83\x3c\xa7\x15\x24\xa1\x14\x7a\x43\x46\xde\x99\xf7\xef\xd1\x22\xd1\xba\xe3\xf5\xbc\x10\xb8\x04\xf9\x16\x89\xb8\x8c\x7b\xde\xf0\xba\xee\x3a\x43\xe4\xf0\x32\xe8\x6e\x61\xea\x09\x5d\x12\xed\xba\x39\xbb\x1b\xee\x8e\x2f\x48\x3e\xdb\xe7\x83\x8e\x6e\xa9\x11\xd6\xed\x49\xc2\x76\xeb\x50\xa8\x4a\x04\x4e\x10\x30\x89\x7b\xef\x9a\x62\xd5\xb6\x87\x11\xf4\xbd\x01\x1f\x2c\x07\xea\x67\xcd\x7b\x58\x8f\xee\x01\x91\xca\x5d\xc7\x1c\x67\xd7\x11\x6f\xc3\x64\xd5\xa9\x38\x81\x3c\x8b\x35\x8b\xb0\xf7\xed\xa2\x72\xe9\x82\x47\xbd\xda\x1f\x22\x13\x2f\x4d\xb3\xfa\x65\xc9\x53\xcb\xb0\xfc\xfa\xeb\x57\x79\x5b\x98\x8c\x13\x24\x36\x5d\x6c\x4c\x62\x51\xca\x25\x64\x9a\xcf\xb9\xc0\x18\xcd\xaf\x3d\x0f\xf9\x76\xda\xbd\x97\x55\x8e\xbe\x80\xed\xd8\x47\xde\x81\x04\xab\xb3\x0d\xf3\xe4\x61\x81\x4d\x85\x3b\xc2\x0a\x75\x06\xa5\x1a\x9d\xdd\x99\x7f\x06\xb3\x3d\x83\xd9\xaa\x7b\x0f\xff\x49\xa8\x25\x13\x97\x2a\xf4\xda\xf7\x5a\x1d\x8b\xd7\x4a\x63\xd9\x3f\xb9\xe1\x2f\x4e\xf4\xff\x91\x08\xc3\x52\x93\xcb\xf8\x34\x94\x21\x55\x67\xe2\x69\xe9\xd3\x53\x96\x71\x2b\xe6\xe3\xc9\xe3\xc9\x7f\x02\x00\x00\xff\xff\xa6\x1c\xfa\xbd\xff\x42\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 17151, mode: os.FileMode(420), modTime: time.Unix(1528739477, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
