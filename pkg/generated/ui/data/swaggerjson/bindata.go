// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x8f\xdb\xb8\x11\xfe\xbe\xbf\x62\xa0\x16\x68\x0a\xec\xae\x73\x29\x0a\x14\xf9\xd4\xad\x17\x4d\x8d\xdc\xde\x2d\xea\xc3\x2d\x8a\x5e\x60\x8c\xa9\xb1\xc4\x5b\x89\x54\xf8\xe2\x8d\xae\xd8\xff\x5e\x90\x92\xac\x17\x4b\x7e\x91\x72\xe9\xa6\xb8\x00\x41\x1c\x93\x9c\x19\xce\xf3\x70\x38\x33\xf4\x7f\x2e\x00\x02\xfd\x84\x51\x44\x2a\x78\x0b\xc1\x9b\xeb\xd7\xc1\xa5\xfb\x8e\x8b\x8d\x0c\xde\x82\x1b\x07\x08\x0c\x37\x09\xb9\xf1\x79\x62\xb5\x21\x05\x77\x28\x30\x22\x05\x37\xf7\x0b\x3f\x1f\x20\xd8\x92\xd2\x5c\x0a\x37\x6b\xfb\xfa\xba\x12\x04\x10\x30\x29\x0c\x32\xb3\x93\x06\x10\x08\x4c\xbd\xb8\x25\xa6\xda\x8a\x08\xe6\xdf\xcd\x7f\x28\xa7\x03\x04\x56\x25\x6e\x30\x36\x26\xd3\x6f\x67\xb3\x88\x9b\xd8\xae\xaf\x99\x4c\x67\xba\x98\x7f\xc5\x04\x33\x33\x56\xd8\x72\x95\x16\xb6\x5c\x61\xc6\x6b\x19\x94\x22\xf7\x52\x30\x4c\xb9\xf8\x6b\x73\xe1\x35\x97\x81\x9f\xf6\x7c\x01\xf0\xec\x77\xab\x59\x4c\x29\xe9\xe0\x2d\xfc\xbb\xb0\xd9\xeb\xae\x36\xe0\xfe\xe3\x56\x7c\xf0\x73\x99\x14\xda\xb6\x26\x63\x96\x25\x9c\xa1\xe1\x52\xcc\x7e\xd6\x52\xd4\x73\x33\x25\x43\xcb\x4e\x9c\x8b\x26\xd6\xb5\xcb\x67\x98\xf1\xd9\xf6\x9b\x6a\x97\x4d\xef\x45\xd4\x74\xa6\x33\xdf\xa6\x29\xaa\xdc\x6d\xf7\x81\x27\x09\x28\x32\x8a\xd3\x96\xc0\xc4\x04\xda\xa0\xb1\x1a\xe4\x06\x10\x4a\x61\x80\x22\x04\x6e\x34\x3c\xda\x35\x31\x29\x36\x3c\x82\x8d\x54\xc0\xa4\x10\xc4\x0c\xdf\x72\x93\xef\x5c\x09\x10\xc8\x8c\x94\x37\x79\x11\x3a\x1d\xef\xc8\x94\x3c\x68\x4e\x52\xa4\x33\x29\x34\xe9\x96\x6d\x00\xc1\x9b\xd7\xaf\x3b\x5f\x01\x04\x21\x69\xa6\x78\x66\x4a\xc6\x34\x04\x15\x3b\x72\x80\xe0\xde\x32\x80\xe0\xf7\x8a\x36\x6e\xc5\xef\x66\x21\x6d\xb8\xe0\x4e\x82\xae\xbc\xb4\x2a\xb9\xb0\xc2\x8c\xd7\x56\xfe\x93\xb2\x24\x0f\x5a\x82\x9e\x2f\xfa\x3e\x3f\x37\xb6\x93\xa1\xc2\x94\x0c\xa9\x1a\xbc\xe2\x4f\x67\x23\x15\x95\xfd\xbf\x97\x07\x37\xf9\x1d\xa6\xe4\x70\x70\xa8\x54\x48\x18\x09\x6b\x82\x44\xca\x47\x0a\xc1\x66\xd7\x5d\x11\xdc\xaf\xfc\x68\x49\xe5\xdd\x21\x45\x1f\x2d\x57\xe4\x20\xd9\x60\xa2\xa9\x33\x6c\xf2\xcc\x1b\xa6\x8d\xe2\x22\x0a\x7a\x37\xfc\xa1\xb1\x61\x83\x51\x77\xab\xd5\x71\xaf\x17\x7f\xb8\xe8\x78\x2a\x08\x29\x21\x43\x87\xf9\x58\xcc\xa9\xf9\x77\x80\x5b\xb7\x7e\xea\x57\x40\xaf\x96\xa1\x2f\x85\x61\x0f\x31\x1a\xe0\xba\xc9\xb0\x3f\x68\x70\x0b\x1d\xd1\x42\xd2\x46\xc9\xfc\xeb\xe3\x58\x66\x8f\x04\xbc\x4c\xc9\x2d\x77\xb7\xcf\x49\x1c\x9b\x2b\xc2\xaf\x82\x63\x2d\x43\xbf\x08\xc7\xd6\x32\xdc\xe3\x40\x41\x8f\xbe\x91\x06\x3b\x8c\xb2\x5d\x72\x7c\x6e\x07\xdc\xe9\xe8\x94\xed\x8f\xe7\xdb\x45\xc3\x7b\xdd\xfb\x77\x96\x70\x6d\xc6\x5d\xc2\x08\x6e\xad\x0b\xfc\xa5\x2c\x7d\xd2\xdd\xfa\xad\x53\xf8\x82\xc9\xd9\xb6\x74\x14\x3b\x3f\x03\x3c\x75\xd6\x79\x16\x32\x56\x09\x28\x97\x82\x4b\x75\x55\xea\x31\x00\x5c\x4b\x6b\x00\x33\x0e\x9a\xd4\xf6\x60\x14\x79\x47\xe6\xc7\x42\xc2\xa2\x16\xf0\xc2\x01\x2b\x0d\xfe\x62\x60\xed\x12\xec\x86\x69\x75\x8a\xdb\x3a\xdd\x37\x0f\xcb\x65\x46\xec\xe6\x61\x39\x57\x14\x92\x30\x1c\x93\xa6\xe7\x76\x77\x8d\x5c\xff\x4c\xac\x3e\x19\x2e\xc7\xce\x48\x19\xde\xf1\x73\xa0\x89\x29\x32\xab\x47\xca\x57\x3c\xec\x42\xd0\xb9\xb8\x2e\x5b\x63\x55\xb1\xf3\x43\x4c\xb0\xf4\x52\xde\x53\xbe\x08\x7d\x8a\x7c\x73\xbf\x80\x1b\xc6\x48\xeb\xa0\xd7\x4b\xa5\x56\xf4\x53\x9c\xf2\x89\x9a\x0b\x5d\xef\x29\xdf\x69\xc7\xae\xf6\xbd\xeb\xb2\x25\x86\xd5\xde\x74\x39\x80\xd5\x54\xa4\xfa\xce\xf7\x5c\x44\xcd\x54\x21\x68\x9d\xb0\x01\x74\x6e\xd1\xe0\x9c\x44\xa7\x24\x39\x17\x1c\x45\x51\xfb\xd4\x9e\xee\x9b\x87\x98\xb3\x18\x0a\x01\xf0\xca\xea\x2b\x42\x6d\xae\xbe\xb9\x04\x32\xec\xfa\x8f\xfd\xa8\xe0\x16\x79\x82\x6b\x9e\x70\x93\xaf\x7e\x91\x62\xff\x4c\x56\xaa\x51\x29\x6c\xdf\x73\x01\x37\x94\x76\xe7\x1f\xce\x7d\x0e\x19\xde\x34\x05\xbc\x29\x8d\x4d\xac\x2f\xa1\xfa\xfc\x86\xf9\xcf\x4f\xe4\x3e\x87\xfb\xbb\x1b\x46\xbd\xd0\xe3\x70\x82\x12\xa8\x53\x70\x5d\x08\x6d\x50\x30\x7a\xa7\xa4\xcd\xa6\x40\x5b\xce\x3f\x1f\xd8\xca\x02\x70\xb3\xe1\x55\xfa\xe7\xeb\x04\x55\x44\x07\x81\x4d\xb9\x58\x7d\xb4\x28\x8c\xab\x58\x07\x94\x72\x61\x28\x6a\x85\x72\x80\xa0\x88\xd8\xe5\xf0\x9f\xde\x0c\x98\x74\xc7\x05\x4f\x6d\x0a\xc2\xa6\x6b\x52\xee\x0a\xe7\xa5\x91\x1a\x5e\x85\xb4\x41\x9b\x18\x7f\xac\x7e\x21\x25\x87\x4c\xc4\x4f\xbf\xaa\x89\xf8\x69\x9c\x89\xc3\x04\xda\x01\x11\x39\x2e\x68\xf0\xc1\xdb\xe5\x31\x1e\x18\x14\x61\x9f\xb2\x93\x48\x76\xaf\xca\x76\x83\x55\x14\x2e\x3a\xe7\xea\x6c\xa6\x6d\x33\x36\x25\xb4\xff\x78\x3f\x07\x1e\x5e\xc2\x3a\x41\xf1\xe8\x83\xa2\xfb\xfb\x53\xe0\x43\x23\x81\x14\x45\xa4\xcc\xa5\xfd\x29\xb8\x84\x0d\x4f\x12\x0a\x81\x6f\xdc\x17\x80\x8a\xe0\x6f\xff\xfa\xde\xc9\x18\xbc\x07\xac\x72\xd1\xc6\xfb\x70\xac\x99\xcb\x52\x4a\x81\xc4\x49\xe0\xfd\x5d\x2a\x78\x8a\x49\x80\x96\xae\xea\x8b\xb9\x88\xb4\x37\x17\x13\x45\x18\xe6\x45\xe4\xa7\xb0\x8d\x57\x27\x37\xe8\x49\x6c\x26\xe0\x14\x71\xb3\xda\xcf\xd3\xce\x03\xcb\x60\x04\x52\xf8\xdb\x2a\xe2\x06\x14\x65\x52\x73\x23\x55\xde\xef\x7e\xa7\x92\xc9\x34\xe5\x66\xb4\xc6\x18\x75\x5c\x75\x6b\x9c\xca\x52\xdc\xa0\x3a\xa3\x88\x56\xda\xa0\x19\x17\xfd\x1e\x62\x32\xb1\x3b\x53\x0a\x84\x34\x5e\xab\x93\x08\x4f\xa8\x81\x25\x84\xa2\x40\x75\x6d\x79\x32\x60\x84\x1b\x0a\x57\xe1\x58\x03\x6e\x3d\xe9\x37\x5e\x43\x38\xb0\x4d\x39\x09\xc7\x92\x55\x4e\x49\xe4\x33\x91\xd0\xc5\x25\x26\xd3\x8c\x27\xd4\xaf\xb1\x1c\x54\xa3\xf4\xcd\xcb\xc5\x5e\x55\xbf\xfc\x2c\x41\xe3\x38\x3e\x4a\xfe\x7d\xb9\x18\xb8\x29\x60\x2a\xf4\x15\x89\xe2\x0c\x94\x15\xc2\x65\x58\x45\x93\xb7\xd4\xdd\x5b\xcc\xf4\x55\xbe\xc5\x57\xb7\x64\x90\x27\x2e\x52\x4e\x39\x80\x23\xa3\xcf\xe2\xb6\xd3\xad\xec\xf7\x61\xd9\x3b\x38\x5f\x7e\x4f\x3f\x74\x20\x98\xfa\x16\xf6\xc8\x63\x55\x77\xc4\xea\x4e\xf8\x51\x8d\x75\x63\x7c\xb2\xd6\x46\x8f\xdd\xb3\xdd\xb7\xd8\xdd\xc7\x7e\x23\xce\x24\xc8\x6f\xd4\xf8\x22\xd4\x38\x19\x95\x9e\xbc\x67\x0a\x3c\x21\x1a\x5c\xb1\x6e\xb9\x05\xc3\x75\xff\xf1\xaa\x6d\xf8\xc6\xbb\x79\x58\xee\x97\x0d\x5d\x87\xb3\xde\xea\xfc\x7c\x8b\x9a\x55\xfe\x40\xf8\x6e\x57\xae\xfe\x5e\x3a\x4e\x08\x45\x5a\x5a\xc5\xf6\x2b\xbc\xb3\xac\xeb\x49\x54\xfb\x8d\x74\x49\x60\x51\x20\xf6\x5a\x53\xa5\xc7\x45\x1a\xf8\x19\xaa\xce\xb3\x76\xd1\xae\xe9\x1a\x82\x06\x2a\xd4\x4e\xe2\x3f\x95\xff\x77\x3a\x9a\xc2\xfd\xcf\x19\x3c\xca\x77\xb6\xdd\x3b\xc1\x60\x3e\xe0\x26\x84\xa7\x1e\xb6\x63\x0e\xb8\x2f\xa5\xf9\x28\x30\x7c\xee\x2a\xa5\xa0\x33\x62\x7c\x53\x3e\x0f\x4f\xf5\x7e\x4b\xf9\xff\x02\x86\x66\x7c\xdd\x6d\xf1\x0a\x98\x55\x8a\x84\x49\x72\x57\x9c\x68\x37\x01\x9f\xb4\x4b\x7b\x53\xc4\x81\x53\xf4\xf8\x17\x3d\xb9\x80\xd8\xd6\xc9\xe7\x7b\xbb\x26\x25\xc8\xd0\x80\x3a\x7c\x3a\x31\x78\x9c\x7a\x01\x1c\x0e\xb9\x43\xa8\x37\x2c\x8a\x79\x14\x27\xf9\xaa\xec\x1d\x25\x83\x78\xac\xa5\x74\xa5\xc2\x50\x1f\xa1\x77\xf8\x50\x05\x52\x9d\x1e\xae\xe1\x1f\x37\x03\x57\x3c\x99\x27\xa9\x1e\x57\x1b\x5c\x2b\xce\x46\xc3\x53\x2c\x2f\x8f\x69\x27\x5f\x1f\x45\xff\xa2\xc7\x3d\x81\xf7\xf2\xf1\x4b\x7b\xd9\xd5\x10\x8d\x08\x05\xeb\xf2\x88\x28\xfa\x68\x49\x0f\x54\x7d\xfb\xbf\x0f\x39\x93\xb0\x8d\x3c\x72\x18\x9e\xd0\xd7\x21\xdd\x04\xa9\xb2\x0c\xaa\xa7\x8e\x11\xa0\xf5\xbc\xa3\xbf\x3c\xd0\xe6\xd2\xb6\x73\x0f\xc7\xd2\xf2\x39\x7d\xe8\x2a\x99\x90\x99\x2e\x5b\xd9\xe8\x3e\xfc\xa7\xfa\xb6\xef\x89\xee\xe5\x39\x77\xa1\xdb\xb1\xa6\xe8\xf2\xe8\x5c\x3b\x4a\x1e\xe2\xfc\xaf\x96\x4e\x1d\x39\x26\xc7\x13\xa9\x6f\xbb\x0f\xbe\x53\xb0\xfb\xbf\xc3\x6d\x6a\xac\x6a\x34\x45\x46\xf9\xb5\xf5\x0a\xfa\x02\xfd\xba\x81\xdd\x53\xb3\xbf\x13\xbe\x7f\xdf\xef\xce\x32\xa5\x59\xf1\xde\x36\xed\x01\xd7\x1e\xef\xf6\x1e\x6e\xe0\x35\x67\xee\x23\xb0\xdf\x93\xf6\x5a\x7c\x57\xac\xca\xc2\x5a\x31\xad\x7e\x26\xa6\x4f\x86\x94\xc0\xe4\x56\xb2\xc6\x3b\x71\xe7\x69\xfc\x4e\x2a\x2a\x1f\xea\x0f\xfc\x1c\x75\xc2\x8f\x48\x9d\x39\x17\xcf\x17\xff\x0d\x00\x00\xff\xff\xf6\x53\x69\xa5\x1c\x2b\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 11036, mode: os.FileMode(420), modTime: time.Unix(1534874474, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
