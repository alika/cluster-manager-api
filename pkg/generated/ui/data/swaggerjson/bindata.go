// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xff\x6f\xdb\x38\x96\xff\xbd\x7f\xc5\x83\xef\x80\x4b\x81\x24\x9e\xed\xde\x01\x8b\x2c\x16\x73\xd9\x04\x37\x13\x74\x32\x13\xac\x7b\x0d\x16\xd7\x81\xf1\x2c\x3d\xdb\x9c\x48\xa4\x4a\x52\x76\xdd\x43\xff\xf7\x05\xbf\xc8\x96\x64\x29\x96\x25\x37\x51\x5a\x0f\x30\x68\x22\x51\xe4\xfb\x46\xf2\xf3\xbe\x90\xf9\xff\x57\x00\x03\xb5\xc4\xd9\x8c\xe4\xe0\x02\x06\x6f\xce\x7f\x18\x9c\x9a\x67\x8c\x4f\xc5\xe0\x02\xcc\x7b\x80\x81\x66\x3a\x22\xf3\xfe\x2a\x4a\x95\x26\x09\xb7\xc8\x71\x46\x12\x2e\xef\x6e\x6c\x7b\x80\xc1\x82\xa4\x62\x82\x9b\x56\x8b\x1f\xce\xb3\x8e\x00\x06\x81\xe0\x1a\x03\xbd\xee\x0d\x60\xc0\x31\xb6\xdd\x8d\x30\x56\x29\x9f\xc1\xd5\xaf\x57\xef\x7c\x73\x80\x41\x2a\x23\xf3\x72\xae\x75\xa2\x2e\x86\xc3\x19\xd3\xf3\x74\x72\x1e\x88\x78\xa8\x5c\xfb\xb3\x80\x07\x7a\x18\x38\x5a\xce\x62\x47\xcb\x19\x26\x6c\xd3\x07\xc5\xc8\x6c\x2f\x18\xc6\x8c\xff\x77\xfe\xc3\x73\x26\x06\xb6\xd9\x97\x57\x00\x5f\x2c\xb7\x2a\x98\x53\x4c\x6a\x70\x01\xff\xe7\x68\xb6\x63\x67\x0c\x98\x5f\xcc\x17\xbf\xdb\xb6\x81\xe0\x2a\x2d\x34\xc6\x24\x89\x58\x80\x9a\x09\x3e\xfc\x43\x09\xbe\x69\x9b\x48\x11\xa6\x41\xc3\xb6\xa8\xe7\x6a\x23\xf2\x21\x26\x6c\xb8\xf8\x53\xc6\x65\x5e\x7a\x33\xca\x0b\xd3\x90\x9f\xc6\x31\xca\x95\x61\xf7\x9e\x45\x11\x48\xd2\x92\xd1\x82\x40\xcf\x09\x94\x46\x9d\x2a\x10\x53\x40\xf0\x9d\x01\xf2\x10\x98\x56\xf0\x90\x4e\x28\x10\x7c\xca\x66\x30\x15\x12\x02\xc1\x39\x05\x9a\x2d\x98\x5e\xad\x45\x09\x30\x10\x09\x49\x4b\xf2\x4d\x68\xc6\xf8\x89\xb4\xb7\x83\x7c\x23\x49\x2a\x11\x5c\x91\x2a\xd0\x06\x30\x78\xf3\xc3\x0f\xa5\x47\x00\x83\x90\x54\x20\x59\xa2\xbd\xc5\xe4\x3a\x72\x1c\x19\x85\xe0\xd6\x67\x00\x83\x7f\x97\x34\x35\x5f\xfc\xdb\x30\xa4\x29\xe3\xcc\xf4\xa0\x32\x29\x8d\xbd\x2d\x8c\x31\x61\x1b\x2a\xff\x41\x49\xb4\x1a\x14\x3a\xfa\xf2\xaa\xea\xe7\x2f\x39\x76\x12\x94\x18\x93\x26\xb9\x51\x9e\xfb\xaf\xc4\x48\x66\xca\xf6\xdf\xd3\x47\x99\xfc\x15\x63\x32\x7a\x30\x5a\xc9\x34\xa1\x05\x4c\x08\x22\x21\x1e\x28\x84\x34\x39\x2f\x77\xc1\xec\x97\x1f\x53\x92\xab\xf2\x2b\x49\x1f\x53\x26\xc9\xa8\x64\x8a\x91\xa2\xd2\x6b\xbd\x4a\x2c\x61\x4a\x4b\xc6\x67\x79\xf6\xbf\x9c\xee\x66\x07\x97\xea\x5c\x51\x20\x49\x8f\x1f\x68\x35\x66\xe1\x0e\xde\xde\xcd\x09\x46\xb6\xfd\x5b\x5a\xdd\x84\xd6\x9c\x2e\xef\x6e\xe0\x32\x08\x48\xa9\x3e\xb2\x85\x96\x32\xc3\x5d\x63\xd6\x1c\x33\x6f\x69\xb5\x66\x0f\xfb\xc7\x9e\xa4\x99\x21\x7c\x37\x4f\xff\xb0\x0d\x7b\xcb\xca\xe7\x54\xd2\x39\x26\x49\x33\xdb\xbb\x4c\x92\x1e\x5b\x9d\xe5\x45\x13\x47\xae\x1b\xf0\xf2\xce\x36\xec\xb7\x62\x12\x54\x6a\x29\x64\x13\xd5\xdc\xf9\xa6\xfd\x66\x48\xa5\x93\x35\xe5\x0d\x97\xbb\xdc\x17\x7d\xe5\x2d\x91\x62\xc1\xc2\xc2\x46\x5d\xc5\x4e\x7e\x67\xca\x3e\x51\x70\x82\x4b\x35\xc4\x07\x35\x5c\xc4\x4b\x94\x34\x24\x1d\xbc\x7e\x1a\xce\xd6\x3f\xff\x9e\xdb\x91\x35\xce\xca\x7b\x71\x86\x47\x37\x1f\xff\xfe\xaa\x24\x9c\x41\x48\x11\x69\x7a\x1c\x30\xb9\x36\x1b\x80\xf4\x08\xf8\xb9\xb6\x4d\x5f\x00\xfe\x29\x10\xda\x17\x08\x74\x3f\x47\x0d\x4c\xe5\x21\xd0\x7f\x28\x30\x1f\x1a\x24\x14\x92\xd2\x52\xac\x7a\x33\x7b\x8e\x20\xe8\x08\x82\x9e\x97\x95\x23\x08\xea\xb3\x62\x8e\x20\xe8\x08\x82\xbe\x1e\x67\x87\x04\x41\x89\x50\x3b\x62\x46\x18\xfe\x91\x2a\x0d\xe8\x58\x57\x46\x9d\x4d\xe0\xd0\xa5\xfd\xcc\x53\xf0\xab\x08\x49\xf5\x19\x13\x15\xa8\x7d\x12\x4c\x34\x11\xe1\x96\x49\x38\x6b\xa9\x7a\x93\x33\x16\x2d\xd3\xb2\xad\x1c\x5a\x00\xb7\x6a\xd6\x84\xfd\x43\x98\x5f\xba\xc3\xfa\xf6\x33\xba\x2b\x49\xf8\x22\x30\x78\x81\xd0\xef\xd1\xde\x0a\x02\xf8\xea\xf6\xf6\x2a\x27\xbd\x72\x00\x7d\x18\xb1\xc2\x12\xb8\x47\x14\x1d\xc1\x7c\x6b\xb6\x06\xdf\x97\x6a\x14\x1c\xff\xc5\x0c\xd8\x63\xe3\x2c\x52\xfa\x24\xd6\x79\x74\xa8\x8e\x0e\xd5\xf3\xb2\x72\x74\xa8\xfa\xac\x98\xa3\x43\x75\x74\xa8\xbe\x1e\x67\x5f\x1b\x61\xa4\xc9\x4c\x62\x48\xfb\x82\x8c\x54\x72\xf0\x9f\x82\xb0\xc2\x53\x56\xf1\x08\x33\xb6\x20\xde\x00\x0f\xff\x44\xfa\x7f\x5d\x07\x9e\xf2\x1b\x3e\x15\x32\xb6\x2d\x7a\x8e\x40\x6a\xe9\x7e\x12\x3c\xf2\x42\x0d\xf9\x18\xba\x3e\x22\xad\x23\xd2\x7a\x6a\x5e\x8e\x48\xab\xcf\x0c\x7d\x9b\x48\xab\x5d\x4a\x15\xb4\x79\xb6\x24\x40\x49\x10\x08\xae\xcc\x86\xc5\xb8\x2b\xf2\xf3\x50\xe3\xc5\x40\xae\x7d\x62\xd8\x5a\x53\x9c\x68\xd0\x62\x0d\xa8\x9a\x84\x13\x8b\x18\xa4\xcf\x80\xa9\x48\xe9\xf7\x18\x50\x2c\x4a\xe0\x79\x22\x8a\x73\x8a\xe2\x3c\xc8\xdf\xa3\xc2\x24\xa4\x24\x12\x2b\x0a\xc1\xf4\x01\xc1\x1c\xa5\xde\x59\x6b\xf2\x33\x45\xf1\x55\xb9\x65\xdf\x2c\xb3\x44\xea\x93\x98\xe6\xf6\xcc\xae\x62\x36\x2b\x59\xd7\x2c\x8a\x48\x82\x9a\x8b\x34\x0a\x61\x42\xc0\xb8\xd2\x18\x45\x14\x82\xe0\xbd\x59\xf0\x1d\x95\xe7\xe6\x57\x95\x60\xb0\xcf\xe2\xef\x19\x5c\x7f\xda\x37\x9e\xb2\x03\x02\xcd\x39\xf2\x5f\x58\xd7\xcb\xf6\x61\xa7\x5e\x6f\xf8\x2a\x4f\xdf\x2a\x76\xec\x6c\x00\xe3\x40\xf6\x86\xec\xa3\xd3\x7b\x74\x7a\xfb\xc6\xde\xd1\xe9\xed\x9f\xd5\x1d\x9d\xde\xa3\xd3\xdb\x73\x8f\x70\x57\x59\x89\x87\x78\x70\x22\x24\x48\xf2\xbf\xbd\xce\x81\xef\x0f\xfc\xdd\x9c\x29\x58\x9a\xc6\x13\x72\x05\xc8\x69\xa0\xd9\x82\x80\xd9\x03\x73\x76\xfb\x9e\xa3\x02\x8c\x24\x61\xb8\x82\x09\x11\xdf\xc0\xf8\x25\xd3\x73\x77\xca\xce\xec\x96\x25\x6f\xbd\x0c\xe7\x6f\xdc\xf8\x2f\x02\xcf\x97\x69\xfd\x1e\x7d\xcd\xb2\x0c\x9e\xc7\xdb\x74\xc8\x37\xef\x6f\xee\x0e\x84\xd4\xd8\xbd\xef\xaa\xde\x42\xef\xb2\x32\xac\x77\x5b\x2d\xfb\x66\xa0\x25\x52\xbf\x47\xfb\x2c\x89\xe0\x79\xcc\x73\x73\xec\x7b\xef\xa4\x67\xe6\xde\xb1\x4d\xd6\x0f\x70\x22\x52\x0d\x98\x30\x50\x24\x17\xbb\xb2\x9e\xef\x5d\x0f\x2f\x27\xdd\xe9\x09\x6e\x65\xad\x6d\x94\xb5\x3e\xe1\x9e\x23\x6d\x73\xc6\xbc\x5c\x0d\x5a\xf8\xfd\xfd\xed\x3d\x4a\x1a\x25\x14\xe4\x75\x9b\xed\xec\x62\xf2\x07\x05\x9b\x1d\xcc\x38\x95\x09\x49\xcd\x4a\xc2\x1e\x60\x18\x8e\xb9\x2d\x0b\x2e\xe9\x20\xeb\x08\xa5\xc4\xe2\xd4\x19\x30\x4d\x71\xb9\xfd\x3e\x72\x76\x94\xdf\x62\x30\x67\xdc\x31\x50\x07\xae\x36\x17\x1b\xf8\xd6\x0a\x96\x73\x16\xcc\x61\x49\xb0\x34\x70\x56\x0b\xc0\x30\x34\xff\xe4\xc2\xeb\x83\x4a\xf5\x48\x8a\xc5\x82\x5e\x38\xb3\x8e\x09\x98\x4a\x11\xd7\x70\x5c\xb9\x18\x14\xca\x3c\x2f\xdf\x8e\x0c\x1d\x97\x6f\x47\x76\x03\xe5\x01\xfd\x24\x45\x9a\x74\xb1\x22\xbf\x00\x57\xca\xd4\x63\xcc\x6a\x4e\x0d\xe4\xe5\xb9\x40\xc6\xcc\x52\x52\x3d\xbd\x5c\x7f\xfb\x8f\x91\x71\x09\xa6\x35\x9c\x8c\x34\xf2\x10\x65\x38\xbe\x7e\x33\x5e\xbc\x39\x05\xd2\xc1\xf9\xeb\xea\x21\x63\xc6\xc7\x1f\x53\xe4\x9a\xe9\x55\xdd\xd0\x8c\x6b\x9a\x95\x82\x35\x03\xb7\xdc\xf9\xd7\x7f\x7e\x53\x43\xd8\x2d\xe3\x2c\x4e\x63\xe0\x69\x3c\x21\x69\x44\xc0\x3c\xa9\x0a\x4e\x42\x9a\x62\x1a\x69\x65\xb4\xfe\x99\xa4\xa8\x23\x11\x3f\x7d\x55\x12\xf1\x53\x3b\x12\xb7\x7c\x81\x6d\x75\x58\x5d\x2b\xb0\xf3\x87\x00\x9d\x7a\x90\x87\x55\x83\x0d\x1e\x31\xe7\x7b\x67\xce\xf7\xa3\x6b\xd4\x78\x45\xbc\x74\x1b\xc7\xbe\xb6\xec\x43\x1d\x6d\x2c\xed\xde\x4e\x57\xd7\x01\x9c\xa4\xea\x8c\x50\xe9\xb3\x3f\x3d\x6a\x63\xb8\x40\x16\xe1\x84\x45\x4c\xaf\xc6\x9f\x05\x3f\xc4\xe2\xd4\xd0\x75\x2d\x13\x9e\x27\x05\x2c\x29\x39\x26\x26\xa7\x90\xfd\xfc\x26\xb0\x3f\x2f\xc9\xfc\x1c\x6e\x73\x57\xaf\x7b\x37\x8e\xd1\x13\x78\x45\x35\xd1\xeb\xc1\x96\xa9\x43\x2d\x21\xf1\x7f\x9d\x47\x28\x67\x74\x5c\x3c\xbe\x9d\xc5\xe3\x4e\xfa\x9b\x76\x52\x49\xe1\x4d\x69\x5e\xed\x6d\x69\x8b\x24\x18\xb3\xb0\xf5\x96\xf8\xfe\xee\x0a\x58\x78\x0a\x93\x08\xf9\x83\x0d\x03\x99\xff\x3f\x0c\x02\x4b\x3b\x08\x4e\xf6\xc1\x4a\xa4\x1f\x06\xa7\x30\x65\x36\x4b\xc6\xa6\xe6\x81\xad\x29\xf8\xfb\x3f\x7f\x33\x7d\x54\x6b\x5d\x51\x90\x4a\xb3\xda\x58\x19\xb6\x25\x73\xe4\x7b\x79\x6c\xcb\x66\x18\x8f\xa5\x88\x68\x8c\xb2\xdd\x82\x6a\x64\x71\x73\x79\x0b\xa6\x13\xcb\x71\xbe\x88\xe2\x04\x25\x7f\x9d\xe9\x51\x29\x11\x30\xeb\x61\x84\x61\x23\x4b\xfa\x1f\x21\x61\x39\x27\x0e\x4a\xc4\x04\x7a\xce\xf8\x4c\x59\xd9\x65\x81\x24\x27\xeb\xb0\x68\x3c\x25\x17\xa1\xc2\xbf\xe9\x60\x34\x33\xa6\xc7\xdb\xee\xda\x7e\xd2\xd2\x38\x03\xc1\x1d\x96\x62\x1a\x24\x25\x42\x31\x2d\xe4\xaa\x5a\x43\x66\xc8\x40\xc4\x31\xd3\xad\x47\x9c\xa3\x9a\xaf\xe1\x1b\xd3\xe0\xbb\xab\x1d\x4e\x4b\xa2\xb1\xd2\xa8\xdb\x2d\xc5\xf7\x73\xd2\x73\x33\xc1\x25\x70\xa1\x5d\x62\x55\x92\x41\xc8\x0a\x82\x88\x90\x3b\xad\x4e\x52\x16\xd5\x10\x61\x5e\x85\xe3\xb0\x2d\x01\xd7\x76\x06\x4e\xed\x08\x61\x0d\x9b\xa2\x93\x1e\xdf\x6f\xd2\xaa\x33\x01\xa9\x22\xeb\xe0\x04\x22\x4e\x58\x44\xd5\x23\xfa\x97\xb2\xd5\x78\x57\xfe\x63\x3b\x54\x75\xff\x49\x84\xda\xd8\x78\xab\xfe\xef\xfc\xc7\xc0\xb4\x53\x93\x1b\xcf\xc5\xee\x87\x20\x53\xce\x19\x37\x66\xbb\xcb\x8d\xa9\x3a\x30\x79\x3f\xba\x92\x14\x12\xd7\x0c\xa3\x4e\x4b\x76\x31\x31\xd9\x76\x36\xd4\xa7\x2b\x6b\x17\xe3\x52\xde\xb0\xdb\xc8\x75\xd9\xc4\x3a\x9f\xb8\x35\xd6\xad\x4d\xf6\x35\x5a\x7d\xcd\xd7\xc1\x46\x6f\xb6\x22\x4c\xb9\x25\xde\xae\xbb\xc6\x1e\xb6\xfc\xdb\xc7\xcc\xa0\x7c\x6e\xf6\x39\x9c\xd9\x96\x95\x7e\xd5\xaa\x71\xf9\xfb\x32\x1d\xd5\x61\x87\xa6\x71\xa2\x7a\x4d\x5e\xde\x8f\x40\x25\x14\xb0\xa9\xbf\xfc\xf0\x03\x2f\x74\xe2\x71\x12\xe0\x52\xc1\xdf\xe0\xcf\x7f\x2d\xbf\x7e\xeb\x5f\x7f\x4e\x25\xc1\xdf\xe0\x3f\xff\xda\x66\x2a\x6f\x1f\xfe\xee\xa0\x45\xf1\x50\xa7\xc3\x89\x10\x66\x9f\xa8\x43\xb4\x95\xaf\x37\x3a\x46\xa3\x5f\xa6\x00\x41\xa5\xd6\xde\xa7\x69\x04\x92\x3e\xa6\xa4\x74\x1b\xa6\x8d\xc4\x3c\xcf\x23\x92\x0b\x16\xd0\x65\x10\x88\x94\xeb\x2e\xcc\x07\x11\x23\xae\xbb\xac\x63\x57\xb6\x87\x9b\x10\x4e\xf0\x01\x2f\x6c\x26\xfc\xba\xc6\x8b\xf0\x83\xb9\x95\xac\xe3\x80\x6e\x11\xf3\x83\x66\xe9\xe0\x66\xae\x81\x99\x75\xe8\x44\xe7\xf6\xcc\xc9\xaa\x7c\x93\xa3\x87\xcf\xce\x4a\x25\x29\x91\x4a\xeb\x8b\xd0\xa7\x0b\x88\x04\x86\x30\xc1\xc8\x78\x0c\xf2\xf5\xee\x05\xc7\xea\xed\x30\x3b\x8f\xaf\x47\x68\x2b\xb9\xaa\x2a\x85\x9a\x10\x9a\x2b\x16\x68\x3b\x50\x65\x09\x41\x0d\x5e\xc8\x32\xf9\x6d\xc7\xaa\xc9\xef\xd7\x6c\xa2\xa5\x34\x7b\xeb\x2d\xb4\x3e\xf9\xfe\x2c\xbb\x9a\x5f\x17\xae\x49\x23\x8b\x8c\x4f\xda\xc5\xca\x5a\xca\xe5\xe6\xba\x74\x25\x6a\xb5\x0a\x5a\x6f\x9a\x15\x97\xae\xd6\x28\xd9\xde\x93\xdb\x79\x63\xde\x5c\xb7\xbb\x73\xc4\xcd\xed\xbb\x9d\x47\xcd\x5d\xe4\x6b\xa1\xbc\xbd\xc7\xb7\x3e\x6d\xd1\x74\xf7\xc8\x8e\xe5\x1d\x4d\xe3\x29\x4c\xa3\xb1\x56\x2a\xb2\x2d\x5d\xd4\x13\x89\xa0\x1c\x5b\x68\xce\xa0\xdd\x21\xec\x86\xb7\x15\x76\x2d\x8b\x31\xa8\xdc\xce\xa0\x1e\x77\x36\xd9\x17\x6b\x5c\xce\xe2\x2a\x69\x7d\xe9\xdd\x7a\xf6\x2f\xb7\x01\x52\x1b\x1a\x2b\x31\x57\x0d\xb5\x1e\x42\x28\xd7\xb8\x08\x33\xcc\x24\xc6\xe8\xc1\xa6\x22\xad\x9c\x2d\x9c\x58\xaf\xf7\x55\xb8\xa2\xcc\x57\x16\xa9\x74\x11\xb9\xaf\x96\x9d\x6c\x94\x05\xcc\x75\x54\x93\x2c\x28\xc5\x60\x3b\x4f\x90\xfb\xce\x13\x24\x44\x8d\xe3\xa0\x9c\xf9\x69\x2c\x89\xaa\x04\xd2\xe3\xae\xd2\xd3\x4c\xa5\x62\x68\xe3\x90\x13\x69\x8d\x7d\x3b\x89\xab\x22\x64\x5e\x4d\xe4\xdf\xff\xf9\x1b\x38\x4b\xed\x8f\xf9\xd7\x64\x97\x9e\xdc\xfc\x9f\x2b\x58\x51\x7f\xd9\xfd\xfa\xae\xaf\xda\x60\x60\x76\x40\xa1\xad\x65\x17\x04\x70\xe7\x7b\xdb\x11\xa1\xc8\x06\x2d\x86\x29\xba\x4a\xbf\x30\xf8\x73\xc7\x8c\xd6\x2c\x9e\x41\x90\x4a\x49\x5c\x47\x2b\x17\x6c\x60\xca\x46\x5e\x84\x84\x18\xb1\x66\x16\x3d\xfc\x45\x75\xce\x1e\xe4\x0e\xf4\xbc\x4d\x27\x24\x39\x69\xaa\x19\x0e\x97\xed\x57\xb6\xca\xf5\x7f\x8f\xe0\x54\x0d\x45\x66\xf7\x3d\x10\x4d\x1e\xb4\x55\x8e\xb3\x4f\x64\x6e\xd7\x40\xb9\xe0\x5c\xe5\x58\x73\x36\x9b\x8f\xf3\x79\xf9\xaf\x13\xd4\xda\xce\xa9\x64\x4b\x02\x53\xf0\xf3\x65\x0d\xae\x27\xbd\x14\xf2\x61\x3c\xc5\x89\x64\x41\x6b\x9b\x73\x9f\xfb\xb5\xa7\x94\x81\x68\x35\xa7\x7b\x1b\x3a\xac\x97\xf2\x12\x55\x7e\xd9\x75\xa1\x2b\xa6\x2a\xe2\x8a\xdb\x68\xb8\xbd\x21\xe6\x9c\xc7\x7a\xf5\x84\x36\xf8\x50\xf6\x8a\x32\xca\x20\xab\xe1\xec\xaa\xb4\xc3\x54\x33\x06\x82\x6b\x29\xa2\x71\x12\x21\x7f\x91\xa5\x7e\x81\x88\x13\xc9\x14\xed\x86\x70\x66\xea\x91\xfc\xb6\x79\xc4\x84\x8d\x89\x87\x89\x60\xad\xa3\x96\x4c\xe5\x4e\x14\x23\x2c\x30\x4a\x09\x22\xf6\x40\xc0\x92\x8b\x44\x48\xed\x33\x34\xfe\x80\x09\xc2\x82\x49\x9d\x62\x04\x37\x77\x43\xf3\xfa\x03\xbf\x43\x65\xa3\xc9\x18\x58\x1f\x8f\x3e\x69\x92\x1c\x23\x08\x52\xa5\x45\x4c\x52\xf9\xa5\x0b\x27\x11\xf9\x3c\x6d\x9c\x72\xb3\x53\x51\xf7\x00\x4f\xc5\x1f\x09\xe8\xdf\xc2\x76\x65\xe5\x9b\x5f\x1d\xb2\xa3\x3a\x62\x55\x87\x21\x3b\x84\x6c\x46\x85\x30\x4d\xfb\xd4\x4b\xe5\x91\xf8\xfe\x49\xd7\x65\x9c\x08\xd6\xd5\xf5\xb9\xc4\x53\x4d\x59\x17\x29\x85\xb3\x0e\x78\xd4\x77\xa0\x60\x49\x92\xdc\x2d\x67\x2d\xe4\xfb\x13\x71\x92\x2c\xd8\x1c\xa7\x7a\x6e\x7c\x9d\x2f\x34\x76\x27\xc4\x62\xe2\x35\x9b\xeb\xe6\x80\xff\x21\x46\xb5\x3d\xb9\xbf\xa0\x61\x86\xb5\xcf\x73\x7f\x69\x0e\xb4\xa8\xf3\xd3\x13\xd1\x3d\x15\x6d\xcf\xc8\xed\xaa\x04\x0a\x4a\x2a\xea\x32\x96\xd5\x56\x35\x76\x36\xeb\x6f\x87\x48\x2d\x4a\xf2\x93\xc1\xdd\xc3\x77\xc2\x49\x69\x0a\x61\x85\x71\x04\x67\xf6\xd5\x7b\x3b\xc4\xb9\x7d\x62\xf0\x00\x71\xad\xaa\x32\x88\x0d\xcd\xd7\x9d\xdd\x19\x91\xd6\x86\xb4\x8e\x26\x7c\x18\x8b\x2a\x5f\x24\x51\x23\xea\x0e\xbe\xe0\xee\x4b\x1e\x5a\x09\x54\x6f\xdd\x67\xdc\xbf\xe5\xf6\xa6\x58\xbf\xc1\x5c\x2d\x9d\x5a\x29\x03\x93\x1f\xc3\xe1\x4f\x89\xc2\xf2\xd0\x7d\x37\xfe\xfa\xa5\x7c\x3b\x76\x17\xdd\x7d\x73\x7a\xeb\xea\x3f\xe5\xb2\xb3\xad\xe4\xba\xe3\x86\xcd\xfe\x49\xfa\x0a\x79\x19\xec\xf9\x4a\xa6\x1a\xac\xe7\x57\x90\xe7\x39\xd8\x80\x3a\x5b\xc1\x5c\x79\x6f\x22\x94\x62\x06\xaa\x4b\x36\x9b\x6b\xe0\x62\xd9\x4e\x6d\x85\x93\x82\xfd\x53\xd2\xcd\x34\x07\x18\x97\xa8\xe0\xb7\xb7\x8f\x2a\x67\xcc\x2a\x6b\x98\xa1\x7e\x46\xec\x2e\x85\xae\xa6\x2c\xab\x6e\xcd\xb7\xdc\xd6\xc0\x76\x71\x85\x1d\xc5\xd6\x52\x64\x3b\x52\x01\xfa\x3f\xa2\xad\xaa\x73\xe2\x9d\x8a\xab\x2a\xd7\x8d\x66\xa5\xb6\x4d\x2e\xbb\xaa\x29\xde\x29\x9f\x33\x7f\x44\x37\x4d\xe1\x4c\x8d\xd7\xec\x89\x73\x8d\x6a\xe2\xbf\x95\x78\x71\x5f\x6a\xaa\xae\x5a\x28\x88\xcb\xc2\xc9\xd1\xa3\x84\xd4\x65\x23\xf6\xce\x82\x3c\x7e\x89\xd2\xe1\xa3\xe0\x8d\xf2\x7b\x97\xf7\x23\xc8\xb7\xaa\xa6\xa2\x53\xe4\xbb\x61\xca\xde\x15\x11\x54\xd3\xd2\x74\xdd\xac\xbe\xb5\xa2\x7f\xab\xe7\x8b\xf5\xb9\x37\x59\x9b\x5f\x70\x42\xd1\xb3\xb8\xdc\xf9\x33\xbd\x08\x91\xa5\xa3\x7a\xeb\x31\x9e\x5a\xfb\x5c\x95\x0d\xe5\x55\x8e\xd1\x54\x5a\x15\x17\x34\xbc\xbc\x7d\xa1\x9b\x5f\xf9\xeb\x26\x3a\x51\x3f\x34\xab\x19\xba\xf3\x21\x17\x2e\x4a\x6e\x25\x68\xb1\xbe\x1c\x65\xb8\xbe\x24\xb6\x2e\x3c\x92\xa9\x74\xc9\xc2\x5a\xee\x0f\xe1\x54\x78\xd1\xac\xef\xaa\x3d\x33\x03\xfa\xa7\x3f\x7e\xe0\x23\x27\x32\xa6\x61\x8e\x0b\x2a\x36\xc2\x30\x66\x1c\x12\xc9\x16\x2c\xa2\x19\xa9\x1f\x6b\x56\x70\xd3\x6c\xbc\x56\xe5\x73\x40\xe5\xb5\x25\x28\x17\x12\x67\x3a\x1f\x39\xf7\xc1\x6d\xc7\x4e\x9d\x29\x1e\xb7\xe2\x97\xb3\x15\x57\xde\xcf\x73\xdc\x89\x0f\xb6\x13\x6f\x5f\x84\xdc\x41\xb8\xc7\x89\xf5\xfc\x13\xeb\xf4\x00\xd0\xe8\xb0\x27\xc4\xba\x06\x78\x33\x3f\xda\x8c\xbc\xcc\x82\x38\xf6\x8c\x82\xf8\xb1\xb3\xc5\xf7\x7b\x41\x39\xdc\x01\xae\xed\x84\x78\x07\x9e\x53\x45\xb2\x13\xee\xce\x3a\xb0\xd6\x33\x1a\xfd\xfc\xe8\xb1\x99\x79\xf9\x9e\xba\x7d\x46\x32\x1f\x37\x1a\x25\x11\xf5\x79\xa5\x0e\x97\x4b\xd8\x9a\x40\x21\x1b\xd2\xd0\xe2\x38\x52\xc5\xe5\x9c\x0f\x7f\x51\xeb\x49\xb3\xbe\x8d\xc0\x95\x9c\x80\x2d\x39\x39\x07\x5b\x71\xc0\x45\x48\x66\x9a\x0b\x1e\xad\x00\x21\x46\x17\x92\x9e\x3a\xc3\x9b\x32\x32\x68\x31\xbb\xbc\x22\x3c\xaf\xa6\xd9\x3a\x35\x4f\x99\x54\x28\xfb\x8e\xbb\x21\xa3\x91\x89\x23\x73\x2d\x8e\xd8\xd7\x7a\x34\x3e\x2f\x55\x28\xec\xf3\x7f\x57\x2b\x7b\x66\x05\xe9\xc3\x7b\xeb\x9b\xd2\xb2\x02\x8c\x6b\x11\xe4\xae\x4a\x2b\x69\xeb\x56\x48\xf2\x77\xd5\x65\xae\xd5\xad\xe3\x14\x2e\xef\x6e\xbc\xdc\x06\xa9\x34\x1e\xf2\x60\xae\x75\xa2\x2e\x86\xc3\x19\xd3\xf3\x74\x72\x1e\x88\x78\xa8\x30\x56\x29\x9f\x9d\x05\x3c\xd0\x99\xac\xce\xbc\xac\xce\x30\x61\x86\xa8\x2f\xaf\xbe\xbc\xfa\x57\x00\x00\x00\xff\xff\x89\x07\xa4\x22\xa0\x8d\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 36256, mode: os.FileMode(420), modTime: time.Unix(1537162932, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
