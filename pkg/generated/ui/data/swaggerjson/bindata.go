// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x7d\x6f\xdb\x38\x9a\xff\xbf\x9f\xe2\x81\xef\x80\x4b\x81\x26\xee\xf6\xb0\x87\x45\x16\x8b\xb9\x4c\x82\xeb\x04\x6d\x3a\x41\xdd\x69\x30\xb8\x0e\x0c\x5a\x7a\x6c\x73\x22\x91\x2a\x49\xd9\xf5\x1c\xfa\xdd\x0f\x7c\x91\x2d\xc9\xa2\x2d\x4b\x4e\xac\x34\x5e\x60\x31\xa9\x45\x91\xcf\x1b\xc9\xdf\xf3\x42\xea\xff\x5e\x00\xf4\xe4\x9c\x4c\x26\x28\x7a\xe7\xd0\x7b\x73\xf6\xba\xf7\x4a\xff\x46\xd9\x98\xf7\xce\x41\x3f\x07\xe8\x29\xaa\x22\xd4\xcf\x2f\xa3\x54\x2a\x14\x70\x43\x18\x99\xa0\x80\x8b\xdb\x6b\xd3\x1e\xa0\x37\x43\x21\x29\x67\xba\xd5\xec\xf5\x59\xd6\x11\x40\x2f\xe0\x4c\x91\x40\x2d\x7b\x03\xe8\x31\x12\x9b\xee\x06\x24\x96\x29\x9b\xc0\xe5\x87\xcb\x4f\xae\x39\x40\x2f\x15\x91\x7e\x38\x55\x2a\x91\xe7\xfd\xfe\x84\xaa\x69\x3a\x3a\x0b\x78\xdc\x97\xb6\xfd\x69\xc0\x02\xd5\x0f\x2c\x2d\xa7\xb1\xa5\xe5\x94\x24\x74\xd5\x07\xc6\x84\x9a\x5e\x48\x18\x53\xf6\xdf\xf9\x17\xcf\x28\xef\x99\x66\xdf\x5f\x00\x7c\x37\xdc\xca\x60\x8a\x31\xca\xde\x39\xfc\xaf\xa5\xd9\x8c\x9d\x31\xa0\xff\xa1\xdf\xf8\xc3\xb4\x0d\x38\x93\x69\xa1\x31\x49\x92\x88\x06\x44\x51\xce\xfa\x7f\x4a\xce\x56\x6d\x13\xc1\xc3\x34\xa8\xd9\x96\xa8\xa9\x5c\x89\xbc\x4f\x12\xda\x9f\xfd\x2d\xe3\x32\x2f\xbd\x09\xe6\x85\xa9\xc9\x4f\xe3\x98\x88\x85\x66\xf7\x8e\x46\x11\x08\x54\x82\xe2\x0c\x41\x4d\x11\xa4\x22\x2a\x95\xc0\xc7\x40\xc0\x75\x06\x84\x85\x40\x95\x84\xfb\x74\x84\x01\x67\x63\x3a\x81\x31\x17\x10\x70\xc6\x30\x50\x74\x46\xd5\x62\x29\x4a\x80\x1e\x4f\x50\x18\x92\xaf\x43\x3d\xc6\x5b\x54\xce\x0e\xf2\x8d\x04\xca\x84\x33\x89\xb2\x40\x1b\x40\xef\xcd\xeb\xd7\xa5\x9f\x00\x7a\x21\xca\x40\xd0\x44\x39\x8b\xc9\x75\x64\x39\xd2\x0a\x21\x6b\xaf\x01\xf4\xfe\x5d\xe0\x58\xbf\xf1\x6f\xfd\x10\xc7\x94\x51\xdd\x83\xcc\xa4\x34\x74\xb6\x30\x24\x09\x5d\x51\xf9\x11\x93\x68\xd1\x2b\x74\xf4\xfd\x45\xd5\xdf\xdf\x73\xec\x24\x44\x90\x18\x15\x8a\x95\xf2\xec\xff\x4a\x8c\x64\xa6\x6c\xfe\xfb\x6a\x23\x93\x1f\x48\x8c\x5a\x0f\x5a\x2b\x99\x26\x14\x87\x11\x42\xc4\xf9\x3d\x86\x90\x26\x67\xe5\x2e\xa8\x79\xf3\x6b\x8a\x62\x51\x7e\x24\xf0\x6b\x4a\x05\x6a\x95\x8c\x49\x24\xb1\xf4\x58\x2d\x12\x43\x98\x54\x82\xb2\x49\x9e\xfd\xef\xaf\xb6\xb3\x43\xe6\xf2\x4c\x62\x20\x50\x0d\xef\x71\x31\xa4\xe1\x16\xde\x3e\x4d\x11\x06\xa6\xfd\x3b\x5c\x5c\x87\xc6\x9c\x2e\x6e\xaf\xe1\x22\x08\x50\xca\x2e\xb2\x45\x0c\x65\x9a\xbb\xda\xac\x59\x66\xde\xe1\x62\xc9\x1e\xe9\x1e\x7b\x02\x27\x9a\xf0\xed\x3c\x7d\x34\x0d\x3b\xcb\xca\x5f\xa9\xc0\x33\x92\x24\xf5\x6c\xef\x22\x49\x3a\x6c\x75\x86\x17\x85\x8c\x30\x55\x83\x97\x4f\xa6\x61\xb7\x15\x93\x10\x29\xe7\x5c\xd4\x51\xcd\xad\x6b\xda\x6d\x86\x64\x3a\x5a\x52\x5e\x73\xb9\xcb\xbd\xd1\x55\xde\x12\xc1\x67\x34\x2c\x6c\xd4\x55\xec\xe4\x77\xa6\xec\x15\x09\x27\x64\x2e\xfb\x46\x3a\xfd\x59\x3c\x27\x02\xfb\xa8\x82\x97\x0f\xc7\x5b\xe9\x29\xb2\x34\x2e\xed\xbd\xe6\xf7\x94\x99\x9d\x1f\xcb\x3a\x02\xb3\xfe\x55\xfc\xa8\x39\x58\xff\xd9\xb2\x54\x84\x05\x7f\xac\x89\x69\x4c\xd2\x48\xa3\xad\xdc\xa8\x95\xd0\x21\xf7\x66\x4f\x91\x49\x19\x34\x64\xc0\x79\xf5\xf2\x1f\xee\xaf\xa5\x16\x7b\x21\x46\xa8\x70\x33\xb2\xb3\x6d\x56\x48\x6e\x03\x4a\xbb\x32\x4d\x9f\x00\x50\x2b\x10\xda\x15\xac\x76\x37\x25\x0a\xa8\xcc\x63\xb5\xff\x90\xa0\x5f\xd4\x90\x2d\x44\xa9\x04\x5f\x74\x66\x9a\x1f\xd1\xda\x11\xad\x1d\x96\x95\x23\x5a\xeb\xb2\x62\x8e\x68\xed\x88\xd6\xf6\xcd\xdb\x13\x44\x6b\x35\x54\x10\x90\x28\x1a\x91\xe0\xfe\x2c\x15\x51\x0d\xab\xfa\xed\xe3\x7b\x8d\x07\xf4\x5b\xa0\x5f\x03\xc5\x3b\x63\x4d\x4b\x56\xf4\x28\x28\x55\xbd\x79\x72\x7d\x95\x99\x96\x7b\xed\x71\xf8\xd9\x27\x90\x4e\xb8\xdc\x12\x20\x35\xb3\x46\xea\x95\xa0\x0e\x92\xbe\x14\x48\x9e\x04\x92\x2e\x10\xfa\x28\x48\x7a\xc4\xc3\x35\x23\xb0\xf6\x51\xf5\x24\x67\x1e\x4a\xa4\x65\xeb\xd8\xb7\x00\x6e\xe4\xa4\x0e\xfb\xfb\x30\xb8\x74\x8b\xbd\x91\xf0\xcf\x54\x2a\x20\x3b\x1a\xde\x85\x79\xcd\x11\xf0\x81\x87\x28\xbb\x6c\x7d\x05\x6a\x9f\xa3\xf5\x15\x04\xf0\xe0\xd6\xf7\x22\x27\xbd\x72\xb6\xa8\x1f\xd1\xc2\x12\xb8\x43\xca\x88\x80\x7e\x57\xef\x01\xae\x2f\x59\x2b\x13\xf4\x5e\x0f\xd8\x61\xe3\x2c\x52\xfa\x28\xd6\x79\x74\xca\x8f\x4e\xf9\x61\x59\x39\x3a\xe5\x5d\x56\xcc\xd1\x29\x3f\x3a\xe5\xfb\xe6\xed\x09\x3a\xe5\x0f\x0d\x85\xd2\x64\x22\x48\x88\xbb\xa2\xa1\x54\x30\x70\xaf\x02\x37\x5a\x96\xc6\x42\x09\x4c\xe8\x0c\x59\x0d\xf4\xfe\x16\xd5\x6f\xb6\x03\x47\xf9\x35\x1b\x73\x11\x9b\x16\x1d\x87\x4a\x5e\xba\x1f\x05\x38\x1d\x67\xdc\xc1\xc3\x60\x47\xec\x7a\xc4\xae\x87\x65\xe5\x88\x5d\xbb\xac\x98\x23\x76\x7d\x12\xd8\xb5\x59\xa1\x03\x28\xfd\xdb\x1c\x81\x08\x84\x80\x33\xa9\x77\x56\xca\x6c\x8d\xb0\xc3\x44\x4f\x30\x2b\xb0\x35\x48\xab\x14\xc6\x89\x02\xc5\x97\xc0\xaf\x4e\x90\xb6\x88\x95\xba\x0c\xec\x8a\x94\x3e\xc7\x08\x6d\x51\x02\x07\x0a\xd1\x0a\x0c\x91\x29\x4a\x22\xd9\xd7\xd0\x2f\xe7\x97\x6c\x35\xd1\x34\x09\x89\x42\x20\x73\x09\xb9\x6e\x20\x95\x18\x3a\xe7\xa4\x8e\xbd\xea\x3e\x2e\xee\x06\x97\xab\x1e\xba\x6d\xb5\xeb\xf4\x3e\x4f\xdb\x5d\x97\x43\x07\x2c\xd8\xf8\x29\x4d\x6c\x58\xbf\xd8\xda\x8a\x75\x27\x4f\xcb\x8e\x4b\x14\x3f\x63\x4b\x2e\x49\xe2\x30\xb6\x3c\xc5\x28\xce\x9b\xef\x0e\x45\xb8\x21\x26\x11\x5f\x60\x08\xba\x0f\x08\xa6\x44\xa8\x0d\x06\x6b\xab\x5c\x7f\xc1\x28\xbe\x2c\xb7\xec\x9a\xa5\x96\x48\x7d\x14\x13\x5d\x9f\xf1\x55\xcc\x66\xc7\x0f\x15\x8d\x22\x14\x20\xa7\x3c\x8d\x42\x18\x21\x50\x26\x15\x89\x22\x0c\x81\xb3\xce\xa0\xef\x84\x04\xf7\x64\x82\x99\x68\xeb\x00\xf1\x35\xc6\xf4\xa2\xd8\x19\x86\xca\x36\x5e\xa9\x22\xdd\x06\x3e\x90\xf8\x91\x5c\x84\x63\x30\xeb\x18\xcc\x3a\x06\xb3\x1e\x9b\x97\x63\x30\xab\xcb\x0c\xfd\x98\xc1\xac\x63\x5a\xe8\xe0\x69\xa1\xda\x95\xc4\x17\x90\x32\xfa\x35\x45\xa0\x21\x28\x0e\x94\x85\x34\xd0\x5e\x9f\x9a\x52\xf9\xb8\x85\xc5\x75\x60\xcd\xb1\xe6\xfb\x19\xd4\x7c\x3b\x17\x01\x4e\xb8\x00\x81\xee\x5f\x2f\x73\xce\xdb\x17\xf6\x49\x5b\xe7\x5c\x37\x1e\xa1\x3d\xe3\x97\x06\x8a\xce\x10\xa8\xb9\x3c\xc3\x20\xdb\x29\x91\x40\x22\x81\x24\x5c\xc0\x08\x91\xad\xdc\xc0\x39\x55\x53\x7b\xe3\x86\x5e\x81\x4a\xa1\xf7\xb2\x3b\x78\x6d\xc7\x7f\x12\xfe\x60\x99\xd6\xe7\x18\xb3\x28\xcb\xe0\x30\xd1\x0a\xeb\x1e\x16\xc2\x6d\x4d\xed\xde\x75\xe5\xb7\xd0\xdb\xac\x54\xfd\xd3\x5a\xcb\xae\x19\x68\x89\xd4\xe7\x68\x9f\x25\x11\x1c\xc6\x3c\x57\x57\x40\xed\x5c\x6a\xe5\x5e\x05\xba\xaa\x35\x02\x32\xe2\xa9\x02\x92\x50\x90\x28\x66\xdb\x6a\xad\x3e\xdb\x1e\x9e\x4e\x91\x95\x23\xb8\x91\xb5\x36\x51\xd6\xf2\xb6\xab\x1c\x69\xab\xfb\xa6\xca\x87\x17\x0a\xff\xfe\x7c\x73\x47\x04\x0e\x12\x0c\xf2\xba\xcd\xb6\x76\x3e\xfa\x13\x83\xd5\x0e\xa6\x81\x7a\x82\x42\xd1\x92\xb0\x7b\x24\x0c\x87\xcc\x9c\x62\x29\xe9\x20\xeb\x88\x08\x41\x8a\x53\xa7\x47\x15\xc6\xe5\xf6\xbb\xc8\xd9\x52\x7e\x43\x82\x29\x65\x96\x01\x1f\xa2\x5a\x5d\x72\xe6\x5a\x4b\x98\x4f\x69\x30\x85\x39\xc2\x5c\xfb\xb0\x8a\x03\x09\x0d\x9c\xcd\xe5\xca\x7b\x95\xea\x11\x18\xf3\x19\x3e\x2c\xb3\x65\x85\x59\x4e\x3f\x9a\x91\xf7\xc5\xaf\xe5\x03\xc6\x82\xc7\x1e\xa6\x2b\xd7\x83\xba\xa4\xb5\xb0\xa5\x69\x79\xdf\xdb\xec\x82\xad\x98\xd5\x78\x57\xbf\x6c\xbc\xdc\xc1\xe0\x17\xe7\xe5\x6e\x63\xa9\x70\xb2\xec\xe2\xdd\x40\xd3\x7f\xf1\x6e\x60\x60\x01\x0b\xf0\xad\xe0\x69\xd2\x86\x1f\xb7\xad\x34\xe3\x87\xe5\x5c\xde\x89\xa1\xa4\x7a\xd1\xb0\xfd\xed\x3e\x46\xc6\x25\xe8\xd6\x70\x32\x50\x84\x85\x44\x84\xc3\xab\x37\xc3\xd9\x9b\x57\x80\x2a\x38\x7b\x59\x3d\x64\x4c\xd9\xf0\x6b\x4a\x98\xa2\x6a\xe1\x1b\x9a\x32\x85\xe5\xf0\x78\xcf\x2e\xe2\xee\xf1\x7f\xbe\xf1\x10\x76\x43\x19\x8d\xd3\x18\x58\x1a\x8f\x50\x68\x11\x50\x47\xaa\x84\x13\xe7\xf0\x4a\x6d\xc8\x7f\xa1\xe0\x3e\x12\xc9\xb7\x07\x25\x91\x7c\x6b\x46\xe2\x9a\x8b\xb3\xae\x0e\xa3\x6b\x09\xd6\x99\x07\x62\xd5\x43\x58\x58\x35\x58\x6f\x83\x39\xdf\x59\x73\xbe\x1b\x5c\x11\x45\x2e\x91\x95\xee\x1b\xdc\xd5\x96\x5d\xd4\xb6\x89\xa5\xdd\x99\x15\xc8\x76\x00\x27\xa9\x3c\x45\x22\xd5\xe9\xdf\x36\xda\x18\x99\x11\x1a\x91\x11\x8d\xa8\x5a\x0c\xff\xe2\x6c\x1f\x4b\x6e\x4d\x2f\xbc\x4c\x78\x9e\x14\x30\xa4\xe4\x98\x18\xbd\x82\xec\xef\x37\x81\xf9\x7b\x8e\xfa\xef\x70\x9d\x3b\xbf\xee\xed\x38\x5a\x4f\xe0\x14\x55\x47\xaf\x7b\x5b\xa6\xf6\xb5\x84\xc4\x7f\x3f\x8b\x88\x98\xe0\x71\xf1\xf8\x71\x16\x8f\x5b\xe1\xee\x12\x4d\x05\x86\xd7\xa5\x79\xb5\xb3\xa5\xcd\x92\x60\x48\xc3\xc6\x5b\xe2\xe7\xdb\x4b\xa0\xe1\x2b\x18\x45\x84\xdd\x9b\xbd\x5e\xff\xff\x4b\x2f\x30\xb4\x03\x67\x68\x7e\x58\xf0\xf4\x4b\xef\x15\x8c\xa9\xc9\x1d\xd3\xb1\xfe\xc1\x94\x3d\xfe\xfc\xfb\xaf\xba\x8f\x6a\xad\x4b\x0c\x52\xa1\x57\x1b\x23\xc3\xa6\x64\x0e\x5c\x2f\x9b\xb6\x6c\x4a\xe2\xa1\xe0\x11\x0e\x89\x68\xb6\xa0\x9a\xf0\xde\xc5\x0d\xe8\x4e\x0c\xc7\xf9\x3a\xcf\x13\x22\xd8\xcb\x4c\x8f\x52\xf2\x80\x1a\xbf\x29\x0c\x6b\x59\xd2\xff\x70\x01\xf3\x29\x32\x90\x3c\x36\x91\x5d\x36\x91\x46\x76\x59\x78\xcc\xca\x3a\x2c\x1a\x4f\xc9\xf1\xa9\xf0\xda\x5a\x18\xcd\x84\xaa\xe1\xba\x13\xba\x9b\xb4\x14\x99\x00\x67\x16\x4b\x51\x05\x02\x13\x2e\xa9\xe2\x62\x51\xad\x21\x3d\x64\xc0\xe3\x98\xb6\x80\xa3\x44\x4e\x97\xf0\x8d\x2a\x70\xdd\x79\x87\x53\x02\x71\x28\x15\x51\xcd\x96\xe2\xbb\x29\xaa\xa9\x9e\xe0\x02\x18\x57\x66\x54\xdd\x23\xcc\x89\x84\x20\x42\xc2\xac\x56\x47\x29\x8d\x3c\x44\xe8\x47\xe1\x30\x6c\x4a\xc0\x95\x99\x81\x63\x33\x42\xe8\x61\x93\xb7\xd2\xa3\xb3\x2a\x3d\xc8\x84\xdb\xc2\x32\xc5\xb5\x5c\x13\x1a\x61\xf5\x88\xee\xa1\x68\x34\xde\xa5\x7b\xd9\x0c\x55\xdd\x7f\x12\x11\xa5\x6d\xbc\x51\xff\xb7\xee\x65\xa0\xca\xaa\xc9\x8e\x67\xd3\x90\x7d\x10\x29\x63\x94\x69\xb3\xdd\xe6\xc6\x54\xdd\x5a\x50\xac\x04\x6d\x31\xfb\x8a\x35\x16\x4d\x67\x83\xbf\xf2\xc2\xbb\x18\x97\x4a\x20\xda\x8d\xec\x2b\x8c\xf0\x79\xfa\x8d\xb1\xae\xb7\x6e\xa1\xd6\xea\xab\xdf\xce\x57\x4f\x2a\x63\xe7\xf6\x1a\x6f\xbd\xee\x6a\x7b\x58\x73\xd9\x37\x99\x41\xf9\xf2\x8a\x43\x38\xb3\x0d\x0f\x23\x78\x66\x5c\x96\x2f\x2e\x51\xb2\x5b\x4c\xb5\x9c\x70\x5e\x11\xbb\x4b\xa2\xd9\xe3\xb9\xcc\xd7\x5c\x95\xfa\x97\x8d\xf8\x0a\xb8\xf3\x24\x5e\xdc\x0d\x20\xdf\xaa\x9a\x8a\x52\x09\xef\x8e\x74\xf8\x4b\x70\x0b\x94\x98\x72\xdf\xad\xb4\xb8\x44\x76\x2d\x62\xea\x46\x2c\xfd\xb3\x4f\x8b\x47\x26\x18\xd0\xb1\xbb\x92\xff\x0b\x2b\x74\xe2\xb0\xad\xa9\xb7\xff\x17\xfc\xfd\x9f\xe5\xc7\xef\xdc\x63\xc3\xdb\xbf\xe0\xbf\xfe\xe9\xd9\x5a\x5c\x52\xb6\xb1\x8c\x2f\xb3\x0e\x3c\xbb\x8f\x7b\x9c\x0f\x9e\x37\xd9\x08\xd6\xef\xef\x69\xb1\x06\xf0\x35\x76\xb3\x1e\x46\x9c\x6b\x94\xe1\xf3\x87\x2a\x1f\xaf\x56\x08\x22\x6d\x11\x01\x01\x99\x9a\xd5\x72\x9c\x46\x59\xda\xba\x09\xd3\xc6\x7c\xed\xef\x03\x14\x33\x1a\xe0\x45\x10\xf0\x94\xa9\x36\xcc\x07\x11\x45\xa6\xda\xec\x82\x97\xa6\x87\xeb\x10\x4e\xc8\x3d\x39\x37\x25\x61\x57\x9e\x55\xc4\x0d\x66\xf7\xc1\x96\x03\xda\x2d\xd0\x0d\x9a\xd5\x45\xd5\x73\x2c\xf5\x32\x48\xac\xe8\x2c\xe2\x1a\x2d\xca\x5f\x3a\x70\xce\x97\x9d\x2f\x02\x25\x4f\x85\xf1\x64\xf1\xdb\x39\x44\x9c\x84\x30\x22\x91\xf6\x37\xc5\xcb\xed\xdb\x55\x79\xd9\x69\x93\x97\x48\x1a\xfb\x70\xbe\x72\x3d\x4f\x00\xd6\x56\xcd\x35\x1d\xa8\xb2\x96\xce\xb3\xf7\x65\x25\x6d\x4d\xc7\xf2\x14\xba\x79\x20\x58\xa9\xde\xac\x31\x00\xf3\x57\xa1\x1d\x04\x13\x5d\xae\x2f\xdc\x3b\x1b\x97\xfd\x98\x4d\x33\x79\x54\x54\x1a\xf9\x50\xe8\xb2\xda\xa7\x71\x90\xa0\x5c\x03\xd4\x60\x31\x75\xeb\xe8\x15\x2a\x42\xa3\x6b\x85\x71\x1b\xc1\x35\xe4\x65\xc5\xc7\xc6\x0c\x5d\x63\x88\x5a\xf1\x11\x17\xcf\xa4\x30\xdf\xdd\x69\x0d\x83\x57\x9f\xef\xd9\x3a\xe2\xea\x6b\x3e\xad\x47\xcd\x7d\x18\xc8\x38\xce\xe6\xbb\x40\xfe\xd4\xe7\x8e\x06\x72\x34\x8d\x47\x31\x8d\xda\x5a\xa9\xc8\x6d\xb6\x51\x4f\xc4\x83\x72\x24\xaf\x3e\x83\x66\x47\x35\x00\x61\x2d\xc9\x51\x16\x63\x50\xb9\xfd\xc3\x43\xb8\x2f\x97\xc5\x5d\xc5\x44\xae\xb6\xeb\xd9\x3d\x5c\x07\x94\x4d\x68\xac\xc4\xa8\x1e\x6a\x1d\xe4\x92\xb6\x71\x11\x96\xe9\x49\x4c\xa2\x7b\x53\xce\x60\xe4\x6c\xe0\xd7\x72\x7f\xac\xc2\x61\x65\xbe\xb2\xbc\x80\x8d\x7f\x3f\x58\x85\x43\xad\x9c\x7b\xae\x23\x4f\x6a\xae\x94\xf1\x68\x3d\x41\xee\x5a\x4f\x90\x90\x28\x32\x0c\xca\x79\xd6\xda\x92\xa8\x4a\xd7\x6e\x76\x72\x1f\x67\x2a\xd5\x89\x48\x34\x9b\x48\x4b\x5f\xa1\x95\xb8\x2a\x12\x54\xd5\x44\xfe\xfc\xfb\xaf\x60\x2d\xb5\x3b\xe6\xef\xc9\xe5\x3e\xba\xf9\x1f\x2a\x34\xe8\xff\x78\xde\xf2\x4e\x65\x6f\xe8\xbd\x6d\x20\xb0\x20\x80\x2c\x2a\xb8\x25\xb6\x94\x0d\x5a\x0c\x30\x3d\xe9\x00\x91\x5f\x0c\x87\x8e\x15\x2f\x85\x7d\x0a\x41\x2a\x04\x32\x15\x2d\x6c\x98\x88\x4a\x13\xbd\xe3\x02\x62\x42\x3c\xf3\xf9\xfe\x1f\xb2\x75\xd6\x70\xb6\xca\x38\xbd\x4b\x47\x28\x18\x2a\xf4\xc5\x5b\x5b\x44\x7d\x2b\x77\xa2\x1d\x02\x9c\x0f\x11\x01\xae\x84\x8f\x95\xe3\xec\x12\xdd\xdd\x36\x50\x2e\xc0\x5b\x39\xd6\x94\x4e\xa6\xc3\x7c\x3d\xce\xc3\x84\x23\xd7\x73\xa9\xd9\xe2\x44\x25\xfc\x72\xe1\xf1\x30\x50\xcd\xb9\xb8\x1f\x8e\xc9\x48\xd0\xa0\xb1\xcd\xd9\xd7\xdd\x2a\x58\xca\x3c\x36\x9a\xd3\x9d\x0d\xfa\xfa\xa5\x3c\x27\x32\xbf\x01\xd8\xa0\xe3\xea\x8c\xd9\x46\x5c\xde\xdc\x10\x73\x6e\xac\x5f\x3d\xa1\x09\x83\x94\xfd\xb3\x8c\x32\xc8\x2a\xd2\xdb\x2a\x6d\x3f\xb5\xd9\x01\x67\x4a\xf0\x68\x98\x44\x84\x3d\x70\xe1\xf2\xc3\x54\x69\x07\x3c\x4e\x04\x95\xb8\x1d\x4c\xea\xa9\x87\xe2\xc7\xe6\x91\x24\x74\x88\x2c\x4c\x38\x6d\x1c\x6f\xa6\x32\x77\x0d\x05\x81\x19\x89\x52\x84\x88\xde\x23\xd0\xe4\x3c\xe1\x42\xb9\xcc\xac\x3b\x2e\x47\x60\x46\x85\x4a\x49\x04\xd7\xb7\x7d\xfd\xf8\x0b\xbb\x25\xd2\xe4\x01\x6c\xe4\x12\xf0\x9b\x42\xc1\x48\x04\x41\x2a\x15\x8f\x51\x48\xb7\x74\x91\x51\x84\xae\x3e\x23\x4e\x99\x3b\x28\xda\x36\xd4\x54\xf1\x55\xc1\xee\x2d\x6c\x97\x46\xbe\xf9\xd5\x21\x3b\x78\xc8\x17\x3e\x34\xdb\x22\x78\x34\x28\x04\x8c\x9a\xc7\x79\x2b\x2f\x88\xe9\x9e\x74\x6d\xae\x10\x61\x79\x56\x28\x97\x32\xf4\x94\x73\xa2\x94\x64\xd2\x02\x8f\xba\x0e\x24\xcc\x51\xa0\xbd\x29\xba\x81\x7c\xdf\x22\x43\x41\x83\xd5\xe1\xd0\x43\xe3\xeb\xfc\x01\x03\x7b\xde\x35\x46\xe6\xd9\x5c\x75\x5b\x99\x90\x60\x3f\xa3\x9a\x9e\xec\x27\x37\xf5\xb0\xe6\xf7\xdc\x37\xf4\x37\x64\x44\x12\xde\xbe\x04\xc5\x9c\xf8\xdd\x56\x01\x18\x94\x54\xd4\x66\x2c\xa3\xad\x6a\xec\xac\xd7\xdf\x16\x31\x63\x22\xd0\x4d\x06\x7b\x97\xf9\x09\x43\xa9\x30\x84\x05\x89\x23\x38\x35\x8f\x3e\x9b\x21\xce\xcc\x2f\x1a\x0f\x20\x53\xb2\x2a\xf7\xbb\xdd\x7c\xd5\xda\xb7\x56\xba\xb7\x3a\x5c\x17\xcb\x8c\xa8\x2d\xf9\x94\x0b\xa9\x51\xdd\x26\xd8\xf8\x98\xa0\x21\x8f\x34\xb7\xc3\x85\xf7\xe5\x2f\xf7\xb4\xd1\xdd\x0f\xa7\xb7\xb6\x70\x3f\x97\xd6\x6c\x24\xd7\x2d\x97\xea\x77\x4f\xd2\x97\x84\x95\xb1\x89\x2b\xb8\xf3\x40\x13\x17\x04\x39\xcc\xf9\x1b\xa2\xb2\x20\x8c\xad\x42\x4f\xb8\x94\x54\x23\x4b\x41\x27\x53\x05\x8c\xcf\x9b\xa9\xad\x70\x4c\xb7\x7b\x4a\xba\x1e\xe7\xf0\x8d\xf6\x86\x7f\x7d\xb7\x51\x39\x43\x5a\x59\x6a\x0f\xfe\x19\xb1\xbd\x62\xbf\x9a\xb2\xac\x08\xfb\x7a\x63\xd0\x71\xbd\x8a\xc3\x8c\x62\x8a\x36\xb2\xa0\x5a\x01\xa9\x6e\xd0\x56\xd5\x25\x0d\xad\xaa\xb8\x2a\xd7\x8d\x7a\x15\xe1\x75\x6e\x2a\xf4\xd5\xee\x2c\xaf\x0d\x9c\x34\x1c\xdd\x7f\x97\xe0\x0e\x10\x66\x87\xb3\xec\x25\xb8\xea\x11\x89\x41\x38\x03\x54\x8a\xb2\xc9\x03\xc4\x46\x7f\xcc\x8a\xd8\xee\x57\x31\x3f\x91\xec\x45\xf5\x2d\x36\xdd\x5b\xd0\x9f\xac\xd7\xba\xca\x7b\xbc\x27\x23\x8c\x0e\xe2\xb4\xe6\x4f\xc3\x13\x88\x0c\x1d\x7e\x77\xaa\x79\xb6\xc7\x04\xc3\x2a\xc7\xa8\x2b\xad\xdb\xf5\x79\xed\x1b\x7f\xfd\xf6\xb8\xca\x7b\xe3\x4a\x37\xc6\xad\xdd\x15\x57\xba\x25\x6e\x79\xf7\xcb\x86\x9b\xe1\xb6\xd1\x5f\xbc\x70\xe6\xe9\x6d\xb5\xed\x62\x15\x1f\x56\xf1\x09\xff\xd0\xd4\x33\x74\xeb\xe3\x6d\x8c\x9b\x65\xdb\x8c\x6c\xae\xb1\xb6\x17\xed\xd9\xcb\x9e\xfa\xcb\x4f\x58\xf8\x02\x24\x99\x4a\xe7\x34\xf4\x72\xbf\x0f\x3f\xcd\x89\x66\x79\xa7\xfb\xa9\x1e\xd0\xfd\xfa\xd3\x17\x36\xb0\x22\xa3\x0a\xa6\x64\x86\xc5\x46\x24\x8c\x29\x83\x44\xd0\x19\x8d\x70\x82\xf2\x27\xcf\x6e\xad\x9b\x0d\x97\xaa\x3c\x84\xf7\xb1\xb4\x04\x69\x83\xe2\x54\xe5\x63\xe7\x2e\xbc\x6d\xd9\xf1\xe6\x60\x8f\xc8\xe7\x88\x7c\x4a\x14\xee\x09\xf9\x54\x5e\x8f\x76\x04\x3e\x7b\x03\x3e\xbe\x2f\x73\x1c\x02\x00\x65\x9b\xa1\x3f\x90\xdc\xc5\x52\xbf\x36\x92\xee\xb6\x39\xef\xef\xa4\x9a\xff\xab\x19\x3f\xb0\x9d\xed\xbd\x3a\xbb\x9d\xb4\x9f\x8f\xad\x95\xbf\x93\xd5\x82\xe7\xee\xef\xe3\x47\xec\x55\xa6\xa5\x1b\x27\xf8\xdb\xf8\x48\xf9\x84\x80\x19\x79\x9e\x65\x2f\xcc\x29\x40\xee\x71\x26\x9e\x08\xa4\xab\xfa\x94\xdf\x8f\xbf\x2c\xad\x97\x50\xb5\xe0\x39\x95\x28\x5a\xc5\x99\xb2\x0e\xfc\x37\x49\xe6\xec\xea\x01\xef\xab\xcc\xbb\x4c\xdc\x5f\x89\xd0\xe2\x1a\x32\x53\xcf\xce\x45\x4d\x1a\x1a\x1c\x3d\xae\xb8\x93\xfe\xfe\x1f\x72\x39\x7d\x97\xf7\x56\xd9\x22\x45\x30\x45\x8a\x67\x60\x6a\xd4\x18\x0f\x51\x2f\x38\x9c\x45\x0b\x20\x10\x13\x9b\x15\x1e\x5b\xc3\x1b\x53\x8c\x42\xfd\xd8\x85\xb5\xce\xaa\x69\x36\x41\xbc\xc7\xcc\xeb\x97\x63\xa5\xb9\x6e\x3c\x21\x06\x2d\x13\x4b\xe6\x52\x1c\xb1\xab\x0e\xac\x7d\x36\xba\x50\x0a\xee\x3e\xb5\x97\xfd\x66\x04\xe9\xa2\x7e\xcb\x9b\x82\xb3\x92\xbd\x2b\x1e\xe4\xae\x0a\x2e\x69\xeb\x86\x0b\x74\x77\x35\x67\xa8\xf0\xc6\x72\x0a\x17\xb7\xd7\x4e\x6e\xee\x1c\x74\x6f\xaa\x54\x22\xcf\xfb\xfd\x09\x55\xd3\x74\x74\x16\xf0\xb8\x2f\x49\x2c\x53\x36\x39\x0d\x58\xa0\x32\x59\x9d\x3a\x59\x9d\x92\x84\x6a\xa2\xbe\xbf\xf8\xfe\xe2\xff\x03\x00\x00\xff\xff\x07\xed\x15\x0e\xac\xa4\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 42156, mode: os.FileMode(420), modTime: time.Unix(1537432625, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": {apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
