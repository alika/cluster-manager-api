// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdd\x6f\xdc\xb8\x11\x7f\xf7\x5f\x31\x50\x0b\x34\x01\x62\x6f\x2e\x7d\xcb\xcb\xd5\x70\x0e\x39\x23\x71\xce\x88\xd3\xf8\xa1\x09\x0c\x2e\x35\x2b\xf1\x4c\x91\x0a\x39\xda\xed\xb6\xf0\xff\x5e\x90\x92\x56\x1f\x2b\xed\x87\xb4\x8d\xd7\x97\xbb\x97\x4b\x44\x72\x3e\x7f\x1c\x0e\x39\xb3\xf9\xef\x09\x40\x60\x17\x2c\x8a\xd0\x04\xaf\x21\x78\x75\xf6\x32\x78\xe1\xbe\x09\x35\xd3\xc1\x6b\x70\xe3\x00\x01\x09\x92\xe8\xc6\x2f\x64\x66\x09\x0d\x5c\x31\xc5\x22\x34\x70\x7e\x7d\xe9\xe7\x03\x04\x73\x34\x56\x68\xe5\x66\xcd\x5f\x9e\xfd\x54\x10\x02\x08\xb8\x56\xc4\x38\xad\xa8\x01\x04\x8a\x25\x9e\xdc\x95\xe0\x31\x43\x09\x9f\x51\xe1\x7f\x04\x2b\x56\x00\x04\x99\x91\x6e\x3c\x26\x4a\xed\xeb\xc9\x24\x12\x14\x67\xd3\x33\xae\x93\xc9\xbc\x3d\x15\x13\x26\xfc\xe4\xa4\x18\xfa\x47\xe4\xbe\xb8\xc9\x81\x9f\xf3\x70\x02\xf0\xe0\x95\xb2\x3c\xc6\x04\x6d\xf0\x1a\xfe\x95\x8b\xe6\xe8\x97\x62\x7a\x5e\x6e\xc5\x57\x3f\x97\x6b\x65\xb3\xc6\x64\x96\xa6\x52\x70\x46\x42\xab\xc9\xef\x56\xab\x6a\x6e\x6a\x74\x98\xf1\x1d\xe7\x32\x8a\x6d\x65\xd9\x09\x4b\xc5\x64\xfe\xd3\x84\xe7\x86\xad\x1b\x29\xc2\xba\xcd\x9c\xf8\x59\x92\x30\xb3\x74\xba\xde\x0a\x29\xc1\x20\x19\x81\x73\x04\x8a\x11\x2c\x31\xca\x2c\xe8\x19\x30\x28\x88\x01\x53\x21\x08\xb2\x70\x9f\x4d\x91\x6b\x35\x13\x11\xcc\xb4\x01\xae\x95\x42\x4e\x62\x2e\x68\xb9\xb2\x23\x40\xa0\x53\x34\x5e\xe4\xcb\xd0\xf1\x78\x8b\x54\xb8\xbb\x3e\xc9\xa0\x4d\xb5\xb2\x68\x1b\xb2\x01\x04\xaf\x5e\xbe\x6c\x7d\x02\x08\x42\xb4\xdc\x88\x94\x0a\x60\xd4\x08\xe5\x1a\x39\x87\xb0\xb5\x65\x00\xc1\x5f\x0d\xce\xdc\x8a\xbf\x4c\x42\x9c\x09\x25\x1c\x05\x5b\x5a\xe9\x2e\xc9\xe1\x77\xc7\x52\x51\x49\xf9\x11\x53\xb9\x0c\x1a\x84\x1e\x4e\xba\xfe\xfc\x50\x53\x27\x65\x86\x25\x48\x68\x2a\xe7\xe5\xff\xb5\x14\x29\x11\xeb\xff\xff\x62\xa3\x92\x1f\x58\x82\xce\x0f\xce\x2b\xa5\x27\x48\xc3\x14\x41\x6a\x7d\x8f\x21\x64\xe9\x59\x9b\x84\xf0\x2b\xbf\x65\x68\x96\xed\x21\x83\xdf\x32\x61\xd0\xb9\x64\xc6\xa4\xc5\xd6\x30\x2d\x53\x2f\x98\x25\x23\x54\x14\x74\x2a\xfc\xb5\xa6\x30\xb1\xa8\xad\x6a\xb9\xab\xab\xc5\x5f\x4f\x5a\x96\x0a\x42\x94\x48\xb8\x19\x8f\xf9\x9c\x0a\x7f\x1b\xb0\xf5\xc6\x4f\x7d\x02\xf0\x6a\x08\x7a\x2c\x08\xbb\x8d\x19\x81\xb0\x75\x84\xfd\xcd\x82\x5b\xe8\x80\x16\xa2\x25\xa3\x97\x4f\x0f\x63\x69\xb6\x25\xe0\xa5\x46\xcf\x85\x3b\x64\x76\xc2\xd8\x85\x41\xf6\x24\x30\xd6\x10\xf4\xbb\x60\x6c\xaa\xc3\x35\x0c\xe4\xf0\xe8\x1a\xa9\xa1\x83\x4c\xd6\x06\xc7\xa1\x0d\x70\x65\xa3\x5d\xd4\x1f\x8e\xb7\x93\x9a\xf5\xda\xe7\xef\x44\x0a\x4b\xc3\x0e\x61\x06\x6e\xad\x0b\xfc\x05\x2d\xbb\xd3\xd9\xfa\xde\x31\x3c\x62\x70\x36\x25\x1d\x84\xce\x03\xb8\x27\x42\x4a\x75\xc8\x75\xa6\x1a\xde\x49\xb5\xed\x77\xcf\x8d\x48\x52\x89\x90\xea\x10\xfc\x42\x28\x4d\x7b\x06\x50\xb8\xce\xfd\x3d\x84\x85\xa0\xd8\xc7\x52\x95\x25\x53\x34\xce\x85\xa9\x0e\x2d\x08\x95\x7f\x65\x09\xda\x94\x71\xcc\xe3\x4f\x88\xe1\x66\xc7\x5e\xeb\xf0\xc2\x0b\x7a\xdc\x5e\x2d\xc5\xfc\x11\x03\x4e\x4d\xfd\xc7\x09\x37\x31\x4a\xa9\x17\xda\xc8\x70\x5f\x38\xff\xea\x56\xc2\xad\x5b\x0a\x37\x68\xe6\x82\x23\x9c\xc2\x22\xc7\x73\x8a\x8c\x80\x41\x64\x10\x49\xa8\xc8\x65\x03\x25\x82\x77\x01\xaf\xa7\xed\x49\x1f\x33\x76\x2b\x29\x7f\x44\xe8\x56\xda\x3f\x1a\x72\x93\x3a\x66\xf7\xb8\x18\x84\x98\x4a\xbd\xc4\x10\x1c\x0d\xe0\x31\x33\xb4\xf5\x8a\xf0\x2b\xca\xe4\xa2\x3d\xf3\xd8\x10\xd9\x12\xf5\x18\xaf\x09\xaa\x76\x29\xcd\xfd\x90\xa0\xa2\xef\x73\x47\x78\xb1\x9b\x36\xfe\x8c\xdd\x53\xa5\xfc\x5c\x7e\x24\xbd\x0e\xb0\xc5\x76\xbf\xfb\x08\x65\x89\x49\x09\xcf\xb4\x01\x83\xc5\xdf\x9e\xd7\xb6\xd2\x17\xf5\x29\x16\x36\x3f\x09\xa6\x98\xdf\x02\x33\x4e\x62\x8e\x20\xfc\xa3\x90\x9b\x04\x31\xb3\xc0\xa4\x41\x16\x2e\x61\x8a\xa8\xaa\x4d\xb9\xca\x82\xac\x83\x4a\x0b\x5e\xed\xcd\x79\x99\xf3\x7f\x12\xbb\xb3\x2d\xeb\x8f\x78\x6a\xb4\x6d\xf0\x38\x67\x07\x09\x29\x9b\x6f\x9c\x1b\x33\x9e\x4d\xb8\x2f\x48\xf5\x23\xf4\xba\x7c\x2b\xf8\xb4\x36\xf3\xd8\x00\xda\x12\xf5\x47\xc4\x67\xcb\x04\x8f\x03\xcf\xaa\x82\xb1\xd7\xf5\x3f\x33\x0a\x8a\xa5\x20\xd4\x4c\x9b\xc4\xc3\x10\xd8\x54\x67\x04\x2c\x15\x60\xd1\xcc\x37\x82\xf5\x2d\xd2\xe7\x9c\xc2\x65\x45\xe0\x98\x21\x5b\x09\xfc\xdd\x5e\x04\x56\x55\x9c\x9a\x68\x55\x1d\xa5\x25\x50\x87\x35\x6b\x5e\x2d\xcf\x74\x3d\xfd\x1d\x79\x75\x76\x05\xa9\x71\x7e\x21\xd1\x32\x73\x10\x09\xba\x5b\x07\x07\x74\xa4\x07\x2f\x1a\x63\x65\xd5\xec\x53\x8c\x40\x2c\x02\x9d\x3f\x28\x44\x82\xdc\x5d\x4d\x5b\x41\xda\xd4\x6c\x57\xb7\x90\x63\xc9\x75\x92\x08\x1a\xcc\x31\x66\x36\x2e\x53\x23\xc7\xb2\x20\xd7\xcb\x8e\x0c\xe2\x9d\x25\xd6\xca\xe6\x77\x65\x79\x1b\x23\xc5\x68\x40\x1b\x50\x9a\x3c\x57\x47\x11\x16\xcc\x02\x97\xc8\x14\x2c\x62\x54\x30\xcd\x84\xec\x11\xc2\x0d\x85\x77\xe1\x50\x01\xde\x30\xf2\xa9\xa0\x27\xd3\xa3\xa6\x1e\xe5\xc7\x02\x55\x8e\x49\xa4\x21\xb3\x18\xba\x1b\x36\xd7\x49\x2a\x24\x76\x73\x2c\x06\xcd\x20\x7e\x17\xc5\x62\xcf\xaa\x9b\x7e\x2a\x19\x39\x8c\x0f\xa2\x7f\x5d\x2c\x06\x41\xb9\x9b\x72\x7e\xa1\xaf\x12\x4e\xc0\x64\x4a\x09\xe5\x60\x5b\xe3\xdd\x19\x41\xbb\xde\x74\xf3\x4f\x6f\x90\x98\x90\x97\x84\xc9\x98\x0d\x28\xc2\x41\xfa\x5d\xbe\x69\xd5\xe1\xba\x6d\x58\x9c\x89\xfb\xd3\xef\xa8\xf4\x75\x73\xc8\x8b\xb3\x03\xb7\x55\x75\xe3\xa9\x6a\xbc\x5b\x39\x56\x25\xdf\xd1\x5c\x6b\xd5\x63\x8f\x76\x5f\x3c\x2e\x9f\x96\xd6\x85\xd8\x13\x20\x7f\x42\xe3\xbb\x40\x63\x67\xaf\xd4\x4b\x31\xe7\xb7\x37\x37\x29\xf2\x31\xee\x31\x18\x8d\x39\x35\xf3\xe5\x3e\x1e\x9d\xdf\xde\xf4\x58\x10\xb9\x41\xba\xbb\xc7\xe5\xdd\x40\x30\x38\x4e\x37\x9e\xca\x3b\x5c\x5e\xe6\xe1\xef\xfc\xfa\x12\xce\x39\x47\x6b\x37\x72\x65\x7e\x8a\x63\x3e\x92\x73\xce\xeb\x1d\x2e\x57\xdc\x59\x9b\xfb\x20\x1f\x5e\x31\x36\xda\x89\xa8\xc2\x54\x0b\x35\x3c\x15\x71\x42\x78\x9d\x56\x94\x3a\x6d\x9a\x59\x34\x83\x77\x9c\xe3\x53\x12\x28\x4b\x37\x25\xdf\x6e\x76\x9a\x65\x14\x8f\x72\xdd\x6f\xe7\x19\xc5\x70\x5f\x38\xcd\x71\xec\x50\x70\x98\xdb\x6c\x34\xc6\x63\x87\x8c\x5b\x45\xf3\xca\xaa\xf8\xde\x9b\x8a\xe4\x05\x86\xb5\x54\x67\x58\x19\xf8\xba\xa0\xe6\xb1\xdb\xef\x81\x92\x29\xd8\x14\xb9\x98\x15\x3d\x57\x63\xad\xdf\x60\xfe\x18\x6e\xa8\x87\xf6\x95\x8a\xa7\xc0\x33\x63\x50\x91\x5c\x02\xc5\xc2\xba\x09\x6c\x61\x5d\xc6\x9d\x30\xd6\x13\xa7\xfc\xc8\x41\x3c\xb2\x8a\x24\x5b\xf6\x79\x9f\x27\x6a\x42\xb1\xc5\x81\x64\x2a\x4f\xa8\x7e\x91\xce\x6f\xfb\x25\x1a\x84\x8d\xfc\xc2\x3b\x02\x14\xfa\xbe\x0f\x12\x53\xad\xdd\x45\xa9\xa9\x4d\x7e\x83\xed\x1d\xde\x74\xff\x2a\x37\xb0\xcb\xed\x6b\xdb\x17\xa6\x05\x7e\x0c\x7e\xcb\xd0\xf6\x04\xe3\xf5\x8e\xc4\x3d\xfd\x54\xcb\xef\x3a\x19\xa0\x31\x7a\x38\xf9\x5f\xfc\xea\xfd\x7d\xd9\xd1\xd0\x75\x7c\xbe\xbc\xd0\x99\x0c\x1b\x2e\x2c\x5f\xf4\xf5\xb2\x2f\xfc\x8e\x48\x24\x6f\x1a\xc9\xe3\x3a\x2a\xf6\xb3\x6d\xeb\xa1\xfd\xf8\xac\x7b\xcb\xf2\xc0\xba\x7a\x84\x03\x9b\xf9\x5c\x6b\x96\xc9\x9e\x20\x8a\xd6\xb2\x68\x44\x28\x2f\x08\x58\x58\xa0\x41\x88\xc4\x1c\x87\xc4\xa1\x5f\x5a\x3b\x66\x6f\x83\x72\x1d\x0e\x4f\xae\xfc\x7e\x05\x4f\xe2\xe0\x46\xaa\xe8\x97\x54\xf6\xb7\xce\x5b\x54\x68\x04\xaf\x6a\x52\x8f\x7d\x70\x77\xd7\x5c\xfb\x2f\x9a\x79\x01\xf4\x10\x5c\xf3\xb2\xa8\xef\x05\x75\x6c\xfd\xf7\x5a\x4b\x3a\x90\xee\x96\xc2\x60\xaa\x47\x0b\x90\x17\x1a\xb7\x3d\x70\xf2\x96\x8b\xc6\xf0\xf2\xde\xea\xe4\x32\x67\x32\x5b\x7f\x34\xdf\x9d\x0d\x33\x58\x84\x0a\x7f\x10\xc1\x33\x85\x96\x30\x84\x25\x4b\x24\x9c\xfa\xa1\xcf\x9e\xc5\x99\xff\xc2\xb5\x22\x54\x64\x9f\xf7\x48\x33\xe2\xed\x71\x5d\xeb\x92\xda\xa8\x9d\xf2\xb1\x72\xd3\x31\x6d\x97\x6d\xe8\xc9\x7f\x1f\x32\x8e\xdf\x3f\x3f\xbe\xdf\xc8\x6e\x77\x6b\xae\x77\x48\x1e\xdf\xa1\x77\xd9\x68\x17\x2f\x2f\xc8\x76\x69\x7b\xf3\xb3\x55\x1b\x6b\x8f\x38\xcc\x18\xd6\xac\x14\x06\x82\x30\x69\xcf\x1f\x9d\x33\xb6\x3a\x48\x2a\x95\xde\xb7\xfb\x6d\xc7\xf8\xee\x0f\xe7\xb7\xb1\x89\x7b\xed\xe5\xfe\x88\xd2\xf7\x56\xe7\xe6\xc8\x98\x35\xfc\xc4\xfd\x50\x3f\x65\x67\x48\x3c\xef\x9d\x59\x35\x1b\x7f\x51\xef\x91\xcd\x11\x30\x49\x69\xe9\xe6\xf8\xde\x23\x60\x52\x56\x07\xf4\x40\xc0\x36\x1b\x77\x47\x58\x20\xd5\x61\xef\xe6\x16\x8a\x30\x6a\xd4\xac\x1b\x98\x15\x8a\xfe\xfe\xaa\xcf\x34\x5b\xba\xa8\x9f\x69\xd3\xb2\xc3\xf3\x61\x86\x68\x54\xa0\x8f\x70\xe7\xce\x6a\x37\x0c\x77\x05\xff\xed\xdd\xc6\xb4\xe0\x4e\x74\x56\xab\xa1\x7f\x5f\x6d\x2f\x7a\x6f\xae\x63\xd6\x67\xee\xef\x81\x66\x27\xea\xff\x37\x7b\x58\x97\x6e\x45\xb5\x71\x87\xa8\x77\x47\x37\xee\xb1\x3b\xe9\x31\x1a\x49\xbb\x5d\x81\x76\x55\xa6\x6c\xfa\x70\xe1\xa3\xa6\xd8\x56\x85\xba\x9a\xbd\xc6\x84\x09\xc6\xef\x59\x84\xc5\x4f\x7e\x3f\x1c\xe4\x49\x33\x27\x09\x85\xd0\x1b\x12\xf8\xce\x6b\xc2\x1e\x6d\x2a\xad\x2b\x61\xcf\x73\x8b\xcf\xa7\x6f\x90\x48\xa8\xa8\xe7\x1d\xb5\xeb\x6a\x34\x44\x8e\x5a\xc2\xdd\x2d\x4c\x35\xa1\x4b\xa2\x5d\x37\x67\x77\xd3\xe3\xf1\x05\xc9\x27\xfb\x16\xd3\xd1\xb1\x36\xe6\x61\xa6\x3b\x67\xdb\xad\x4b\xa4\x2c\xd3\x78\x41\xc0\xc6\xfe\xf1\x70\x8a\x65\xeb\x24\x86\xd0\xf7\x0e\x7f\xb0\x1c\xa8\x9f\xb5\xe8\x61\x3d\xba\x0f\x47\x69\x7f\x7b\xf3\x9c\xfd\xaf\x12\x5c\x98\x2c\xbb\x45\x27\x90\xa5\x91\x61\x21\xf6\x3e\x75\x94\x2e\x5d\x88\xfe\x27\xb1\x43\x24\xee\x85\x69\x56\x3f\x58\x3d\x75\x0c\x8b\xaf\x3f\x7f\x51\x37\xb9\xc9\x04\x41\xec\xd2\xc5\xc6\x24\x16\x26\x42\x41\x6a\xc4\x5c\x48\x8c\xd0\xfe\xdc\x53\x4c\x71\xd3\xee\x6a\x59\xe5\xe8\xfb\xda\x8e\xbd\xfc\x1d\x48\x70\x3a\xbb\x30\x4f\x35\x2c\xb0\xa9\xf4\x47\x58\xae\xce\xa0\x54\xa3\xb3\x43\xf6\xcf\x60\xb6\x67\x30\x5b\x75\x50\xe2\xbf\x09\x8d\x62\xf2\x8d\xe6\xb5\x16\xca\x56\xd7\xe8\x95\x36\x58\xf4\xb0\x6e\xf8\x57\x3f\xfa\xff\xa1\x0e\xcb\x12\x9b\xa9\xe8\x94\x2b\x4e\xe5\x99\x78\x5a\xf8\xf4\x94\xa5\xc2\x89\xf9\x70\xf2\x70\xf2\xbf\x00\x00\x00\xff\xff\x33\x97\xf5\x66\x83\x44\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 17539, mode: os.FileMode(420), modTime: time.Unix(1528411484, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
