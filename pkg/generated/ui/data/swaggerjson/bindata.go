// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x7f\x6f\xdb\xb6\x9b\xff\xbf\xaf\xe2\x81\xef\x80\x4b\x81\x26\xee\x7a\xd8\x61\xc8\x30\xec\xb2\x04\xd7\x05\x5d\xba\x60\xee\x35\x18\xae\x83\x41\x4b\x8f\x6d\x2e\x12\xa9\x92\x94\x5d\xef\xd0\xf7\xfe\x05\x49\xc9\x96\x68\xd1\x96\x25\x27\x56\x1a\x0f\x18\x9a\x48\x14\xf9\xfc\x22\xf9\x79\x1e\x3e\x7c\xf2\xff\x2f\x00\x7a\x72\x4e\x26\x13\x14\xbd\x73\xe8\xbd\x39\x7b\xdd\x7b\xa5\x9f\x51\x36\xe6\xbd\x73\xd0\xef\x01\x7a\x8a\xaa\x08\xf5\xfb\xcb\x28\x95\x0a\x05\xdc\x10\x46\x26\x28\xe0\xe2\xf6\xda\xb4\x07\xe8\xcd\x50\x48\xca\x99\x6e\x35\x7b\x7d\x96\x77\x04\xd0\x0b\x38\x53\x24\x50\xcb\xde\x00\x7a\x8c\xc4\xa6\xbb\x01\x89\x65\xca\x26\x70\xf9\xfe\xf2\x43\xd6\x1c\xa0\x97\x8a\x48\xbf\x9c\x2a\x95\xc8\xf3\x7e\x7f\x42\xd5\x34\x1d\x9d\x05\x3c\xee\x4b\xdb\xfe\x34\x60\x81\xea\x07\x96\x96\xd3\xd8\xd2\x72\x4a\x12\xba\xea\x03\x63\x42\x4d\x2f\x24\x8c\x29\xfb\xef\xe2\x87\x67\x94\xf7\x4c\xb3\xaf\x2f\x00\xbe\x1a\x6e\x65\x30\xc5\x18\x65\xef\x1c\xfe\xcf\xd2\x6c\xc6\xce\x19\xd0\xbf\xe8\x2f\xfe\x32\x6d\x03\xce\x64\x5a\x6a\x4c\x92\x24\xa2\x01\x51\x94\xb3\xfe\xdf\x92\xb3\x55\xdb\x44\xf0\x30\x0d\x6a\xb6\x25\x6a\x2a\x57\x22\xef\x93\x84\xf6\x67\xdf\xe5\x5c\x16\xa5\x37\xc1\xa2\x30\x35\xf9\x69\x1c\x13\xb1\xd0\xec\xde\xd1\x28\x02\x81\x4a\x50\x9c\x21\xa8\x29\x82\x54\x44\xa5\x12\xf8\x18\x08\x64\x9d\x01\x61\x21\x50\x25\xe1\x3e\x1d\x61\xc0\xd9\x98\x4e\x60\xcc\x05\x04\x9c\x31\x0c\x14\x9d\x51\xb5\x58\x8a\x12\xa0\xc7\x13\x14\x86\xe4\xeb\x50\x8f\xf1\x16\x55\x66\x07\xc5\x46\x02\x65\xc2\x99\x44\x59\xa2\x0d\xa0\xf7\xe6\xf5\x6b\xe7\x11\x40\x2f\x44\x19\x08\x9a\xa8\xcc\x62\x0a\x1d\x59\x8e\xb4\x42\xc8\xda\x67\x00\xbd\x7f\x17\x38\xd6\x5f\xfc\x5b\x3f\xc4\x31\x65\x54\xf7\x20\x73\x29\x0d\x33\x5b\x18\x92\x84\xae\xa8\xfc\x03\x93\x68\xd1\x2b\x75\xf4\xf5\x45\xd5\xcf\x5f\x0b\xec\x24\x44\x90\x18\x15\x8a\x95\xf2\xec\x7f\x0e\x23\xb9\x29\x9b\x7f\x5f\x6d\x64\xf2\x3d\x89\x51\xeb\x41\x6b\x25\xd7\x84\xe2\x30\x42\x88\x38\xbf\xc7\x10\xd2\xe4\xcc\xed\x82\x9a\x2f\x3f\xa7\x28\x16\xee\x2b\x81\x9f\x53\x2a\x50\xab\x64\x4c\x22\x89\xce\x6b\xb5\x48\x0c\x61\x52\x09\xca\x26\x45\xf6\xbf\xbe\xda\xce\x0e\x99\xcb\x33\x89\x81\x40\x35\xbc\xc7\xc5\x90\x86\x5b\x78\xfb\x30\x45\x18\x98\xf6\xef\x70\x71\x1d\x1a\x73\xba\xb8\xbd\x86\x8b\x20\x40\x29\xbb\xc8\x16\x31\x94\x69\xee\x6a\xb3\x66\x99\x79\x87\x8b\x25\x7b\xa4\x7b\xec\x09\x9c\x68\xc2\xb7\xf3\xf4\x87\x69\xd8\x59\x56\xfe\x49\x05\x9e\x91\x24\xa9\x67\x7b\x17\x49\xd2\x61\xab\x33\xbc\x28\x64\x84\xa9\x1a\xbc\x7c\x30\x0d\xbb\xad\x98\x84\x48\x39\xe7\xa2\x8e\x6a\x6e\xb3\xa6\xdd\x66\x48\xa6\xa3\x25\xe5\x35\x97\xbb\xc2\x17\x5d\xe5\x2d\x11\x7c\x46\xc3\xd2\x46\x5d\xc5\x4e\x71\x67\xca\x3f\x91\x70\x42\xe6\xb2\x6f\xa4\xd3\x9f\xc5\x73\x22\xb0\x8f\x2a\x78\xf9\x70\xbc\x39\x6f\x91\xa5\xb1\xb3\xf7\x9a\xe7\x29\x33\x3b\x3f\xba\x3a\x02\xb3\xfe\x55\x3c\xd4\x1c\xac\x3f\xb6\x2c\x95\x61\xc1\x5f\x6b\x62\x1a\x93\x34\xd2\x68\xab\x30\x6a\x25\x74\x28\x7c\xd9\x53\x64\xe2\x82\x86\x1c\x38\xaf\x3e\xfe\x2b\xfb\x69\xa9\xc5\x5e\x88\x11\x2a\xdc\x8c\xec\x6c\x9b\x15\x92\xdb\x80\xd2\xae\x4c\xd3\x27\x00\xd4\x4a\x84\x76\x05\xab\xdd\x4d\x89\x02\x2a\x8b\x58\xed\x3f\x24\xe8\x0f\x35\x64\x0b\x51\x2a\xc1\x17\x9d\x99\xe6\x47\xb4\x76\x44\x6b\x87\x65\xe5\x88\xd6\xba\xac\x98\x23\x5a\x3b\xa2\xb5\x7d\xf3\xf6\xcc\xd1\x5a\xc2\xe5\x96\x28\x9c\x51\x8d\xd4\xe6\x56\x07\xae\x5d\x0a\x24\x4f\x02\xae\x95\x08\x7d\x14\xb8\x36\xe2\xe1\x9a\xad\x5a\x33\xae\x7a\x53\xb0\x62\x25\x52\xd7\x88\xf7\x2d\x80\x1b\x39\xa9\xc3\xfe\x3e\x0c\x2e\xdd\x62\x6f\x24\xfc\x3b\x95\x0a\xc8\x8e\x86\x77\x61\x3e\xcb\x08\x78\xcf\x43\x94\x5d\xb6\xbe\x12\xb5\xcf\xd1\xfa\x4a\x02\x78\x70\xeb\x7b\x51\x90\x9e\x7b\x24\xd1\x8f\x68\x69\x09\xdc\xe1\x5c\x82\x80\xfe\x56\xef\x61\x59\x5f\xb2\xd6\x71\xc3\x6f\x7a\xc0\x0e\x1b\x67\x99\xd2\x47\xb1\xce\xa3\xe7\x77\xf4\xfc\x0e\xcb\xca\xd1\xf3\xeb\xb2\x62\x8e\x9e\xdf\xd1\xf3\xdb\x37\x6f\xcf\xd3\xf3\xdb\x08\x85\xd2\x64\x22\x48\x88\xbb\xa2\xa1\x54\x30\xc8\x3e\x05\x6e\xb4\x2c\x8d\x85\x12\x98\xd0\x19\xb2\x1a\xe8\xfd\x2d\xaa\xff\xb5\x1d\x64\x94\x5f\xb3\x31\x17\xb1\x69\xd1\x71\xa8\xe4\xa5\xfb\x51\x80\xd3\x71\xc6\x3d\xec\x8c\x3b\x9e\x5a\x1c\xb1\xeb\x11\xbb\x3e\x36\x2f\x47\xec\xda\x65\x86\xbe\x4d\xec\xda\xec\x34\x1d\x94\x7e\x36\x47\x20\x02\x21\xe0\x4c\xea\x9d\x95\x32\x9b\x88\x9a\x61\xa2\xc7\x61\x71\x0f\xd8\x70\x87\x20\xad\x52\x18\x27\x0a\x14\x5f\x02\xbf\x3a\x41\xda\x32\x56\xea\x32\xb0\x2b\x53\xfa\x1c\x23\xb4\x65\x09\x1c\x28\x44\x2b\x30\x44\xa6\x28\x89\x64\x5f\x43\xbf\x82\x5f\xb2\xd5\x44\xd3\x24\x24\x0a\x81\xcc\x25\x14\xba\x81\x54\x62\x98\x39\x27\x75\xec\x55\xf7\x71\x71\x37\xb8\x5c\xf5\xd0\x6d\xab\x5d\xa7\xf7\x79\xda\xee\xba\x1c\x3a\x60\xc1\xc6\x4f\x69\x62\xc3\xfa\xc3\xd6\x56\xac\x3b\x79\x5a\x76\xec\x50\xfc\x8c\x2d\xd9\x91\xc4\x61\x6c\x79\x8a\x51\x5c\x34\xdf\x1d\x32\x3d\x43\x4c\x22\xbe\xc0\x10\x74\x1f\x10\x4c\x89\x50\x5b\x73\x3e\x7f\xc5\x28\xbe\x74\x5b\x76\xcd\x52\x1d\x52\x1f\xc5\x44\xd7\x67\x7c\x15\xb3\xf9\x1d\x37\x45\xa3\x08\x05\xc8\x29\x4f\xa3\x10\x46\x08\x94\x49\x45\xa2\x08\x43\xe0\xac\x33\xe8\xdb\x52\x79\xa6\x7f\x95\x09\x09\x76\x41\xe2\x19\x83\xcb\x4f\xbb\xc6\x53\x7e\xa3\xb0\x3e\x47\xd9\x17\x26\x60\x67\xfa\x30\x53\xaf\x33\x7c\xb9\xd3\xb7\x8a\x1d\x33\x1b\xe0\x3d\x89\xbb\xa3\x8e\x63\xa8\xb4\xf3\x87\x13\x2b\x07\x74\x6b\x5a\x5a\xb6\x8a\xc1\x09\x17\x20\x30\xfb\xed\x65\x61\x7f\xf9\xc4\x3e\x4c\xa9\x84\xb9\x6e\x3c\x42\x9b\xeb\x9e\x06\x8a\xce\x10\xa8\xb9\x44\x6a\x2c\x74\x4a\x24\x90\x48\x20\x09\x17\x30\x42\x64\xab\x9d\x6a\x4e\xd5\xd4\xde\x3c\xd5\x06\xe1\x44\x07\xdc\x1d\xeb\xda\x8e\xff\x24\xb6\x2c\x97\xd6\xe7\x08\xab\x5c\x19\x1c\x06\x50\xd9\xc5\xbd\xe4\x11\x34\xb5\xfb\xac\x2b\xbf\x85\xde\xe6\xd9\x74\x1f\xd6\x5a\x76\xcd\x40\x1d\x52\x9f\xa3\x7d\x3a\x22\x38\x8c\x79\xae\x4a\x21\xec\x7c\x1a\x9c\x23\x18\xba\x3a\x0e\x05\x32\xe2\xa9\x02\x92\x50\x90\x28\x66\xdb\x8e\x83\x3f\xda\x1e\x9e\xce\x39\x70\x46\x70\x23\x6b\x6d\xa2\xac\x65\xd5\x87\x02\x69\xab\xba\x0b\x6e\x7e\x65\xe9\xf7\x8f\x37\x77\x44\xe0\x20\xc1\xa0\xa8\xdb\x1c\x81\xf0\xd1\xdf\x18\xac\x76\x30\x8d\x9b\x12\x14\x8a\x3a\xc2\xee\x91\x30\x1c\x32\x93\x68\xeb\xe8\x20\xef\x88\x08\x41\xca\x53\xa7\x47\x15\xc6\x6e\xfb\x5d\xe4\x6c\x29\xbf\x21\xc1\x94\x32\xcb\x80\x0f\x04\xae\x8a\x7d\x64\xad\x25\xcc\xa7\x34\x98\xc2\x1c\x61\x4e\x98\x09\x5d\x93\x30\xd4\xff\x14\xc2\xf9\xbd\x4a\xf5\x08\x8c\xf9\x0c\x1f\x96\x59\x57\x61\x96\xd3\x3f\xcc\xc8\xfb\xe2\xd7\xf2\x01\x63\xc1\x63\x0f\xd3\x95\xeb\x41\x5d\xd2\x5a\xd8\xd2\xd4\xdd\xf7\x36\x23\xe2\x15\xb3\x1f\xa6\x08\xfa\x63\x13\x0c\x1b\x0c\x7e\xcd\x4e\x95\xb6\xb1\x54\x4a\x7e\xbf\x78\x37\xd0\xf4\x5f\xbc\x1b\x18\x58\xc0\x02\x7c\x2b\x78\x9a\xb4\xe1\x27\xdb\x56\x9a\xf1\xc3\x0a\x1e\xc8\xc4\x50\x52\xbd\x68\xd8\xfe\x76\x1f\x23\xe7\x12\x74\x6b\x38\x19\x28\xc2\x42\x22\xc2\xe1\xd5\x9b\xe1\xec\xcd\x2b\x40\x15\x9c\xbd\xac\x1e\x32\xa6\x6c\xf8\x39\x25\x4c\x51\xb5\xf0\x0d\x4d\x99\xc2\x89\xe3\x65\xf5\xec\x22\x9e\xbd\xfe\xcf\x37\x1e\xc2\x6e\x28\xa3\x71\x1a\x03\x4b\xe3\x11\x0a\x2d\x02\x9a\x91\x2a\xe1\x24\xf3\x3f\xa4\x36\xe4\x7f\x50\x70\x1f\x89\xe4\xcb\x83\x92\x48\xbe\x34\x23\x71\xcd\xc5\x59\x57\x87\xd1\xb5\x04\xeb\x5b\x01\xb1\xea\x21\x2c\xac\x1a\xac\xb7\xc1\x9c\xef\xac\x39\xdf\x0d\xae\x88\x22\x97\xc8\x9c\xba\x3b\xbb\xda\x72\x96\x25\xd1\xc4\xd2\xee\xcc\x0a\x64\x3b\x80\x93\x54\x9e\x22\x91\xea\xf4\xbb\x8d\x36\x46\x66\x84\x46\x64\x44\x23\xaa\x16\xc3\x7f\x38\xdb\xc7\x92\x5b\x33\x70\xe0\x12\x5e\x24\x05\x0c\x29\x05\x26\x46\xaf\x20\xff\xf9\x4d\x60\x7e\x9e\xa3\xfe\x39\x5c\xe7\xce\xaf\x7b\x3b\x8e\xd6\x13\x64\x8a\xaa\xa3\xd7\xbd\x2d\x53\xfb\x5a\x42\xe2\xef\xcf\x22\x22\x26\x78\x5c\x3c\xbe\x9d\xc5\xe3\x56\x64\x35\xb5\x52\x81\xe1\xb5\x33\xaf\x76\xb6\xb4\x59\x12\x0c\x69\xd8\x78\x4b\xfc\x78\x7b\x09\x34\x7c\x05\xa3\x88\xb0\x7b\xb3\xd7\xeb\xff\x3f\xf5\x02\x43\x3b\x70\x86\xe6\xc1\x82\xa7\x9f\x7a\xaf\x60\x4c\x4d\x78\x9b\x8e\xf5\x03\x93\x99\xf1\xcb\x9f\xbf\xeb\x3e\xaa\xb5\x2e\x31\x48\x85\x5e\x6d\x8c\x0c\x9b\x92\x39\xc8\x7a\xd9\xb4\x65\x53\x12\x0f\x05\x8f\x70\x48\x44\xb3\x05\x55\xcb\xe2\xfa\xe2\x06\x74\x27\x86\xe3\x62\x2a\xca\x09\x11\xec\x65\xae\x47\x29\x79\x40\x8d\xdf\x14\x86\xb5\x2c\xe9\x7f\xb8\x80\xf9\x14\x19\x48\x1e\x23\xa8\x29\x65\x13\x69\x64\x97\x87\xc7\xac\xac\xc3\xb2\xf1\x38\x8e\x4f\x85\xd7\xd6\xc2\x68\x26\x54\x0d\xd7\x9d\xd0\xdd\xa4\xa5\xc8\x04\x38\xb3\x58\x8a\x2a\x10\x98\x70\x49\x15\x17\x8b\x6a\x0d\xe9\x21\x03\x1e\xc7\xb4\x05\x1c\x25\x72\xba\x84\x6f\x54\x41\xd6\x9d\x77\x38\x25\x10\x87\x52\x11\xd5\x6c\x29\xbe\x9b\xa2\x9a\xea\x09\x2e\x80\x71\x65\x4f\x44\x04\x6a\xd0\x2f\x21\x88\x90\x30\xab\xd5\x51\x4a\x23\x0f\x11\xfa\x55\x38\x0c\x9b\x12\x70\x65\x66\xe0\xd8\x8c\x10\x7a\xd8\xe4\xad\xf4\xf8\x71\x75\x1e\x32\xe1\xf6\xec\x5b\x71\x2d\xd7\x84\x46\x58\x3d\x62\xf6\x52\x34\x1a\xef\x32\xfb\xd8\x0c\x55\xdd\x7f\x12\x11\xa5\x6d\xbc\x51\xff\xb7\xd9\xc7\x40\x95\x55\x93\x1d\xcf\x9e\xe8\xf7\x41\xa4\x8c\x51\xa6\xcd\x76\x9b\x1b\x53\x75\xb1\xb2\x9c\xac\xd2\x62\xf6\x95\x73\x9a\x9b\xce\x06\x7f\xa6\xb3\x77\x31\x76\x52\x8e\xdb\x8d\xec\x4b\x44\xf6\x79\xfa\x8d\xb1\xae\x37\x4f\xb8\xd6\xea\xab\xbf\x2e\x26\x78\x28\x63\xe7\xb6\x9c\xa5\x5e\x77\xb5\x3d\xac\xb9\xec\x9b\xcc\xc0\xbd\x5f\x7b\x08\x67\xb6\x61\xbe\xa4\x67\xc6\xe5\xc7\x77\x0e\x25\xbb\xc5\x54\xdd\xf3\xbf\x15\xb1\xbb\x9c\xfb\x79\x3c\x97\xf9\x9a\xab\x52\xff\x3e\xb4\x2f\xc7\xac\x48\xe2\xc5\xdd\x00\x8a\xad\xaa\xa9\x70\xb2\x8c\x76\xa4\xc3\x9f\x25\x54\xa2\xc4\x64\x24\x6d\xa5\x25\x3b\x57\xac\x45\x4c\xdd\x88\xa5\x7f\xf6\x69\xf1\xc8\x04\x03\x3a\xce\x4a\xd3\x7e\x62\xa5\x4e\x32\x6c\x6b\x52\x02\x7f\x82\xef\x7f\x74\x5f\xbf\xcb\x5e\x1b\xde\x7e\x82\xff\xfa\xb1\xc9\xf2\xbb\x7e\xb1\xbf\xc5\xcc\xe3\xf7\xbe\x79\x37\xe2\x5c\xef\xed\x3e\x2f\xa4\xf2\xf5\x6a\x5e\x12\x3d\x27\xa9\x04\x02\x32\x35\x6b\xd4\x38\x8d\x40\xe0\xe7\x14\xa5\x6a\xc2\xb4\x31\x1a\xfb\x7c\x80\x62\x46\x03\xbc\x08\x02\x9e\x32\xd5\x86\xf9\x20\xa2\xc8\x54\x9b\xbd\xe7\xd2\xf4\x70\x1d\xc2\x09\xb9\x27\xe7\xe6\xe2\xc3\x95\x67\xee\x66\x83\xd9\xdd\xa7\xe5\x80\x76\xe3\xc9\x06\xcd\xb3\xff\xeb\xb9\x73\x7a\xf1\x21\x56\x74\x16\xe7\x8c\x16\x6e\x9d\xdd\xcc\xe5\xb1\x56\x2a\x50\xf2\x54\x18\xff\x11\xbf\x9c\x43\xc4\x49\x08\x23\x12\x69\x2f\x4f\xbc\xdc\xbe\x49\xb8\x93\xbd\xcd\x69\x40\xd2\xd8\x73\xf2\x5d\x4a\xf1\x84\x3d\xed\xdd\x90\xa6\x03\x55\xde\x18\xf1\xec\x38\xf9\xc5\x8d\xa6\x63\x79\xae\x73\x78\x80\x8f\x73\xab\xa2\x31\xec\xf1\xdf\xb5\x38\x08\x12\xc9\xd6\x85\x2b\x54\x84\x46\xd7\x0a\xe3\x36\x56\xd6\x50\x2e\xd7\x57\x4e\xc1\xea\x6a\x15\x34\x06\x3a\x15\x25\xb1\x3d\x4a\x36\x55\xcc\x5b\x83\xa9\x55\x31\xf4\xad\x23\xae\x6a\xa3\xb7\x1e\xb5\x50\x66\xdd\xb8\x5f\xa6\xca\xba\xff\x00\xad\xee\xee\x91\xdf\x9c\x3d\x9a\xc6\x63\x98\x46\x6d\xad\x54\x9c\x90\xb5\x51\x4f\xc4\x03\x37\x1e\x54\x9f\x41\xb3\x43\x98\x0d\x6f\x2d\x54\xee\x8a\x31\xa8\xdc\xce\xe0\x21\x40\xf0\x65\x79\x95\x34\xf1\x8f\xed\x7a\xce\x5e\xae\x03\xa4\x26\x34\x56\x62\x2e\x0f\xb5\x19\x84\x90\xb6\x71\x19\x66\xe8\x49\x4c\xa2\x7b\x73\x28\x6e\xe4\x6c\xe0\xc4\x72\xbd\xaf\xc2\x15\x2e\x5f\x79\x74\xd9\x46\x51\x1f\xec\x9c\xbc\xd6\xc9\x6d\xa1\x23\xcf\x01\x8f\x13\x37\x6f\x3d\x41\xee\x5a\x4f\x90\x90\x28\x32\x0c\xdc\xd3\xba\xda\x92\xa8\x3a\xf4\xdb\xec\x2a\x3d\xce\x54\xaa\xe3\xd7\x36\x9b\x48\x4b\xec\xdb\x4a\x5c\x15\xc7\x1c\xd5\x44\xfe\xf2\xe7\xef\x60\x2d\xb5\x3b\xe6\xef\x39\x11\x7c\x74\xf3\x3f\x54\x80\xc9\xff\xa7\x48\x96\xc5\x03\xbd\x01\xdc\xb6\xe1\xa4\x92\x00\xf2\xd8\xd2\x96\x08\x45\x3e\x68\x39\x4c\xd1\x56\xfa\xa5\xc1\x0f\x1d\xe7\x5b\xb2\x78\x0a\x41\x2a\x04\x32\x15\x2d\x6c\xb0\x81\x4a\x13\x79\xe1\x02\x62\x42\x3c\xb3\xe8\xfe\x07\xd9\xfa\xc4\xa7\x70\x7b\xe2\x5d\x3a\x42\xc1\x50\xa1\x2f\x56\xd6\x22\x62\x57\xb9\xfe\xef\x10\x9c\x7a\x88\xe8\x5d\x25\x68\xab\x1c\x67\x97\xc8\xdc\xb6\x81\x0a\xc1\xb9\xca\xb1\xa6\x74\x32\x1d\x16\x73\x29\x1e\x26\xa8\xb5\x7e\x0e\x96\x2f\x09\x54\xc2\xaf\x17\x1e\x5c\x8f\x6a\xce\xc5\xfd\x70\x4c\x46\x82\x06\x8d\x6d\xce\x7e\x9e\xad\x3d\xce\xa9\x51\xa3\x39\xdd\xd9\xd0\xa1\x5f\xca\x73\x22\x8b\xcb\xae\x0d\x5d\x51\x59\x11\x57\x5c\x47\xc3\xcd\x0d\xb1\xe0\x3c\xfa\xd5\x13\x9a\xe0\x83\xeb\x15\xe5\x94\x41\x9e\x4d\xdc\x56\x69\xfb\xc9\xab\x0d\x38\x53\x82\x47\xc3\x24\x22\xec\x81\x93\x4e\x1f\x26\xc3\x36\xe0\x71\x22\xa8\xc4\xed\x10\x4e\x4f\x3d\x14\xdf\x36\x8f\x24\xa1\x43\x64\x61\xc2\x69\xe3\xa8\x25\x95\x85\xeb\x9b\x04\x66\x24\x4a\x11\x22\x7a\x8f\x40\x93\xf3\x84\x0b\x95\x9d\xaa\x65\x57\x9d\x08\xcc\xa8\x50\x29\x89\xe0\xfa\xb6\xaf\x5f\x7f\x62\xb7\x44\x9a\x68\x32\x09\x8c\x8f\x87\x5f\x14\x0a\x46\x22\x08\x52\xa9\x78\x8c\x42\x66\x4b\x17\x19\x45\x98\x9d\xad\xc7\x29\xd3\x3b\x15\xb6\x0f\xf0\x54\xfc\x65\x94\xee\x2d\x6c\x97\x46\xbe\xc5\xd5\x21\xbf\x34\xc6\x17\x3e\x0c\xd9\x22\x64\x33\x28\x85\x69\x9a\x1f\xbd\x54\xde\x3f\xee\x9e\x74\xed\x89\x13\xc2\xf2\x9e\x47\xe1\xe0\xc9\x93\x8a\x87\x52\x92\x49\x0b\x3c\x9a\x75\x20\x61\x8e\x02\x6d\x21\xc2\x06\xf2\x7d\x8b\x0c\x05\x0d\x56\x17\xfb\x0e\x8d\xaf\x8b\xc9\xe1\xf6\xae\x62\x8c\xcc\xb3\xb9\xae\x6e\x53\xef\x63\x54\xd3\x93\xfd\xb3\x41\x7a\x58\xf3\xbc\xf0\x77\x40\x41\x71\x9f\x9f\x9e\xf0\xf6\xe9\x03\xe6\xb6\xe6\xb6\xec\xad\xc0\x51\x51\x9b\xb1\x8c\xb6\xaa\xb1\xb3\x5e\x7f\x5b\x44\x6a\x89\xc0\x6c\x32\xd8\x52\x99\x27\x0c\xa5\xc2\x10\x16\x24\x8e\xe0\xd4\xbc\xfa\x68\x86\x38\x33\x4f\x34\x1e\x40\xa6\x64\xd5\x09\x62\x4d\xf3\xb5\xb7\xc8\x06\xa8\x94\x26\xad\xa5\x09\xef\xc7\xa2\xdc\x5b\xfb\x1e\x51\xb7\xf0\x05\xb7\xdf\xa8\x6f\x24\x50\xb5\x56\x1b\xbd\x7b\xcb\xed\x75\x39\xe7\x86\xda\xfc\x47\xb9\x90\x1a\x26\x6f\xc2\xe1\x8f\x89\xc2\x8a\xd0\x7d\x3b\xfe\xfa\xcd\xad\xb4\xdf\x46\x77\xdf\x9c\xde\xda\xfa\x4f\x85\xd3\xd9\x46\x72\xdd\x52\x04\xb7\x7b\x92\xbe\x24\xcc\x05\x7b\x59\xf6\x99\x07\xeb\x65\x2b\xc8\x61\x2e\xa3\x10\x95\xaf\x60\x36\x25\x3b\xe1\x52\x52\x0d\xd5\x05\x9d\x4c\x15\x30\x3e\x6f\xa6\xb6\xd2\x9d\xd5\xee\x29\xe9\x7a\x5c\x00\x8c\x73\x22\xe1\xf7\x77\x1b\x95\x33\xa4\x95\x79\xe7\xe0\x9f\x11\xdb\xd3\xd7\xab\x29\xcb\x33\x92\x8b\x2d\xd7\x35\xb0\x9e\x5c\x61\x46\x31\xb9\x14\xf9\x8e\x54\x82\xfe\x1b\xb4\x55\x55\xb1\xa0\x55\x72\x55\xe5\xba\x51\x2f\x3d\xba\x4e\x65\x21\x4f\xf2\x8e\x5b\xf1\x60\x83\x6e\xea\xc2\x19\x8f\xd7\x9c\x11\x67\x1b\x79\xe2\xbf\x95\x78\x71\x57\x6a\xaa\x8a\x7e\x94\xc4\x65\xe0\xe4\x60\x23\x21\x1d\x4d\x6e\xad\xbb\x94\x54\x97\x14\xe9\xde\x82\xf2\x64\xdd\xd0\xd5\x41\xc6\x6f\x64\x84\xd1\x41\xbc\xd0\xe2\xd5\x64\x02\x91\xa1\xc3\xef\x1f\x35\x3f\xbe\x31\xd1\xad\xca\x31\xea\x4a\xeb\x76\x7d\x36\xf9\xc6\x5f\xaf\xac\x54\x59\x53\xc9\xa9\xa6\xb4\x56\x47\xc9\xa9\xa0\xb4\x2c\xc4\xb1\xa1\x6a\xd2\x36\xfa\xcb\xd5\x3f\x9e\xde\x52\xdf\xce\x55\x7c\xbf\x0a\x38\xf8\x87\xa6\x9e\xa1\x5b\xdf\x35\x62\xdc\xf1\x14\x41\xf1\x65\xe5\x9d\xfe\xb2\xe4\xb1\x2f\xe2\x91\xab\x74\x4e\x43\x2f\xf7\xfb\xf0\x13\x32\xd1\x2c\x6b\x80\x9e\xea\x01\xb3\xa7\x3f\x7f\x62\x03\x2b\x32\xaa\x60\x4a\x66\x58\x6e\x44\xc2\x98\x32\x48\x04\x9d\xd1\x08\x27\x28\x7f\xf6\x04\xaf\x75\xb3\xe1\x52\x95\x87\x40\xbf\x4b\x4b\x90\x36\xca\x4d\x55\x31\x18\x9e\xc5\xab\x2d\x3b\x3e\x53\x7c\xe2\xbb\x6b\x65\x3d\xa4\xe3\xe6\xba\xb7\xcd\xd5\x57\x2d\xf8\x10\x9b\x6c\xbe\xe0\xfa\xa3\x8f\x5d\xcc\xca\x6a\x23\xe9\x6e\x9b\xf3\xfe\x2e\xc9\xf8\x2b\xf9\x7e\xc3\x76\xb6\xf7\x44\xda\x76\xd2\x7e\x3e\xb6\xe6\xd6\xee\x6f\xc1\x73\x47\x77\x4f\x07\x9c\x3f\xe8\x52\xf8\xe4\x2e\x5e\x76\xe3\xca\x6e\xeb\xd3\x9b\x3c\x48\xa6\x47\x9e\xe7\x11\x5a\x73\x01\x89\xff\xdc\x7a\x5a\x3c\x97\xc5\x60\x3d\xdb\xa5\x05\xcf\xa9\x44\xd1\x2a\x82\x90\x77\xe0\x2f\xd8\x56\x30\xa0\x07\x2c\x0b\x57\x74\x0f\xb8\xff\xd0\xb8\x45\xb5\x1f\x93\xf0\xcb\x45\x4d\x1a\x1a\xdc\x35\xac\xf8\x43\x4b\xf7\x3f\xc8\xe5\xa4\x59\x96\x87\xb1\xf9\x64\x60\xf2\xc9\xce\xc0\xa4\x13\x31\x1e\xa2\x9e\xe6\x9c\x45\x0b\x20\x10\x13\x7b\xde\x34\xb6\x86\x37\xa6\xa8\xfd\xc6\xbc\x9a\x50\x78\x56\x4d\xb3\x09\xcf\x3c\xe6\x89\xa1\x1b\x05\xdb\xee\x3c\x6a\x99\x58\x32\x97\xe2\x88\xb3\x44\xae\xda\x97\x21\x4b\x59\xbb\xd9\x1f\xdd\xc8\x9f\x19\x41\x66\xf1\x9c\x65\x41\xce\x3c\xbb\xea\x8a\x07\x85\x8a\x9c\x8e\xb6\x6e\xb8\xc0\xac\x24\x6a\x8e\xc5\x6e\x2c\xa7\x70\x71\x7b\x9d\xc9\xad\x97\x8a\x48\x37\x9e\x2a\x95\xc8\xf3\x7e\x7f\x42\xd5\x34\x1d\x9d\x05\x3c\xee\x4b\x12\xcb\x94\x4d\x4e\x03\x16\xa8\x5c\x56\xa7\x99\xac\x4e\x49\x42\x35\x51\x5f\x5f\x7c\x7d\xf1\xaf\x00\x00\x00\xff\xff\x9b\x2f\x39\xe1\x1b\x97\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 38683, mode: os.FileMode(420), modTime: time.Unix(1537413024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": {apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
