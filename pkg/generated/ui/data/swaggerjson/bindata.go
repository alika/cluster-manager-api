// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x6f\xe3\x36\x12\xfe\x9e\x5f\x31\xd0\x1d\x70\x59\x20\x89\xb7\x39\x1c\x50\xe4\xd3\xa5\x09\xae\x0d\xd2\xb4\x41\xbd\x68\x50\x5c\x17\xc6\x98\x1a\xdb\xac\x25\x52\x4b\x52\xf6\x7a\x0f\xf9\xef\x07\x92\x92\x2d\xc9\x92\xa3\x48\x49\xd6\x2d\x5c\xa0\x88\xd7\x7c\x99\xf7\xe1\x43\x0e\xe9\xff\x1d\x01\x04\x7a\x89\xd3\x29\xa9\xe0\x02\x82\xf3\xb3\xf7\xc1\x89\xfd\x8e\x8b\x89\x0c\x2e\xc0\xb6\x03\x04\x86\x9b\x88\x6c\xfb\x55\x94\x6a\x43\x0a\xee\x50\xe0\x94\x14\x5c\xde\xdf\xb8\xfe\x00\xc1\x82\x94\xe6\x52\xd8\x5e\x8b\xf7\x67\xf9\x44\x00\x01\x93\xc2\x20\x33\xeb\xd9\x00\x02\x81\xb1\x9b\x6e\x88\xb1\x4e\xc5\x14\xae\x7e\xba\xfa\x90\x75\x07\x08\x52\x15\xd9\xc6\x99\x31\x89\xbe\x18\x0c\xa6\xdc\xcc\xd2\xf1\x19\x93\xf1\x40\xfb\xfe\xa7\x4c\x30\x33\x60\x9e\x97\xd3\xd8\xf3\x72\x8a\x09\xdf\xcc\x41\x31\x72\x37\x0b\x86\x31\x17\xff\x2e\x0e\x3c\xe3\x32\x70\xdd\x1e\x8f\x00\x1e\x9d\xb4\x9a\xcd\x28\x26\x1d\x5c\xc0\x7f\x3d\xcf\x8e\x76\x2e\x80\xfd\x87\x1d\xf1\xd1\xf5\x65\x52\xe8\xb4\xd4\x19\x93\x24\xe2\x0c\x0d\x97\x62\xf0\x87\x96\x62\xd3\x37\x51\x32\x4c\x59\xcb\xbe\x68\x66\x7a\xa3\xf2\x01\x26\x7c\xb0\xf8\x26\x97\xb2\xa8\xbd\x29\x15\x95\x69\xd9\x4f\xe3\x18\xd5\xca\x8a\xfb\xc0\xa3\x08\x14\x19\xc5\x69\x41\x60\x66\x04\xda\xa0\x49\x35\xc8\x09\x20\x64\x93\x01\x8a\x10\xb8\xd1\x30\x4f\xc7\xc4\xa4\x98\xf0\x29\x4c\xa4\x02\x26\x85\x20\x66\xf8\x82\x9b\xd5\x5a\x95\x00\x81\x4c\x48\x39\x96\x6f\x42\x4b\xe3\x7b\x32\x99\x1f\x14\x3b\x29\xd2\x89\x14\x9a\x74\x89\x37\x80\xe0\xfc\xfd\xfb\xca\x57\x00\x41\x48\x9a\x29\x9e\x98\xcc\x63\x0a\x13\x79\x89\xac\x41\x70\x6b\x18\x40\xf0\x77\x45\x13\x3b\xe2\x6f\x83\x90\x26\x5c\x70\x3b\x83\xce\xb5\x34\xca\x7c\x61\x84\x09\xdf\x70\xf9\x0b\x25\xd1\x2a\x28\x4d\xf4\x78\x54\xf7\xf9\xb1\x20\x4e\x82\x0a\x63\x32\xa4\x36\xc6\xf3\xff\x55\x04\xc9\x5d\xd9\xfd\x3d\xd9\x29\xe4\x4f\x18\x93\xb5\x83\xb5\x4a\x6e\x09\x23\x61\x4c\x10\x49\x39\xa7\x10\xd2\xe4\xac\x3a\x05\x77\x23\x3f\xa5\xa4\x56\xd5\x26\x45\x9f\x52\xae\xc8\x9a\x64\x82\x91\xa6\x4a\xb3\x59\x25\x8e\x31\x6d\x14\x17\xd3\xa2\xf8\x8f\x27\x4f\x8b\x83\x4b\x7d\xa6\x89\x29\x32\xa3\x39\xad\x46\x3c\x7c\x42\xb6\x0f\x33\x82\xa1\xeb\x7f\x4b\xab\x9b\xd0\xb9\xd3\xe5\xfd\x0d\x5c\x32\x46\x5a\xef\xa3\x58\xe8\x38\xb3\xd2\xb5\x16\xcd\x0b\x73\x4b\xab\xb5\x78\xb8\x7f\xe2\x29\x9a\x5a\xc6\x9f\x96\xe9\x17\xd7\x71\x6f\x45\xf9\x92\x2a\x3a\xc3\x24\x69\xe7\x7b\x97\x49\xb2\xc7\x5e\xe7\x64\x31\x24\x50\x98\x16\xb2\x7c\x70\x1d\xf7\xdb\x30\x09\x6a\xbd\x94\xaa\x8d\x69\xee\xb3\xae\xfb\x2d\x90\x4e\xc7\x6b\xce\x5b\xa6\xbb\xc2\x88\x7d\x95\x2d\x51\x72\xc1\xc3\xd2\x42\x5d\x27\x4e\x71\x65\xca\x87\x68\x38\xc6\xa5\x1e\xe0\x5c\x0f\x16\xf1\x12\x15\x0d\xc8\xb0\x77\x6f\x23\xd9\xfa\xf3\xc7\xc2\x8a\x6c\x70\x5a\x5d\x8b\x73\x3c\xba\x19\xfc\xf1\xa8\xa2\x9c\x20\xa4\x88\x0c\xed\x06\x4c\xbe\xcf\x06\x20\xed\x00\x3f\xd7\xae\xeb\x9f\x00\xff\x94\x18\xdd\x17\x08\xf4\x30\x43\x03\x5c\x17\x21\xd0\x3f\x34\xd8\x81\x16\x09\x85\xa4\x8d\x92\xab\xbd\x89\x9e\x03\x08\x3a\x80\xa0\xaf\x2b\xca\x01\x04\xed\xb3\x61\x0e\x20\xe8\x00\x82\x5e\x4f\xb2\x97\x04\x41\x49\xfa\xc4\x91\x91\x13\x58\x5b\x23\xb6\x01\x41\x57\x8a\xf0\x4f\x01\x82\x4a\x8c\xbe\x09\x08\x1a\xcb\x70\xcb\x07\xbc\x7b\xd4\xb5\x14\xbc\xc3\xa8\xb4\xea\x1c\x2f\xad\x80\x3b\x3d\x6d\x23\x7e\x77\x7f\x3b\x2a\x68\xaf\x7a\x82\x39\x88\xb8\x36\xdd\x8e\x31\x11\xec\x58\x1b\x9b\xd9\x5c\xba\xd5\xe9\xe4\x8f\x96\xe0\x1e\x3b\x67\x99\xd3\x37\xf1\xce\x03\xa2\x3d\x20\xda\xaf\x2b\xca\x01\xd1\xee\xb3\x61\x0e\x88\xf6\x80\x68\x5f\x4f\xb2\xd7\x42\x18\x9b\xd2\xf3\xb3\xc0\x45\xaa\x04\x64\x43\x81\x8b\x89\x54\xb1\x83\x11\x80\x63\x99\x1a\xc0\x84\x83\x26\xb5\xd8\x09\x84\xbf\x27\xf3\xab\x9f\xe1\x66\x33\xc1\x9e\x63\x8e\x8c\xe1\x4e\x78\xa3\x8b\xb1\xd6\x55\xf6\x02\x6b\x9b\x3a\x77\x09\xa0\x5e\xde\x0e\x87\x09\xb1\xcb\xdb\xe1\x8d\xd0\x06\x05\xa3\xef\x95\x4c\x93\xa2\x61\x73\xf7\x92\xe3\x3f\x88\x6d\xd2\xae\x0d\x89\x84\x94\xe1\x15\x4d\xe7\x21\x53\xd2\x7d\xc5\x45\x4f\x4a\x6d\xf9\x55\x07\x9b\x0b\x44\x21\x80\xa6\x8e\x93\x7a\xad\xf8\xf9\x9e\x4f\x23\x97\x12\x6c\x6f\x38\x1e\x1a\x14\x21\xaa\x70\x74\x7d\x3e\x5a\x9c\x9f\x00\x19\x76\xf6\xae\x9e\x64\xcc\xc5\xe8\x53\x8a\xc2\x70\xb3\x6a\x22\xcd\x85\xa1\x69\x25\x49\x04\xde\x4b\xb3\xe6\x7f\x9e\x37\x30\x76\xc7\x05\x8f\xd3\x18\x44\x1a\x8f\x49\x59\x15\xf0\x8c\x55\x0d\xc7\x21\x4d\x30\x8d\x8c\x06\x23\xe1\x0b\x29\xd9\xc4\x22\x7e\x7e\x55\x16\xf1\x73\x37\x16\x8f\x2a\xac\xd6\x98\xc3\xd9\x5a\x83\x73\x58\xbb\xfd\x70\xe6\x41\x11\xd6\x11\x0b\x4a\x29\xa9\xec\xce\x0f\xde\x9d\x1f\x86\xd7\x68\xf0\x8a\x44\xe5\x22\xc7\x73\x7d\x39\xc3\x80\x5d\x3c\xed\x61\xc6\xd9\x0c\xfc\x04\x70\x9c\xea\x53\x42\x6d\x4e\xbf\xd9\xe9\x63\xb8\x40\x1e\xe1\x98\x47\xdc\xac\x46\x5f\xa4\xd8\x4e\x62\x39\x69\x54\x0a\xcb\xeb\x44\xc0\x0d\xc5\xd5\xfe\xed\xd7\xbd\x2a\xe3\x45\x56\xc0\xb1\x52\x10\x62\x7c\x02\xf9\xe7\x73\xe6\x3e\x2f\xc9\x7e\x0e\xb7\xa5\x6b\xb6\xbd\xa7\x63\xed\x04\x99\xa1\xda\xd8\xf5\xc5\xd2\xd4\x4b\xa5\x90\xf8\x5f\x67\x11\xaa\x29\x1d\x92\xc7\x5f\x27\x79\xdc\xab\xec\x92\x56\xaa\x28\xbc\xa9\xc4\xd5\xb3\x3d\x6d\x91\x30\x0b\x84\xbb\x2e\x89\xbf\xde\x5f\x01\x0f\x4f\x60\x1c\xa1\x98\x3b\x7c\x6c\xff\xff\x3d\x60\x8e\x77\x90\x82\xdc\x17\x2b\x99\xfe\x1e\x9c\xc0\x84\x47\x11\x85\xc0\x27\xf6\x0b\x40\x45\xf0\xdd\x6f\x3f\xdb\x39\xea\xad\xae\x89\xa5\xca\x66\x1b\xa7\xc3\xae\x6c\x0e\xb3\x59\x76\x2d\xd9\x1c\xe3\x91\x92\x11\x8d\x50\x75\x4b\xa8\x56\x17\x37\x97\x77\x60\x27\x71\x12\x17\x6f\x75\x1d\xa3\x12\xef\x72\x3b\x6a\x2d\x19\x77\xc0\x30\x0c\x5b\x79\xd2\x7f\xa4\x82\xe5\x8c\x04\x68\x19\x13\x98\x19\x17\x53\xed\x74\x87\x91\x22\x0c\x57\xe0\x75\x1d\xee\x70\x9e\x5f\xef\x1e\x50\x91\xf5\x1f\xff\xe9\x0e\xd9\x8c\x0b\xf7\x45\x1f\xdf\x49\x35\xa9\x5e\x80\x2a\x9f\xc0\x69\x6c\x38\xfc\x21\xdb\x58\xd5\xdb\x68\x26\xb5\xe9\x4c\xc9\x0e\x6e\x45\x25\x91\xaa\x91\x4a\x8f\x0c\x63\x79\xb0\x53\xb7\xe3\x21\xdf\x76\x3f\x43\xda\x9a\xad\xeb\xfc\x5b\xbd\xde\xd0\xac\x5d\x52\x0a\xa3\x64\x04\x49\x84\x82\xce\xe0\xc3\x8c\x6b\x10\x32\x24\xe0\x1a\xa4\x88\x56\x80\x10\xa3\x73\x5a\x6e\x71\x2e\xd7\x30\xe1\x14\x85\xb6\xd9\x67\xb0\xf0\xac\x95\xd3\x5a\xfa\x4c\x51\x48\xc2\x70\x8c\x5c\xee\x4c\xb5\xb7\xb3\x73\x57\x2e\xa6\xc5\x10\x29\xfb\x6e\x65\x57\x52\xb3\xa5\xea\xe1\xb4\x53\x6e\x46\xdb\x3b\xc4\xe7\x79\x93\xc1\x29\x48\xe1\xf7\x01\xdc\x80\xa2\x44\x6a\x6e\xa4\x5a\xd5\xdb\xd3\x92\x64\x32\x8e\x79\x0f\xff\x45\x3d\x5b\x6f\x3d\xb8\x81\x6c\xba\x46\x72\x46\x11\x8d\xb4\x41\xd3\x2d\x38\x1f\x66\x64\x66\x76\x71\x52\x20\xa4\x71\x54\xed\x8c\xb0\x44\x0d\x2c\x22\x14\x3e\x23\x8d\x53\x1e\x35\x30\x61\x9b\xc2\x51\xd8\x95\x81\x6b\xb7\x7a\x4c\x1c\x85\xb0\x41\x4c\xd9\xcb\x8e\x99\x57\x59\x22\x53\xe7\x9c\xa1\x75\x52\x26\xe3\x84\x47\x54\x4f\x31\x6b\x54\x9d\xe8\x5d\x65\x83\x1d\xa9\x86\xb8\x8f\xd0\x58\x1f\xef\x34\xff\x7d\x36\x18\xb8\xf1\x66\xf2\xf4\xfc\x81\xdc\x00\x54\x2a\x84\x0d\x3a\x7f\xc7\x3c\xa3\x7d\x54\xfc\x9b\x47\x5f\xcd\x31\xc1\xe5\xc3\xf0\x6a\x13\xcc\x7d\xa2\xaf\x5c\x6d\xe8\x1a\x0d\xcd\x35\x88\x46\x20\x51\x29\x06\xf4\xa3\xdc\x54\x22\xa8\xa7\xde\x63\x9f\xd6\x78\x82\xff\xfa\x49\xb8\xce\x0d\xbe\xa4\x2a\x87\x14\x43\x52\x0b\xce\xe8\x92\x31\x99\x0a\xd3\xc7\x25\x58\xc4\x49\x98\x3e\xee\x70\xe5\x66\xb8\x09\xe1\x18\xe7\x78\xe1\xaa\x04\xd7\x0d\x1b\x89\x8c\x98\x77\x88\x9e\x04\xbd\x2f\x64\x44\xf3\x35\xbb\xdd\xee\xc0\x6a\x1d\xbd\xea\x7c\xea\x19\xaf\xaa\xef\x00\x32\x04\xed\xce\xad\x41\x91\x96\xa9\x72\xdb\x11\xfa\x7c\x01\x91\xc4\x10\xc6\x18\xd9\x4d\x83\x7a\xd7\xd2\x6e\x2f\x13\xc0\x59\xad\xa6\xab\xe6\xea\x2a\x38\x0d\xa7\x68\xbe\x90\xd2\x95\x50\x6d\x79\xe5\xe5\xe0\x56\x89\x56\x43\xed\xa3\x21\x17\x55\x4a\x10\x9d\x33\x51\x73\x61\xe2\xab\x24\x87\x2c\x2f\x5c\x93\x41\x1e\xd9\x6d\x69\x1f\x2f\xeb\xa8\x97\x9b\xeb\xca\x83\x9a\x7a\x13\x74\xde\xb3\xd4\x3c\xd9\x69\x30\xb2\x7b\x65\xd5\x11\x7a\x6d\xee\xc4\x6e\x1e\x6b\x3d\x49\x71\xf3\x76\xab\x37\xd5\xc2\x33\x30\x87\x88\xdc\x2b\x30\xfb\xb1\x9e\x89\xb6\x20\x22\x73\x90\x83\x6b\xbc\x89\x6b\xb4\xb6\x4a\x4d\xc1\xa5\x8f\x79\x22\xc9\xaa\x5b\xb4\xf6\x02\xba\x15\xc2\x2d\x78\x5b\x27\xaf\x55\x35\xb2\xda\xe5\xcc\x35\xb5\xae\x7e\x6d\xad\x8b\x0d\xc8\xbd\x9c\x25\xdd\x96\xe4\x69\x3b\x67\x8d\xdb\x00\xa9\x0b\x8f\xb5\x98\xab\x81\xdb\x0c\x42\x68\xdf\xb9\x0c\x33\x6c\x10\x63\x34\xb7\x7f\x3d\xb0\x70\x70\x62\x9d\xef\xeb\x70\x45\x55\xae\xfc\xb0\xd2\x1f\xca\xbd\x40\x0d\xa0\x5e\x15\xad\x0a\x81\x85\x89\x1a\xea\x05\x95\x63\xd8\xde\x01\xf2\xd0\x3b\x40\x42\x34\x38\x62\xd5\xe2\x4f\x6b\x4d\xd4\xd5\x90\x76\x04\xd3\xc3\xf0\x8d\x42\xa9\xbc\x43\x7c\xc9\x40\x5a\x63\xdf\x5e\xea\xaa\x39\x35\xaf\x67\xf2\xbb\xdf\x7e\x06\xef\xa9\xfb\xe3\xfe\x0d\x05\xa6\x37\x77\xff\x3b\x3d\xfd\x2a\xc5\xf7\xe6\xa7\xd2\xeb\x8b\xca\x8d\x67\x2a\xf9\xdd\x98\xae\x9e\x5d\x52\xc0\x7d\x36\x9b\x4b\x02\x3b\x4e\x7a\xb3\x6e\xa0\x13\x62\x7c\x92\xbd\xf0\xef\xab\xfd\x12\xf1\xaf\x61\x86\x22\xfe\x58\x8b\x78\x0a\x2c\x55\x8a\x84\x89\x56\xfe\xc0\x98\x6b\xc0\xa5\x06\xa9\x20\x46\x6c\x88\xa2\xf9\xb7\xba\xf7\x21\xec\x62\x73\x80\x77\x9b\x8e\x49\x09\x32\xd4\x40\x0e\x97\xdd\x33\x5b\x6d\xfe\xdf\x9d\x71\x9b\xac\x5e\xe4\xc8\xae\xbe\x2f\xc4\x53\x06\xda\x6a\xe9\xf8\x4b\x5d\x2f\x43\x68\x53\x45\x6a\x28\xd0\xf0\xe9\x6c\x54\x2c\xcd\x37\x99\x76\x2c\x65\x44\x28\x9a\xea\x28\xb5\xcd\xbb\x8e\xa6\xf3\x94\xc0\x35\xfc\x70\xd9\x80\xeb\xc9\x2c\xa5\x9a\x8f\x26\x38\x56\x9c\x75\xf6\x39\x3f\x3c\xcb\x3d\x95\x83\xdc\x4e\x31\xed\xaf\x5d\xf5\x08\x66\x39\x7f\x6b\x2d\x2f\x51\x17\xd3\xae\x3f\xba\xe2\x1a\x14\x7d\x4a\x49\x37\x94\x03\xb6\x7f\xb7\xe4\x99\x8e\x58\xd8\x3c\x36\x9b\x27\x74\x87\x0f\xd5\x5d\x51\xce\x19\xe4\xb7\xef\xfa\x1a\xad\x10\x08\x3d\xd3\xb0\x4e\x90\x75\x2d\x9f\x72\xff\x52\xd6\x4d\x01\x18\x49\x31\x85\x25\x37\xb3\xa2\xe4\xae\xb6\xea\xbe\x6c\x5c\x48\x20\x15\xfc\x53\x4a\xd1\x0a\xb8\xc3\x66\x13\x5f\x02\xb4\x82\x87\xbb\x71\x59\xec\x8b\xc8\x6f\x03\x81\x76\x55\xb0\x9f\x86\x41\x59\x6f\x0d\x4b\x77\xad\x87\xc9\x38\x51\x5c\x53\xcf\xad\x73\xcd\x93\xea\xfd\x0b\xe4\x2b\x99\x96\x41\xb6\xcd\x5c\xd9\xcb\xea\x26\xcc\xd4\xe3\x88\x62\x58\x3a\x96\xd8\x4e\x09\x6d\x75\x5b\xf7\x18\x66\xff\x94\x7b\xa3\xcb\xeb\x8f\x2f\x09\xeb\x95\xb6\x69\x6a\x57\x1e\x7c\xb5\xa0\x79\x22\x75\x3e\x1d\x2a\x3f\x56\x9f\x56\xf5\xb1\xdd\x5f\xce\x6e\x7d\xd7\xaf\xc2\xe9\x78\x27\xbd\x96\x2e\x6b\xef\xa1\x5e\x27\xb0\xbe\x11\xef\x70\xc2\xcf\xb7\x0d\xb0\xd4\xcb\x31\xe2\xb5\x77\x3a\x76\xa8\xf6\xe9\xab\x21\xbb\xab\xfd\xc5\x9e\xdb\x16\xd8\xae\x92\x38\x2a\xae\x28\x92\x6f\x37\x4a\x39\x6d\x73\x9b\x9d\x3e\xbb\xf5\x36\xba\x96\xac\x70\x9d\xbd\x72\x2b\xe7\x4e\x2a\xca\xde\x13\xec\xf8\xe9\xbc\x1e\x3f\x78\x67\xd9\x39\x7a\x3c\xfa\x7f\x00\x00\x00\xff\xff\xe2\x80\x3d\x7d\xc8\x4f\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 20424, mode: os.FileMode(420), modTime: time.Unix(1537145387, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": {apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
