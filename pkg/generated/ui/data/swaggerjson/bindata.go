// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\xdb\xc8\x11\xfe\xee\x5f\x31\x60\x0b\x34\x05\x6c\x2b\x97\xa2\x40\x91\x4f\x55\x65\x34\x15\x72\xbe\x33\xaa\xc3\x19\x45\x2f\x10\x46\xcb\x11\xb9\x67\x72\x97\xd9\x17\x39\xba\xc2\xff\xbd\xd8\x25\x29\xbe\x88\xd4\x0b\xe9\x73\x9d\xe2\x02\x04\x51\xb4\xbb\x33\xb3\xf3\x3c\x3b\x3b\x33\xab\xff\x5c\x00\x04\xfa\x11\xa3\x88\x54\xf0\x1e\x82\x77\xd7\x6f\x83\x4b\xf7\x1d\x17\x6b\x19\xbc\x07\x37\x0e\x10\x18\x6e\x12\x72\xe3\xb3\xc4\x6a\x43\x0a\x6e\x51\x60\x44\x0a\xa6\x77\x73\x3f\x1f\x20\xd8\x90\xd2\x5c\x0a\x37\x6b\xf3\xf6\xba\x14\x04\x10\x30\x29\x0c\x32\xb3\x93\x06\x10\x08\x4c\xbd\xb8\x05\xa6\xda\x8a\x08\x66\xdf\xcd\x7e\x28\xa6\x03\x04\x56\x25\x6e\x30\x36\x26\xd3\xef\x27\x93\x88\x9b\xd8\xae\xae\x99\x4c\x27\x3a\x9f\x7f\xc5\x04\x33\x13\x96\xdb\x72\x95\xe6\xb6\x5c\x61\xc6\x2b\x19\x94\x22\xf7\x52\x30\x4c\xb9\xf8\x6b\x7d\xe1\x35\x97\x81\x9f\xf6\x74\x01\xf0\xe4\x77\xab\x59\x4c\x29\xe9\xe0\x3d\xfc\x3b\xb7\xd9\xeb\x2e\x37\xe0\xfe\xe3\x56\x7c\xf2\x73\x99\x14\xda\x36\x26\x63\x96\x25\x9c\xa1\xe1\x52\x4c\x7e\xd6\x52\x54\x73\x33\x25\x43\xcb\x4e\x9c\x8b\x26\xd6\x95\xcb\x27\x98\xf1\xc9\xe6\x9b\x72\x97\x75\xef\x45\x54\x77\xa6\x33\xdf\xa6\x29\xaa\xad\xdb\xee\x3d\x4f\x12\x50\x64\x14\xa7\x0d\x81\x89\x09\xb4\x41\x63\x35\xc8\x35\x20\x14\xc2\x00\x45\x08\xdc\x68\x78\xb0\x2b\x62\x52\xac\x79\x04\x6b\xa9\x80\x49\x21\x88\x19\xbe\xe1\x66\xbb\x73\x25\x40\x20\x33\x52\xde\xe4\x79\xe8\x74\x7c\x20\x53\xf0\xa0\x3e\x49\x91\xce\xa4\xd0\xa4\x1b\xb6\x01\x04\xef\xde\xbe\x6d\x7d\x05\x10\x84\xa4\x99\xe2\x99\x29\x18\x53\x13\x94\xef\xc8\x01\x82\x7b\xcb\x00\x82\xdf\x2b\x5a\xbb\x15\xbf\x9b\x84\xb4\xe6\x82\x3b\x09\xba\xf4\xd2\xb2\xe0\xc2\x12\x33\x5e\x59\xf9\x4f\xca\x92\x6d\xd0\x10\xf4\x74\xd1\xf5\xf9\xa9\xb6\x9d\x0c\x15\xa6\x64\x48\x55\xe0\xe5\x7f\x5a\x1b\x29\xa9\xec\xff\xbd\x3c\xb8\xc9\xef\x30\x25\x87\x83\x43\xa5\x44\xc2\x48\x58\x11\x24\x52\x3e\x50\x08\x36\xbb\x6e\x8b\xe0\x7e\xe5\x67\x4b\x6a\xdb\x1e\x52\xf4\xd9\x72\x45\x0e\x92\x35\x26\x9a\x5a\xc3\x66\x9b\x79\xc3\xb4\x51\x5c\x44\x41\xe7\x86\x3f\xd5\x36\x6c\x30\x6a\x6f\xb5\x3c\xee\xd5\xe2\x4f\x17\x2d\x4f\x05\x21\x25\x64\xe8\x30\x1f\xf3\x39\x15\xff\x0e\x70\xeb\xc6\x4f\xfd\x0a\xe8\xd5\x30\xf4\xb5\x30\xec\x3e\x46\x03\x5c\xd7\x19\xf6\x07\x0d\x6e\xa1\x23\x5a\x48\xda\x28\xb9\xfd\xfa\x38\x96\xd9\x23\x01\x2f\x53\x72\xc3\xdd\xed\x73\x12\xc7\x66\x8a\xf0\xab\xe0\x58\xc3\xd0\x17\xe1\xd8\x4a\x86\x7b\x1c\xc8\xe9\xd1\x35\x52\x63\x87\x51\xb6\x4d\x8e\xe7\x76\xc0\xad\x8e\x4e\xd9\xfe\x70\xbe\x5d\xd4\xbc\xd7\xbe\x7f\x27\x09\xd7\x66\xd8\x25\x8c\xe0\xd6\xba\xc0\x5f\xc8\xd2\x27\xdd\xad\xdf\x3a\x85\xaf\x98\x9c\x4d\x4b\x07\xb1\xf3\x19\xe0\xa9\xb2\xce\xb3\x90\xb1\x4a\x40\xb1\x14\x5c\xaa\xab\x52\x8f\x01\xe0\x4a\x5a\x03\x98\x71\xd0\xa4\x36\x07\xa3\xc8\x07\x32\x3f\xe6\x12\xe6\x95\x80\x57\x0e\x58\x61\xf0\x8b\x81\xb5\x4b\xb0\x6b\xa6\x55\x29\x6e\xe3\x74\x4f\xef\x17\x8b\x8c\xd8\xf4\x7e\x31\x53\x14\x92\x30\x1c\x93\xba\xe7\x76\x77\x8d\x5c\xfd\x4c\xac\x3a\x19\x2e\xc7\xce\x48\x19\xde\xf2\x73\xa0\x89\x29\x32\xcb\x07\xda\x2e\x79\xd8\x86\xa0\x75\x71\x5d\x36\xc6\xca\x62\xe7\x87\x98\x60\xe1\xa5\x7c\xa4\xed\x3c\xf4\x29\xf2\xf4\x6e\x0e\x53\xc6\x48\xeb\xa0\xd3\x4b\x85\x56\xf4\x53\x9c\xf2\x91\x9a\x73\x5d\x1f\x69\xbb\xd3\x8e\x6d\xed\x7b\xd7\x65\x43\x0c\xab\xbc\xe9\x72\x00\xab\x29\x4f\xf5\x9d\xef\xb9\x88\xea\xa9\x42\xd0\x38\x61\x3d\xe8\xdc\xa0\xc1\x19\x89\x56\x49\x72\x2e\x38\x8a\xa2\xe6\xa9\x3d\xdd\x37\xf7\x31\x67\x31\xe4\x02\xe0\x8d\xd5\x57\x84\xda\x5c\x7d\x73\x09\x64\xd8\xf5\x1f\xbb\x51\xc1\x0d\xf2\x04\x57\x3c\xe1\x66\xbb\xfc\x45\x8a\xfd\x33\x59\xaa\x46\xa5\xb0\x79\xcf\x05\xdc\x50\xda\x9e\x7f\x38\xf7\x39\x64\x78\xdd\x14\xf0\xa6\xd4\x36\xb1\xba\x84\xf2\xf3\x3b\xe6\x3f\x3f\x92\xfb\x1c\xee\xef\xae\x1f\xf5\x5c\x8f\xc3\x09\x0a\xa0\x4e\xc1\x75\x2e\xb4\x41\xc1\xe8\x83\x92\x36\x1b\x03\x6d\x31\xff\x7c\x60\x4b\x0b\xc0\xcd\x86\x37\xe9\x9f\xaf\x13\x54\x11\x1d\x04\x36\xe5\x62\xf9\xd9\xa2\x30\xae\x62\xed\x51\xca\x85\xa1\xa8\x11\xca\x01\x82\x3c\x62\x17\xc3\x7f\x7a\xd7\x63\xd2\x2d\x17\x3c\xb5\x29\x08\x9b\xae\x48\xb9\x2b\x9c\x17\x46\x6a\x78\x13\xd2\x1a\x6d\x62\xfc\xb1\xfa\x85\x94\xec\x33\x11\xbf\xfc\xaa\x26\xe2\x97\x61\x26\xf6\x13\x68\x07\x44\xe4\xb8\xa0\xc1\x07\x6f\x97\xc7\x78\x60\x50\x84\x5d\xca\x4e\x22\xd9\x9d\x2a\xda\x0d\x56\x51\x38\x6f\x9d\xab\xb3\x99\xb6\xc9\xd8\x98\xd0\xfe\xe3\xdd\x0c\x78\x78\x09\xab\x04\xc5\x83\x0f\x8a\xee\xef\x4f\x81\x0f\x8d\x04\x52\xe4\x91\x72\x2b\xed\x4f\xc1\x25\xac\x79\x92\x50\x08\x7c\xed\xbe\x00\x54\x04\x7f\xfb\xd7\xf7\x4e\x46\xef\x3d\x60\x95\x8b\x36\xde\x87\x43\xcd\x5c\x14\x52\x72\x24\xba\x35\x71\x4c\x97\x4a\x26\xb4\x44\x35\x2c\xa0\x3a\x5f\xcc\xa7\xb7\xe0\x84\xf8\x1d\xd7\xfb\x13\x6f\x50\x89\xd3\x58\xf3\x77\xa9\xe0\x31\x26\x01\x5a\xba\x72\x33\xe6\x22\xd2\xde\x4f\x98\x28\xc2\x70\x9b\x5f\x39\x14\x36\x89\xd2\x4a\x4a\x3a\x32\xaa\x11\x04\x89\xb8\x59\xee\x27\x88\xe7\x79\xc6\x60\x04\x52\x78\x9f\x44\xdc\x80\xa2\x4c\x6a\x6e\xa4\xda\x76\xa3\xe1\x54\x32\x99\xa6\xdc\x0c\xd6\x18\xa3\x8e\xcb\x36\x91\x53\x59\x88\xeb\x55\x67\x14\xd1\x52\x1b\x34\xc3\xc2\xee\x7d\x4c\x26\x76\x87\x59\x81\x90\xc6\x6b\x75\x12\xe1\x11\x35\xb0\x84\x50\xe4\xa8\xae\x2c\x4f\x7a\x8c\x70\x43\xe1\x32\x1c\x6a\xc0\x8d\x3f\x6d\x6b\xaf\x21\xec\xd9\xa6\x1c\x85\x63\xc1\x2a\xa7\x24\xf2\x29\x50\xe8\x02\x22\x93\x69\xc6\x13\xea\xd6\x58\x0c\xaa\x41\xfa\x66\xc5\x62\xaf\xaa\x5b\x7e\x96\xa0\x71\x1c\x1f\x24\xff\xae\x58\x0c\xdc\xe4\x30\xe5\xfa\xf2\x0c\x75\x02\xca\x0a\xe1\x52\xbb\xbc\xbb\x5c\xe8\xee\xac\xa2\xba\x4a\xee\xfc\xab\x1b\x32\xc8\x13\x17\xa2\xc7\x1c\xc0\x81\x61\x6f\x7e\xd3\x6a\x93\x76\xfb\xb0\x68\x5a\x9c\x2f\xbf\xa3\x11\xdb\x13\xc5\x7d\xef\x7c\xe0\xb1\xaa\x5a\x71\x55\x0b\xfe\xa8\xc6\xaa\x23\x3f\x5a\x6b\xad\xb9\xef\xd9\xee\x7b\xfb\xee\x63\xb7\x11\x67\x12\xe4\x37\x6a\xbc\x08\x35\x4e\x46\xa5\x23\xe1\x1a\x03\x4f\x88\x06\x97\xac\x5d\xe7\x41\x7f\xc3\xe1\x78\xb9\xd8\x7f\xe3\x4d\xef\x17\xfb\xf5\x4a\xdb\xe1\xac\xb3\x2d\x70\xbe\x45\xf5\xf6\x42\x4f\xf8\x6e\x96\xcc\xfe\x5e\x3a\x4e\x08\x45\x5a\x5a\xc5\xf6\x4b\xcb\xb3\xac\xeb\xc8\x90\xbb\x8d\x74\xd9\x67\x5e\x99\x76\x67\x85\x45\x5e\x9e\xe7\x9f\xcf\x50\xee\x9e\xb5\x8b\x66\x31\x59\x13\xd4\x53\x1a\xb7\x2a\x8e\xb1\xfc\xbf\xd5\xd1\x18\xee\x3f\x67\xf0\x28\x1e\xf8\x76\x0f\x14\xbd\xf9\x80\x9b\x10\x9e\x7a\xd8\x8e\x39\xe0\xae\x90\xe6\xa3\x40\xff\xb9\x2b\x95\x82\xce\x88\xf1\x75\xf1\x2e\x3d\xd6\xfb\x0d\xe5\xff\x0b\x18\xea\xf1\x75\xb7\xc5\x2b\x60\x56\x29\x12\x26\xd9\xba\xe2\x44\xbb\x09\xf8\xa8\x5d\xda\x9b\x22\xf6\x9c\xa2\x87\xbf\xe8\xd1\x05\xc4\xa6\x4a\x3e\x3f\xda\x15\x29\x41\x86\x7a\xd4\xe1\xe3\x89\xc1\xe3\xd4\x0b\xe0\x70\xc8\xed\x43\xbd\x66\x51\xcc\xa3\x78\x59\x6f\x59\xf5\xb9\x61\x25\xa5\xab\x15\xfa\x3a\x18\x9d\xc3\x87\x4a\x90\xf2\xf8\x70\x0d\xff\x98\xf6\xdc\xf1\x64\x1e\xa5\x7a\x58\xae\x71\xa5\x38\x1b\x8c\x4f\xbe\xbc\x38\xa7\xad\x84\x7d\x10\xff\xf3\xee\xfa\x08\xe2\xcb\x87\x97\xf6\xb2\x2b\x22\x6a\x21\x0a\x56\xc5\x19\x51\xf4\xd9\x92\xee\x29\xfb\xf6\x7f\x99\x72\x26\x63\x6b\x89\x64\x3f\x3c\xa1\x2f\x44\xda\x19\x52\x69\x19\x94\x8f\x2c\x03\x40\xeb\x78\xc1\x7f\x7d\xa0\xcd\xa4\x6d\x26\x1f\x8e\xa5\xc5\x43\x7e\xdf\x5d\x32\x22\x35\x5d\x34\xd2\xd1\x7d\xf8\x4f\xf5\x6d\xd7\xe3\xe0\xeb\x73\xee\x5c\x37\x63\x4d\xde\xe6\xd1\x5b\xed\x28\x79\x88\xf3\xbf\x5a\x3e\x75\xe4\x98\x1c\xcf\xa4\xbe\x6d\x3f\x35\x8f\xc1\xee\xff\x0e\xb7\xb1\xb1\xaa\xd6\x15\x19\xe4\xd7\xc6\xfb\xeb\x2b\xf4\xeb\x1a\x76\x8f\xdc\xfe\x4e\xf8\xfe\x63\xb7\x3b\x8b\x9c\x66\xc9\x3b\xfb\xb4\x07\x5c\x7b\xbc\xdd\x7b\xb8\x83\x57\x9f\xb9\x8f\xc0\x7e\x53\xda\x6b\xf1\x6d\xb1\x32\x0d\x6b\xc4\xb4\xea\x81\x9a\xbe\x18\x52\x02\x93\x1b\xc9\x6a\x2f\xd4\xad\x47\xf9\x5b\xa9\xa8\xf8\x89\xc0\x81\x1f\xc2\x8e\xf8\xf9\xaa\x33\xe7\xe2\xe9\xe2\xbf\x01\x00\x00\xff\xff\x03\x5a\x94\x52\x96\x2b\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 11158, mode: os.FileMode(420), modTime: time.Unix(1535575950, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
