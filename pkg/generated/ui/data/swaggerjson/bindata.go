// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x6d\x6f\xe3\x36\xf2\x7f\x9f\x4f\x31\xd0\xff\x0f\xdc\x16\x48\x9c\x6d\x0e\x07\x14\xb9\x37\x97\x26\xb8\xd6\x48\xd3\x0d\xea\xc5\x06\xc5\x75\x61\x8c\xa9\xb1\xcd\x46\x22\xb5\x24\x65\xaf\xf7\x90\xef\x7e\x20\x29\xd9\x92\x2c\xd9\x8a\x94\x4d\xdc\x45\x0a\x14\xf1\x9a\x0f\xf3\xc8\xe1\x8f\x33\xa4\xff\x7b\x04\x10\xe8\x25\xce\x66\xa4\x82\x73\x08\xce\x06\x6f\x83\x63\xfb\x1d\x17\x53\x19\x9c\x83\x6d\x07\x08\x0c\x37\x11\xd9\xf6\xcb\x28\xd5\x86\x14\xdc\xa0\xc0\x19\x29\xb8\xb8\x1d\xba\xfe\x00\xc1\x82\x94\xe6\x52\xd8\x5e\x8b\xb7\x83\x7c\x22\x80\x80\x49\x61\x90\x99\xf5\x6c\x00\x81\xc0\xd8\x4d\x37\xc2\x58\xa7\x62\x06\x97\xbf\x5e\xbe\xcf\xba\x03\x04\xa9\x8a\x6c\xe3\xdc\x98\x44\x9f\x9f\x9e\xce\xb8\x99\xa7\x93\x01\x93\xf1\xa9\xf6\xfd\x4f\x98\x60\xe6\x94\x79\x5e\x4e\x62\xcf\xcb\x09\x26\x7c\x33\x07\xc5\xc8\xdd\x2c\x18\xc6\x5c\xfc\xab\x38\x70\xc0\x65\xe0\xba\x3d\x1c\x01\x3c\x38\x69\x35\x9b\x53\x4c\x3a\x38\x87\xff\x78\x9e\x1d\xed\x5c\x00\xfb\x0f\x3b\xe2\xa3\xeb\xcb\xa4\xd0\x69\xa9\x33\x26\x49\xc4\x19\x1a\x2e\xc5\xe9\x9f\x5a\x8a\x4d\xdf\x44\xc9\x30\x65\x2d\xfb\xa2\x99\xeb\x8d\xca\x4f\x31\xe1\xa7\x8b\xef\x73\x29\x8b\xda\x9b\x51\x51\x99\x96\xfd\x34\x8e\x51\xad\xac\xb8\x77\x3c\x8a\x40\x91\x51\x9c\x16\x04\x66\x4e\xa0\x0d\x9a\x54\x83\x9c\x02\x42\x36\x19\xa0\x08\x81\x1b\x0d\xf7\xe9\x84\x98\x14\x53\x3e\x83\xa9\x54\xc0\xa4\x10\xc4\x0c\x5f\x70\xb3\x5a\xab\x12\x20\x90\x09\x29\xc7\xf2\x30\xb4\x34\x7e\x22\x93\xf9\x41\xb1\x93\x22\x9d\x48\xa1\x49\x97\x78\x03\x08\xce\xde\xbe\xad\x7c\x05\x10\x84\xa4\x99\xe2\x89\xc9\x3c\xa6\x30\x91\x97\xc8\x1a\x04\xb7\x86\x01\x04\xff\xaf\x68\x6a\x47\xfc\xdf\x69\x48\x53\x2e\xb8\x9d\x41\xe7\x5a\x1a\x67\xbe\x30\xc6\x84\x6f\xb8\xfc\x8d\x92\x68\x15\x94\x26\x7a\x38\xaa\xfb\xfc\x50\x10\x27\x41\x85\x31\x19\x52\x1b\xe3\xf9\xff\x2a\x82\xe4\xae\xec\xfe\x1e\xef\x14\xf2\x57\x8c\xc9\xda\xc1\x5a\x25\xb7\x84\x91\x30\x21\x88\xa4\xbc\xa7\x10\xd2\x64\x50\x9d\x82\xbb\x91\x9f\x52\x52\xab\x6a\x93\xa2\x4f\x29\x57\x64\x4d\x32\xc5\x48\x53\xa5\xd9\xac\x12\xc7\x98\x36\x8a\x8b\x59\x51\xfc\x87\xe3\xfd\xe2\xe0\x52\x0f\x34\x31\x45\x66\x7c\x4f\xab\x31\x0f\xf7\xc8\xf6\x7e\x4e\x30\x72\xfd\xaf\x69\x35\x0c\x9d\x3b\x5d\xdc\x0e\xe1\x82\x31\xd2\xfa\x10\xc5\x42\xc7\x99\x95\xae\xb5\x68\x5e\x98\x6b\x5a\xad\xc5\xc3\xc3\x13\x4f\xd1\xcc\x32\xbe\x5f\xa6\xdf\x5c\xc7\x83\x15\xe5\x4b\xaa\x68\x80\x49\xd2\xce\xf7\x2e\x92\xe4\x80\xbd\xce\xc9\x62\x48\xa0\x30\x2d\x64\x79\xef\x3a\x1e\xb6\x61\x12\xd4\x7a\x29\x55\x1b\xd3\xdc\x66\x5d\x0f\x5b\x20\x9d\x4e\xd6\x9c\xb7\x0c\x77\x85\x11\x2f\x22\xdb\xfa\xf3\xc7\xc2\xbe\x65\x70\x56\xdd\xb1\x72\xd4\xb6\x19\xfc\xf1\xa8\xa2\x9e\x20\xa4\x88\x0c\xed\x86\x15\xbe\xcf\x06\x46\xec\x80\x08\x57\xae\xeb\x5f\x00\x25\x94\x18\x3d\x14\xa0\x70\x37\x47\x03\x5c\x17\x81\xc2\xdf\x34\xd8\x81\x16\x2f\x84\xa4\x8d\x92\xab\xc3\x59\x3f\xaf\x50\xe1\x15\x2a\xbc\x7c\x00\x7f\x85\x0a\x07\x6a\x98\x57\xa8\xf0\x6d\x41\x85\x24\xdd\x93\x7e\x48\x94\x5c\x70\x6d\x45\x6d\x03\x15\x2e\x15\xe1\x5f\x02\x2a\x94\x18\x7d\x16\xa8\x30\x91\xe1\x96\x0f\x78\xf7\xa8\x6b\x29\x78\x87\x51\x69\xd5\x39\x9e\x5a\x01\x37\x7a\xd6\x46\xfc\xee\xfe\x76\x54\xd0\x5e\x35\x1b\x76\x1a\x71\x6d\xba\xa5\xc4\x10\xec\x58\x90\xd3\xdc\x35\x75\xab\x4c\xd7\x2f\x96\xe0\x01\x3b\x67\x99\xd3\x67\xf1\xce\x57\xdc\xf7\x8a\xfb\x5e\x56\x94\x57\xdc\x77\xc8\x86\x79\xc5\x7d\xdf\x04\xee\xab\xdd\x87\x37\xc5\xbe\x47\x6d\xc1\xa9\x12\x90\x0d\x05\x2e\xa6\x52\xc5\x6e\xb3\x05\x9c\xc8\xd4\x00\x26\x1c\x34\xa9\xc5\x4e\xb8\xf8\x13\x99\x0f\x7e\x86\xe1\x66\x82\x03\xdf\x99\x33\x86\x3b\xed\xca\x5d\x8c\xb5\xae\x6b\x16\x58\xdb\x54\x16\x4b\x30\xee\xe2\x7a\x34\x4a\x88\x5d\x5c\x8f\x86\x42\x1b\x14\x8c\x7e\x52\x32\x4d\x8a\x86\xcd\xdd\x4b\x4e\xfe\x24\xb6\x09\x4e\x41\xa2\xac\x69\x0c\xaf\x68\x3a\x5f\x34\x25\xdd\x57\x5c\xf4\xb8\xd4\x96\x17\x97\xed\x8a\x11\x85\x1a\xd9\xcc\x71\x52\xaf\x15\x3f\xdf\xe3\x69\xe4\x52\x82\xed\x0d\x6f\x46\x06\x45\x88\x2a\x1c\x5f\x9d\x8d\x17\x67\xc7\x40\x86\x0d\xbe\xab\x27\x19\x73\x31\xfe\x94\xa2\x30\xdc\xac\x9a\x48\x73\x61\x68\x56\x72\x5f\x80\xc0\x7b\x69\xd6\xfc\xf7\xb3\x06\xc6\x6e\xb8\xe0\x71\x1a\x83\x48\xe3\x09\x29\xab\x02\x9e\xb1\xaa\xe1\x4d\x48\x53\x4c\x23\xa3\xc1\x48\xf8\x42\x4a\x36\xb1\x88\x9f\xbf\x2a\x8b\xf8\xb9\x1b\x8b\x47\x15\x56\x6b\xcc\xe1\x6c\xad\xc1\x39\xac\x05\xe9\xce\x3c\x28\xc2\x3a\x62\x41\x29\x24\x95\xdd\xf9\xce\xbb\xf3\xdd\xe8\x0a\x0d\x5e\x92\xa8\x94\xce\x1f\xeb\xcb\x19\x52\xea\xe2\x69\x77\x73\xce\xe6\xe0\x27\x80\x37\xa9\x3e\x21\xd4\xe6\xe4\xfb\x9d\x3e\x86\x0b\xe4\x11\x4e\x78\xc4\xcd\x6a\xfc\x45\x8a\xed\x20\x96\x93\x46\xa5\xb0\xbc\x4f\x04\xdc\x50\x5c\xed\xdf\x7e\xe7\xab\x32\x5e\x64\x05\x1c\x2b\x05\x21\x26\xc7\x90\x7f\x3e\x63\xee\xf3\x92\xec\xe7\x70\x5b\xba\x66\xdb\x7b\x3a\xd6\x4e\x90\x19\xaa\x8d\x5d\x9f\x2c\x4c\x3d\x55\x08\x89\xff\x31\x88\x50\xcd\xe8\x35\x78\x7c\x3b\xc1\xe3\x56\x65\xd7\x62\x52\x45\xe1\xb0\xb2\xae\x1e\xed\x69\x8b\x84\x59\xb8\xd8\x75\x4b\xfc\x70\x7b\x09\x3c\x3c\x86\x49\x84\xe2\xde\xa1\x48\xfb\xff\x1f\x01\x73\xbc\x83\x14\xe4\xbe\x58\xc9\xf4\x8f\xe0\x18\xa6\x3c\x8a\x28\x04\x3e\xb5\x5f\x00\x2a\x82\x1f\x7f\x7f\x67\xe7\xa8\xb7\xba\x26\x96\x2a\x1b\x6d\x9c\x0e\xbb\xb2\x39\xca\x66\xd9\xb5\x65\x73\x8c\xc7\x4a\x46\x34\x46\xd5\x2d\xa0\x5a\x5d\x0c\x2f\x6e\xc0\x4e\xe2\x24\x2e\xde\xa3\x79\x83\x4a\x7c\x97\xdb\x51\x6b\xc9\xb8\x03\x86\x61\xd8\xca\x93\xfe\x2d\x15\x2c\xe7\x24\x40\xcb\x98\xc0\xcc\xb9\x98\x69\xa7\x3b\x8c\x14\x61\xb8\x02\xaf\xeb\x70\x87\xf3\x7c\xb8\xb9\x43\x45\xd6\x7f\xfc\xa7\x1b\x64\x73\x2e\xdc\x17\x7d\x7c\x27\xd5\xa4\x7a\x01\xaa\x7c\x02\xa7\xb1\xd1\xe8\xe7\xec\xf8\x51\x6f\xa3\xb9\xd4\xa6\x33\x25\x3b\xb8\x15\x95\x44\xaa\x46\x2a\x3d\x22\x8c\xe5\xc1\x4e\xdd\x8a\x07\x26\x85\x51\x32\x1a\x27\x11\x0a\x1a\x6f\x1f\x67\xf6\x8a\x5e\x73\xda\xbb\xff\x41\xaf\x4f\x37\x6b\xff\xf4\x74\xc0\xd1\x19\xc0\xfb\x39\xd7\x20\x64\x48\xc0\x35\x48\x11\xad\x00\x21\x46\xe7\xc1\xdc\x82\x5e\xae\x61\xca\x29\x0a\x6d\xb3\x0f\x67\xe1\xa0\x95\x07\x5b\xfa\x4c\x51\x48\xc2\x70\x8c\x5c\x20\x4d\xb5\x37\xba\xf3\x5d\x2e\x66\xc5\xf5\x52\x76\xe4\xca\x11\xa5\xe6\x7c\xd5\xc3\x83\x67\xdc\x74\xd1\x6f\x49\x32\x83\x33\x90\xc2\x1f\x0a\xb8\x01\x45\x89\xd4\xdc\x48\xb5\xaa\x37\xae\x25\xc9\x64\x1c\xf3\x1e\xce\x8c\x7a\xbe\x3e\x87\x70\x03\xd9\x74\x8d\xe4\x8c\x22\x1a\x6b\x83\xa6\xdb\x4a\xbd\x9b\x93\x99\xdb\x9d\x4a\x81\x90\xc6\x51\xb5\x33\xc2\x12\x35\xb0\x88\x50\xf8\xf0\x34\x49\x79\xd4\xc0\x84\x6d\x0a\xc7\x61\x57\x06\xae\xdc\x56\x32\x75\x14\xc2\x06\x31\x65\x2f\x3b\x66\x5e\x65\x89\xcc\x9c\x73\x86\xd6\x49\x99\x8c\x13\x1e\x51\xd3\x22\x75\x8d\xaa\x13\xbd\xcb\x6c\xb0\x23\xd5\x10\x88\x22\x34\xd6\xc7\x3b\xcd\x7f\x9b\x0d\x06\x6e\xbc\x99\x3c\x3d\x9f\xc3\x3a\x05\x95\x0a\x61\x17\x9d\xbf\xe2\x9b\xd1\x3e\x2a\xfe\xcd\x57\x5f\x4d\xce\xe0\xe2\x6e\x74\xb9\x59\xcc\x7d\x56\x5f\x39\x41\xdf\x75\x35\x34\xa7\xed\x1b\x51\x45\x25\x7f\xde\x8f\x72\x53\x56\xbd\x9e\x7a\x8f\x43\x5b\x63\xd2\xfb\xeb\x07\xe1\x3a\x37\xf8\x92\xaa\x1c\x5f\x8c\x48\x2d\x38\xa3\x0b\xc6\x64\x2a\x4c\x1f\x97\x60\x11\x27\x61\xfa\xb8\xc3\xa5\x9b\x61\x18\xc2\x1b\xbc\xc7\x73\x97\x58\xbf\x6a\x38\x55\x64\xc4\xbc\x43\xf4\x24\xe8\x7d\x21\x23\x9a\x67\x97\xdb\x1d\x15\xac\xd6\xd1\xab\xce\x87\x9e\xc9\xaa\x7a\x0d\x3b\x83\xd3\x2e\xd5\x0b\x8a\xb4\x4c\x95\x3b\x9b\xd0\xe7\x73\x88\x24\x86\x30\xc1\xc8\x9e\x20\xd4\x77\x2d\xed\xf6\x34\x0b\x38\x2b\x6f\x74\xd5\x5c\x5d\xd1\xa3\x21\xa5\xe6\x6b\x0f\x5d\x09\xd5\x56\x24\x1a\xc2\x6e\x5e\x18\xe8\x4a\xab\xa1\x5c\xd0\x10\x8b\x2a\x59\xfb\xce\x91\xa8\x39\x97\xff\x22\xc1\x21\x8b\x0b\x57\x64\x90\x47\xf6\x8c\xda\xc7\xcb\x3a\xea\x65\x78\x55\x79\xcf\x50\x6f\x82\xce\x07\x98\x9a\x17\x13\x0d\x46\x76\x8f\x5c\x3a\x42\xaf\xcd\x65\xcb\xcd\x5b\x99\xbd\x14\x37\x4f\x67\x7a\x53\x2d\xbc\xc2\x71\x88\xc8\x3d\xc2\xb1\x1f\xeb\x99\x68\x0b\x22\x32\x07\x79\x75\x8d\x67\x71\x8d\xd6\x56\xa9\xa9\xbe\xf4\x31\x4f\x24\x59\xf5\x88\xd6\x5e\x40\xb7\x43\xb8\x0d\x6f\x2b\x0d\x5b\x55\x23\xab\xdd\xce\x5c\x53\xeb\x52\xd8\xd6\xbe\xd8\x80\xdc\xcb\x51\xd2\x1d\x49\xf6\xdb\x39\x6b\xdc\x06\x48\x5d\x78\xac\xc5\x5c\x0d\xdc\x66\x10\x42\xfb\xce\x65\x98\x61\x17\x31\x46\xf7\xf6\xaf\x07\x16\x0e\x4e\xac\xe3\x7d\x1d\xae\xa8\xca\x95\x67\x2e\x7d\x86\xee\x09\x0a\x02\xf5\xaa\x68\x55\x15\x2c\x4c\xd4\x50\x3c\xa8\xe4\x64\x7b\x2f\x90\xbb\xde\x0b\x24\x44\x83\x63\x56\xad\x04\xb5\xd6\x44\x5d\x41\x69\xc7\x62\xba\x1b\x3d\xd3\x52\x2a\x9f\x10\x9f\x72\x21\xad\xb1\x6f\x2f\x75\xd5\xa4\xd0\xeb\x99\xfc\xf1\xf7\x77\xe0\x3d\xf5\x70\xdc\xbf\xa1\xda\xf4\xec\xee\x7f\xa3\x67\x2f\x52\x89\x6f\x7e\xa9\xba\xbe\xdb\xdb\x98\x53\xb1\x1d\xc2\xb6\x6b\x6d\x9f\x02\x6e\xb3\xd9\x5c\x10\xd8\x91\xf6\xcd\xba\x81\x4e\x88\xf1\x69\xf6\xc0\xba\xaf\xf6\x4b\xc4\x5f\xc2\x0c\x45\xfc\xb1\x16\xf1\x04\x58\xaa\x14\x09\x13\xad\x7c\xc2\x98\x6b\xc0\xa5\x06\xa9\x20\x46\x6c\x58\x45\xf7\x3f\xe8\xde\x49\xd8\xc5\x26\x81\x77\x9d\x4e\x48\x09\x32\xd4\x40\x0e\x97\xdd\x23\x5b\x6d\xfc\xdf\x1d\x71\x9b\xac\x5e\xe4\xc8\xee\xbe\x4f\xc4\x53\x06\xda\x6a\xe9\x2c\xe2\x25\x3e\x15\xa1\x4d\x49\xa9\xa1\x5a\xc3\x67\xf3\x71\xb1\x4e\xdf\x64\xda\x89\x94\x11\xa1\x68\x2a\xaa\xd4\x36\xef\x4a\x4d\xe7\x21\x81\x6b\xf8\xf9\xa2\x01\xd7\x93\x59\x4a\x75\x3f\x9e\xe2\x44\x71\xd6\xd9\xe7\xfc\xf0\x2c\xf6\x54\x12\xb9\x9d\xd6\xb4\xbf\x83\xd5\x63\x31\xcb\xfb\xe7\xd6\xf2\x12\x75\x31\xec\xfa\xd4\x15\xd7\xa0\xe8\x53\x4a\xba\xa1\x1c\xb0\xfd\xb3\x11\x8f\x74\xc4\xc2\xe1\xb1\xd9\x3c\xa1\x4b\x3e\x54\x4f\x45\x39\x67\x90\x5f\xc5\xeb\x6b\xb4\xc2\x42\xe8\x19\x86\x75\x82\xac\x6b\x2d\x95\xfb\x27\x98\x6e\x0a\xc0\x48\x8a\x19\x2c\xb9\x99\x17\x25\x77\x85\x56\xf7\x65\xe3\x46\x02\xa9\xe0\x9f\x52\x8a\x56\xc0\x1d\x36\x9b\xfa\x12\xa0\x15\x3c\xdc\x8d\xcb\x12\xc5\x17\x68\xe8\xb1\xe9\xf4\x4a\xa1\xf2\xd6\xcf\x02\xf7\x59\x32\x1d\xa3\xc8\x15\x24\x35\x70\x51\x14\xe5\x9f\xd6\x0f\x09\x8c\xdb\x82\x7c\x4b\x7e\xd2\xb9\xb8\x1d\xba\xfa\xea\x7a\x4b\x32\x73\xd2\x04\x0c\x85\x5d\xa5\x59\x30\xa6\x10\xb8\x08\x29\x21\x11\xba\xbd\x6a\xd0\x74\xeb\xc4\x95\xc9\x9f\x07\xd7\xed\xaa\xd1\xef\xc7\x76\x59\x6f\x0d\x4b\x77\x71\x89\xc9\x38\x51\x5c\x53\xcf\x7c\x40\xcd\x03\xe4\xc3\x8b\x4e\x97\x32\x2d\x9f\x1c\xac\xa1\xb3\x77\xc8\x4d\x40\xb0\x47\xde\x65\x54\xca\xb5\x6c\xc7\xb9\xb6\xba\xad\x7b\x14\x73\x78\xca\x1d\xea\xf2\xa6\xea\x17\x9b\x5e\x69\x1b\x7b\x77\x05\xf7\xaf\xb6\x68\xf6\xec\x07\xfb\x97\xca\x2f\xd5\x27\x56\x7d\x6c\xf7\xcd\xd9\xad\xef\xa6\x5c\x48\xf9\x77\xd2\x6b\xe9\x3a\xfa\x01\xea\x75\x0a\xeb\x3b\xff\x0e\xfc\xbc\xbb\x6e\xc0\xda\x5e\x8e\x31\xaf\xbd\xa8\xb2\x43\xb5\xfb\xef\xbb\xec\xbe\xc2\x50\xec\xb9\x6d\x81\xed\xd2\x8f\xa3\xe2\x76\xdb\xfc\x0c\x55\x8a\x69\x9b\xfb\xfa\xf4\xd9\x81\x88\xe8\x4a\xb2\xc2\x85\xfd\xca\x0e\x7e\x23\x15\x65\x2f\x26\x76\xfc\x1c\x5b\x8f\x1f\x51\xb3\xec\x1c\x3d\x1c\xfd\x2f\x00\x00\xff\xff\xcf\x2b\xea\x27\x1c\x4e\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 19996, mode: os.FileMode(420), modTime: time.Unix(1537144136, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": {apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
