// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xff\x6f\xe3\xb6\x92\xff\x7d\xff\x8a\x81\xef\x80\xdb\x05\x36\x71\xdf\xde\x3d\xe0\x21\x0f\x0f\xbd\xbc\x04\xd7\x06\xdb\x6c\x83\x7a\x6f\x83\xe2\xb6\x30\xc6\xd2\xd8\x66\x23\x91\x2a\x49\xd9\xeb\x1e\xf6\x7f\x7f\x20\x29\xd9\x92\x2c\xc6\xb2\xe4\x24\xca\xc6\x05\x8a\x75\x2c\x8a\x9c\x6f\x1c\x7e\x66\x38\xa4\xff\xff\x15\xc0\x40\x2d\x71\x36\x23\x39\x38\x83\xc1\xbb\xd3\xef\x06\x6f\xcd\x77\x8c\x4f\xc5\xe0\x0c\xcc\x73\x80\x81\x66\x3a\x22\xf3\xfc\x22\x4a\x95\x26\x09\xd7\xc8\x71\x46\x12\xce\x6f\xae\x6c\x7b\x80\xc1\x82\xa4\x62\x82\x9b\x56\x8b\xef\x4e\xf3\x8e\x00\x06\x81\xe0\x1a\x03\xbd\xee\x0d\x60\xc0\x31\xb6\xdd\x8d\x30\x56\x29\x9f\xc1\xc5\x87\x8b\x8f\x59\x73\x80\x41\x2a\x23\xf3\x70\xae\x75\xa2\xce\x86\xc3\x19\xd3\xf3\x74\x72\x1a\x88\x78\xa8\x5c\xfb\x93\x80\x07\x7a\x18\x38\x5a\x4e\x62\x47\xcb\x09\x26\x6c\xd3\x07\xc5\xc8\x6c\x2f\x18\xc6\x8c\xff\x77\xf1\xc5\x53\x26\x06\xb6\xd9\xd7\x57\x00\x5f\x2d\xb7\x2a\x98\x53\x4c\x6a\x70\x06\xff\xe7\x68\xb6\x63\xe7\x0c\x98\x3f\xcc\x1b\xbf\xd9\xb6\x81\xe0\x2a\x2d\x35\xc6\x24\x89\x58\x80\x9a\x09\x3e\xfc\x5d\x09\xbe\x69\x9b\x48\x11\xa6\x41\xc3\xb6\xa8\xe7\x6a\x23\xf2\x21\x26\x6c\xb8\xf8\x4b\xce\x65\x51\x7a\x33\x2a\x0a\xd3\x90\x9f\xc6\x31\xca\x95\x61\xf7\x96\x45\x11\x48\xd2\x92\xd1\x82\x40\xcf\x09\x94\x46\x9d\x2a\x10\x53\x40\xc8\x3a\x03\xe4\x21\x30\xad\xe0\x2e\x9d\x50\x20\xf8\x94\xcd\x60\x2a\x24\x04\x82\x73\x0a\x34\x5b\x30\xbd\x5a\x8b\x12\x60\x20\x12\x92\x96\xe4\xab\xd0\x8c\xf1\x03\xe9\xcc\x0e\x8a\x8d\x24\xa9\x44\x70\x45\xaa\x44\x1b\xc0\xe0\xdd\x77\xdf\x55\xbe\x02\x18\x84\xa4\x02\xc9\x12\x9d\x59\x4c\xa1\x23\xc7\x91\x51\x08\x6e\xbd\x06\x30\xf8\x77\x49\x53\xf3\xc6\xbf\x0d\x43\x9a\x32\xce\x4c\x0f\x2a\x97\xd2\x38\xb3\x85\x31\x26\x6c\x43\xe5\x2f\x94\x44\xab\x41\xa9\xa3\xaf\xaf\xea\x3e\x7f\x2d\xb0\x93\xa0\xc4\x98\x34\xc9\x8d\xf2\xdc\x7f\x15\x46\x72\x53\xb6\xff\xbe\xbd\x97\xc9\x0f\x18\x93\xd1\x83\xd1\x4a\xae\x09\x2d\x60\x42\x10\x09\x71\x47\x21\xa4\xc9\x69\xb5\x0b\x66\xdf\xfc\x23\x25\xb9\xaa\x3e\x92\xf4\x47\xca\x24\x19\x95\x4c\x31\x52\x54\x79\xac\x57\x89\x25\x4c\x69\xc9\xf8\xac\xc8\xfe\xd7\xb7\xbb\xd9\xc1\xa5\x3a\x55\x14\x48\xd2\xe3\x3b\x5a\x8d\x59\xb8\x83\xb7\x8f\x73\x82\x91\x6d\xff\x9e\x56\x57\xa1\x35\xa7\xf3\x9b\x2b\x38\x0f\x02\x52\xaa\x8f\x6c\xa1\xa5\xcc\x70\xd7\x98\x35\xc7\xcc\x7b\x5a\xad\xd9\xc3\xfe\xb1\x27\x69\x66\x08\xdf\xcd\xd3\x2f\xb6\x61\x6f\x59\xf9\x33\x95\x74\x8a\x49\xd2\xcc\xf6\xce\x93\xa4\xc7\x56\x67\x79\xd1\xc4\x91\xeb\x06\xbc\x7c\xb4\x0d\xfb\xad\x98\x04\x95\x5a\x0a\xd9\x44\x35\x37\x59\xd3\x7e\x33\xa4\xd2\xc9\x9a\xf2\x86\xee\xae\xf0\x46\x5f\x79\x4b\xa4\x58\xb0\xb0\xb4\x50\xd7\xb1\x53\x5c\x99\xf2\x57\x14\xbc\xc6\xa5\x1a\xe2\x9d\x1a\x2e\xe2\x25\x4a\x1a\x92\x0e\xde\x3c\x0e\x67\xeb\xcf\xbf\x15\x56\x64\x8d\xb3\xea\x5a\x9c\xe3\xd1\xcd\xcb\xbf\xbd\xaa\x08\x67\x10\x52\x44\x9a\xee\x07\x4c\xae\xcd\x06\x20\xdd\x03\x7e\x2e\x6d\xd3\x67\x80\x7f\x4a\x84\xf6\x05\x02\xdd\xce\x51\x03\x53\x45\x08\xf4\x1f\x0a\xcc\x8b\x06\x09\x85\xa4\xb4\x14\xab\xde\xcc\x9e\x23\x08\x3a\x82\xa0\xa7\x65\xe5\x08\x82\xfa\xac\x98\x23\x08\x3a\x82\xa0\x87\xe3\xec\x90\x20\x28\x11\x6a\x47\xce\xc8\x72\xac\x8c\x16\x9b\xa0\xa0\x0b\x49\xf8\x2c\x50\x50\x89\xd0\x47\x41\x41\x13\x11\x6e\x19\x81\xb3\x8f\xba\x27\x05\xf3\xd0\x32\xad\x5a\xc7\xa1\x05\x70\xad\x66\x4d\xd8\x3f\x84\xc1\xa5\x3b\xec\x0d\xc3\xdf\x53\xa5\x01\xf7\x34\xbc\x73\xfb\x5a\x46\xc0\x07\x11\x92\xea\xb3\xf5\x95\xa8\x7d\x89\xd6\x57\x12\xc0\x83\x5b\xdf\xab\x82\xf4\xaa\x09\xf4\x61\xc4\x4a\x2e\x70\x8f\x2c\x3a\x82\x79\xd7\x2c\x0d\x59\x5f\xaa\x51\x72\xfc\x27\x33\x60\x8f\x8d\xb3\x4c\xe9\xa3\x58\xe7\x31\xa0\x3a\x06\x54\x4f\xcb\xca\x31\xa0\xea\xb3\x62\x8e\x01\xd5\x31\xa0\x7a\x38\xce\x1e\x1a\x61\xa4\xc9\x4c\x62\x48\xfb\x82\x8c\x54\x72\xc8\x5e\x05\x61\x85\xa7\xac\xe2\x11\x66\x6c\x41\xbc\x01\x28\xfe\x81\xf4\xff\xba\x0e\x32\xca\xaf\xf8\x54\xc8\xd8\xb6\xe8\x39\x02\xf1\xd2\xfd\x28\x78\xe4\x99\x1a\xf2\x31\x75\x7d\x44\x5a\x47\xa4\xf5\xd8\xbc\x1c\x91\x56\x9f\x19\xfa\x36\x91\x56\xbb\x2d\x55\xd0\xe6\xbb\x25\x01\x4a\x82\x40\x70\x65\x16\x2c\xc6\x5d\x91\x5f\x06\x35\x9e\x0d\xe4\xda\x23\xa5\xa8\x35\xc5\x89\x06\x2d\xd6\x78\xaa\x49\x4a\xb1\x0c\x41\xfa\x8c\x97\xca\x94\xbe\xc4\x7c\x62\x59\x02\x4f\x94\x50\x94\x14\x12\xd7\x0c\x23\x35\xc4\x65\xd1\x36\x76\x9b\x68\x9a\x84\xa8\x09\x70\xa9\xa0\xd0\x0d\xa4\x8a\xc2\x0c\xf3\x37\xb1\x57\xd3\xc7\xf9\xed\xe8\x62\xd3\x43\xbf\xad\x76\x9b\xde\x97\x69\xbb\xdb\x72\xe8\x81\x05\x9b\xd5\xb3\x95\x0d\x9b\x17\x3b\x5b\xb1\xe9\xe4\x79\xd9\x71\x85\xe2\x17\x6c\xc9\x15\x49\x3c\x8d\x2d\xcf\x29\x8a\x8b\xe6\xbb\x47\xb9\x5f\x48\x49\x24\x56\x14\x82\xe9\x03\x82\x39\x4a\xbd\xb3\xf0\xef\x47\x8a\xe2\x8b\x6a\xcb\xbe\x59\x6a\x85\xd4\x47\x31\xd1\xed\x19\x5f\xc7\x6c\x7e\x7e\x48\xb3\x28\x22\x09\x6a\x2e\xd2\x28\x84\x09\x01\xe3\x4a\x63\x14\x51\x08\x82\xf7\x06\x7d\x3b\x2a\x4f\xcd\x9f\x2a\xc1\x60\x1f\x24\x9e\x31\xb8\x7e\xb5\x6f\x3c\xe5\xa7\xb5\x9a\x73\x94\xbd\x61\xf3\x60\xb6\x0f\x3b\xf5\x7a\xc3\x57\x75\xfa\xd6\xb1\x63\x67\x03\x7c\xc0\xb8\x3f\xea\x78\xa6\x19\xc8\x03\x78\xf3\x4d\x5c\xb7\xb3\x36\x29\x73\x0e\xf0\x5a\x48\x90\x94\xfd\xf5\xa6\xe0\xb6\x3f\xf3\x8f\x73\xa6\x60\x69\x1a\x4f\xc8\xd5\x11\xa7\x81\x66\x0b\x02\x66\xcf\xbd\x59\xc5\xcf\x51\x01\x46\x92\x30\x5c\xc1\x84\x88\x6f\x16\x80\x25\xd3\x73\x77\x58\xce\xc8\xb9\x12\x74\x57\x17\x82\x2b\x37\xfe\xb3\x58\x09\xaa\xb4\xbe\x44\xb4\x52\x95\xc1\xd3\xe0\x14\xe7\x33\x4b\x40\xbb\xad\xdd\x67\x5d\xf9\x2d\xf4\x26\x2f\xa9\xfa\xb8\xd5\xb2\x6f\x06\x5a\x21\xf5\x25\xda\x67\x45\x04\x4f\x63\x9e\x9b\xd3\xdb\x7b\xef\x5d\xe6\xc0\x80\x6d\x36\xef\x00\x27\x22\xd5\x80\x09\x03\x45\x72\xb1\x6b\xf3\xf2\x93\xeb\xe1\xf9\xec\x5a\x66\x04\xb7\xb2\xd6\x36\xca\x5a\x1f\x54\x2f\x90\xb6\x39\x2a\x5e\x2d\xb2\x2b\xfd\xfd\xe9\xfa\x16\x25\x8d\x12\x0a\x8a\xba\xcd\x97\x76\x31\xf9\x9d\x82\xcd\x0a\x66\xe0\x48\x42\x52\xb3\x8a\xb0\x07\x18\x86\x63\x6e\xab\x2d\x2b\x3a\xc8\x3b\x42\x29\xb1\x3c\x75\x06\x4c\x53\x5c\x6d\xbf\x8f\x9c\x1d\xe5\xd7\x18\xcc\x19\x77\x0c\xf8\xb0\xd5\xe6\x7e\x82\xac\xb5\x82\xe5\x9c\x05\x73\x58\x12\x2c\x91\xdb\x8c\x30\x86\xa1\xf9\xa7\x90\x25\x1f\xd4\xaa\x47\x52\x2c\x16\xf4\xb0\xcc\x56\x15\xe6\x38\xfd\xc5\x8e\x7c\x28\x7e\x1d\x1f\x30\x95\x22\xf6\x30\x5d\xeb\x0f\x9a\x92\xd6\xc1\x96\xe6\xd5\x75\x6f\x1b\x6a\xd6\x33\xfb\x71\x4e\x60\x5e\xb6\x39\xa6\xd1\xe8\xc7\x6c\xb3\x66\x17\x4b\xa5\x0a\xe8\xf3\xf7\x23\x43\xff\xf9\xfb\x91\x85\x05\x3c\xa0\x1f\xa4\x48\x93\x2e\xfc\x64\xcb\x4a\x3b\x7e\x78\x01\xd8\xcf\x2c\x25\xf5\x4e\xc3\xf5\xb7\xff\x18\x39\x97\x60\x5a\xc3\xeb\x91\x46\x1e\xa2\x0c\xc7\x97\xef\xc6\x8b\x77\x6f\x81\x74\x70\xfa\xa6\x7e\xc8\x98\xf1\xf1\x1f\x29\x72\xcd\xf4\xca\x37\x34\xe3\x9a\x66\x95\xe0\x65\xe0\x9c\x78\xf6\xf8\x3f\xdf\x79\x08\xbb\x66\x9c\xc5\x69\x0c\x3c\x8d\x27\x24\x8d\x08\x58\x46\xaa\x82\xd7\x21\x4d\x31\x8d\xb4\x32\x86\xfc\x27\x49\xe1\x23\x11\xbf\x3c\x28\x89\xf8\xa5\x1d\x89\x5b\x21\xce\xb6\x3a\xac\xae\x15\x58\xaf\x40\x80\x4e\x3d\xc8\xc3\xba\xc1\x06\xf7\x98\xf3\xad\x33\xe7\xdb\xd1\x25\x6a\xbc\x20\x5e\xb9\x2a\x64\x5f\x5b\xce\x8a\x0f\xda\x58\xda\xad\xf5\x40\xae\x03\x78\x9d\xaa\x13\x42\xa5\x4f\xfe\x72\xaf\x8d\xe1\x02\x59\x84\x13\x16\x31\xbd\x1a\xff\x29\xf8\x21\x5c\x6e\xc3\x78\xbc\x4a\x78\x91\x14\xb0\xa4\x14\x98\x98\xbc\x85\xfc\xf3\xbb\xc0\x7e\x5e\x92\xf9\x1c\x6e\x73\xe7\xd7\xbd\x1b\xc7\xe8\x09\x32\x45\x35\xd1\xeb\xc1\xdc\xd4\xa1\x5c\x48\xfc\xd7\xd3\x08\xe5\x8c\x8e\xce\xe3\xdb\x71\x1e\x37\x32\xbb\x06\x28\x95\x14\x5e\x55\xe6\xd5\xde\x96\xb6\x48\x82\x31\x0b\x5b\x2f\x89\x9f\x6e\x2e\x80\x85\x6f\x61\x12\x21\xbf\xb3\x6b\xbd\xf9\xff\xf3\x20\xb0\xb4\x83\xe0\x64\xbf\x58\x89\xf4\xf3\xe0\x2d\x4c\x99\xcd\x1a\xb3\xa9\xf9\xc2\x16\x3c\xfc\xf3\xd7\x9f\x4d\x1f\xf5\x5a\x57\x14\xa4\xd2\x78\x1b\x2b\xc3\xb6\x64\x8e\xb2\x5e\xee\x5b\xb2\x19\xc6\x63\x29\x22\x1a\xa3\x6c\xe7\x50\x8d\x2c\xae\xce\xaf\xc1\x74\x62\x39\x2e\x56\x78\xbc\x46\xc9\xdf\xe4\x7a\x54\x4a\x04\xcc\xc6\x4d\x61\xd8\xc8\x92\xfe\x47\x48\x58\xce\x89\x83\x12\x31\x81\x9e\x33\x3e\x53\x56\x76\x79\x7a\xcc\xc9\x3a\x2c\x1b\x4f\x25\xf0\xa9\x89\xda\x3a\x18\xcd\x8c\xe9\xf1\x76\x10\xba\x9f\xb4\x34\xce\x40\x70\x87\xa5\x98\x06\x49\x89\x50\x4c\x0b\xb9\xaa\xd7\x90\x19\x32\x10\x71\xcc\x3a\xc0\x51\x54\xf3\x35\x7c\x63\x1a\xb2\xee\xbc\xc3\x69\x49\x34\x56\x1a\x75\x3b\x57\x7c\x3b\x27\x3d\x37\x13\x5c\x02\x17\xda\x6d\x34\x48\x32\xa0\x5f\x41\x10\x11\x72\xa7\xd5\x49\xca\x22\x0f\x11\xe6\x51\x38\x0e\xdb\x12\x70\x69\x67\xe0\xd4\x8e\x10\x7a\xd8\x14\x9d\xf4\xf8\x69\xb3\xcd\x30\x13\x6e\x4b\x59\x0b\x23\xd7\x84\x45\x54\x3f\x62\xf6\x50\xb6\x1a\xef\x22\x7b\xd9\x0e\x55\xdf\x7f\x12\xa1\x36\x36\xde\xaa\xff\x9b\xec\x65\x60\xda\xa9\xc9\x8d\xe7\x36\xca\x87\x20\x53\xce\x19\x37\x66\xbb\x2b\x8c\xa9\x3b\x5d\x57\xae\x01\xe9\x30\xfb\xca\xa5\xc2\x6d\x67\x83\xbf\x80\xd8\xeb\x8c\x2b\x95\xbc\xdd\x46\xf6\xd5\xf7\xfa\x22\xfd\xd6\x58\xd7\x5b\x7e\xdb\xc8\xfb\x9a\xb7\x8b\x75\x13\xda\xda\xb9\xbb\x81\xcf\xf8\x5d\x63\x0f\x5b\x21\xfb\x7d\x66\x50\x3d\x64\xf9\x14\xc1\x6c\xcb\x32\x44\x4f\x5c\xb0\xdc\x0a\x04\x9a\x1f\x39\xf5\x15\x46\x15\xa9\x3d\xbf\x1d\x41\xb1\x55\x3d\x15\x95\xd2\x98\x3d\xe9\xf0\x97\xb6\x94\x28\xb1\x65\x34\x3b\x69\x71\x3b\x7c\xcd\x88\x69\x9a\x0f\xf4\xdb\xb6\x11\x8f\x4a\x28\x60\xd3\xec\xae\xca\xcf\xbc\xd4\x49\x86\x1c\x6d\x1d\xdb\x3f\xe0\xbf\xfe\x5e\x7d\xfc\x3e\x7b\x6c\x79\xfb\x07\xfc\xf5\xef\x6d\x9c\xdb\xf6\xd9\xe9\x0e\x76\x2d\xee\x7c\x56\x3d\x11\xc2\xac\x9c\x3e\x8c\x5f\xfb\x78\x63\xf5\x68\x2c\x9e\x29\x40\x50\xa9\xf5\x00\xd3\x34\x02\x49\x7f\xa4\xa4\x74\x1b\xa6\xad\xd1\xb8\xef\x47\x24\x17\x2c\xa0\xf3\x20\x10\x29\xd7\x5d\x98\x0f\x22\x46\x5c\x77\xf1\xec\x17\xb6\x87\xab\x10\x5e\xe3\x1d\x9e\xd9\x6a\xfd\x4b\x4f\x5c\x95\x0d\xe6\x7c\x7b\xc7\x01\x9d\x5b\xcf\x06\xcd\x4b\xd6\x9b\x05\x4b\xc6\x0f\xa1\x13\x9d\x43\x11\x93\x55\xf5\xe2\xcd\x2c\xa0\x70\x56\x2a\x49\x89\x54\xda\xe8\x8c\xbe\x9c\x41\x24\x30\x84\x09\x46\x26\x86\x92\x6f\x76\xbb\xe0\xea\x64\xef\x92\x6b\x4f\x5a\xc7\x25\xbe\x93\x14\x9e\xa4\xa2\x3b\xd0\xd0\x76\xa0\xda\x63\x0e\x1e\x04\x95\x9f\x36\x68\x3b\x96\xe7\x0c\x82\x07\x56\x54\x8e\x02\xb4\x06\x15\xfe\x03\x02\x4f\xb2\xce\x67\x7e\xe1\x92\x34\xb2\xc8\x44\xe9\x5d\xac\xac\xa5\x5c\xae\x2e\x2b\x37\xd8\xd6\xab\xa0\x35\x8c\xa8\xb9\x23\xd7\xa3\x64\x7b\xad\x71\x67\xa8\xb2\xb9\x1d\x79\xe7\x88\x9b\xcb\x92\x3b\x8f\x5a\xb8\x77\xd9\x06\x37\xf6\xda\x65\xff\xf6\x54\xd3\xd5\x23\x3f\x45\x79\x34\x8d\xc7\x30\x8d\xc6\x5a\xa9\xd9\x7f\xea\xa2\x9e\x48\x04\xd5\x6c\x4b\x73\x06\xed\x0a\x61\x17\xbc\xad\x44\x74\x55\x8c\x41\xed\x72\x06\x0f\x01\x82\x2f\xca\x5e\xd2\x66\x17\x76\xeb\x39\x7b\xb8\x0d\x90\xda\xd0\x58\x8b\xb9\x3c\xd4\x66\x10\x42\xb9\xc6\x65\x98\x61\x26\x31\x46\x77\x76\xcb\xd9\xca\xd9\xc2\x89\xb5\xbf\xaf\xc3\x15\x55\xbe\xf2\xdc\xad\xcb\x51\x3e\xd8\x2e\x74\xa3\x7d\xd1\x42\x47\x9e\xed\x93\x4a\x56\xba\xf3\x04\xb9\xed\x3c\x41\x42\xd4\x38\x0e\xaa\x7b\x61\x8d\x25\x51\xb7\xa5\x76\x7f\xa8\xf4\x38\x53\xa9\x49\x5c\xdb\x6e\x22\xad\xb1\x6f\x27\x71\xd5\x6c\x22\xd4\x13\xf9\xcf\x5f\x7f\x06\x67\xa9\xfd\x31\x7f\xcf\x7e\xdb\xa3\x9b\xff\x53\xa5\x6f\xfc\xbf\x4d\xb0\xbe\x9f\xcd\x9b\x1e\xcd\x4b\x98\xdb\x5a\x76\x49\x00\x37\x59\x6f\x3b\x32\x14\xf9\xa0\xe5\x34\x45\x57\xe9\x97\x06\x7f\xea\x2c\xda\x9a\xc5\x13\x08\x52\x29\x89\xeb\x68\xe5\x92\x0d\x4c\xd9\xcc\x8b\x90\x10\x23\x7a\x66\xd1\xdd\xdf\x54\xe7\xfd\x94\x42\xc9\xff\xfb\x74\x42\x92\x93\x26\x5f\xae\xac\x43\xc6\xae\xd6\xff\xef\x91\x9c\x7a\x88\xec\x5d\x2d\x68\xab\x1d\x67\x9f\xcc\xdc\xae\x81\x0a\xc9\xb9\xda\xb1\xe6\x6c\x36\x1f\x17\x2b\x15\x1e\x26\xa9\xb5\xbd\xcb\x94\xbb\x04\xa6\xe0\xc7\x73\x0f\xae\x27\xbd\x14\xf2\x6e\x3c\xc5\x89\x64\x41\x6b\x9b\x73\xaf\x67\xbe\xa7\xb2\x27\xd3\x6a\x4e\xf7\x36\x75\xe8\x97\xf2\x12\x55\xd1\xed\xba\xd4\x15\x53\x35\x79\xc5\x6d\x34\xdc\xde\x10\x0b\xc1\xa3\x5f\x3d\xa1\x4d\x3e\x54\xa3\xa2\x9c\x32\xc8\x6b\x75\xbb\x2a\xed\x30\x55\xab\x81\xe0\x5a\x8a\x68\x9c\x44\xc8\x1f\xb8\xa4\xf3\x61\xea\x57\x03\x11\x27\x92\x29\xda\x0d\xe1\xcc\xd4\x23\xf9\x6d\xf3\x88\x09\x1b\x13\x0f\x13\xc1\x5a\x67\x2d\x99\x2a\x9c\x39\x44\x58\x60\x94\x12\x44\xec\x8e\x80\x25\x67\x89\x90\x3a\xdb\xb3\xca\x0e\x12\x21\x2c\x98\xd4\x29\x46\x70\x75\x33\x34\x8f\x3f\xf3\x1b\x54\x36\x9b\x8c\x81\x8d\xf1\xe8\x8b\x26\xc9\x31\x82\x20\x55\x5a\xc4\x24\x55\xe6\xba\x70\x12\x51\xb6\x73\x1d\xa7\xdc\xac\x54\xd4\x3d\xc1\x53\xf3\x9b\x0e\xfd\x73\x6c\x17\x56\xbe\x45\xef\x90\x1f\xc9\x12\x2b\x1f\x86\xec\x90\xb2\x19\x95\xd2\x34\xed\xb7\x5e\x6a\x0f\xcd\xf6\x4f\xba\x6e\xc7\x89\x60\x7d\x8a\xa2\xb0\xf1\xe4\x29\x74\x23\xa5\x70\xd6\x01\x8f\x66\x1d\x28\x58\x92\x24\x77\x29\x5d\x0b\xf9\xfe\x40\x9c\x24\x0b\x36\xc7\xe6\x9e\x1a\x5f\x17\x4b\xaf\xdd\x49\xc0\x98\xb8\x67\x71\xdd\x1c\x01\x3e\xc4\xa8\xb6\x27\xf7\x83\x27\x66\x58\xfb\x7d\xe1\x87\x01\x41\x0b\x5f\x9c\x9e\x88\xee\x9b\xf3\xf6\x2c\xe4\xae\xda\xa8\xa0\xa2\xa2\x2e\x63\x59\x6d\xd5\x63\x67\xe3\x7f\x3b\x64\x6a\x51\x52\x36\x19\xdc\xb5\x89\xaf\x39\x29\x4d\x21\xac\x30\x8e\xe0\xc4\x3e\xfa\x64\x87\x38\xb5\xdf\x18\x3c\x40\x5c\xab\xba\x1d\xc4\x86\xe6\xeb\xce\x68\x8d\x48\x6b\x43\x5a\x47\x13\x3e\x8c\x45\x55\x8f\x9a\x7b\x44\xdd\x21\x16\xdc\x7d\x0c\xbc\x95\x40\xf5\xd6\xf5\xd3\xfd\x73\xb7\x57\xe5\x8a\x16\xe6\xaa\x0b\xd5\x4a\x19\x98\x7c\x1f\x0e\x7f\x4c\x14\x56\x84\xee\xbb\xf1\xd7\x4f\xd5\xcb\xcc\xbb\xe8\xee\x9b\xd3\x5b\xd7\xf8\xa9\xb0\x3b\xdb\x4a\xae\x3b\x2e\x44\xed\x9f\xa4\x2f\x90\x57\xc1\x5e\x56\xdb\xe5\xc1\x7a\x99\x07\x79\x9a\xa3\x1e\xa8\x73\x0f\xe6\x0a\x9e\x13\xa1\x14\x33\x50\x5d\xb2\xd9\x5c\x03\x17\xcb\x76\x6a\x2b\x9d\x08\xed\x9f\x92\xae\xa6\x05\xc0\xb8\x44\x05\x3f\xbf\xbf\x57\x39\x63\x56\x5b\xd5\x0d\xfe\x19\xb1\xbb\x38\xbc\x9e\xb2\xbc\xde\xb7\xd8\x72\x5b\x03\xdb\xc5\x15\x76\x14\x5b\x4b\x91\xaf\x48\x25\xe8\x7f\x8f\xb6\xea\xee\x03\xe8\x54\x5c\x55\xeb\x37\x9a\x15\x1f\x37\xb9\x0e\xc7\x53\xbc\x53\xbd\x4f\xe0\x1e\xdd\x34\x85\x33\x9e\xa8\x39\x23\xce\x35\xf2\xe4\x7f\x6b\xf1\xe2\xbe\xd4\xd4\x5d\xa9\x51\x12\x97\x85\x93\xa3\x7b\x09\xf1\xed\x46\xec\xbd\x0b\x72\xff\x35\x2b\x2d\xbc\x44\xfd\x5d\x1c\xfd\xf3\x15\xcf\x36\xc2\xdc\xec\x51\xfc\x84\x13\x8a\x9e\x24\xc0\x2c\x9e\xe9\x45\x88\x2c\x1d\xfe\xd0\xa7\xfd\xce\x8c\x4d\x5c\xd5\x8e\xd1\x54\x5a\x35\xd7\x4e\x3c\x3f\x2f\xd8\x2d\x8a\xfa\xb0\x89\xc5\xfd\x43\x33\xcf\xd0\x9d\x0f\xb9\x70\x51\x09\xa2\x40\x8b\xf5\x95\x2f\xc3\xf5\x15\xb6\xbe\x64\x40\xae\xd2\x25\x0b\xbd\xdc\x1f\x02\x42\x67\xa2\x59\xdf\xe9\x78\x62\x06\xcc\xbe\xfd\xfe\x33\x1f\x39\x91\x31\x0d\x73\x5c\x50\xb9\x11\x86\x31\xe3\x90\x48\xb6\x60\x11\xcd\x48\x7d\xef\xc9\xeb\x9a\x66\xe3\xb5\x2a\x9f\x02\x18\xae\x2d\x41\xb9\x04\x30\xd3\xc5\x3c\x71\x96\xca\x75\xec\xf8\x4c\xb1\xbf\x0b\x4f\xed\x1d\x3b\xc7\x75\xe7\x60\xeb\x8e\xef\x62\xd7\xa7\x58\x7f\x72\x5f\xea\xcf\xb9\xf5\xb1\x16\xa9\x8b\xa4\xfb\x6d\xce\x87\x3b\x1a\xe2\xbf\x74\xf5\x1b\xb6\xb3\x83\x97\x8f\x76\x93\xf6\xcb\xb1\xb5\xea\x35\xeb\x1d\x78\x7e\xfc\x85\xb1\x88\x2d\x8e\x27\x09\x0f\x55\x7f\x7f\xd0\x13\x9e\x9d\xb7\x23\xf2\xac\x8f\x19\x79\x99\xa7\x1c\xed\x89\x1a\xf1\x7d\x67\x8b\x7f\x29\xf3\x7c\xbb\x7c\xa3\x03\xcf\xa9\x22\xd9\x29\x6e\xce\x3b\xf0\xdf\xef\x55\x30\xa0\x07\xbc\x45\xac\x08\xea\x85\x7f\x17\xb4\xc3\xe5\x30\xb6\x82\x55\xc8\x86\x34\xb4\x38\x3c\x57\xf3\x73\x37\x77\x7f\x53\xeb\x49\xb3\xbe\x4d\xc4\x15\x48\x81\x2d\x90\x3a\x05\x5b\x1f\xc3\x45\x48\x66\x9a\x0b\x1e\xad\x00\x21\x46\xb7\x81\x32\x75\x86\x37\x65\x64\xa2\xbd\xfc\xf2\x99\xf0\xb4\x9e\x66\x9b\x94\x78\xcc\x2d\xb0\x6a\xee\x67\x77\xc8\x67\x64\xe2\xc8\x5c\x8b\x23\xce\x2a\x93\x1a\x9f\xee\x2b\x95\xa1\x66\x3f\x7d\x90\x7f\x67\x05\x99\x25\xa3\xd7\xf7\x37\xe6\xe5\x42\x97\x22\x28\x5c\xe0\x58\xd1\xd6\xb5\x90\x94\xdd\xa0\x99\xc3\xac\x6b\xc7\x29\x9c\xdf\x5c\x65\x72\x1b\xa4\x32\x32\x8d\xe7\x5a\x27\xea\x6c\x38\x9c\x31\x3d\x4f\x27\xa7\x81\x88\x87\x0a\x63\x95\xf2\xd9\x49\xc0\x03\x9d\xcb\xea\x24\x93\xd5\x09\x26\xcc\x10\xf5\xf5\xd5\xd7\x57\xff\x0a\x00\x00\xff\xff\x8e\xb8\x5d\x75\xfd\x91\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 37373, mode: os.FileMode(420), modTime: time.Unix(1537315977, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": {apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
