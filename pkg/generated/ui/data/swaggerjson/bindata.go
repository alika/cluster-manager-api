// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3d\x7f\x6f\xdb\xb8\x92\xff\xf7\x53\x0c\x7c\x07\x5c\x0a\x24\xf1\xbe\xbe\x3b\xe0\xa1\x0f\x0f\x7b\x79\x09\xae\x1b\x74\xdb\x0d\xd6\xbd\x06\x8b\xeb\xc2\x18\x4b\x63\x9b\x1b\x89\x54\x49\xca\xae\xf7\xd0\xef\xfe\x40\x52\xb2\x25\x59\xb4\x65\xc9\x49\x94\xa6\x0b\x2c\x9a\x48\x14\xe7\x27\x87\x33\xc3\x19\xe6\xff\x5f\x00\x0c\xd4\x12\x67\x33\x92\x83\xd7\x30\x78\x75\xfe\xc3\xe0\xd4\x3c\x63\x7c\x2a\x06\xaf\xc1\xbc\x07\x18\x68\xa6\x23\x32\xef\x2f\xa3\x54\x69\x92\xf0\x0e\x39\xce\x48\xc2\xc5\xcd\xb5\x1d\x0f\x30\x58\x90\x54\x4c\x70\x33\x6a\xf1\xc3\x79\x3e\x11\xc0\x20\x10\x5c\x63\xa0\xd7\xb3\x01\x0c\x38\xc6\x76\xba\x11\xc6\x2a\xe5\x33\xb8\x7c\x7f\xf9\x21\x1b\x0e\x30\x48\x65\x64\x5e\xce\xb5\x4e\xd4\xeb\xe1\x70\xc6\xf4\x3c\x9d\x9c\x07\x22\x1e\x2a\x37\xfe\x2c\xe0\x81\x1e\x06\x0e\x97\xb3\xd8\xe1\x72\x86\x09\xdb\xcc\x41\x31\x32\x3b\x0b\x86\x31\xe3\xff\x5d\xfc\xf0\x9c\x89\x81\x1d\xf6\xf5\x05\xc0\x57\x4b\xad\x0a\xe6\x14\x93\x1a\xbc\x86\xff\x73\x38\x5b\xd8\x39\x01\xe6\x17\xf3\xc5\xef\x76\x6c\x20\xb8\x4a\x4b\x83\x31\x49\x22\x16\xa0\x66\x82\x0f\xff\x50\x82\x6f\xc6\x26\x52\x84\x69\xd0\x70\x2c\xea\xb9\xda\xb0\x7c\x88\x09\x1b\x2e\xfe\x92\x53\x59\xe4\xde\x8c\x8a\xcc\x34\xe8\xa7\x71\x8c\x72\x65\xc8\xbd\x65\x51\x04\x92\xb4\x64\xb4\x20\xd0\x73\x02\xa5\x51\xa7\x0a\xc4\x14\x10\xb2\xc9\x00\x79\x08\x4c\x2b\xb8\x4b\x27\x14\x08\x3e\x65\x33\x98\x0a\x09\x81\xe0\x9c\x02\xcd\x16\x4c\xaf\xd6\xac\x04\x18\x88\x84\xa4\x45\xf9\x3a\x34\x30\xde\x90\xce\xf4\xa0\x38\x48\x92\x4a\x04\x57\xa4\x4a\xb8\x01\x0c\x5e\xfd\xf0\x43\xe5\x11\xc0\x20\x24\x15\x48\x96\xe8\x4c\x63\x0a\x13\x39\x8a\x8c\x40\x70\xeb\x33\x80\xc1\xbf\x4b\x9a\x9a\x2f\xfe\x6d\x18\xd2\x94\x71\x66\x66\x50\x39\x97\xc6\x99\x2e\x8c\x31\x61\x1b\x2c\x7f\xa5\x24\x5a\x0d\x4a\x13\x7d\x7d\x51\xf7\xf3\xd7\x02\x39\x09\x4a\x8c\x49\x93\xdc\x08\xcf\xfd\x57\x21\x24\x57\x65\xfb\xef\xe9\x4e\x22\xdf\x63\x4c\x46\x0e\x46\x2a\xb9\x24\xb4\x80\x09\x41\x24\xc4\x1d\x85\x90\x26\xe7\xd5\x29\x98\xfd\xf2\x73\x4a\x72\x55\x7d\x25\xe9\x73\xca\x24\x19\x91\x4c\x31\x52\x54\x79\xad\x57\x89\x45\x4c\x69\xc9\xf8\xac\x48\xfe\xd7\xd3\xfd\xe4\x24\x52\x2c\x58\x58\x92\xf0\x3e\x92\xf2\x4f\x14\x9c\xe0\x52\x0d\xf1\x4e\x0d\x17\xf1\x12\x25\x0d\x49\x07\x2f\x1f\x86\xb2\xf5\xcf\xbf\x17\x44\xa9\x71\x56\x15\x62\x6e\xc8\x36\x1f\xff\xfe\xa2\xc2\x9c\x41\x48\x11\x69\xda\xbd\xd2\xdc\x98\xcd\xca\xda\xb1\x6a\xae\xec\xd0\x27\xb0\x70\x4a\x88\xf6\x65\xed\xdc\xce\x51\x03\x53\xc5\xb5\xf3\x1f\x0a\xcc\x87\x66\x09\x85\xa4\xb4\x14\xab\xef\xab\xa7\x3f\xab\x27\x11\x6a\xcf\x2e\x65\x29\x36\x2e\x43\xa3\xe5\x73\x29\x09\x9f\xc4\xf2\x29\x21\xfa\x20\xcb\x67\x22\xc2\x2d\x25\x70\xfa\x51\xf7\xa6\xa0\x1e\x5a\xa6\x55\xed\x38\x36\x03\xde\xa9\x59\x13\xf2\x8f\xa1\x70\xe9\x1e\x7d\xc3\xf0\x8f\x54\x69\xc0\x03\x15\xef\xc2\x7e\x96\x21\xf0\x5e\x84\xa4\xfa\xac\x7d\x25\x6c\x9f\xa3\xf6\x95\x18\x70\xef\xda\xf7\xa2\xc0\xbd\xaa\xcb\x3e\x8c\x58\xc9\x04\x1e\xe0\xb7\x23\x98\x6f\xcd\xd6\x90\xcd\xa5\x1a\xb9\xe3\x3f\x1b\x80\x3d\x56\xce\x32\xa6\x0f\xa2\x9d\xb8\x54\xe7\x8a\x02\x49\x7a\x7c\x47\xab\x31\x0b\xf7\x6c\xc9\x1f\xe6\x04\x23\x3b\xfe\x2d\xad\xae\x43\x1b\x16\x5d\xdc\x5c\xc3\x45\x10\x90\x52\xbd\x71\x30\x0a\x64\xa1\xc5\xcc\x50\xd7\x98\x34\x47\xcc\x5b\x5a\xad\xc9\xc3\xfe\x91\x27\x69\x66\x10\xdf\x4f\xd3\xaf\x76\x60\x6f\x49\xf9\x33\x95\x74\x8e\x49\xd2\x4c\xf7\x2e\x92\xa4\xc7\x5a\x67\x69\xd1\xc4\x91\xeb\x06\xb4\x7c\xb0\x03\xfb\x2d\x98\x04\x95\x5a\x0a\xd9\x44\x34\x37\xd9\xd0\x7e\x13\xa4\xd2\xc9\x1a\xf3\x86\xe6\xae\xf0\x45\x5f\x69\x7b\xbe\x01\xd5\x4e\x0f\x23\x4d\x66\x12\x43\x3a\xd4\xc9\x48\x25\x87\xec\x53\x10\x96\x79\xca\x0a\x1e\x61\xc6\x16\xc4\x1b\x38\xc5\x6f\x48\xff\xaf\x9b\x20\xc3\xfc\x9a\x4f\x85\x8c\xed\x88\x9e\x7b\x20\x5e\xbc\x1f\xc4\x1f\x79\xa2\x8a\xdc\x60\x89\xb6\x4b\xe2\x80\x36\xcf\x96\x04\x28\x09\x02\xc1\x95\xa1\x94\x71\x97\x8f\xce\x74\xf4\xc9\xac\xd5\x03\x62\x51\xad\x29\x4e\x34\x68\xb1\x5e\x88\x4d\x62\xd1\xb2\xee\xf6\x79\xa1\x95\x31\x7d\x8e\x81\x68\x99\x03\x8f\x14\x89\x4a\x0a\x89\x6b\x86\x91\x1a\xe2\xb2\xa8\x1b\xfb\x55\x34\x4d\x42\xd4\x04\xb8\x54\x50\x98\x06\x52\x45\x61\xb6\x59\x34\xd1\x57\x33\xc7\xc5\xed\xe8\x72\x33\x43\xbf\xb5\x76\x1b\xdf\xe7\xa9\xbb\xdb\x7c\xe8\x81\x06\x1b\x07\xb7\x95\x0e\x9b\x0f\x3b\x6b\xb1\x99\xe4\x69\xe9\x71\x05\xe3\x67\xac\xc9\x15\x4e\x3c\x8e\x2e\xcf\x29\x8a\x8b\xea\x7b\xc0\x01\x63\x48\x49\x24\x56\x14\x82\x99\x03\x82\x39\x4a\xbd\xf7\xa8\xf1\x27\x8a\xe2\xcb\xea\xc8\xbe\x69\x6a\x05\xd5\x07\x51\xd1\xed\x15\x5f\x47\x6c\x5e\xea\xa2\x59\x14\x91\x04\x35\x17\x69\x14\xc2\x84\x80\x71\xa5\x31\x8a\x28\x04\xc1\x7b\xe3\x7d\x3b\x2c\xcf\xcd\xaf\x2a\xc1\xe0\x10\x4f\x3c\x23\x70\xfd\x69\xdf\x68\xca\x0b\x8b\x9a\x53\x94\x7d\x61\x03\x28\x3b\x87\x5d\x7a\xbd\xa1\xab\xba\x7c\xeb\xc8\xb1\xab\x01\x4c\x18\xd8\x1b\xb4\x9f\x68\xe8\x7a\x04\x6b\xbe\x89\xeb\xf6\x1e\x6a\x67\xc6\x01\x4e\x84\x04\x49\xd9\x6f\x2f\x0b\x66\xfb\x13\xff\x30\x67\x0a\x96\x66\xf0\x84\x5c\xe5\x42\x1a\x68\xb6\x20\x60\xb6\x44\xcb\x0a\x7e\x8e\x0a\x30\x92\x84\xe1\x0a\x26\x44\x7c\xb3\x01\x2c\x99\x9e\xbb\xba\x2e\xc3\xe7\x4a\xd0\x5d\xdd\x08\xae\x1d\xfc\x27\xb1\x13\x54\x71\x7d\x8e\xde\x4a\x95\x07\x8f\xe3\xa7\x38\x9b\x59\x72\xb4\xdb\xea\x7d\x36\x95\x5f\x43\x6f\xf2\xb3\xf8\x0f\x5b\x23\xfb\xa6\xa0\x15\x54\x9f\xa3\x7e\x56\x58\xf0\x38\xea\xb9\x29\x34\x3e\x38\xe9\x9d\x3b\x06\x6c\x93\xf5\x05\x9c\x88\x54\x03\x26\x0c\x14\xc9\xc5\xbe\xac\xf7\x47\x37\xc3\xd3\x49\x77\x67\x08\xb7\xd2\xd6\x36\xc2\x5a\xd7\x54\x17\x50\xdb\x54\x35\x57\xab\x33\x4a\xbf\x7f\x7c\x77\x8b\x92\x46\x09\x05\x45\xd9\xe6\x5b\xbb\x98\xfc\x41\xc1\x66\x07\x33\xee\x48\x42\x52\xb3\x0a\xb3\x07\x18\x86\x63\x6e\xcb\x74\x2a\x32\xc8\x27\x42\x29\xb1\xbc\x74\x06\x4c\x53\x5c\x1d\x7f\x08\x9f\x1d\xe6\xef\x30\x98\x33\xee\x08\xf0\xf9\x56\x9b\x52\xfa\x6c\xb4\x82\xe5\x9c\x05\x73\x58\x12\x2c\x91\xdb\x8c\x30\x86\xa1\xf9\xa7\x90\x25\x1f\xd4\x8a\x47\x52\x2c\x16\x74\xbf\xc4\x56\x05\xe6\x28\xfd\xd5\x42\x3e\x16\xbd\x8e\x0e\x98\x4a\x11\x7b\x88\xae\xb5\x07\x4d\x51\xeb\xa0\x4b\xf3\xea\xbe\xb7\xed\x6a\xd6\x13\xfb\x61\x4e\x60\x3e\xb6\x39\xa6\xd1\xe8\xa7\xec\x3c\x75\x1f\x49\xa5\xd2\xb9\x8b\xb7\x23\x83\xff\xc5\xdb\x91\x75\x0b\x78\x40\x6f\xa4\x48\x93\x2e\xf4\x64\xdb\x4a\x3b\x7a\x78\xc1\xb1\x9f\x59\x4c\xea\x8d\x86\x9b\xef\x70\x18\x39\x95\x60\x46\xc3\xc9\x48\x23\x0f\x51\x86\xe3\xab\x57\xe3\xc5\xab\x53\x20\x1d\x9c\xbf\xac\x07\x19\x33\x3e\xfe\x9c\x22\xd7\x4c\xaf\x7c\xa0\x19\xd7\x34\xab\x04\x2f\x03\x67\xc4\xb3\xd7\x7f\x7d\xe5\x41\xec\x1d\xe3\x2c\x4e\x63\xe0\x69\x3c\x21\x69\x58\xc0\x32\x54\x15\x9c\x84\x34\xc5\x34\xd2\xca\x28\xf2\x9f\x24\x85\x0f\x45\xfc\x72\xaf\x28\xe2\x97\x76\x28\x6e\x85\x38\xdb\xe2\xb0\xb2\x56\x60\xad\x02\x01\x3a\xf1\x20\x0f\xeb\x80\x0d\x76\xa8\xf3\xad\x53\xe7\xdb\xd1\x15\x6a\xbc\x24\x5e\xe9\x6a\x39\x54\x97\xb3\xfa\xa0\x36\x9a\x76\x6b\x2d\x90\x9b\x00\x4e\x52\x75\x46\xa8\xf4\xd9\x5f\x76\xea\x18\x2e\x90\x45\x38\x61\x11\xd3\xab\xf1\x9f\x82\x1f\xc3\xe4\x36\x8c\xc7\xab\x88\x17\x51\x01\x8b\x4a\x81\x88\xc9\x29\xe4\x3f\xbf\x0a\xec\xcf\x4b\x32\x3f\x87\xdb\xd4\xf9\x65\xef\xe0\x18\x39\x41\x26\xa8\x26\x72\x3d\x9a\x99\x3a\x96\x09\x89\xff\xeb\x3c\x42\x39\xa3\xef\xc6\xe3\xdb\x31\x1e\x37\x32\xeb\x58\x4b\x25\x85\xd7\x95\x75\x75\xb0\xa6\x2d\x92\x60\xcc\xc2\xd6\x5b\xe2\xc7\x9b\x4b\x60\xe1\x29\x4c\x22\xe4\x77\x76\xaf\x37\xff\x7f\x1a\x04\x16\x77\x10\x9c\xec\x83\x95\x48\x3f\x0d\x4e\x61\xca\x6c\xd6\x98\x4d\xcd\x03\x5b\xf0\xf0\xcf\xdf\x7e\x31\x73\xd4\x4b\x5d\x51\x90\x4a\x63\x6d\x2c\x0f\xdb\xa2\x39\xca\x66\xd9\xb5\x65\x33\x8c\xc7\x52\x44\x34\x46\xd9\xce\xa0\x1a\x5e\x5c\x5f\xbc\x03\x33\x89\xa5\xb8\x58\xe1\x71\x82\x92\xbf\xcc\xe5\xa8\x94\x08\x98\x8d\x9b\xc2\xb0\x91\x26\xfd\x8f\x90\xb0\x9c\x13\x07\x25\x62\x02\x3d\x67\x7c\xa6\x2c\xef\xf2\xf4\x98\xe3\x75\x58\x56\x9e\x4a\xe0\x53\x13\xb5\x75\x50\x9a\x19\xd3\xe3\xed\x20\xf4\x30\x6e\x69\x9c\x81\xe0\xce\x97\x62\x1a\x24\x25\x42\x31\x2d\xe4\xaa\x5e\x42\x06\x64\x20\xe2\x98\x75\x70\x47\x51\xcd\xd7\xee\x1b\xd3\x90\x4d\xe7\x05\xa7\x25\xd1\x58\x69\xd4\xed\x4c\xf1\xed\x9c\xf4\xdc\x2c\x70\x09\x5c\x68\x77\xd0\x20\xc9\x38\xfd\x0a\x82\x88\x90\x3b\xa9\x4e\x52\x16\x79\x90\x30\xaf\xc2\x71\xd8\x16\x81\x2b\xbb\x02\xa7\x16\x42\xe8\x21\x53\x74\x92\xe3\xc7\xcd\x31\xc3\x4c\xb8\x23\x65\x2d\x0c\x5f\x13\x16\x51\x3d\xc4\xec\xa5\x6c\x05\xef\x32\xfb\xd8\x82\xaa\x9f\x3f\x89\x50\x1b\x1d\x6f\x35\xff\x4d\xf6\x31\x30\xed\xc4\xe4\xe0\xb9\x83\xf2\x21\xc8\x94\x73\xc6\x8d\xda\xee\x0b\x63\xea\xda\x32\xca\x35\x20\x1d\x56\x5f\xb9\x9a\xbf\xed\x6a\xf0\xd7\xf8\x7b\x8d\x71\xa5\xd8\xbe\x1b\x64\x5f\x09\xbe\x2f\xd2\x6f\xed\xeb\x7a\x2b\xe4\x1b\x59\x5f\xf3\x75\xb1\x6e\x42\x5b\x3d\x77\xcd\xe2\xc6\xee\x1a\x7d\xd8\x0a\xd9\x77\xa9\x41\xb5\x3b\xe7\x31\x82\xd9\x96\x65\x88\xf5\xa2\x71\xe7\x59\x55\x3c\x9a\x25\x53\x7c\xd9\x2f\xbf\x24\x2f\x6e\x47\xa0\x12\x0a\xd8\x34\xbb\x44\xe0\x13\x2f\x4d\x92\xf9\x49\xb6\x6a\xeb\x1f\xf0\xd7\xbf\x57\x5f\xbf\xcd\x5e\xdb\x82\x98\x7f\xc0\x7f\xfe\xbd\xcd\x52\xde\x6e\x31\xeb\x20\x45\x71\xe7\x93\xe1\x44\x08\xb3\x4f\xf8\x3c\xda\xda\xd7\x1b\x19\xa3\x91\x2f\x53\x80\xa0\x52\xab\xef\xd3\x34\x02\x49\x9f\x53\x52\xba\x0d\xd1\xb6\x82\xc4\x3d\x1f\x91\x5c\xb0\x80\x2e\x82\x40\xa4\x5c\x77\x21\x3e\x88\x18\x71\xdd\xc5\x8e\x5d\xda\x19\xae\x43\x38\xc1\x3b\x7c\x6d\xdb\x47\xae\x3c\x51\x44\x06\xcc\x59\xb2\x8e\x00\x9d\x11\xcb\x80\xe6\x3d\x14\xcd\x42\x03\xb3\xea\xd0\xb1\xce\xed\x99\x93\x55\xf5\x46\x84\xcc\x7d\x76\x5a\x2a\x49\x89\x54\xda\x58\x84\xbe\xbc\x86\x48\x60\x08\x13\x8c\x4c\xc4\x20\x5f\xee\x37\x38\xd5\xaa\xad\x2e\x99\xe5\xa4\xb5\x17\xee\x6b\xed\xf1\xa4\xd0\x5c\x87\x4d\x5b\x40\xb5\x7d\x37\x1e\x7f\x21\x6f\x7f\x69\x0b\xcb\xd3\x14\xe3\xd9\x44\x2b\xbd\x29\xad\xb7\x50\x7f\xc7\xca\xa3\xec\x6a\x99\x5d\xb8\x22\x8d\x2c\x32\x31\x69\x17\x2d\x6b\xc9\x97\xeb\xab\xca\xd5\x22\xf5\x22\x68\xbd\x69\xd6\x5c\x5e\xe2\x11\xb2\xbd\x6f\xa6\xf3\xc6\xbc\xb9\xb6\x66\x2f\xc4\xcd\x2d\x36\x9d\xa1\x16\x2e\xc4\xb1\xae\xbc\xbd\x0f\xc7\x7f\x18\xd3\x74\xf7\xc8\x9b\x4d\xbe\xab\xc6\x43\xa8\x46\x63\xa9\xd4\x9c\xb6\x74\x11\x4f\x24\x82\x6a\x6e\xa1\x39\x81\x76\x87\xb0\x1b\xde\x56\xda\xb5\xca\xc6\xa0\x76\x3b\x03\xbf\xdf\xd9\x64\x5f\xf4\x84\x9c\x65\x2b\x69\x63\xe9\xfd\x72\xce\x5e\x6e\x3b\x48\x6d\x70\xac\xf5\xb9\x3c\xd8\x66\x2e\x84\x72\x83\xcb\x6e\x86\x59\xc4\x18\xdd\xd9\x03\x56\xcb\x67\xeb\x4e\xac\xed\x7d\x9d\x5f\x51\xa5\x2b\xcf\x54\xba\x8c\xdc\xbd\x9d\xb9\x36\x3a\x05\x2c\x4c\xe4\x39\x2c\xa8\xe4\x60\x3b\x2f\x90\xdb\xce\x0b\x24\x44\x8d\xe3\xa0\x7a\xf2\xd3\x98\x13\x75\x07\x48\xbb\x43\xa5\x87\x59\x4a\xbe\xf6\x96\xee\x0b\x69\xed\xfb\x76\x62\x57\x4d\xca\xbc\x1e\xc9\x7f\xfe\xf6\x0b\x38\x4d\xed\x8f\xfa\x7b\x4e\x97\x1e\x5c\xfd\x1f\x2b\x59\xe1\xbf\x34\x6e\x7d\x8d\x8d\x37\x19\x98\x17\xec\xb6\xd5\xec\x12\x03\x6e\xb2\xd9\xf6\x64\x28\x72\xa0\xe5\x34\x45\x57\xee\x97\x80\x3f\x76\xce\x68\x4d\xe2\x19\x04\xa9\x94\xc4\x75\xb4\x72\xc9\x06\xa6\x6c\xe6\x45\x48\x88\x11\x3d\xab\xe8\xee\x6f\xaa\xf3\xe9\x41\xa1\xc0\xfd\x6d\x3a\x21\xc9\x49\x93\x07\x5c\xb9\xed\xaf\x83\xfc\x73\xfb\x7f\x40\x72\xca\x83\x51\xa5\x8d\xab\x0b\x4e\x99\xd3\x56\x0b\xe7\x90\xcc\xdc\x3e\x40\x85\xe4\x5c\x2d\xac\x39\x9b\xcd\xc7\xc5\x73\xf9\xfb\x49\x6a\x6d\x9f\xa9\xe4\x26\x81\x29\xf8\xe9\xc2\xe3\xd7\x93\x5e\x0a\x79\x37\x9e\xe2\x44\xb2\xa0\xb5\xce\xb9\xcf\x33\xdb\x53\x39\x81\x68\xb5\xa6\x7b\x9b\x3a\xf4\x73\x79\x89\xaa\x68\x76\x5d\xea\x8a\xa9\x9a\xbc\xe2\xb6\x37\xdc\x5e\x11\x0b\xc1\xa3\x5f\x3c\xa1\x4d\x3e\x54\xa3\xa2\x1c\x33\xc8\x2b\x53\xbb\x0a\xed\x38\x35\x9a\x81\xe0\x5a\x8a\x68\x9c\x44\xc8\xef\xb9\x80\xf1\x7e\xaa\x35\x03\x11\x27\x92\x29\xda\xef\xc2\x99\xa5\x47\xf2\xdb\xa6\x11\x13\x36\x26\x1e\x26\x82\xb5\xce\x5a\x32\x55\xe8\xb0\x43\x58\x60\x94\x12\x44\xec\x8e\x80\x25\xaf\x13\x21\x75\x76\x42\x93\xb5\xcd\x20\x2c\x98\xd4\x29\x46\x70\x7d\x33\x34\xaf\x3f\xf1\x1b\x54\x36\x9b\x8c\x81\x8d\xf1\xe8\x8b\x26\xc9\x31\x82\x20\x55\x5a\xc4\x24\x55\x66\xba\x70\x12\x51\x76\x4e\x1b\xa7\xdc\xec\x54\xd4\x3d\xc1\x53\x73\x67\x6a\xff\x0c\xdb\xa5\xe5\x6f\xd1\x3a\xe4\x0d\x48\x62\xe5\xf3\x21\x3b\xa4\x6c\x46\xa5\x34\x4d\xfb\xa3\x97\xda\x16\xd1\xfe\x71\xd7\x9d\x38\x11\xac\x7b\x06\x0a\x07\x4f\x9e\xb2\x2e\x52\x0a\x67\x1d\xfc\xd1\x6c\x02\x05\x4b\x92\xe4\xee\xee\x69\xc1\xdf\x37\xc4\x49\xb2\x60\xd3\x24\xf6\xd8\xfe\x75\xb1\xd0\xd8\xf5\xbd\xc5\xc4\x3d\x9b\xeb\xa6\xe1\xf5\x18\x50\xed\x4c\xee\x42\x61\x03\xd6\x3e\x2f\xdc\xd8\x0e\x5a\xf8\xe2\xf4\x44\x74\x3f\x8a\xb6\x9d\x7f\xfb\x2a\x81\x82\x8a\x88\xba\xc0\xb2\xd2\xaa\xf7\x9d\x8d\xfd\xed\x90\xa9\x45\x49\xd9\x62\x70\xb7\x4b\x9d\x70\x52\x9a\x42\x58\x61\x1c\xc1\x99\x7d\xf5\xd1\x82\x38\xb7\x4f\x8c\x3f\x40\x5c\xab\xba\x13\xc4\x86\xea\xeb\x3a\x92\x46\xa4\xb5\x41\xad\xa3\x0a\x1f\x47\xa3\xaa\x8d\xd5\x1e\x56\x77\x88\x05\xf7\x37\x3d\xb7\x62\xa8\xde\xba\xa5\xb3\x7f\xe6\xf6\xba\x5c\xbf\xc1\x5c\x2d\x9d\x5a\x29\xe3\x26\xef\xf2\xc3\x1f\xd2\x0b\x2b\xba\xee\xfb\xfd\xaf\x9f\xab\x77\xbe\x76\x91\xdd\x37\x27\xb7\xae\xf1\x53\xe1\x74\xb6\x15\x5f\xf7\xdc\x1b\xd7\x3f\x4e\x5f\x22\xaf\x3a\x7b\x59\x25\x93\xc7\xd7\xcb\x2c\xc8\xe3\x34\x36\xa0\xce\x2d\x98\x2b\xef\x4d\x84\x52\xcc\xb8\xea\x92\xcd\xe6\x1a\xb8\x58\xb6\x13\x5b\xa9\xff\xb1\x7f\x42\xba\x9e\x16\x1c\xc6\x25\x2a\xf8\xe5\xed\x4e\xe1\x8c\x59\x6d\x0d\x33\xf8\x57\xc4\xfe\x52\xe8\x7a\xcc\xf2\xea\xd6\xe2\xc8\x6d\x09\x6c\x17\x57\x58\x28\xb6\x96\x22\xdf\x91\x4a\xae\xff\x0e\x69\xd5\x75\xbf\x77\x2a\xae\xaa\xb5\x1b\xcd\x4a\x6d\x9b\x5c\xfe\xe2\x29\xde\xa9\x76\xcf\xef\x90\x4d\x53\x77\xc6\x13\x35\x67\xc8\xb9\x41\x9e\xfc\x6f\xad\xbf\x78\x28\x36\x75\x17\x48\x94\xd8\x65\xdd\xc9\xd1\x4e\x44\x7c\xa7\x11\x07\x9f\x82\xec\xbe\x54\xa4\x85\x95\xa8\xbf\x79\xa2\x7f\xb6\xe2\xc9\x46\x98\x9b\x33\x8a\x9f\x71\x42\xd1\xa3\x04\x98\xc5\x0e\x56\x84\xc8\xe2\xe1\x0f\x7d\xda\x9f\xcc\xd8\xc4\x55\x2d\x8c\xa6\xdc\xaa\xb9\x64\xe1\xe9\x59\xc1\x6e\x51\xd4\xfb\x4d\x2c\xee\x07\xcd\x3c\xa0\x3b\xb7\x74\x70\x51\x09\xa2\x40\x8b\xf5\x05\x27\xc3\xf5\x85\xad\xbe\x64\x40\x2e\xd2\x25\x0b\xbd\xd4\x1f\xc3\x85\xce\x58\xb3\xbe\xc1\xf0\xcc\x00\xcc\x9e\xfe\xf8\x89\x8f\x1c\xcb\x98\x86\x39\x2e\xa8\x3c\xc8\xfe\x51\x3c\x48\x24\x5b\xb0\x88\x66\xa4\x7e\xf4\xe4\x75\xcd\xb0\xf1\x5a\x94\x8f\xe1\x18\xae\x35\x41\xb9\x04\x30\xd3\xc5\x3c\x71\x96\xca\x75\xe4\xf8\x54\xb1\xbf\x1b\x4f\xed\x8d\x32\xdf\xf7\x9d\xa3\xed\x3b\xbe\x6b\x4c\x1f\x63\xff\xc9\x6d\xa9\x3f\xe7\xd6\xc7\x5a\xa4\x2e\x9c\xee\xb7\x3a\x1f\xaf\x35\xc4\x7f\xc5\xe8\x37\xac\x67\x47\x2f\x1f\xed\xc6\xed\xe7\xa3\x6b\xd5\x4b\xc5\x3b\xd0\xfc\xf0\x1b\xe3\xe9\x11\x14\xfc\xb8\xdd\x7b\x5d\x93\xef\x79\x8e\xc3\x40\x5e\xe6\x09\x36\xdb\x3f\x22\x7e\xec\x2c\xdf\xe7\xa2\xd5\xdb\xc5\x0a\x1d\x68\x4e\x15\xc9\x4e\x51\x62\x3e\x81\xff\xee\xa6\x82\x02\xdd\xe3\x0d\x51\x45\x17\x56\xf8\xcf\xfc\x3a\x5c\xfc\x61\xeb\x35\x85\x6c\x88\x43\x8b\x56\xb1\x9a\xbf\x36\x74\xf7\x37\xb5\x5e\x34\xeb\x9b\x22\x5c\x39\x10\xd8\x72\xa0\x73\xb0\xd5\x20\x5c\x84\x64\x96\xb9\xe0\xd1\x0a\x10\x62\x74\xc7\x05\x53\xa7\x78\x53\x46\x26\xb6\xc9\x2f\x16\x09\xcf\xeb\x71\xb6\x21\xf8\x43\x1e\xf8\x54\x33\x1d\xfb\x03\x1c\xc3\x13\x87\xe6\x9a\x1d\x71\x56\x87\xd3\xb8\x97\xad\x54\x74\x99\x5d\x6b\x9f\x3f\xb3\x8c\xcc\x52\xaf\xeb\xbb\xf9\xf2\xe2\x98\x2b\x11\x14\x2e\xe7\xab\x48\xeb\x9d\x90\x94\xdd\x8e\xb8\xe3\xcf\xbe\x77\xf8\x63\xed\x06\x9d\x17\x5f\x5f\xfc\x2b\x00\x00\xff\xff\x83\x4c\x18\x7d\x84\x7e\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 32388, mode: os.FileMode(420), modTime: time.Unix(1537256531, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
