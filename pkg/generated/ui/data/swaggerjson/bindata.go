// Code generated by go-bindata.
// sources:
// assets/generated/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3d\x7f\x6f\xdb\xb8\x92\xff\xf7\x53\x0c\x7c\x07\x5c\x0a\x24\xf1\xbe\xbe\x3b\xe0\xa1\x0f\x0f\x7b\x79\x09\xae\x1b\x74\xdb\x0d\xd6\xbd\x06\x8b\xeb\xc2\x18\x4b\x63\x9b\x1b\x89\x54\x49\xca\xae\xf7\xd0\xef\xfe\x40\x52\xb2\x25\x59\xb4\x65\xc9\x49\x94\xa6\x0b\x2c\x9a\x48\x14\xe7\x27\x87\x33\xc3\x19\xe6\xff\x5f\x00\x0c\xd4\x12\x67\x33\x92\x83\xd7\x30\x78\x75\xfe\xc3\xe0\xd4\x3c\x63\x7c\x2a\x06\xaf\xc1\xbc\x07\x18\x68\xa6\x23\x32\xef\x2f\xa3\x54\x69\x92\xf0\x0e\x39\xce\x48\xc2\xc5\xcd\xb5\x1d\x0f\x30\x58\x90\x54\x4c\x70\x33\x6a\xf1\xc3\x79\x3e\x11\xc0\x20\x10\x5c\x63\xa0\xd7\xb3\x01\x0c\x38\xc6\x76\xba\x11\xc6\x2a\xe5\x33\xb8\x7c\x7f\xf9\x21\x1b\x0e\x30\x48\x65\x64\x5e\xce\xb5\x4e\xd4\xeb\xe1\x70\xc6\xf4\x3c\x9d\x9c\x07\x22\x1e\x2a\x37\xfe\x2c\xe0\x81\x1e\x06\x0e\x97\xb3\xd8\xe1\x72\x86\x09\xdb\xcc\x41\x31\x32\x3b\x0b\x86\x31\xe3\xff\x5d\xfc\xf0\x9c\x89\x81\x1d\xf6\xf5\x05\xc0\x57\x4b\xad\x0a\xe6\x14\x93\x1a\xbc\x86\xff\x73\x38\x5b\xd8\x39\x01\xe6\x17\xf3\xc5\xef\x76\x6c\x20\xb8\x4a\x4b\x83\x31\x49\x22\x16\xa0\x66\x82\x0f\xff\x50\x82\x6f\xc6\x26\x52\x84\x69\xd0\x70\x2c\xea\xb9\xda\xb0\x7c\x88\x09\x1b\x2e\xfe\x92\x53\x59\xe4\xde\x8c\x8a\xcc\x34\xe8\xa7\x71\x8c\x72\x65\xc8\xbd\x65\x51\x04\x92\xb4\x64\xb4\x20\xd0\x73\x02\xa5\x51\xa7\x0a\xc4\x14\x10\xb2\xc9\x00\x79\x08\x4c\x2b\xb8\x4b\x27\x14\x08\x3e\x65\x33\x98\x0a\x09\x81\xe0\x9c\x02\xcd\x16\x4c\xaf\xd6\xac\x04\x18\x88\x84\xa4\x45\xf9\x3a\x34\x30\xde\x90\xce\xf4\xa0\x38\x48\x92\x4a\x04\x57\xa4\x4a\xb8\x01\x0c\x5e\xfd\xf0\x43\xe5\x11\xc0\x20\x24\x15\x48\x96\xe8\x4c\x63\x0a\x13\x39\x8a\x8c\x40\x70\xeb\x33\x80\xc1\xbf\x4b\x9a\x9a\x2f\xfe\x6d\x18\xd2\x94\x71\x66\x66\x50\x39\x97\xc6\x99\x2e\x8c\x31\x61\x1b\x2c\x7f\xa5\x24\x5a\x0d\x4a\x13\x7d\x7d\x51\xf7\xf3\xd7\x02\x39\x09\x4a\x8c\x49\x93\xdc\x08\xcf\xfd\x57\x21\x24\x57\x65\xfb\xef\xe9\x4e\x22\xdf\x63\x4c\x46\x0e\x46\x2a\xb9\x24\xb4\x80\x09\x41\x24\xc4\x1d\x85\x90\x26\xe7\xd5\x29\x98\xfd\xf2\x73\x4a\x72\x55\x7d\x25\xe9\x73\xca\x24\x19\x91\x4c\x31\x52\x54\x79\xad\x57\x89\x45\x4c\x69\xc9\xf8\xac\x48\xfe\xd7\xd3\xfd\xe4\x24\x52\x2c\x58\x58\x92\xf0\x3e\x92\xf2\x4f\x14\x9c\xe0\x52\x0d\xf1\x4e\x0d\x17\xf1\x12\x25\x0d\x49\x07\x2f\x1f\x86\xb2\xf5\xcf\xbf\x17\x44\xa9\x71\x56\x15\x62\x6e\xc8\x36\x1f\xff\xfe\xa2\xc2\x9c\x41\x48\x11\x69\xda\xbd\xd2\xdc\x98\xcd\xca\xda\xb1\x6a\xae\xec\xd0\x27\xb0\x70\x4a\x88\xf6\x65\xed\xdc\xce\x51\x03\x53\xc5\xb5\xf3\x1f\x0a\xcc\x87\x66\x09\x85\xa4\xb4\x14\xab\xef\xab\xa7\x3f\xab\x27\x11\x6a\xcf\x2e\x85\xe1\x1f\xa9\xd2\x80\x8e\x74\xe3\x3b\x34\x5a\x47\x17\xf6\xb3\x0c\x83\xf7\x22\x24\xd5\xe7\xc5\x54\xc2\xf6\x41\x16\xd3\x44\x84\x5b\x2a\xe1\xb4\xa5\xee\x4d\x41\x59\xb4\x4c\xab\xba\x72\x6c\x06\xbc\x53\xb3\x26\xe4\x1f\x43\xfd\xd2\x3d\xda\x77\x98\xd2\x5d\x4a\xc2\x27\x61\xbc\x4b\x88\x3e\x47\x7d\x2b\x31\xe0\xde\xf5\xed\x45\x81\x7b\x55\x97\x7d\x18\xb1\x92\x09\x3c\xc0\x6f\x47\x30\xdf\x9a\xad\x21\x9b\x4b\x35\x72\xc7\x7f\x36\x00\x7b\xac\x9c\x65\x4c\x1f\x44\x3b\x71\xa9\xce\x15\x05\x92\xf4\xf8\x8e\x56\x63\x16\xee\xd9\x92\x3f\xcc\x09\x46\x76\xfc\x5b\x5a\x5d\x87\x36\x2c\xba\xb8\xb9\x86\x8b\x20\x20\xa5\x7a\xe3\x60\x14\xc8\x42\x8b\x99\xa1\xae\x31\x69\x8e\x98\xb7\xb4\x5a\x93\x87\xfd\x23\x4f\xd2\xcc\x20\xbe\x9f\xa6\x5f\xed\xc0\xde\x92\xf2\x67\x2a\xe9\x1c\x93\xa4\x99\xee\x5d\x24\x49\x8f\xb5\xce\xd2\xa2\x89\x23\xd7\x0d\x68\xf9\x60\x07\xf6\x5b\x30\x09\x2a\xb5\x14\xb2\x89\x68\x6e\xb2\xa1\xfd\x26\x48\xa5\x93\x35\xe6\x0d\xcd\x5d\xe1\x8b\xbe\xd2\xf6\x7c\x03\xaa\x9d\x1e\x46\x9a\xcc\x24\x86\x74\xa8\x93\x91\x4a\x0e\xd9\xa7\x20\x2c\xf3\x94\x15\x3c\xc2\x8c\x2d\x88\x37\xf0\x87\xdf\x90\xfe\x5f\x37\x41\x86\xf9\x35\x9f\x0a\x19\xdb\x11\x3d\xf7\x40\xbc\x78\x3f\x88\x3f\xf2\x44\x15\xb9\xc1\x12\x6d\x97\xc4\x01\x6d\x9e\x2d\x09\x50\x12\x04\x82\x2b\x43\x29\xe3\x2e\x1f\x9d\xe9\xe8\x93\x59\xab\x87\x24\x3f\xb4\xa6\x38\xd1\xa0\xc5\x7a\x25\x36\x89\x43\xcb\xca\xdb\xe7\x95\x56\xc6\xf4\x39\x46\xa2\x65\x0e\x3c\x52\x28\x2a\x29\x24\xae\x19\x46\x6a\x88\xcb\xa2\x6e\x34\xd0\xd1\x34\x09\x51\x13\xe0\x52\x41\x61\x1e\x48\x15\x85\xd9\x76\xd1\x44\x61\xcd\x1c\x17\xb7\xa3\xcb\xcd\x0c\xfd\x56\xdb\x6d\x7c\x9f\xa7\xf2\x6e\xf3\xa1\x07\x2a\x6c\x5c\xdc\x76\x4a\x6c\xbe\xec\xac\xc6\x66\x92\xa7\xa5\xc8\x15\x8c\x9f\xb1\x2a\x57\x38\xf1\x38\xca\x3c\xa7\x28\x2e\xea\xef\x01\x67\x8c\x21\x25\x91\x58\x51\x08\x66\x0e\x08\xe6\x28\xf5\xde\xd3\xc6\x9f\x28\x8a\x2f\xab\x23\xfb\xa6\xa9\x15\x54\x1f\x44\x45\xb7\x57\x7c\x1d\xb1\x79\xb5\x8b\x66\x51\x44\x12\xd4\x5c\xa4\x51\x08\x13\x02\xc6\x95\xc6\x28\xa2\x10\x04\xef\x8d\x03\xee\xb0\x3c\x37\xbf\xaa\x04\x83\x43\x9c\xf1\x8c\xc0\xf5\xa7\x7d\xa3\x29\xaf\x2d\x6a\x4e\x51\xf6\x85\x8d\xa1\xec\x1c\x76\xe9\xf5\x86\xae\xea\xf2\xad\x23\xc7\xae\x06\x30\x91\x60\x6f\xd0\x7e\xa2\xd1\xeb\x11\xac\x79\xf3\x83\xc5\xcc\x36\xc0\x89\x90\x20\x29\xfb\xed\x65\xc1\x6a\x7f\xe2\x1f\xe6\x4c\xc1\xd2\x0c\x9e\x90\xab\x5d\x48\x03\xcd\x16\x04\xcc\x16\x69\x59\xb9\xcf\x51\x01\x46\x92\x30\x5c\xc1\x84\x88\x6f\xec\xff\x92\xe9\xb9\xab\xec\x32\x6c\xae\x84\xdd\xd5\x7d\xe0\xda\xc1\x7f\x12\x1b\x41\x15\xd7\xe7\xe8\xac\x54\x79\xf0\x38\x6e\x8a\x33\x99\x87\x39\xda\x1e\xbd\xcf\xa6\xf2\x6b\xe8\x4d\x7e\x10\xff\x61\x6b\x64\xdf\x14\xb4\x82\xea\x73\xd4\xcf\x0a\x0b\x1e\x47\x3d\x37\xa5\xc6\x07\xa7\xbd\x73\xbf\x80\x6d\xf2\xbe\x80\x13\x91\x6a\xc0\x84\x81\x22\xb9\xd8\x97\xf7\xfe\xe8\x66\x78\x3a\x09\xef\x0c\xe1\x56\xda\xda\x46\x58\xeb\xaa\xea\x02\x6a\x9b\xba\xe6\x6a\x3d\x50\xe9\xf7\x8f\xef\x6e\x51\xd2\x28\xa1\xa0\x28\xdb\x7c\x67\x17\x93\x3f\x28\xd8\xec\x60\xc6\x1b\x49\x48\x6a\x56\x61\xf6\x00\xc3\x70\xcc\x6d\x61\x58\x45\x06\xf9\x44\x28\x25\x96\x97\xce\x80\x69\x8a\xab\xe3\x0f\xe1\xb3\xc3\xfc\x1d\x06\x73\xc6\x1d\x01\x3e\xd7\x6a\x53\x4c\x9f\x8d\x56\xb0\x9c\xb3\x60\x0e\x4b\x82\x25\x72\x9b\x12\xc6\x30\x34\xff\x14\xf2\xe4\x83\x5a\xf1\x48\x8a\xc5\x82\xee\x97\xd8\xaa\xc0\x1c\xa5\xbf\x5a\xc8\xc7\xa2\xd7\xd1\x01\x53\x29\x62\x0f\xd1\xb5\xf6\xa0\x29\x6a\x1d\x74\x69\x5e\xdd\xf7\xb6\x3d\xcd\x7a\x62\x3f\xcc\x09\xcc\xc7\x36\xc5\x34\x1a\xfd\x94\x9d\xa8\xee\x23\xa9\x54\xbe\x74\xf1\x76\x64\xf0\xbf\x78\x3b\xb2\x6e\x01\x0f\xe8\x8d\x14\x69\xd2\x85\x9e\x6c\x5b\x69\x47\x0f\x2f\xf8\xf5\x33\x8b\x49\xbd\xd1\x70\xf3\x1d\x0e\x23\xa7\x12\xcc\x68\x38\x19\x69\xe4\x21\xca\x70\x7c\xf5\x6a\xbc\x78\x75\x0a\xa4\x83\xf3\x97\xf5\x20\x63\xc6\xc7\x9f\x53\xe4\x9a\xe9\x95\x0f\x34\xe3\x9a\x66\x95\xd8\x65\xe0\x8c\x78\xf6\xfa\xaf\xaf\x3c\x88\xbd\x63\x9c\xc5\x69\x0c\x3c\x8d\x27\x24\x0d\x0b\x58\x86\xaa\x82\x93\x90\xa6\x98\x46\x5a\x19\x45\xfe\x93\xa4\xf0\xa1\x88\x5f\xee\x15\x45\xfc\xd2\x0e\xc5\xad\x08\x67\x5b\x1c\x56\xd6\x0a\xac\x55\x20\x40\x27\x1e\xe4\x61\x1d\xb0\xc1\x0e\x75\xbe\x75\xea\x7c\x3b\xba\x42\x8d\x97\xc4\x2b\x7d\x2d\x87\xea\x72\x56\x21\xd4\x46\xd3\x6e\xad\x05\x72\x13\xc0\x49\xaa\xce\x08\x95\x3e\xfb\xcb\x4e\x1d\xc3\x05\xb2\x08\x27\x2c\x62\x7a\x35\xfe\x53\xf0\x63\x98\xdc\x86\xe1\x78\x15\xf1\x22\x2a\x60\x51\x29\x10\x31\x39\x85\xfc\xe7\x57\x81\xfd\x79\x49\xe6\xe7\x70\x9b\x3a\xbf\xec\x1d\x1c\x23\x27\xc8\x04\xd5\x44\xae\x47\x33\x53\xc7\x32\x21\xf1\x7f\x9d\x47\x28\x67\xf4\xdd\x78\x7c\x3b\xc6\xe3\x46\x66\x3d\x6b\xa9\xa4\xf0\xba\xb2\xae\x0e\xd6\xb4\x45\x12\x8c\x59\xd8\x7a\x4b\xfc\x78\x73\x09\x2c\x3c\x85\x49\x84\xfc\xce\xee\xf5\xe6\xff\x4f\x83\xc0\xe2\x0e\x82\x93\x7d\xb0\x12\xe9\xa7\xc1\x29\x4c\x99\x4d\x1a\xb3\xa9\x79\x60\x4b\x1e\xfe\xf9\xdb\x2f\x66\x8e\x7a\xa9\x2b\x0a\x52\x69\xac\x8d\xe5\x61\x5b\x34\x47\xd9\x2c\xbb\xb6\x6c\x86\xf1\x58\x8a\x88\xc6\x28\xdb\x19\x54\xc3\x8b\xeb\x8b\x77\x60\x26\xb1\x14\x17\x6b\x3c\x4e\x50\xf2\x97\xb9\x1c\x95\x12\x01\xb3\x71\x53\x18\x36\xd2\xa4\xff\x11\x12\x96\x73\xe2\xa0\x44\x4c\xa0\xe7\x8c\xcf\x94\xe5\x5d\x9e\x1e\x73\xbc\x0e\xcb\xca\x53\x09\x7c\x6a\xa2\xb6\x0e\x4a\x33\x63\x7a\xbc\x1d\x84\x1e\xc6\x2d\x8d\x33\x10\xdc\xf9\x52\x4c\x83\xa4\x44\x28\xa6\x85\x5c\xd5\x4b\xc8\x80\x0c\x44\x1c\xb3\x0e\xee\x28\xaa\xf9\xda\x7d\x63\x1a\xb2\xe9\xbc\xe0\xb4\x24\x1a\x2b\x8d\xba\x9d\x29\xbe\x9d\x93\x9e\x9b\x05\x2e\x81\x0b\xed\xce\x19\x24\x19\xa7\x5f\x41\x10\x11\x72\x27\xd5\x49\xca\x22\x0f\x12\xe6\x55\x38\x0e\xdb\x22\x70\x65\x57\xe0\xd4\x42\x08\x3d\x64\x8a\x4e\x72\xfc\xb8\x39\x65\x98\x09\x77\xa2\xac\x85\xe1\x6b\xc2\x22\xaa\x87\x98\xbd\x94\xad\xe0\x5d\x66\x1f\x5b\x50\xf5\xf3\x27\x11\x6a\xa3\xe3\xad\xe6\xbf\xc9\x3e\x06\xa6\x9d\x98\x1c\x3c\x77\x4e\x3e\x04\x99\x72\xce\xb8\x51\xdb\x7d\x61\x4c\x5d\x23\x50\xb9\x06\xa4\xc3\xea\x2b\xd7\xf3\xb7\x5d\x0d\xfe\x2a\x7f\xaf\x31\xae\x94\xdb\x77\x83\xec\x2b\xc2\xf7\x45\xfa\xad\x7d\x5d\x6f\x8d\x7c\x23\xeb\x6b\xbe\x2e\x96\x4d\x68\xab\xe7\xae\x5d\xdc\xd8\x5d\xa3\x0f\x5b\x21\xfb\x2e\x35\xa8\xf6\x83\x3d\x46\x30\xdb\xb2\x10\xb1\x5e\x34\xee\x38\xab\x8a\x47\xb3\x64\x8a\x2f\xfb\xe5\x97\xe4\xc5\xed\x08\x54\x42\x01\x9b\x66\xd7\x08\x7c\xe2\xa5\x49\x32\x3f\xc9\x56\x6d\xfd\x03\xfe\xfa\xf7\xea\xeb\xb7\xd9\x6b\x5b\x0f\xf3\x0f\xf8\xcf\xbf\xb7\x59\xca\xdb\x4d\x8d\x1d\xa4\x28\xee\x7c\x32\x9c\x08\x61\xf6\x09\x9f\x47\x5b\xfb\x7a\x23\x63\x34\xf2\x65\x0a\x10\x54\x6a\xf5\x7d\x9a\x46\x20\xe9\x73\x4a\x4a\xb7\x21\xda\x16\x90\xb8\xe7\x23\x92\x0b\x16\xd0\x45\x10\x88\x94\xeb\x2e\xc4\x07\x11\x23\xae\xbb\xd8\xb1\x4b\x3b\xc3\x75\x08\x27\x78\x87\xaf\x6d\x03\xc9\x95\x27\x8a\xc8\x80\x39\x4b\xd6\x11\xa0\x33\x62\x19\xd0\xbc\x8b\xa2\x59\x68\x60\x56\x1d\x3a\xd6\xb9\x3d\x73\xb2\xaa\xde\x89\x90\xb9\xcf\x4e\x4b\x25\x29\x91\x4a\x1b\x8b\xd0\x97\xd7\x10\x09\x0c\x61\x82\x91\x89\x18\xe4\xcb\xfd\x06\xa7\x5a\xb4\xd5\x25\xb3\x9c\xb4\xf6\xc2\x7d\xcd\x3d\x9e\x14\x9a\xeb\xb1\x69\x0b\xa8\xb6\xf3\xc6\xe3\x2f\xe4\x0d\x30\x6d\x61\x79\xda\x62\x3c\x9b\x68\xa5\x3b\xa5\xf5\x16\xea\xef\x59\x79\x94\x5d\x2d\xb3\x0b\x57\xa4\x91\x45\x26\x26\xed\xa2\x65\x2d\xf9\x72\x7d\x55\xb9\x5c\xa4\x5e\x04\xad\x37\xcd\x9a\xeb\x4b\x3c\x42\xb6\x37\xce\x74\xde\x98\x37\x17\xd7\xec\x85\xb8\xb9\xc7\xa6\x33\xd4\xc2\x95\x38\xd6\x95\xb7\x37\xe2\xf8\x0f\x63\x9a\xee\x1e\x79\xbb\xc9\x77\xd5\x78\x08\xd5\x68\x2c\x95\x9a\xd3\x96\x2e\xe2\x89\x44\x50\xcd\x2d\x34\x27\xd0\xee\x10\x76\xc3\xdb\x4a\xbb\x56\xd9\x18\xd4\x6e\x67\xe0\xf7\x3b\x9b\xec\x8b\x9e\x90\xb3\x6c\x25\x6d\x2c\xbd\x5f\xce\xd9\xcb\x6d\x07\xa9\x0d\x8e\xb5\x3e\x97\x07\xdb\xcc\x85\x50\x6e\x70\xd9\xcd\x30\x8b\x18\xa3\x3b\x7b\xc0\x6a\xf9\x6c\xdd\x89\xb5\xbd\xaf\xf3\x2b\xaa\x74\xe5\x99\x4a\x97\x91\xbb\xb7\x33\xd7\x46\xa7\x80\x85\x89\x3c\x87\x05\x95\x1c\x6c\xe7\x05\x72\xdb\x79\x81\x84\xa8\x71\x1c\x54\x4f\x7e\x1a\x73\xa2\xee\x00\x69\x77\xa8\xf4\x30\x4b\xc9\xd7\xde\xd2\x7d\x21\xad\x7d\xdf\x4e\xec\xaa\x49\x99\xd7\x23\xf9\xcf\xdf\x7e\x01\xa7\xa9\xfd\x51\x7f\xcf\xe9\xd2\x83\xab\xff\x63\x25\x2b\xfc\xd7\xc6\xad\xef\xb0\xf1\x26\x03\xf3\x7a\xdd\xb6\x9a\x5d\x62\xc0\x4d\x36\xdb\x9e\x0c\x45\x0e\xb4\x9c\xa6\xe8\xca\xfd\x12\xf0\xc7\xce\x19\xad\x49\x3c\x83\x20\x95\x92\xb8\x8e\x56\x2e\xd9\xc0\x94\xcd\xbc\x08\x09\x31\xa2\x67\x15\xdd\xfd\x4d\x75\x3e\x3d\x28\xd4\xb7\xbf\x4d\x27\x24\x39\x69\xf2\x80\x2b\xf7\xfd\x75\x90\x7f\x6e\xff\x0f\x48\x4e\x79\x30\xaa\xb4\x71\x75\xc1\x29\x73\xda\x6a\xe1\x1c\x92\x99\xdb\x07\xa8\x90\x9c\xab\x85\x35\x67\xb3\xf9\xb8\x78\x2e\x7f\x3f\x49\xad\xed\x33\x95\xdc\x24\x30\x05\x3f\x5d\x78\xfc\x7a\xd2\x4b\x21\xef\xc6\x53\x9c\x48\x16\xb4\xd6\x39\xf7\x79\x66\x7b\x2a\x27\x10\xad\xd6\x74\x6f\x53\x87\x7e\x2e\x2f\x51\x15\xcd\xae\x4b\x5d\x31\x55\x93\x57\xdc\xf6\x86\xdb\x2b\x62\x21\x78\xf4\x8b\x27\xb4\xc9\x87\x6a\x54\x94\x63\x06\x79\x65\x6a\x57\xa1\x1d\xa7\x46\x33\x10\x5c\x4b\x11\x8d\x93\x08\xf9\x3d\x17\x30\xde\x4f\xb5\x66\x20\xe2\x44\x32\x45\xfb\x5d\x38\xb3\xf4\x48\x7e\xdb\x34\x62\xc2\xc6\xc4\xc3\x44\xb0\xd6\x59\x4b\xa6\x0a\x0d\x76\x08\x0b\x8c\x52\x82\x88\xdd\x11\xb0\xe4\x75\x22\xa4\xce\x4e\x68\xb2\xb6\x19\x84\x05\x93\x3a\xc5\x08\xae\x6f\x86\xe6\xf5\x27\x7e\x83\xca\x66\x93\x31\xb0\x31\x1e\x7d\xd1\x24\x39\x46\x10\xa4\x4a\x8b\x98\xa4\xca\x4c\x17\x4e\x22\xca\xce\x69\xe3\x94\x9b\x9d\x8a\xba\x27\x78\x6a\x6e\x4d\xed\x9f\x61\xbb\xb4\xfc\x2d\x5a\x87\xbc\x01\x49\xac\x7c\x3e\x64\x87\x94\xcd\xa8\x94\xa6\x69\x7f\xf4\x52\xdb\x21\xda\x3f\xee\xba\x13\x27\x82\x75\xcf\x40\xe1\xe0\xc9\x53\xd6\x45\x4a\xe1\xac\x83\x3f\x9a\x4d\xa0\x60\x49\x92\xdc\xed\x3d\x2d\xf8\xfb\x86\x38\x49\x16\x6c\x9a\xc4\x1e\xdb\xbf\x2e\x16\x1a\xbb\xbe\xb7\x98\xb8\x67\x73\xdd\xf4\xbb\x1e\x03\xaa\x9d\xc9\x5d\x29\x6c\xc0\xda\xe7\x85\x3b\xdb\x41\x0b\x5f\x9c\x9e\x88\xee\x47\xd1\xb6\xf3\x6f\x5f\x25\x50\x50\x11\x51\x17\x58\x56\x5a\xf5\xbe\xb3\xb1\xbf\x1d\x32\xb5\x28\x29\x5b\x0c\xee\x7e\xa9\x13\x4e\x4a\x53\x08\x2b\x8c\x23\x38\xb3\xaf\x3e\x5a\x10\xe7\xf6\x89\xf1\x07\x88\x6b\x55\x77\x82\xd8\x50\x7d\x5d\x47\xd2\x88\xb4\x36\xa8\x75\x54\xe1\xe3\x68\x54\xb5\xaf\xda\xc3\xea\x0e\xb1\xe0\xfe\x9e\xe7\x56\x0c\xd5\x5b\xf7\x74\xf6\xcf\xdc\x5e\x97\xeb\x37\x98\xab\xa5\x53\x2b\x65\xdc\xe4\x5d\x7e\xf8\x43\x7a\x61\x45\xd7\x7d\xbf\xff\xf5\x73\xf5\xd6\xd7\x2e\xb2\xfb\xe6\xe4\xd6\x35\x7e\x2a\x9c\xce\xb6\xe2\xeb\x9e\x9b\xe3\xfa\xc7\xe9\x4b\xe4\x55\x67\x2f\xab\x64\xf2\xf8\x7a\x99\x05\x79\x9c\xc6\x06\xd4\xb9\x05\x73\xe5\xbd\x89\x50\x8a\x19\x57\x5d\xb2\xd9\x5c\x03\x17\xcb\x76\x62\x2b\xf5\x3f\xf6\x4f\x48\xd7\xd3\x82\xc3\xb8\x44\x05\xbf\xbc\xdd\x29\x9c\x31\xab\xad\x61\x06\xff\x8a\xd8\x5f\x0a\x5d\x8f\x59\x5e\xdd\x5a\x1c\xb9\x2d\x81\xed\xe2\x0a\x0b\xc5\xd6\x52\xe4\x3b\x52\xc9\xf5\xdf\x21\xad\xba\xee\xf7\x4e\xc5\x55\xb5\x76\xa3\x59\xa9\x6d\x93\xbb\x5f\x3c\xc5\x3b\xd5\xee\xf9\x1d\xb2\x69\xea\xce\x78\xa2\xe6\x0c\x39\x37\xc8\x93\xff\xad\xf5\x17\x0f\xc5\xa6\xee\x02\x89\x12\xbb\xac\x3b\x39\xda\x89\x88\xef\x34\xe2\xe0\x53\x90\xdd\x77\x8a\xb4\xb0\x12\xf5\x37\x4f\xf4\xcf\x56\x3c\xd9\x08\x73\x73\x46\xf1\x33\x4e\x28\x7a\x94\x00\xb3\xd8\xc1\x8a\x10\x59\x3c\xfc\xa1\x4f\xfb\x93\x19\x9b\xb8\xaa\x85\xd1\x94\x5b\x35\x97\x2c\x3c\x3d\x2b\xd8\x2d\x8a\x7a\xbf\x89\xc5\xfd\xa0\x99\x07\x74\xe7\x96\x0e\x2e\x2a\x41\x14\x68\xb1\xbe\xe0\x64\xb8\xbe\xb1\xd5\x97\x0c\xc8\x45\xba\x64\xa1\x97\xfa\x63\xb8\xd0\x19\x6b\xd6\x17\x18\x9e\x19\x80\xd9\xd3\x1f\x3f\xf1\x91\x63\x19\xd3\x30\xc7\x05\x95\x07\xd9\x3f\x8b\x07\x89\x64\x0b\x16\xd1\x8c\xd4\x8f\x9e\xbc\xae\x19\x36\x5e\x8b\xf2\x31\x1c\xc3\xb5\x26\x28\x97\x00\x66\xba\x98\x27\xce\x52\xb9\x8e\x1c\x9f\x2a\xf6\x77\xe3\xa9\xbd\x51\xe6\xfb\xbe\x73\xb4\x7d\xc7\x77\x8d\xe9\x63\xec\x3f\xb9\x2d\xf5\xe7\xdc\xfa\x58\x8b\xd4\x85\xd3\xfd\x56\xe7\xe3\xb5\x86\xf8\x6f\x18\xfd\x86\xf5\xec\xe8\xe5\xa3\xdd\xb8\xfd\x7c\x74\xad\x7a\xab\x78\x07\x9a\x1f\x7e\x63\x3c\x3d\x82\x82\x1f\xb7\x7b\xaf\x6b\xf2\x3d\xcf\x71\x18\xc8\xcb\x3c\xc1\x66\xfb\x47\xc4\x8f\x9d\xe5\xfb\x5c\xb4\x7a\xbb\x58\xa1\x03\xcd\xa9\x22\xd9\x29\x4a\xcc\x27\xf0\xdf\xdd\x54\x50\xa0\x7b\xbc\x21\xaa\xe8\xc2\x0a\xff\x99\x5f\x87\x8b\x3f\x6c\xbd\xa6\x90\x0d\x71\x68\xd1\x2a\x56\xf3\xf7\x86\xee\xfe\xa6\xd6\x8b\x66\x7d\x53\x84\x2b\x07\x02\x5b\x0e\x74\x0e\xb6\x1a\x84\x8b\x90\xcc\x32\x17\x3c\x5a\x01\x42\x8c\xee\xb8\x60\xea\x14\x6f\xca\xc8\xc4\x36\xf9\xc5\x22\xe1\x79\x3d\xce\x36\x04\x7f\xc8\x03\x9f\x6a\xa6\x63\x7f\x80\x63\x78\xe2\xd0\x5c\xb3\x23\xce\xea\x70\x1a\xf7\xb2\x95\x8a\x2e\xb3\x5b\xed\xf3\x67\x96\x91\x59\xea\x75\x7d\x37\x5f\x5e\x1c\x73\x25\x82\xc2\xe5\x7c\x15\x69\xbd\x13\x92\xb2\xdb\x11\x77\xfc\xe1\xf7\x0e\x7f\xae\xdd\xa0\xf3\xe2\xeb\x8b\x7f\x05\x00\x00\xff\xff\x76\xbc\xaf\x57\x86\x7e\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 32390, mode: os.FileMode(420), modTime: time.Unix(1537232880, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": {apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
