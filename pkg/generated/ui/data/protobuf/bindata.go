// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x5f\x6f\x1b\xb9\x11\x7f\xd7\xa7\x18\xe8\xa5\x76\x11\x4b\x89\x73\xd7\x16\x36\x8c\xab\x6a\xa7\x17\x21\x8e\x6d\x58\xbe\x18\xf7\x24\x50\xdc\xd1\x8a\x35\x97\xdc\x23\xb9\x52\xd4\x20\xdf\xbd\xe0\xbf\xd5\x72\x77\x25\xa7\x39\x17\x57\x3f\xdc\x79\xc9\x99\xe1\xfc\xe6\x1f\x67\xe8\x8c\xc7\x70\x29\xcb\xad\x62\xf9\xca\xc0\xe9\xeb\x37\x7f\x83\x19\x29\x74\x25\x72\x98\x5d\xcd\xe0\x92\xcb\x2a\x83\x1b\x62\xd8\x1a\xe1\x52\x16\x65\x65\x98\xc8\xe1\x01\x49\x01\xa4\x32\x2b\xa9\xf4\x68\x30\x1e\x0f\xc6\x63\xb8\x66\x14\x85\xc6\x0c\x2a\x91\xa1\x02\xb3\x42\x98\x94\x84\xae\x30\xee\xbc\x82\x4f\xa8\x34\x93\x02\x4e\x47\xaf\xe1\xc8\x12\x0c\xc3\xd6\xf0\xf8\xdc\x8a\xd8\xca\x0a\x0a\xb2\x05\x21\x0d\x54\x1a\xc1\xac\x98\x86\x25\xe3\x08\xf8\x99\x62\x69\x80\x09\xa0\xb2\x28\x39\x23\x82\x22\x6c\x98\x59\xb9\x73\x82\x14\xab\x09\xfc\x1a\x64\xc8\x85\x21\x4c\x00\x01\x2a\xcb\x2d\xc8\x65\x93\x10\x88\x09\x4a\xdb\x9f\x95\x31\xe5\xd9\x78\xbc\xd9\x6c\x46\xc4\x29\x3c\x92\x2a\x1f\x73\x4f\xaa\xc7\xd7\xd3\xcb\x77\x37\xb3\x77\x27\xa7\xa3\xd7\x81\xe9\x17\xc1\x51\x6b\x50\xf8\x5b\xc5\x14\x66\xb0\xd8\x02\x29\x4b\xce\x28\x59\x70\x04\x4e\x36\x20\x15\x90\x5c\x21\x66\x60\xa4\x55\x7a\xa3\x98\xb5\xdb\x2b\xd0\x72\x69\x36\x44\xa1\x15\x93\x31\x6d\x14\x5b\x54\x26\xb1\x59\x54\x91\xe9\x84\x40\x0a\x20\x02\x86\x93\x19\x4c\x67\x43\xf8\xc7\x64\x36\x9d\xbd\xb2\x42\x1e\xa7\x0f\xef\x6f\x7f\x79\x80\xc7\xc9\xfd\xfd\xe4\xe6\x61\xfa\x6e\x06\xb7\xf7\x70\x79\x7b\x73\x35\x7d\x98\xde\xde\xcc\xe0\xf6\x9f\x30\xb9\xf9\x15\x3e\x4c\x6f\xae\x5e\x01\x32\xb3\x42\x05\xf8\xb9\x54\x16\x81\x54\xc0\xac\x35\x31\x73\xa6\x9b\x21\x26\x2a\x2c\xa5\x57\x49\x97\x48\xd9\x92\x51\xe0\x44\xe4\x15\xc9\x11\x72\xb9\x46\x25\x6c\x24\x94\xa8\x0a\xa6\xad\x57\x35\x10\x91\x59\x31\x9c\x15\xcc\x10\xe3\x96\x3a\xb8\x46\x83\x81\xde\x0a\x43\x3e\xc3\x05\x0c\x4b\x25\x8d\x7c\x3b\x3c\x1f\x0c\x4a\x42\x9f\xac\x60\xca\x2b\x6d\x50\xcd\x0b\x22\x48\x8e\x6a\x4e\x4a\x76\x3e\x18\xb0\xa2\x94\xca\xc0\x30\x97\x32\xe7\x38\x26\x25\x1b\x13\x21\x64\x38\x64\xe4\xc4\x0c\xcf\x6b\x32\xf7\x4d\x4f\x72\x14\x27\x7a\x43\xf2\x1c\xd5\x58\x96\x8e\xb4\x97\x6d\x30\xf0\xbb\x70\x94\xab\x92\x8e\x72\x62\x70\x43\xb6\x7e\x9b\xce\x73\x14\xf3\x20\x65\x14\xa4\x8c\x64\x89\x82\x94\x6c\x7d\x1a\x77\x8e\xe1\x02\xbe\x0c\x00\x98\x58\xca\x33\xf7\x1b\x80\x61\x86\xe3\x19\x0c\x2f\x3d\x24\xf8\xe8\x21\xc1\xe4\x6e\x3a\x3c\x77\x14\x6b\x9f\x0e\x67\x30\x5c\xbf\x1e\xbd\x19\xbd\x0e\xcb\x54\x0a\x43\xa8\x89\x72\xec\x8f\x20\x85\x15\xf5\x91\xd1\x15\x41\x0e\x9f\x50\xe0\xbf\x19\x09\xf4\xf6\xa7\x52\xfc\x0c\x86\x36\x92\xf5\xd9\x78\x9c\x33\xb3\xaa\x16\x23\x2a\x8b\xf1\xba\x43\x8a\x05\x61\x96\xb8\x08\x5b\x7f\xcf\xed\x82\x25\x0e\x44\x5f\xed\xff\xdc\x7f\xf0\xb3\x41\x25\x08\x9f\x67\x92\xea\xa8\xcf\xde\xa3\xb4\xaf\x1b\x27\x54\x50\x33\x0e\x8e\x3c\x09\x8e\x3c\x21\x25\x0b\xe2\x33\xd4\x54\x31\x67\x49\x0b\x49\x2a\x04\xb2\x90\x95\x81\x7d\x86\xfa\x3a\x00\xd0\x74\x85\x05\xea\x33\x78\xff\xf0\x70\x77\xde\x5e\x98\xd9\x15\x2a\x85\xae\xdc\xd2\x30\x64\xa3\x3d\x62\xfc\x2f\x2d\x85\x13\x53\x2a\x99\x55\x74\xdf\xfe\xd7\xf3\xc1\x40\xa3\x5a\x33\x8a\xb5\x22\x1e\xaf\x4d\x0c\x9b\x25\x08\xef\x91\x73\x09\x8f\x52\xf1\x0c\x66\x81\xf6\x04\x36\x8c\x73\x50\x58\x22\x31\x40\xc0\x66\xbd\x2b\x91\x46\xba\xb0\xb7\x9e\xb3\x47\xaf\x59\x86\x99\x93\xa7\x4a\xea\x25\x79\x41\x47\xbb\xdf\x3f\xea\xfc\x18\x14\x9a\x4a\x09\xdd\x5c\xbf\xc7\x92\x6f\x8f\x1b\xe1\x50\xc7\xab\xcb\x87\x11\x29\xd9\xc8\xfa\x23\x46\xa1\xfd\x29\xa5\x36\x70\x06\x43\x97\x2c\xeb\x37\xe3\x95\x95\xb6\xb1\xd2\x86\x81\x62\x21\xb3\xed\x19\x0c\xff\x3c\xdc\x39\xdd\xdb\xba\x09\xb9\x94\x19\x50\x59\x09\x03\x0a\x75\x29\x6d\x02\x03\x3c\x7a\xc4\xf6\x3b\xdb\x15\x61\x51\x15\x0b\x54\xb6\xd2\x96\x32\xd3\xb6\xea\x45\xfc\xba\x24\xb4\xc7\x08\x3f\xa3\xb9\x93\xd9\xa5\x93\x7e\xd4\xf8\x48\xcd\xd0\xd8\xf8\x1e\x3b\xf4\x5b\x23\x47\x53\xca\xcc\x01\x1b\x26\x84\xd6\x28\xb0\xb3\x4a\x9f\x65\x1c\x7a\x07\xc6\xdd\x65\x24\xd6\xac\x1a\xd7\xa5\x42\x62\x30\x06\xd1\x51\xf2\x99\x62\x4b\xb6\x7e\x07\xba\x2a\x01\x17\xf4\xf9\x3e\x60\x0a\x8d\x62\xb8\xf6\x17\x81\x36\xc4\x54\xda\xba\xb4\x46\x69\x8b\x3c\x30\xa3\xe1\xa9\x5a\x20\x95\x62\xc9\x72\x77\x4f\x50\x29\x04\x52\xc3\xd6\xcc\x6c\x9b\x1e\xae\xcd\xb0\xfb\xbd\xe3\xdf\xdf\x6d\x80\x1c\x0f\x1b\xa0\x17\x69\x86\x1c\x0d\xf6\xf8\xef\xca\x6d\xd4\x8a\x27\x9f\xa9\xee\xc9\xd6\xf7\xab\x1f\x34\xf9\xaf\x11\xd4\xbe\x22\xc0\x99\x36\xd6\x4f\x81\x51\xf7\xb8\xe0\xda\x92\x1c\xa5\xdf\xfb\x5c\x61\xf7\x5e\xda\x1d\x63\xab\xe3\x33\x88\x98\xd0\x86\x70\x0e\x47\x52\x81\xc2\xf0\x75\x0c\x86\x71\xde\x70\xd0\x5d\x4c\xbe\x07\xb7\x0e\x47\xad\x85\x14\x55\x6b\xf3\xe5\x8a\x88\xd7\xea\xfb\xd2\x6c\x0f\xd0\x15\xf2\x02\xe8\x8a\x28\x13\xa9\x1f\x6c\x0b\xec\xae\x98\x05\xda\xab\xd3\xa8\x8a\xba\x66\x9c\xb9\xa4\xb4\xa4\xb0\x22\x1a\x08\x57\x48\xb2\x2d\x2c\x10\x05\x64\x58\x72\xb9\xc5\x46\x71\xd6\xf6\x1a\xb2\xb5\xb8\x36\xe2\xd4\x9f\xf9\x1e\x79\x71\xe9\xa4\x1c\xb5\x57\x52\x33\xb6\x77\x5f\xac\x5c\x59\xcc\xdf\x67\xc4\x90\x37\x35\xda\x96\xf5\x76\xb9\xdc\x00\xd9\x5a\xe8\xcb\xe7\x17\x80\xd8\xcd\xe8\x14\xe5\xbe\x74\xae\x94\x88\x5d\xa1\xeb\x25\x55\xe1\x9a\x94\xd0\x20\x91\x92\x81\xed\x51\x1a\xa9\xf0\x33\x9a\x30\x54\x4d\x1b\xe4\x47\xbb\xe5\x4e\x86\x87\xf5\x17\xcb\xee\xa0\x6e\x0f\xb6\xaf\x83\x81\x0b\xe0\xb4\x71\xb2\x53\x13\x6a\x33\x28\x50\x6b\xdb\xf1\x27\xed\x4f\x38\xca\x8e\x3d\x22\xf7\xbd\xd3\x05\xbc\x39\x6f\x88\x8a\x6d\x88\xed\xaf\x1a\x62\x7b\xc4\x39\x84\xa9\xc0\x48\x14\x65\xc6\xef\xb4\xf9\xd8\xf5\x7d\x37\x75\xf3\x62\x24\x2c\xd1\x50\x9f\x4c\x75\x53\x14\xe9\xae\x91\xac\x11\xb0\x28\xcd\xd6\x52\xfe\x56\xa1\xda\x82\x4d\xef\xba\xfb\xd1\x6d\x5c\x5e\xec\x01\x45\x9a\xea\x5b\x55\x9e\xe9\xae\x6c\x21\x49\x4f\x3c\x76\xac\x4c\x98\xb7\xa7\x9e\xa7\x7d\x58\xbb\x31\x49\x71\xc7\x91\x39\xde\xfb\x46\xda\x0a\x54\xf7\x3d\xa1\x8f\xeb\x78\xaa\x2e\x5b\x75\xc3\xa7\xea\xf9\xd1\x05\xa7\xa3\x48\x8e\xbe\x0b\x74\xb3\x12\xe9\x8e\xe9\x02\x4e\xf7\x6b\xdb\x32\xce\xe3\x0a\xdd\x5c\x2b\x95\x7b\x3a\x68\xaa\xbd\x21\xba\xa9\xb4\x9d\xd5\xdd\xab\x42\x0c\x43\x5f\x6f\x24\x07\xf9\xd4\x01\xd0\x6c\x0c\xc2\xc1\x53\x83\x45\x2d\xbb\xad\x62\xd2\xe2\x7c\x8b\x35\xb9\x94\x4f\x76\xf8\x2f\xf7\x46\x7d\x57\x74\x0b\xfa\x54\x27\x72\x43\x5c\xe8\xad\x36\x58\x7c\x0b\x38\xc8\xd0\x10\xc6\x75\x13\xe4\x95\x5b\x3a\x08\xb5\xdd\x14\x35\x7d\x41\x0c\xb0\x44\xab\x3f\x69\x0f\xca\x48\x7f\x83\xc9\xed\xb3\x78\xbb\x9d\xd5\xee\x84\x4b\x59\xf1\x2c\x41\x1d\xaf\x46\x7b\x0b\xec\x05\x3d\xab\x9b\x59\xe3\xea\xc8\xce\xff\x41\x91\xd0\xed\xee\xf7\x6a\xe8\x98\xe0\xcb\xfe\xed\x97\xf0\xce\x75\x6f\x2f\xe7\x06\x4c\xcc\xfa\x02\xb1\xab\x73\x93\x68\xa7\xcc\x55\x2b\x0a\x9b\xe0\x59\x96\xe8\xd0\x13\xb3\x3d\x3e\x3b\x3d\xef\xf3\xba\x4e\x0c\xdd\xc3\x5d\x1b\xfa\x6d\x9f\xd2\x8d\xe8\xfb\xff\x56\xbd\x87\xbf\x31\x14\x19\x19\x67\xa2\xf8\x14\xd0\x23\xae\x41\x7f\x01\x3f\x24\xd6\x78\xa7\x94\xec\x24\xbb\xd1\xae\xc0\xc9\xa7\x83\xa9\x8d\x96\xd5\x2d\x38\x21\xfe\xbb\x13\x23\x7e\xef\x4b\x87\x11\xa8\xcc\xb0\xa9\xa4\xfd\xee\x3f\x23\x5e\xa8\xfd\x77\x6c\x7a\x5c\xb7\x47\x6f\x64\x74\xac\x8a\xbe\x9f\xd7\x2b\x97\xe1\x0b\x8c\x6d\xb2\x7b\xff\x4c\x54\xaa\xcb\x52\xea\xf7\x70\x59\xef\x17\xc3\xc4\xbe\x8b\x78\x17\x10\xae\x43\x12\xd2\x45\x81\x93\xe4\x9a\x37\xff\x92\xeb\xbb\xf6\x31\x54\x65\xae\x48\x66\x4b\x5a\x53\x5e\x6c\xdd\x9a\xe1\x11\x4a\x40\xd0\xa9\x9e\x36\x4f\x36\x2c\x8b\xab\x3f\xd5\x25\xca\x6b\xcc\x6c\x4b\xbf\xc6\x94\x94\x64\x05\x13\x50\x2a\xb6\x66\x1c\x73\xd4\x3f\xed\x42\x20\x3e\x9a\x3a\x3a\x17\x47\x6d\x93\x58\x1d\x6c\x94\x9a\x86\x51\xdc\x63\xb5\x91\x41\x70\xb0\x6f\x5d\x66\x02\x22\xb7\x39\xdf\x35\x15\x70\x01\x3f\x1e\x72\x6b\xfb\x62\x26\x1e\xbd\x2c\x51\xf9\xd6\x54\x57\x94\xa2\xd6\xcb\x8a\xef\x0d\x61\x97\x50\x41\xbe\x86\x0d\x2a\x84\x9c\xad\x51\x7c\x4b\x94\xf5\xcc\x30\xfd\x57\x53\x7c\x70\x0e\xef\x93\xbb\xd9\x28\x1c\x10\xf6\xc3\x5b\xe4\x4d\xbb\xbf\xf1\xd3\xc4\x0c\x8d\x61\x22\xf7\x15\xfa\x67\x14\xa8\x18\xdd\xcd\x1a\x7e\x38\x6b\xc6\xc2\x3d\x96\x52\x33\x23\xd5\x76\x2f\x6b\x83\x44\x61\x29\x3b\x65\xa1\x77\x0c\xfb\x03\x0d\xde\x9d\xa7\xfa\xed\x2d\x1a\x55\xd9\x0f\x6c\x05\x0a\x73\xb0\x87\x6c\xb3\xfb\x4c\x7d\x56\x46\x4c\xe8\xb7\x87\xf4\xfc\xa3\xcd\xd6\x09\x96\xff\xad\xd1\x5c\xe7\x65\xf9\xdd\x7a\xe3\xf9\xbb\x55\xc0\xfa\x0b\x62\xd2\xd2\x39\x6d\x55\x1d\xa5\x4d\xee\x10\xb0\xfd\x57\xa3\x67\x6c\xa7\x59\xcc\x91\x1f\x52\x1e\xa2\x30\xf8\xc3\xff\x19\xe9\x48\xa0\xb6\x55\x69\x4b\x0a\x0e\x27\x6e\xeb\x13\xe1\x15\xea\x91\x5b\xa1\x52\x18\x14\x26\x8c\x3c\xb1\x18\x3b\x02\x5f\xb0\xf6\xea\x13\x2a\x76\x7f\x11\xff\xcb\x3e\x97\x35\x92\xf4\x59\xbf\xf5\x9b\xea\xa0\xdf\x7e\xb9\xbf\x3e\xcc\x5d\x29\x7e\x78\x3e\x4a\x46\xaa\xfe\xfa\x17\xe7\xac\x13\xa0\x95\x52\x28\x0c\x0f\x93\x11\xd3\x40\x36\xee\x6f\x83\x05\x21\x9d\xb9\xb5\xd3\x08\x7c\x24\x64\xf6\xdc\x84\x67\x69\x9c\x2a\x56\x62\x12\x5a\x56\xc2\xe4\xf1\x59\x01\x93\x47\xcf\x6f\x15\xeb\xb4\x8d\xbd\x27\x7d\xe9\xe8\x38\xb9\x9b\x02\x8a\xac\x94\x2c\x4d\xa1\xb8\xd6\x41\x56\x69\x54\x0e\x72\x68\xdb\xa3\x94\xc4\x13\x91\xa6\x0d\xea\x76\x52\x99\x15\x3c\xe1\xb6\xfe\x2b\x6a\xdf\xd9\x92\x54\x66\x35\xb7\x54\x07\x51\x45\xf8\x09\x28\x85\xb9\x0d\x53\x2b\x7e\xf2\x38\x4b\xf3\x30\xf7\x01\x9c\xe2\x99\x21\x55\x68\x3e\xe0\x76\x9a\x79\xae\xbb\x29\x4c\x5c\x95\x4b\x3a\x5c\x47\x65\x75\x9a\xbb\xc6\xfa\xb4\x47\x86\xe7\xfa\x10\xc0\x59\x39\x64\x9f\x1c\xbf\xd1\x0b\x31\x79\xa4\xf2\x43\x55\xdf\x66\xbb\x07\x5e\x36\xaa\xb4\x9d\xee\x6f\x3f\x74\x2b\xb4\x5b\x89\xa2\x7a\x1e\xc8\x76\x2f\x5a\x01\x97\x21\x39\x48\xef\xe6\x9c\x75\xea\x5b\x03\x56\xce\xcc\x7c\x57\x21\xde\x9c\xb7\x05\xad\x88\x5e\xc5\xe4\xb5\x92\xa8\x2c\x0a\x66\xfa\xa4\xf8\x9d\x9d\x85\x61\xef\x5b\x86\x51\x88\x0e\x2a\xe5\x48\x04\x6c\x56\x28\x60\x51\x31\xde\x2b\xd6\x12\xcf\xed\x98\x82\xbb\x52\x1c\x44\x5f\xd9\x45\xb9\x74\xbc\x59\x9b\xd7\x2d\xce\x33\xcf\xf7\x43\xc2\x17\xff\xd9\x86\x5c\x42\x2e\x6d\xc8\x67\x7e\xba\x29\x4a\xc6\xb1\xa3\x83\x6c\xd8\xe7\xc7\x44\xce\xa5\xe7\x50\x4e\x44\x9b\x8f\xc6\x4d\x57\x77\x1b\x5c\x77\x9c\x18\xeb\x39\xdb\xbd\x3a\x23\x78\x42\x1f\xc3\x63\x50\x95\x70\xff\x10\x21\x94\x8d\x66\x0b\x17\x19\x2f\xe0\xaf\xf1\x4d\x72\xd0\x82\xd4\x08\x0a\xb7\xd5\x13\x2b\x01\xcd\xbc\xf9\x1e\x1b\x8b\xef\xe0\x3f\x01\x00\x00\xff\xff\x8b\x10\xfe\xb9\x3e\x23\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 9022, mode: os.FileMode(420), modTime: time.Unix(1528738984, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
