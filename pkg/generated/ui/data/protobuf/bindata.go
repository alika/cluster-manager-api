// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5f\x6f\xdb\x38\x12\x7f\xf7\xa7\x18\xf8\xe5\x9c\x43\x6d\xb5\xd9\x3d\xdc\x21\x41\xb0\xe7\x73\x7a\x5b\xa3\x6d\x12\x54\xd9\x06\xfb\x64\xd0\xd4\x44\xe6\x95\x22\xb9\x24\x65\xd7\x57\xf4\xbb\x1f\xf8\x47\xb2\x28\xcb\xe9\x6d\x5b\x60\xd7\x0f\x89\x45\x0e\x87\xf3\x9b\xff\x23\x67\x19\x2c\xa4\xda\x6b\x56\x6e\x2c\x9c\x3f\x7f\xf1\x0f\xc8\x49\x65\x6a\x51\x42\x7e\x9d\xc3\x82\xcb\xba\x80\x1b\x62\xd9\x16\x61\x21\x2b\x55\x5b\x26\x4a\xb8\x47\x52\x01\xa9\xed\x46\x6a\x33\x1b\x65\xd9\x28\xcb\xe0\x0d\xa3\x28\x0c\x16\x50\x8b\x02\x35\xd8\x0d\xc2\x5c\x11\xba\xc1\x66\xe7\x19\xbc\x47\x6d\x98\x14\x70\x3e\x7b\x0e\x13\x47\x30\x8e\x5b\xe3\xb3\x4b\xc7\x62\x2f\x6b\xa8\xc8\x1e\x84\xb4\x50\x1b\x04\xbb\x61\x06\x1e\x19\x47\xc0\x8f\x14\x95\x05\x26\x80\xca\x4a\x71\x46\x04\x45\xd8\x31\xbb\xf1\xf7\x44\x2e\x4e\x12\xf8\x35\xf2\x90\x6b\x4b\x98\x00\x02\x54\xaa\x3d\xc8\xc7\x2e\x21\x10\x1b\x85\x76\x9f\x8d\xb5\xea\x22\xcb\x76\xbb\xdd\x8c\x78\x81\x67\x52\x97\x19\x0f\xa4\x26\x7b\xb3\x5c\xbc\xbc\xc9\x5f\x4e\xcf\x67\xcf\xe3\xa1\x5f\x04\x47\x63\x40\xe3\x6f\x35\xd3\x58\xc0\x7a\x0f\x44\x29\xce\x28\x59\x73\x04\x4e\x76\x20\x35\x90\x52\x23\x16\x60\xa5\x13\x7a\xa7\x99\xd3\xdb\x33\x30\xf2\xd1\xee\x88\x46\xc7\xa6\x60\xc6\x6a\xb6\xae\x6d\xa2\xb3\x46\x44\x66\x12\x02\x29\x80\x08\x18\xcf\x73\x58\xe6\x63\xf8\xd7\x3c\x5f\xe6\xcf\x1c\x93\x87\xe5\xfd\xab\xdb\x5f\xee\xe1\x61\xfe\xee\xdd\xfc\xe6\x7e\xf9\x32\x87\xdb\x77\xb0\xb8\xbd\xb9\x5e\xde\x2f\x6f\x6f\x72\xb8\xfd\x37\xcc\x6f\x7e\x85\xd7\xcb\x9b\xeb\x67\x80\xcc\x6e\x50\x03\x7e\x54\xda\x21\x90\x1a\x98\xd3\x26\x16\x5e\x75\x39\x62\x22\xc2\xa3\x0c\x22\x19\x85\x94\x3d\x32\x0a\x9c\x88\xb2\x26\x25\x42\x29\xb7\xa8\x85\xf3\x04\x85\xba\x62\xc6\x59\xd5\x00\x11\x85\x63\xc3\x59\xc5\x2c\xb1\x7e\xe9\x08\xd7\x6c\x34\x32\x7b\x61\xc9\x47\xb8\x82\xb1\xd2\xd2\xca\x1f\xc6\x97\xa3\x91\x22\xf4\x83\x63\x4c\x79\x6d\x2c\xea\x55\x45\x04\x29\x51\xaf\x88\x62\x97\xa3\x11\xab\x94\xd4\x16\xc6\xa5\x94\x25\xc7\x8c\x28\x96\x11\x21\x64\xbc\x64\xe6\xd9\x8c\x2f\x5b\x32\xff\x4c\xa7\x25\x8a\xa9\xd9\x91\xb2\x44\x9d\x49\xe5\x49\x07\x8f\x8d\x46\x61\x17\x26\xa5\x56\x74\x56\x12\x8b\x3b\xb2\x0f\xdb\x74\x55\xa2\x58\x45\x2e\xb3\xc8\x65\x26\x15\x0a\xa2\xd8\xf6\xbc\xd9\x39\x83\x2b\xf8\x34\x02\x60\xe2\x51\x5e\xf8\x6f\x00\x96\x59\x8e\x17\x30\x5e\x04\x48\xf0\x36\x40\x82\xf9\xdd\x72\x7c\xe9\x29\xb6\x21\x1c\x2e\x60\xbc\x7d\x3e\x7b\x31\x7b\x1e\x97\xa9\x14\x96\x50\xdb\xf0\x71\x1f\x41\x2a\xc7\xea\x2d\xa3\x1b\x82\x1c\xde\xa3\xc0\xff\x32\x12\xe9\xdd\xa7\xd6\xfc\x02\xc6\xce\x93\xcd\x45\x96\x95\xcc\x6e\xea\xf5\x8c\xca\x2a\xdb\x1e\x91\x62\x45\x98\x23\xae\xe2\xd6\x3f\x4b\xb7\xe0\x88\x23\xd1\x67\xf7\xcf\xff\xc1\x8f\x16\xb5\x20\x7c\x55\x48\x6a\x1a\x79\x4e\x5e\x65\x42\xde\x98\x52\x41\x6d\x16\x0d\x39\x8d\x86\x9c\x12\xc5\x22\xfb\x02\x0d\xd5\xcc\x6b\xd2\x41\x92\x1a\x81\xac\x65\x6d\xe1\x94\xa2\x3e\x8f\x00\x0c\xdd\x60\x85\xe6\x02\x5e\xdd\xdf\xdf\x5d\xf6\x17\x72\xb7\x42\xa5\x30\xb5\x5f\x1a\xc7\x68\x74\x57\x64\xff\x31\x52\x78\x36\x4a\xcb\xa2\xa6\xa7\xf6\x3f\x5f\x8e\x46\x06\xf5\x96\x51\x6c\x05\x09\x78\x5d\x60\xb8\x28\x41\x78\x85\x9c\x4b\x78\x90\x9a\x17\x90\x47\xda\x29\xec\x18\xe7\xa0\x51\x21\xb1\x40\xc0\x45\xbd\x4f\x91\x56\x7a\xb7\x77\x96\x73\x57\x6f\x59\x81\x85\xe7\xa7\x15\x0d\x9c\x02\xa3\xc9\xe1\xfb\x5b\x53\x9e\x81\x46\x5b\x6b\x61\xba\xeb\xef\x50\xf1\xfd\x59\xc7\x1d\x5a\x7f\xf5\xf1\x30\x23\x8a\xcd\x9c\x3d\x1a\x2f\x74\x1f\x25\x8d\x85\x0b\x18\xfb\x60\xd9\xbe\xc8\x36\x8e\xdb\xce\x71\x1b\x47\x8a\xb5\x2c\xf6\x17\x30\xfe\xeb\xf8\x60\xf4\xa0\xeb\x2e\x64\x25\x0b\xa0\xb2\x16\x16\x34\x1a\x25\x5d\x00\x03\x3c\x04\xc4\xee\xb9\x38\x24\x61\x51\x57\x6b\xd4\x2e\xd3\x2a\x59\x18\x97\xf5\x1a\xfc\x46\x11\x3a\xa0\x84\x9f\xd1\xde\xc9\x62\xe1\xb9\x4f\x3a\x0f\xa9\x1a\x3a\x1b\x5f\xa3\x87\x61\x6d\x94\x68\x95\x2c\x3c\xb0\x71\x42\xe8\x94\x02\x07\xad\x0c\x69\xc6\xa3\xf7\x60\x7c\x2d\x23\x4d\xce\x6a\x71\x2d\x34\x12\x8b\x8d\x13\x4d\x92\xc7\x14\x5b\xb2\xf5\x0d\xe8\xea\x04\x5c\x94\xe7\xeb\x80\x69\xb4\x9a\xe1\x36\x14\x02\x63\x89\xad\x8d\x33\x69\x8b\xd2\x25\x79\x60\xd6\xc0\x87\x7a\x8d\x54\x8a\x47\x56\xfa\x3a\x41\xa5\x10\x48\x2d\xdb\x32\xbb\xef\x5a\xb8\x55\xc3\xe1\xfb\x91\x7d\xbf\x59\x01\x25\x3e\xad\x80\x41\xa4\x05\x72\xb4\x38\x60\xbf\x6b\xbf\xd1\x0a\x9e\x3c\xa6\xb2\x27\x5b\x5f\x2f\x7e\x94\xe4\x77\x23\x68\x6d\x45\x80\x33\x63\x9d\x9d\xe2\x41\x33\x60\x82\x37\x8e\x64\x92\x3e\x9f\x32\x85\xdb\xfb\xde\xe6\xc8\x9c\x8c\x5f\x40\xc4\x84\xb1\x84\x73\x98\x48\x0d\x1a\xe3\xd3\x19\x58\xc6\x79\xc7\x40\x77\x4d\xf0\xdd\xfb\x75\x98\xf4\x16\x52\x54\xbd\xcd\xef\x97\x44\x82\x54\x5f\x17\x66\x27\x80\x6e\x90\x57\x40\x37\x44\xdb\x86\xfa\xde\xb5\xc0\xbe\xc4\xac\xd1\x95\x4e\xab\x6b\xea\x9b\x71\xe6\x83\xd2\x91\xc2\x86\x18\x20\x5c\x23\x29\xf6\xb0\x46\x14\x50\xa0\xe2\x72\x8f\x9d\xe4\x6c\x5c\x19\x72\xb9\xb8\x55\xe2\x32\xdc\xf9\x0a\x79\xb5\xf0\x5c\x26\xfd\x95\x54\x8d\xfd\xdd\xef\x96\xae\x1c\xe6\xaf\x53\x62\x8c\x9b\x16\x6d\x4f\x7b\x87\x58\xee\x80\xec\x2d\x0c\xc5\xf3\x77\x80\x78\x1c\xd1\x29\xca\x16\xce\xe7\xd1\xc8\x1b\x39\x6d\x2e\xdc\x64\x81\xc6\x8e\x2a\x34\xc6\x75\xc5\x49\x8b\x10\xaf\x72\xa3\x81\x28\x43\x7f\x71\x05\x2f\x2e\x3b\xac\x9a\x52\xed\x7a\x90\x0e\xdb\x01\x76\x1e\x61\xca\xb0\x21\x6a\x78\x36\xcf\x69\x81\x3e\xf4\x46\x37\x6d\x81\xb7\x12\x1e\xd1\xd2\xe0\x70\x6d\xe3\xd0\xd0\xbd\x41\xb2\x45\xc0\x4a\xd9\xbd\xa3\xfc\xad\x46\xbd\x07\x17\x02\x6d\x87\x60\xfa\xb8\x02\xdb\x27\x04\xe9\x8a\xef\x44\xf9\x42\x07\xe2\x82\x2d\xbd\xf1\xcc\x1f\x65\xc2\xfe\x70\x1e\xce\xf4\x2f\xeb\x17\xef\x14\x77\x33\x56\x36\xb5\xd1\x4a\x17\xa5\x6d\x6f\x10\x7b\x9d\x23\x4b\xb5\xa1\xdd\x36\x45\xba\x9d\xb1\x7c\x53\xea\x29\x92\xab\xef\x22\x5d\xae\x90\x1e\x0e\x5d\xc1\xf9\x69\x69\x7b\xca\x79\xd8\xa0\x9f\xfd\xa4\xf6\xe3\x75\x57\xec\x1d\x31\x5d\xa1\xdd\x3c\xeb\x27\xef\xc6\x0d\x43\x4c\x4a\x0e\xf2\x43\x00\xe0\x57\xa4\xc0\x43\xc1\x59\x49\xbd\x42\xad\xa5\xee\x04\x42\x94\x63\x69\xb1\x6a\xaf\xf2\x12\x37\x04\x2f\xfd\x81\x70\xec\x0a\xfe\xde\x89\x89\x8e\xad\x7f\x9f\xee\xb9\x94\x1f\xdc\x38\xad\x4e\xc6\xc8\x31\xeb\x9e\xa2\x96\x26\xe1\x1b\xbd\xc8\xec\x8d\xc5\xea\x1b\x55\x71\x8d\x96\x30\xfe\x2d\x0a\xe9\x37\x23\x5d\xfb\x12\x0b\x2c\x91\xfd\x2f\x26\x40\xb7\x32\x54\x0e\xb9\xff\xa2\x56\x8e\x3b\x9a\xc3\x0d\x0b\x59\xf3\x22\xd1\x4d\x53\x92\x5c\xf6\x3d\x56\x4d\x3c\x96\xb7\x4d\xa4\xf5\xb9\xe9\xe0\x53\x51\x90\xd8\x65\xf6\x9d\xf9\xa8\x53\x81\x4f\xa7\xb7\xbf\xc9\x86\x4d\x86\x1a\xec\xa1\xfc\x60\x87\xc5\x90\x37\x1f\xcb\xdc\x25\x3a\x08\x73\xdd\xf3\xd5\x2e\x78\x56\x24\x32\x0c\x78\xf6\x80\xcd\xce\x2f\x87\xac\x6e\x12\x45\x0f\x9c\x6e\x15\xfd\xc3\x90\xd0\x1d\xe7\xfc\x73\x8b\x3e\x70\xbe\x33\x8c\x58\xd9\xcc\x22\xcd\x08\x3e\xc0\xae\x43\x7f\x05\x3f\x26\xda\x78\xd9\x09\xdd\x98\xa4\x43\x40\x52\x59\x60\x97\x87\x7b\x3e\xca\xe7\x81\x34\xf2\x1a\x2e\xab\xa9\xc7\x1c\xb7\xae\x9d\x80\x6b\x52\x5b\x68\x73\xcd\xc6\x07\xe0\x1a\x9b\xee\xd1\xbf\x16\x4c\x44\x6a\x93\x4a\x6a\x96\x58\x9f\x4f\xb3\x61\xe2\x54\xed\x3d\xd8\xcb\xbf\xbc\x15\xd2\x1b\xc9\x73\xf2\x3d\x4d\x78\xc1\x19\x9a\xd9\x0c\x6a\x55\x6a\x52\xb8\x8c\xd3\xe5\x17\xdf\x73\x25\xd6\x8b\x11\x1a\x65\x6a\x87\xb0\xe9\x8e\x15\xcd\xea\x4f\x6d\x06\x09\x12\x33\xd7\xe9\x6e\x31\x25\x25\x45\xc5\x04\x28\xcd\xb6\x8c\x63\x89\xe6\xa7\x43\x78\x37\xf9\xd8\xd3\x79\x33\xf7\x55\xe2\x64\x70\x4e\x64\x3b\x4a\xf1\xef\x70\xad\x8c\x8c\xa3\x7e\xdb\x2c\x10\x11\xf9\xcd\xd5\xa1\x8f\x80\x2b\xf8\xdb\x53\x66\xed\xd7\x62\x12\xd0\x4b\x85\xda\x17\x7c\x30\x35\xa5\x68\xcc\x63\xcd\x4f\xa6\x27\xef\xef\x91\xbf\x81\x1d\x6a\x84\x92\x6d\x51\xfc\x3f\x5e\x36\xd0\xda\x7f\x67\x37\x8b\xa3\x98\x41\x6b\x99\x28\x43\xee\xfc\x19\x05\x6a\x46\xc3\x56\x1e\x76\x9a\x5b\xba\x9e\x15\x5a\xf3\x7c\xe0\xe8\xa1\x71\x0f\x93\x4e\x3f\x75\x0d\x0e\x25\x7f\xa0\x9e\x8f\xa7\x8b\x3f\x9d\x9a\x6f\x9a\x21\xb0\xb9\x65\x50\xb1\x43\x93\xd0\x1f\xa8\xd7\x41\x88\x83\xad\x4f\xc4\xdd\x86\xe6\x13\x33\xc5\xc0\xe9\x26\x53\xa5\x39\x6e\x38\x97\x0d\x4a\x78\x70\xd8\x41\xe9\x44\xa7\x46\x86\xb1\xb5\x42\x61\x9f\x9c\x12\xfa\xc7\xdb\x59\x2b\x9c\xf7\xeb\x9d\xf7\xd9\xbd\xd4\x3b\x9c\xca\x93\x5e\xd1\x4b\xab\x51\x49\xc3\xac\xd4\x49\x8b\xe8\x56\x4f\xd6\xdc\x70\x50\x9c\x70\xa7\x1f\xd3\x33\x44\x63\xf4\x98\xf0\xbb\xd0\x44\xa0\x71\xf9\x74\x4f\x2a\x0e\x53\xbf\xf5\x9e\xf0\x1a\xcd\xcc\xaf\x50\x29\x2c\x0a\x1b\xe7\xb3\x46\xf5\x9e\xe0\x28\xd5\x9e\x9e\x93\x06\x4d\xd0\x0e\x4f\x53\xa0\xb5\xd6\x28\x2c\x8f\xe3\x0e\x33\x40\x76\xfe\x47\xb1\x8a\x90\xa3\x61\xf4\xa8\xd4\xbf\x25\x24\xff\xd2\xd8\xe6\x68\xbc\x28\x8e\x63\x62\x02\xc7\x61\xfe\xf0\x45\x06\xf3\x87\x70\xde\x09\x76\xd4\xb7\x0d\xde\xf4\xe9\x48\xc6\xf9\xdd\x12\x50\x14\x4a\xb2\xd4\xd5\x9a\xb5\x23\x64\xb5\x41\xed\x21\xc7\xbe\xb9\xe1\xd2\x3d\xdc\xd2\xf4\x41\xdd\xce\x6b\xbb\x81\x0f\xb8\x6f\x7f\x3e\x1c\xba\x5b\x92\xda\x6e\x56\x8e\xea\x49\x54\x0d\xfc\x04\x94\xc6\xd2\x39\xba\x63\x3f\x7f\xc8\x53\x7f\x2d\x43\x6c\xa6\x78\x72\xa4\x1a\xed\x6b\xdc\x2f\x8b\x70\xea\x6e\x09\x73\x9f\xaf\x92\x16\xd3\x53\x39\x99\x56\xbe\xb3\x3d\x1f\xe0\x11\x4e\xbd\x8e\xe0\x1c\x1f\x72\x8a\x4f\xd8\xe8\x40\xfc\x5f\x00\x00\x00\xff\xff\x6d\x9d\xf9\xae\x69\x1f\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 8041, mode: os.FileMode(420), modTime: time.Unix(1527199437, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
