// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x6b\x6f\xe3\x36\xb3\xfe\xee\x5f\x31\xf0\x97\x93\x1c\x24\xd6\xae\xb3\x3d\xa7\x88\x9b\x83\xba\x4e\xdb\x35\xb2\xb9\x60\x95\x6e\xd0\x4f\x06\x4d\x8d\x65\x1e\x4b\xa4\x4a\x52\x76\xbc\xc5\xfe\xf7\x17\xbc\x48\xa2\x64\x39\x7b\x69\x0b\xbc\x78\x0d\xb4\x6b\x89\x33\xa3\xe1\x33\xb7\x87\x72\xa2\x08\x66\xa2\xd8\x4b\x96\xae\x35\x8c\x5f\xbd\xfe\x1e\x62\x92\xab\x92\xa7\x10\x5f\xc7\x30\xcb\x44\x99\xc0\x1d\xd1\x6c\x8b\x30\x13\x79\x51\x6a\xc6\x53\x78\x44\x92\x03\x29\xf5\x5a\x48\x35\x1a\x44\xd1\x20\x8a\xe0\x1d\xa3\xc8\x15\x26\x50\xf2\x04\x25\xe8\x35\xc2\xb4\x20\x74\x8d\xd5\xca\x19\x7c\x40\xa9\x98\xe0\x30\x1e\xbd\x82\x13\x23\x30\xf4\x4b\xc3\xd3\x89\x31\xb1\x17\x25\xe4\x64\x0f\x5c\x68\x28\x15\x82\x5e\x33\x05\x2b\x96\x21\xe0\x33\xc5\x42\x03\xe3\x40\x45\x5e\x64\x8c\x70\x8a\xb0\x63\x7a\x6d\x9f\xe3\xad\x18\x4f\xe0\x77\x6f\x43\x2c\x35\x61\x1c\x08\x50\x51\xec\x41\xac\x42\x41\x20\xda\x3b\x6d\x3e\x6b\xad\x8b\xcb\x28\xda\xed\x76\x23\x62\x1d\x1e\x09\x99\x46\x99\x13\x55\xd1\xbb\xf9\xec\xe7\xbb\xf8\xe7\xf3\xf1\xe8\x95\x57\xfa\x8d\x67\xa8\x14\x48\xfc\xa3\x64\x12\x13\x58\xee\x81\x14\x45\xc6\x28\x59\x66\x08\x19\xd9\x81\x90\x40\x52\x89\x98\x80\x16\xc6\xe9\x9d\x64\x06\xb7\x33\x50\x62\xa5\x77\x44\xa2\x31\x93\x30\xa5\x25\x5b\x96\xba\x85\x59\xe5\x22\x53\x2d\x01\xc1\x81\x70\x18\x4e\x63\x98\xc7\x43\xf8\x69\x1a\xcf\xe3\x33\x63\xe4\x69\xfe\xf8\xf6\xfe\xb7\x47\x78\x9a\xbe\x7f\x3f\xbd\x7b\x9c\xff\x1c\xc3\xfd\x7b\x98\xdd\xdf\x5d\xcf\x1f\xe7\xf7\x77\x31\xdc\xff\x02\xd3\xbb\xdf\xe1\x66\x7e\x77\x7d\x06\xc8\xf4\x1a\x25\xe0\x73\x21\xcd\x0e\x84\x04\x66\xd0\xc4\xc4\x42\x17\x23\xb6\x5c\x58\x09\xe7\x92\x2a\x90\xb2\x15\xa3\x90\x11\x9e\x96\x24\x45\x48\xc5\x16\x25\x37\x99\x50\xa0\xcc\x99\x32\x51\x55\x40\x78\x62\xcc\x64\x2c\x67\x9a\x68\x7b\xeb\x60\x5f\xa3\x81\x11\xb9\x65\x74\x4d\x30\x83\x0f\xc8\xf1\x23\x23\xf0\x43\xbe\x75\xdf\x7e\x4c\x73\xc2\xb2\x11\x15\xf9\xff\x19\xb9\x69\xc6\x36\x04\xde\x11\xa9\x90\xc3\x0f\xc4\x5c\x8d\x32\x7b\x15\x0a\x0e\xd4\x9e\x6b\xf2\x0c\x57\x30\x2c\xa4\xd0\xe2\x62\x38\x19\x0c\x0a\x42\x37\xc6\x55\x9a\x95\x4a\xa3\x5c\xe4\x84\x93\x14\xe5\x82\x14\x6c\x32\x18\xb0\xbc\x10\x52\xc3\x30\x15\x22\xcd\x30\x22\x05\x8b\x08\xe7\xc2\xbb\x3d\xb2\x66\x86\x93\x5a\xcc\x5e\xd3\xf3\x14\xf9\xb9\xda\x91\x34\x45\x19\x89\xc2\x8a\xf6\xaa\x0d\x06\x6e\x15\x4e\x52\x59\xd0\x51\x4a\x34\xee\xc8\xde\x2d\xd3\x45\x8a\x7c\xe1\xad\x8c\xbc\x95\x91\x28\x90\x93\x82\x6d\xc7\xd5\xca\x29\x5c\xc1\x9f\x03\x00\xc6\x57\xe2\xd2\x7e\x03\xd0\x4c\x67\x78\x09\xc3\x99\xdb\x12\xdc\xba\x2d\xc1\xf4\x61\x3e\x9c\x58\x89\xad\x2b\xb0\x4b\x18\x6e\x5f\x8d\xc6\xa3\x57\xfe\x36\x15\x5c\x13\xaa\x2b\x3b\xe6\xc3\x49\x6e\x4c\x55\xb5\x3e\xbb\x9b\x3d\x7a\x61\xf3\x29\x65\x76\x09\x43\x53\x18\xea\x32\x8a\x52\xa6\xd7\xe5\xd2\x60\x1d\x29\x27\x7f\x4e\x39\xd5\x91\x87\xf6\xdc\x43\x7b\x4e\x0a\x16\xd8\x40\x13\xa0\x4b\x18\x92\x24\x67\xfc\xc7\x50\x71\xc4\x84\x97\xfb\x64\xfe\xb1\xff\xc3\x67\x8d\x92\x93\x6c\x91\x08\xaa\x2a\x47\xff\xaa\x1b\x09\x2a\x2a\x99\x85\xf8\x12\x86\xb7\x42\x22\x90\xa5\x28\x35\x1c\x43\xf0\xd3\x00\x40\xd1\x35\xe6\xa8\x2e\xe1\xed\xe3\xe3\x43\x3c\xe9\xde\x31\x37\xa8\xe0\xaa\xb4\x77\x86\xbe\xf0\xcd\x23\xa2\xff\x57\x82\x5b\x33\x85\x14\x49\x49\x8f\xad\x7f\x9a\x0c\x06\x0a\xe5\x96\x51\xac\x1d\x71\xfb\x35\xf5\xcc\xb2\xcc\xe8\x6f\x99\xed\x94\xa4\xca\x5f\xbb\x2e\x0b\x0a\x33\x89\x44\x63\xa5\x77\xd2\xba\xbc\x55\xe9\x29\x48\xd4\xa5\xe4\xaa\xb3\xf4\x1e\x8b\x6c\x7f\x1a\x24\x40\x9d\xa1\xb6\x02\x46\xa4\x60\x23\x03\x74\x95\x77\xcd\xa7\x28\x35\x5c\xc2\xd0\xd6\xc8\xf6\x75\x85\xf6\xb0\x25\xb3\x14\xc9\xde\x08\xfd\x77\x73\xfb\x93\x8f\x70\x6b\x63\x12\xb5\x64\xb8\x75\x6d\x46\x69\xa2\x4b\x65\x5a\x73\xbd\x4b\xd3\x42\x80\x69\x05\x9b\x72\x89\x54\xf0\x15\x4b\x6d\x17\xa2\x82\x73\xa4\x9a\x6d\x99\xde\xd7\x48\xfc\x8a\xba\x86\xa1\xf9\xde\xc6\xa0\xb9\xff\xed\x00\xa4\xf8\x32\x00\xbd\x3b\x4d\x30\x43\x8d\x3d\xf1\xbb\xb6\x0b\xb5\xe3\xad\xcb\xb6\xef\xad\xa5\x6f\x77\xdf\x7b\xf2\xd5\x3b\xa8\x63\x45\x20\x63\x4a\x9b\x38\x79\x45\xd5\x13\x82\x77\x46\xe4\xa4\x7d\x7d\x2c\x14\x66\xed\xef\x0e\x47\x64\x7c\xfc\xfc\x8e\x4a\xc9\xab\x26\x69\x5b\xab\xcc\x6d\x69\xfa\xb6\x40\x0a\x06\xa6\x32\x83\x70\xfd\x8a\xda\xb3\x96\x79\x20\x7e\xd2\xdc\x3e\xd8\xa4\xbf\xff\xb7\x6d\xd0\xbb\xdb\xb3\xb7\x4f\x83\x41\x8e\x4a\x99\x29\xd7\x6d\x03\x4d\x43\xb9\x23\x39\x56\xf4\xa7\xaa\x32\x2d\x60\x89\x4d\x97\xc1\xc4\x0a\x1b\xb2\xc1\x53\x3b\x19\xe0\x0a\x5e\x4f\x2a\x0b\x8f\x6b\x2f\x6b\x46\x79\xc5\x05\x2c\x0e\x56\xa2\xf5\xe8\x07\x2f\x17\x17\x48\x1b\xa5\x2b\x18\x4f\x8e\x7a\x6b\x81\x0a\x1a\xe0\x1a\x2d\x47\x11\xd2\xd2\xc0\xd0\xed\x1d\x51\xa1\xd3\x86\x77\x59\x86\x68\x88\x18\x2a\x3d\x70\x9d\x48\x64\x20\x36\x07\x1b\x48\x50\x13\x96\xa9\x2e\x12\x5e\x15\x24\xaa\x42\x70\x85\x6e\x47\x6e\x71\xae\x31\xaf\x05\xbb\x5b\x68\x35\x9c\x2f\x41\x3b\x13\x62\x63\x88\x5e\xf1\x22\xd6\xd3\xa7\xd8\xa0\x93\x20\xd7\x8c\x64\xae\xd0\xa6\x4f\x71\x70\x0b\xc8\x4e\x39\x6f\x2a\x95\x8f\xa5\xc4\x43\x25\x73\xb7\xa5\x66\xc5\xae\xe0\x62\xd2\xe7\x6b\x15\x2a\x05\x27\x64\xa7\x22\xb2\x51\xd1\x36\x37\x44\x35\x42\x4d\x4f\x43\x97\x83\xa0\xbe\x39\x82\x48\x27\xa2\x73\xd5\x82\x83\x71\xd7\xfd\xf7\x4a\x63\x7e\x18\xb3\x30\x02\xd7\x36\x68\x2f\xc6\xa1\xdb\x3f\xc3\x44\x22\xda\xb0\xe8\xe0\xd9\xff\xa5\x1c\xe2\x5a\x18\x6a\xa0\xa5\xd8\xff\xa7\x06\xe3\x70\x76\x34\xc0\xcc\x44\x99\x25\xad\x90\x2c\xb1\xc2\xc3\xb7\x82\xbe\x2a\x8a\xeb\x71\x6d\x54\xc3\x9a\xf3\xce\xf8\x79\x7e\xbc\x52\xfc\x4c\x68\x3c\xf9\x62\x80\x5f\x7f\x2b\xc0\xe3\x7f\x3e\xdb\xeb\x69\xf6\xad\x19\xef\x95\xde\xf5\x0e\x59\x2c\x4c\xab\x4c\xfa\x7a\xd2\x21\xd4\xa1\x50\xe3\xcc\x75\xa7\x21\x85\xfb\x63\x49\xcb\x87\x9e\xf6\xd5\x53\x21\x0d\xa8\x61\x8d\xa9\x56\x7e\xf4\x68\xd7\xf9\x71\xd1\xe7\x74\x50\xeb\xff\xde\xae\xf7\xe8\x07\x6c\x55\x8b\x8a\xac\x9a\xaf\x47\xcc\x05\xf2\xdd\xbc\x3a\x3e\x4d\x7b\x1b\x5b\x9d\x9f\xe7\x40\x4b\x29\x91\xeb\xcc\x0f\x45\xe6\x6a\x47\x48\xc8\x09\x51\x9f\x1d\xf0\x15\x29\x12\x2b\xb8\x29\x97\x28\x39\x6a\x6c\x69\x6d\xbe\x57\x8b\x4a\xc8\xe2\x68\x17\x05\x47\xb1\xaa\xbd\x58\x84\x94\xaa\x21\x35\xfe\x11\xa6\xda\x0f\xe9\xc3\x01\x85\x98\x3e\xc5\x76\xbf\xae\xf2\x2f\x26\x47\xa4\x6e\xbc\x94\x2f\xf4\x37\x47\xe4\x3e\xdc\x3e\x11\x89\x56\xd4\x95\x38\x5c\xc1\xff\x56\x04\xea\x0b\x38\x07\x53\xf0\x76\xda\xd4\xec\x9a\xa5\xeb\x05\xd9\x12\x96\x91\x25\xcb\x98\xde\xc3\x15\x7c\xd7\x02\x72\x45\x96\x92\x51\x3f\xf4\x4b\xd5\xe1\x56\xa8\x77\x42\x6e\x16\x5e\xe8\x0a\xfe\x67\x32\x38\x1a\xfd\x0a\x88\x3f\x07\x1d\x10\xaf\x89\x26\x30\x43\x5e\x65\xd5\xf4\x29\x36\xb7\xdc\x1d\x48\x88\x26\x0b\xea\xbe\x87\x51\x0e\xdb\xa3\xf1\xae\x64\xed\x29\xd0\xd7\x7d\x69\xf0\x3d\x2c\x9e\x9f\x7e\xbf\x07\xa6\x31\xaf\x5b\xf6\x83\xf4\x09\x5d\x4a\x4c\x4c\x11\x1b\x56\xa6\x44\x29\x29\xb6\xcb\x66\xce\x95\xb6\x2f\xef\x52\x29\xca\xa2\xd3\xe4\xa6\x4f\x71\xb5\xfe\xab\x59\x06\xe6\xaf\x16\x4e\xda\xc5\xb9\x89\x1a\xa3\xeb\x03\x30\x2a\x28\xdb\xa0\xb4\x92\xd1\x29\x4a\x4c\x2d\x1f\x2f\xd5\x39\x12\xa5\xcf\x5f\x9f\x01\x6a\x3a\x3a\xad\x25\x7d\xcc\xbc\x5c\x0d\x65\xcb\x48\x2b\x15\x3e\x0a\x8e\x2a\x30\xb8\x3c\x83\xea\xfb\x98\xda\xef\x3b\x34\xdf\x93\xee\x93\x6a\x00\xfc\x23\x43\xab\x0b\x67\xb5\x46\xbf\xc9\xda\x5f\x84\x84\xdd\x1a\x39\x28\x91\xdb\x77\xa5\x3c\x55\x60\x32\x9c\x64\x12\x49\xb2\x37\xd1\x33\x56\xbb\xb0\xf4\xc4\xea\xa0\x56\x3f\x3c\xcc\x80\x25\x67\xb0\xcc\x08\xdf\xd8\x23\xb8\xf9\x6f\xe8\x2c\x9a\xaa\xb7\xd7\x7b\x51\x0e\xcf\x60\xc5\xb2\x0c\x13\x60\x2b\xfb\xfe\xd6\x38\x60\xd2\xe3\xc3\xc3\xac\x8b\xe4\xb6\xa0\x8b\xb0\x6b\x57\xc4\x02\x69\x29\x0d\x7e\x36\xc8\x5d\x25\xe5\x57\x5d\x0a\x38\xfd\xf1\xa4\xeb\xef\x7c\x7a\x0b\x52\x64\xcd\x3b\xcb\xaa\x7e\x4f\x88\xe4\xa7\x55\x41\x29\x25\x28\xb3\xad\x27\x49\xba\xcf\x61\x24\x5f\x18\x0b\x0b\x22\x79\x93\xb1\x0d\xda\x9d\xc4\x85\x04\x57\x8c\x9b\xc3\xb1\xde\x17\x68\xdf\x5b\xf0\x32\x5f\x9a\x26\xb2\xaa\xd3\x56\x75\xa1\x6f\x67\x77\x0b\xf5\xda\xbe\xb5\x77\x92\x7f\x37\xca\x88\x4c\xf1\x48\x52\x5a\xa1\x2e\x90\xb7\x8c\xb3\xbc\xcc\xfb\x1c\x81\x93\x04\x57\xa4\xcc\xb4\xad\xfd\x8f\x28\x45\x63\x92\x71\x7d\x31\x86\x9c\xf1\xc5\x1f\x25\xe1\xda\x35\xb5\x36\xc4\xb7\xe4\xf9\x2f\x58\x26\xcf\xa1\xe5\x8b\xe0\xf8\x1a\x45\x86\x48\x85\xc3\x67\xfa\x30\x87\xd8\x1d\xc1\x03\xaa\xd5\x9c\xb5\xe1\x4f\xaf\xe7\x28\x97\x09\x77\xa5\x5d\x51\xd2\x43\xbd\x2e\x3d\x5b\x81\x28\x50\xba\x31\x65\x0e\x95\xf7\x37\x47\xce\x21\x95\xa9\x9e\x57\x00\x07\x25\xa3\x49\x0a\xc2\x31\xbd\x94\x99\x13\x65\x21\x14\xd3\x42\xee\xbb\xb1\x4b\x99\x0e\x26\xe9\xeb\x83\x5c\x5e\x13\xb5\xae\xb8\x88\xb1\x44\x45\x9e\x33\xdd\x67\xc5\xad\x1c\x44\xab\x67\x9c\x69\x89\x68\xb7\x4a\x33\x24\xdc\xb5\x0d\x33\x01\x7a\xcd\x1a\xe1\x85\xa1\x3c\xd8\x1e\xc0\x51\x64\xba\xad\x65\x59\x76\x7a\x74\x75\xed\xcd\x45\xe2\xf4\xde\xb4\xf4\x3e\x34\x11\x4e\x85\x1d\x8b\x8e\x29\xe5\x05\xcb\xf0\xc0\x07\x11\xe0\xf3\x5d\xcb\xce\xcc\x69\xc8\x66\xb2\x06\x7a\xb4\x5a\xb4\x73\x35\xd0\x7a\xc8\x88\x36\x91\x03\xa6\x1d\x08\x4e\x30\xb1\xe9\x13\x81\x2c\xb9\xfd\x2d\x23\x60\x24\x15\xfd\xaf\x14\x7b\x48\x43\xb5\xa5\x20\x29\xec\x52\x4f\xae\xf8\xdd\xb4\xe8\x51\xc5\xdd\x7d\xd0\x69\x7b\x3a\x97\xfe\xe7\x17\xdb\x70\x6d\xc1\x07\x83\x3a\x68\x28\xe1\xb0\x6e\xf1\x84\x18\xa9\x44\x7d\x83\xfb\xb9\xdb\xa5\xa9\xab\x29\xa5\xa8\x5a\xa4\x4e\x59\xa9\xc5\x06\xf7\x8b\x0e\x9d\x6e\x6c\x38\xad\x1b\xdc\xd7\x76\xc8\x31\x3b\x6e\xc1\x98\x6b\xb1\x05\x63\xeb\xbd\x9b\xa2\xc7\x4d\xd4\x63\xd6\x9d\x0e\xfe\x12\x2e\xdd\xd3\x60\x9b\x41\x15\xc5\x8b\x98\x90\xa2\xe8\x03\xe3\x11\x39\xe1\xfa\x85\x0d\x68\x27\xd0\xdd\xf8\x03\x51\x6a\x27\x64\xf2\x82\x66\x51\x89\x84\x44\xc9\x06\xa0\x5c\xd6\x3f\x60\xbc\x84\x7e\x20\xe6\x5c\x7f\x53\xa5\x96\x81\x87\x50\x2a\x4a\xae\x5d\xd5\xd9\x77\x66\xad\x77\x53\x7e\xa6\x3b\x22\xdd\x90\xb6\x13\x7c\xbe\x84\x4c\x90\x04\x96\x24\x33\x9d\x5e\x9e\x76\x00\x76\x26\x62\xf7\x4b\xc6\xd4\x3f\xa4\x05\xf5\x2c\x63\xc8\xf5\x3c\x81\x13\xb2\x21\x97\x16\xf9\xeb\xd6\xf1\x9a\x5a\x81\x3e\xb8\x9d\xaa\xcb\x40\xaf\x5e\xc1\xd4\x67\xc1\x25\x60\x55\x54\xfd\x74\xfa\xa6\x8f\x4e\xdb\x5d\x77\x39\xa4\xb7\x9d\x09\x5a\xd5\xea\xd7\xd2\xe8\x6e\x06\x1e\x23\xd2\xd5\xef\x00\xd5\xef\x41\xad\x58\x99\x03\x24\xc9\x36\xe6\x5f\x17\x1d\x1b\x93\x3a\xf5\x3b\xc1\x69\x9e\xdb\x1b\x18\xef\x5e\x75\xf9\xe5\x9c\xfc\xe6\x6b\x38\xf9\xdf\xc0\x92\xba\xcf\x3b\x18\xb4\x3c\x38\xe9\xf7\x52\xc6\xf6\x01\xb7\xeb\x99\xe3\x57\xb1\x26\x3c\x21\x32\x59\x5c\x8f\x17\xdb\xf1\xcb\x2c\x6b\xfc\x8f\xb1\xac\x8b\x7f\x8c\x65\xbd\xf9\xdc\x8f\x04\xc1\xc1\xb8\x55\x11\x5f\xd3\x70\xc3\xb8\x39\x7b\xb7\x84\xae\x19\x0f\xcd\x06\xa6\x4b\x85\xd2\xc6\xc6\x18\x8c\xe3\xb7\x61\x2b\x0b\x50\xaf\xc5\x7a\xc9\x91\x50\xfa\x33\xfa\x56\xa4\xef\x90\x60\x7f\xcb\x3f\xa2\xeb\x40\xb4\x12\xdd\xb0\x18\xd5\xcd\xf7\xaa\xe6\x99\xf5\x11\x43\x70\x2d\x45\x66\x48\x02\xc7\x11\x3c\xae\x99\x02\x2e\x12\xfb\xa7\x1b\x82\x67\x7b\x20\x90\x13\xf7\x12\x61\x55\xfd\x29\x0b\x66\x89\xfd\xcb\x0e\x5b\x16\xc9\xe8\x80\x6f\x34\x93\xe0\x4d\x97\x6f\x78\x68\x15\xec\xec\xc9\xd3\x70\x18\xc9\x14\x1e\x04\xa4\xae\xdc\xc3\x88\xe4\x95\x09\x3f\x65\xff\x15\x00\x00\xff\xff\x5d\xc9\x3c\x1e\xfc\x23\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 9212, mode: os.FileMode(420), modTime: time.Unix(1537147123, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": {apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
