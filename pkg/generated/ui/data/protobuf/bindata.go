// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x73\xdb\x36\x12\x7f\xe7\xa7\xd8\xd1\xcb\x39\x37\xb6\x98\x38\xcd\x5d\x47\xaa\x6f\xaa\xca\x69\xa2\x49\x62\x7b\x42\xd7\x9e\x3c\x69\x20\x70\x45\xe1\x0c\x02\x2c\x00\x4a\x66\x32\xfe\xee\x37\xf8\x43\x8a\xa4\xa8\xa4\xd7\xf4\xa1\x9a\x49\x4c\x02\xbb\x3f\xee\xfe\xf6\x0f\x96\x8c\x63\x98\xcb\xa2\x52\x2c\xdb\x18\x38\x7f\xfe\xe2\x47\x48\x48\xae\x4b\x91\x41\x72\x99\xc0\x9c\xcb\x32\x85\x2b\x62\xd8\x16\x61\x2e\xf3\xa2\x34\x4c\x64\x70\x8b\x24\x07\x52\x9a\x8d\x54\x7a\x1c\xc5\x71\x14\xc7\xf0\x9e\x51\x14\x1a\x53\x28\x45\x8a\x0a\xcc\x06\x61\x56\x10\xba\xc1\x7a\xe7\x14\xee\x50\x69\x26\x05\x9c\x8f\x9f\xc3\x89\x15\x18\x85\xad\xd1\xb3\xa9\x85\xa8\x64\x09\x39\xa9\x40\x48\x03\xa5\x46\x30\x1b\xa6\x61\xcd\x38\x02\x3e\x52\x2c\x0c\x30\x01\x54\xe6\x05\x67\x44\x50\x84\x1d\x33\x1b\xf7\x9c\x80\x62\x2d\x81\x4f\x01\x43\xae\x0c\x61\x02\x08\x50\x59\x54\x20\xd7\x6d\x41\x20\x26\x18\x6d\x7f\x1b\x63\x8a\x49\x1c\xef\x76\xbb\x31\x71\x06\x8f\xa5\xca\x62\xee\x45\x75\xfc\x7e\x31\x7f\x7d\x95\xbc\x3e\x3b\x1f\x3f\x0f\x4a\xbf\x09\x8e\x5a\x83\xc2\xdf\x4b\xa6\x30\x85\x55\x05\xa4\x28\x38\xa3\x64\xc5\x11\x38\xd9\x81\x54\x40\x32\x85\x98\x82\x91\xd6\xe8\x9d\x62\x96\xb7\x53\xd0\x72\x6d\x76\x44\xa1\x85\x49\x99\x36\x8a\xad\x4a\xd3\xe1\xac\x36\x91\xe9\x8e\x80\x14\x40\x04\x8c\x66\x09\x2c\x92\x11\xfc\x32\x4b\x16\xc9\xa9\x05\xb9\x5f\xdc\xbe\xbd\xfe\xed\x16\xee\x67\x1f\x3f\xce\xae\x6e\x17\xaf\x13\xb8\xfe\x08\xf3\xeb\xab\xcb\xc5\xed\xe2\xfa\x2a\x81\xeb\x5f\x61\x76\xf5\x09\xde\x2d\xae\x2e\x4f\x01\x99\xd9\xa0\x02\x7c\x2c\x94\xf5\x40\x2a\x60\x96\x4d\x4c\x1d\x75\x09\x62\xc7\x84\xb5\xf4\x26\xe9\x02\x29\x5b\x33\x0a\x9c\x88\xac\x24\x19\x42\x26\xb7\xa8\x84\xcd\x84\x02\x55\xce\xb4\x8d\xaa\x06\x22\x52\x0b\xc3\x59\xce\x0c\x31\x6e\xe9\xc0\xaf\x71\x64\x45\x3e\x30\xba\x21\xc8\xe1\x0e\x05\x7e\x66\x04\x7e\xca\xb7\xfe\xea\xe7\x2c\x27\x8c\x8f\xa9\xcc\xff\x63\xe5\x66\x9c\x3d\x10\x78\x4f\x94\x46\x01\x3f\x11\x7b\x37\xe6\xee\xae\x2d\x18\xe9\x4a\x18\xf2\x08\x17\x30\x2a\x94\x34\xf2\xe5\x68\x1a\x45\x05\xa1\x0f\xd6\x54\xca\x4b\x6d\x50\x2d\x73\x22\x48\x86\x6a\x49\x0a\x36\x8d\x22\x96\x17\x52\x19\x18\x65\x52\x66\x1c\x63\x52\xb0\x98\x08\x21\x83\xd9\x63\x07\x33\x9a\x36\x62\xee\x9e\x9e\x65\x28\xce\xf4\x8e\x64\x19\xaa\x58\x16\x4e\x74\x50\x2d\x8a\xfc\x2e\x9c\x64\xaa\xa0\xe3\x8c\x18\xdc\x91\xca\x6f\xd3\x65\x86\x62\x19\x50\xc6\x01\x65\x2c\x0b\x14\xa4\x60\xdb\xf3\x7a\xe7\x19\x5c\xc0\x97\x08\x80\x89\xb5\x9c\xb8\x2b\x00\xc3\x0c\xc7\x09\x8c\xe6\xde\x25\xf8\xe0\x5d\x82\xd9\xcd\x62\x34\x75\x12\x5b\x5f\x60\x13\x18\x6d\x9f\x8f\xcf\xc7\xcf\xc3\x32\x95\xc2\x10\x6a\x6a\x1c\xfb\x13\x24\xb7\x50\x75\xad\xcf\xaf\xe6\xb7\x41\xd8\xfe\x4a\xc5\x27\x30\xb2\x85\xa1\x27\x71\x9c\x31\xb3\x29\x57\x96\xeb\x58\x7b\xf9\x33\x2a\xa8\x89\x03\xb5\x67\x81\xda\x33\x52\xb0\x16\x06\xda\x00\x4d\x60\x44\xd2\x9c\x89\x9f\xdb\x8a\x63\x26\x83\xdc\x93\xfd\xe3\xfe\xc3\x47\x83\x4a\x10\xbe\x4c\x25\xd5\xb5\xa1\xdf\x6b\x46\x8a\x9a\x2a\xe6\x28\x9e\xc0\xe8\x83\x54\x08\x64\x25\x4b\x03\xc7\x18\x7c\x8a\x00\x34\xdd\x60\x8e\x7a\x02\x6f\x6f\x6f\x6f\x92\x69\x7f\xc5\x2e\x50\x29\x74\xe9\x56\x46\xa1\xf0\xed\x23\xe2\xff\x6a\x29\x1c\x4c\xa1\x64\x5a\xd2\x63\xfb\x4f\xd3\x28\xd2\xa8\xb6\x8c\x62\x63\x88\xf7\xd7\xd6\x33\xe3\xdc\xea\x6f\x99\xeb\x94\xa4\xce\x5f\xb7\xaf\x0a\x0a\x73\x85\xc4\x60\xad\x77\xd2\xb9\xfd\xa0\xb3\x67\xa0\xd0\x94\x4a\xe8\xde\xd6\x47\x2c\x78\xf5\xac\x95\x00\x4d\x86\xba\x0a\x18\x93\x82\x8d\x2d\xd1\x75\xde\xed\x7f\x45\x69\x60\x02\x23\x57\x23\xdb\x17\x35\xdb\xa3\x8e\xcc\x4a\xa6\x95\x15\xfa\xe7\x7e\xf9\x29\x44\xb8\xe3\x98\x42\xa3\x18\x6e\x7d\x9b\xd1\x86\x98\x52\xdb\xd6\xdc\x78\x69\x5b\x08\x30\xa3\xe1\xa1\x5c\x21\x95\x62\xcd\x32\xd7\x85\xa8\x14\x02\xa9\x61\x5b\x66\xaa\x86\x89\x37\x68\x1a\x1a\xf6\xd7\x5d\x0e\xf6\xeb\x7f\x9e\x80\x0c\xbf\x4e\xc0\xa0\xa7\x29\x72\x34\x38\x10\xbf\x4b\xb7\xd1\x18\xde\xb9\xed\xda\xde\xd9\xfa\xf3\xe6\x07\x4b\xfe\x6f\x0f\x9a\x58\x11\xe0\x4c\x1b\x1b\xa7\xa0\xa8\x07\x42\xf0\xde\x8a\x9c\x74\xef\x8f\x85\xc2\xee\xfd\xd5\xe1\x88\xad\x8d\xdf\xf6\xa8\x54\xa2\x6e\x92\xae\xb5\xaa\xdc\x95\x66\x68\x0b\xa4\x60\x60\x2b\xb3\x15\xae\x37\x68\xc2\xd4\xb2\x68\x89\x9f\xec\x97\x0f\x9c\x0c\xeb\x7f\x99\x83\xc1\xdc\x01\xdf\x9e\xa2\x28\x47\xad\xed\x29\xd7\x6f\x03\xfb\x86\x72\x45\x72\xac\xc7\x9f\xba\xca\x8c\x84\x15\xee\xbb\x0c\xa6\x4e\xd8\x0e\x1b\x22\x73\x27\x03\x5c\xc0\x8b\x69\x8d\x70\xbb\x09\xb2\xf6\x28\xaf\x67\x01\xc7\x83\x93\xe8\x3c\xfa\x26\xc8\x25\x05\xd2\xbd\xd2\x05\x9c\x4f\x8f\x5a\xeb\x88\x6a\x35\xc0\x0d\xba\x19\x45\x2a\x37\x06\xb6\xcd\xde\x11\xdd\x36\xda\xce\x5d\x6e\x42\xb4\x83\x18\x6a\x13\xf9\x4e\x24\x39\xc8\x87\x03\x07\x52\x34\x84\x71\xdd\x67\x22\xa8\x82\x42\x5d\x48\xa1\xd1\x7b\xe4\x37\x17\x06\xf3\x46\xb0\xef\x42\xa7\xe1\xfc\x11\xb6\xb9\x94\x0f\x76\xd0\x2b\x86\xb9\x1e\x84\xee\x51\xb3\xd0\x1d\x5c\x26\x7c\x1b\xad\xb4\xc1\xfc\xd0\xf9\xb6\x2b\x97\xce\xfb\xaf\x3a\xd4\x6f\x44\xed\x88\x10\x63\xc7\xd1\xd6\xb3\xff\xa1\xbd\xe9\x46\xda\x33\xd6\x28\x59\x7d\xd3\xab\xc3\x6e\xb6\x7f\xc2\x5c\x96\x3c\xed\xf8\xb6\xc2\x1a\x38\x24\xe7\x50\x5c\x93\xe6\x00\xb1\xaa\xed\x2c\x08\x86\x84\x13\xe6\x78\xec\x42\x97\x82\x2f\xc7\xb7\xbf\x2b\x06\x41\xe9\xfd\x60\xff\xc4\xc2\x56\x41\x3a\x94\x6e\x87\x36\xb7\x85\xf6\xc6\x5c\xf6\x72\xad\xed\x3c\x4b\x3b\x36\x0c\x64\xe6\x40\xcc\xce\xa7\x43\x51\xd7\x1d\xa2\x07\xb4\x1b\xa2\x5f\x0e\x19\xdd\xca\xbe\xbf\xb7\xe9\x03\xfa\xad\x41\xc4\xc8\x7a\x0e\xb1\x97\x47\xe0\x5a\xf2\x17\xf0\xc3\xf1\xae\xd7\x69\x94\x83\xa5\xd6\x74\xcf\x33\xa0\xa5\x52\x28\x0c\x0f\xfd\x8e\x69\x20\x3b\xf7\xf6\x96\x13\xa2\xbf\xd9\xbb\xeb\xf3\x4e\xae\xe1\x5d\xb9\x42\x25\xd0\x60\x47\xeb\xe1\x47\xbd\xac\x85\x1c\x8f\x6e\x53\x0a\x94\xeb\xc6\x8a\x65\xfb\xb4\xdc\x9f\x57\xe1\x11\xb3\xfb\x64\xe0\x64\x38\x38\x1d\x66\xf7\x89\xf3\xd7\x5a\xdf\x10\xfe\x14\xfd\x81\xd6\xcf\x34\xbc\x9d\xed\xeb\x6b\xc3\xb2\xcd\x92\x6c\x09\xe3\x64\xc5\x38\x33\x95\x27\xbb\x65\xd1\x9a\xac\x14\xa3\xa1\xf7\x96\xba\x77\xc4\xa1\xd9\x49\xf5\xb0\x0c\x42\x17\xf0\x6a\x1a\x1d\x8d\x54\x6d\xf4\x97\xa8\xe7\xf0\x25\x31\x04\xe6\x28\xea\x0c\x98\xdd\x27\x76\xc9\xaf\x40\x4a\x0c\x59\x52\x7f\xdd\x8e\xc8\x5c\x61\x8a\xc2\x30\xc2\xb5\xb3\xae\x64\xdd\xd6\x57\x43\xb5\xe5\x68\xeb\xba\x9d\xe8\xbf\x7c\xba\x06\x66\x30\xd7\xb5\xd2\x8d\x0a\xc9\x57\x2a\x4c\x6d\xc1\xd9\xc3\x51\xcb\x52\x51\xec\xa6\xf8\x42\x68\xe3\xbe\xa1\x64\x4a\x96\x45\xaf\x21\xcd\xee\x93\x7a\xff\x8d\xdd\x06\x16\xee\x96\x5e\xda\x93\xbd\x8f\x1a\xa3\x9b\x03\x32\x6a\x2a\xbb\xa4\x74\x12\xc7\x2b\x2a\xcc\xdc\x58\x54\xea\x33\x24\xda\x9c\xbd\x38\x05\x34\x74\xfc\xac\x91\x0c\x31\x0b\x72\x0d\x95\x1d\x90\x4e\x2a\x7c\x96\x02\x75\x0b\x70\x75\x0a\xf5\xf5\x39\x75\xd7\x3b\xb4\xd7\x69\xff\x49\x0d\x01\xe1\x91\x6d\xd4\xa5\x47\x6d\xd8\xdf\x67\xad\x4d\x07\xda\x0d\x6a\x19\x3e\x9e\x50\x9b\x47\x16\xa9\x1f\xdf\x16\x3b\xed\x38\x1f\xd4\x55\x82\x54\xa1\x79\x87\xd5\x22\x75\x80\xb3\x9b\x05\xcc\x28\x45\xad\xfb\xf4\x68\x27\xb9\x7c\xc0\x6a\xd9\xee\x9e\x07\x58\x5e\xfb\x1d\x56\x0d\x1e\xf9\x1a\x9e\xdf\xb4\xb0\x43\xae\xff\x2a\x15\xec\x36\x28\x40\xcb\xdc\x7d\xad\x13\x99\x06\x62\xdf\xb2\xb9\x42\x92\x56\x9e\x80\x50\x7b\x2d\x9f\x07\xd2\xf4\xc0\xf5\xbb\x9b\x39\xb0\xf4\x14\x56\x9c\x88\x07\x67\xac\xfd\x37\xf2\x88\xb6\x39\xb9\xfb\x4a\x96\xa3\x53\x58\x33\xce\x31\x05\xb6\x76\x5f\x10\xad\x01\xb6\x32\xee\x6e\xe6\x7d\xaf\xb6\x05\x1d\xa2\x27\x41\x5a\x2a\x9b\x3a\x2e\xbf\x07\xa8\x70\xbb\x3e\xfb\xbd\xfe\x01\x15\xbd\x82\x82\x14\xd7\x4c\xd8\x77\x27\x53\x15\xe8\x5e\x6b\x45\x99\xaf\x6c\x73\x5b\x37\xe5\xa4\xfb\xbc\x74\xab\xae\x43\x49\x83\xef\xf0\x4e\xf2\x57\x63\x4e\x54\x86\x47\x8a\xc5\x09\xf5\xbd\xfc\xc0\x04\xcb\xcb\x7c\xc8\x10\x38\x49\x71\x4d\x4a\x6e\x5c\xfa\x7e\x46\x25\xf7\x90\x4c\x98\x97\xe7\x90\x33\xb1\xfc\xbd\x24\xc2\xf8\x66\x7b\xde\x45\x26\x8f\xdf\x81\x4c\x1e\xdb\xc8\x2f\x5b\x6f\x37\x71\x6c\x87\xb1\xf6\x01\x66\x13\x36\xf1\x6f\x68\xad\x71\x6d\xff\x2a\xe6\x27\xb9\x38\x06\x3f\xb6\xd9\x14\xa9\xb5\xeb\xf9\xf0\x50\xaf\x3f\xe2\xad\x41\x16\xa8\xfc\x51\x67\xdf\x39\xae\xdf\x1d\x99\xae\x6b\xa8\x81\x37\xc4\x83\x7c\x36\x24\x03\xe9\xa7\xc5\x8c\xd9\x17\x8e\x42\x6a\x66\xa4\xaa\xfa\xb1\xcb\x98\x69\x9d\xc6\x87\x75\xbc\x21\x7a\x53\xcf\x33\x16\x89\xca\x3c\x67\x66\x08\xc5\xef\x1c\x44\x6b\xe0\x98\x35\x0a\xd1\xb9\x4a\x39\x12\xe1\x6b\xda\x9e\x4c\x83\xb0\x56\x78\x69\xc7\x26\xdc\x87\x2b\x40\x5f\xba\xda\x5c\xfb\x53\xad\xaf\xeb\x16\x97\xa9\xd7\xfb\xa1\xa3\x77\xb7\x8f\x70\xe6\xda\x67\xea\xa7\xad\xbc\x60\x1c\x0f\x6c\x90\x2d\x7e\x5e\x75\x70\xe6\x5e\x43\xed\x4f\xfc\x96\x1e\xad\x37\x2f\xe0\x5f\x1d\xad\x1b\x4e\x8c\x8d\x1c\x30\xe3\x49\xf0\x82\xbe\xe5\xc6\xa0\x4a\xe1\x3e\x75\xb7\xa6\x9a\x80\x58\xd4\x8a\x17\xf0\xef\x7e\x43\xa8\x5d\x6a\x25\x85\xdb\x1a\xc8\x95\xe0\x4d\x67\xc4\xaa\xe7\xff\xe8\x7f\x01\x00\x00\xff\xff\xa4\x56\xb0\x89\xa0\x19\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 6560, mode: os.FileMode(420), modTime: time.Unix(1534879202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
