// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x3b\x6b\x73\xdb\x38\x92\xdf\xf5\x2b\xba\xf4\xe5\xe4\xab\x58\x4a\x9c\x64\x6f\xca\xde\xdc\xac\x56\x99\x4d\x54\x89\x1d\x57\xe4\x49\x6a\x3e\xa9\x20\xb2\x45\x61\x0d\x02\x1c\x00\x94\xa2\x99\xca\x7f\xbf\xc2\x83\x24\xc0\x87\x9d\x87\x73\x3b\xae\xda\x8d\x08\x74\x37\x1a\x8d\x7e\x02\x3d\xb3\x19\x2c\x44\x71\x94\x34\xdb\x69\x38\x7b\xfc\xe4\x27\x58\x91\x5c\x95\x3c\x83\xd5\xcb\x15\x2c\x98\x28\x53\xb8\x22\x9a\xee\x11\x16\x22\x2f\x4a\x4d\x79\x06\x37\x48\x72\x20\xa5\xde\x09\xa9\xa6\xa3\xd9\x6c\x34\x9b\xc1\x5b\x9a\x20\x57\x98\x42\xc9\x53\x94\xa0\x77\x08\xf3\x82\x24\x3b\xac\x66\x1e\xc1\x07\x94\x8a\x0a\x0e\x67\xd3\xc7\x30\x31\x00\x63\x3f\x35\x3e\xb9\x30\x24\x8e\xa2\x84\x9c\x1c\x81\x0b\x0d\xa5\x42\xd0\x3b\xaa\x60\x4b\x19\x02\x7e\x4a\xb0\xd0\x40\x39\x24\x22\x2f\x18\x25\x3c\x41\x38\x50\xbd\xb3\xeb\x78\x2a\x86\x13\xf8\xcd\xd3\x10\x1b\x4d\x28\x07\x02\x89\x28\x8e\x20\xb6\x21\x20\x10\xed\x99\x36\x7f\x3b\xad\x8b\xf3\xd9\xec\x70\x38\x4c\x89\x65\x78\x2a\x64\x36\x63\x0e\x54\xcd\xde\x2e\x17\xbf\x5c\xad\x7e\x39\x3d\x9b\x3e\xf6\x48\xbf\x72\x86\x4a\x81\xc4\xdf\x4b\x2a\x31\x85\xcd\x11\x48\x51\x30\x9a\x90\x0d\x43\x60\xe4\x00\x42\x02\xc9\x24\x62\x0a\x5a\x18\xa6\x0f\x92\x1a\xb9\x3d\x02\x25\xb6\xfa\x40\x24\x1a\x32\x29\x55\x5a\xd2\x4d\xa9\x23\x99\x55\x2c\x52\x15\x01\x08\x0e\x84\xc3\x78\xbe\x82\xe5\x6a\x0c\xff\x9c\xaf\x96\xab\x47\x86\xc8\xc7\xe5\xcd\xeb\x77\xbf\xde\xc0\xc7\xf9\xfb\xf7\xf3\xab\x9b\xe5\x2f\x2b\x78\xf7\x1e\x16\xef\xae\x5e\x2e\x6f\x96\xef\xae\x56\xf0\xee\x5f\x30\xbf\xfa\x0d\xde\x2c\xaf\x5e\x3e\x02\xa4\x7a\x87\x12\xf0\x53\x21\xcd\x0e\x84\x04\x6a\xa4\x89\xa9\x15\xdd\x0a\x31\x62\x61\x2b\x1c\x4b\xaa\xc0\x84\x6e\x69\x02\x8c\xf0\xac\x24\x19\x42\x26\xf6\x28\xb9\xd1\x84\x02\x65\x4e\x95\x39\x55\x05\x84\xa7\x86\x0c\xa3\x39\xd5\x44\xdb\xa1\xce\xbe\xa6\x23\x03\x72\x49\x93\x1d\x41\x06\x1f\x90\xe3\x1f\x94\xc0\xdf\xf3\xbd\xfb\xf5\x8f\x2c\x27\x94\x4d\x13\x91\xff\xaf\x81\x9b\x33\x7a\x4b\xe0\x2d\x91\x0a\x39\xfc\x9d\x98\xaf\x29\xb3\x5f\x21\xe0\x48\x1d\xb9\x26\x9f\xe0\x05\x8c\x0b\x29\xb4\x78\x3a\xbe\x18\x8d\x0a\x92\xdc\x1a\x56\x13\x56\x2a\x8d\x72\x9d\x13\x4e\x32\x94\x6b\x52\xd0\x8b\xd1\x88\xe6\x85\x90\x1a\xc6\x99\x10\x19\xc3\x19\x29\xe8\x8c\x70\x2e\x3c\xdb\x53\x4b\x66\x7c\x51\x83\xd9\xef\xe4\x34\x43\x7e\xaa\x0e\x24\xcb\x50\xce\x44\x61\x41\x7b\xd1\x46\x23\x37\x0b\x93\x4c\x16\xc9\x34\x23\x1a\x0f\xe4\xe8\xa6\x93\x75\x86\x7c\xed\xa9\x4c\x3d\x95\xa9\x28\x90\x93\x82\xee\xcf\xaa\x99\x13\x78\x01\x7f\x8e\x00\x28\xdf\x8a\x73\xfb\x0b\x40\x53\xcd\xf0\x1c\xc6\x0b\xb7\x25\xb8\x74\x5b\x82\xf9\xf5\x72\x7c\x61\x21\xf6\xce\xc0\xce\x61\xbc\x7f\x3c\x3d\x9b\x3e\xf6\xc3\x89\xe0\x9a\x24\xba\xa2\x63\xfe\x38\xc9\x0d\xa9\xca\xd6\x17\x57\x8b\x1b\x0f\x6c\xfe\x4a\xc9\xce\x61\x6c\x0c\x43\x9d\xcf\x66\x19\xd5\xbb\x72\x63\x64\x3d\x53\x0e\xfe\x34\xe1\x89\x9e\x79\xd1\x9e\x7a\xd1\x9e\x92\x82\x06\x34\xd0\x1c\xd0\x39\x8c\x49\x9a\x53\xfe\x8f\x10\x71\x4a\x85\x87\xfb\x6c\xfe\xb1\xff\x87\x9f\x34\x4a\x4e\xd8\x3a\x15\x89\xaa\x18\xfd\x5e\x36\x52\x54\x89\xa4\x56\xc4\xe7\x30\xbe\x14\x12\x81\x6c\x44\xa9\x61\x48\x82\x9f\x47\x00\x2a\xd9\x61\x8e\xea\x1c\x5e\xdf\xdc\x5c\xaf\x2e\xda\x23\x66\x20\x11\x5c\x95\x76\x64\xec\x0d\xdf\x2c\x31\xfb\xb7\x12\xdc\x92\x29\xa4\x48\xcb\x64\x68\xfe\xf3\xc5\x68\xa4\x50\xee\x69\x82\x35\x23\x6e\xbf\xc6\x9e\x29\x63\x06\x7f\x4f\xad\xa7\x24\x95\xfe\xda\x79\x59\x24\xb0\x90\x48\x34\x56\x78\x93\xe8\xf3\x52\x65\x27\x20\x51\x97\x92\xab\xd6\xd4\x7b\x2c\xd8\xf1\x24\x50\x80\x5a\x43\xad\x05\x4c\x49\x41\xa7\x46\xd0\x95\xde\x35\x7f\x45\xa9\xe1\x1c\xc6\xd6\x46\xf6\x4f\x2a\x69\x8f\x23\x98\x8d\x48\x8f\x06\xe8\xbf\x9b\xe1\xcf\xfe\x84\xa3\x8d\x49\xd4\x92\xe2\xde\xb9\x19\xa5\x89\x2e\x95\x71\xcd\xf5\x2e\x8d\x0b\x01\xaa\x15\xdc\x96\x1b\x4c\x04\xdf\xd2\xcc\x7a\xa1\x44\x70\x8e\x89\xa6\x7b\xaa\x8f\xb5\x24\x5e\xa1\xae\xc5\xd0\xfc\x8e\x65\xd0\x8c\x7f\xbb\x00\x32\xbc\x5b\x00\xbd\x3b\x4d\x91\xa1\xc6\x9e\xf3\x7b\x69\x27\x6a\xc6\xa3\xcf\x98\xf7\x68\xea\xdb\xd9\xf7\x9c\x7c\xf5\x0e\x48\xfa\xef\x52\x69\x20\x77\x6a\xe3\xdc\x02\x79\x1e\xaf\x44\x8a\x0a\x26\xd1\x58\xbc\xa5\x68\xea\x3b\x54\x52\xa8\x1f\xa0\x93\x04\x18\x55\xda\xe8\xa3\xa7\xa7\x7a\x54\xed\xad\x01\x99\xc4\xdf\x43\x2a\x67\xe6\x1e\x5a\xed\x66\x86\xc7\x7b\x76\x44\xb9\xd2\x84\x31\x98\x08\x09\x12\xfd\xd7\x09\x68\xca\x58\x70\x74\xd7\xd5\xb1\xde\xd8\x71\x98\xb4\x06\xe2\x5d\xb5\x26\x1f\xee\xec\x1c\x57\xdf\x76\x74\x03\x1b\xdd\x21\xcb\x21\xd9\x11\xa9\x2b\xe8\x1b\x93\x48\x1e\x0c\xca\x06\x4d\x54\xd0\xb2\x4c\x6c\x4a\x4b\xad\xf3\x31\xa0\xb0\x23\x0a\x08\x93\x48\xd2\x23\x6c\x10\x39\xa4\x58\x30\x71\xc4\xb4\xc9\x33\x15\xc9\xd1\x46\xce\x5a\x88\x4b\xb7\xe6\x6b\x64\xf9\xc2\x52\x99\xb4\x47\x62\x31\xb6\x67\x1f\xcc\x2d\x9b\x3d\x7f\x9b\x10\xbd\x7f\xa8\x77\xdb\x92\x5e\xe3\xb3\x82\x4d\xb6\x06\xfa\xfc\xd6\x03\x6c\xb1\xeb\xb9\xe2\x5d\x0e\x99\x73\x29\x79\x95\x09\xd9\xfc\x49\xe6\x36\xfe\xfa\xd8\x4f\x0a\x0a\x26\xfc\x06\xa6\xf0\x0a\xb5\x2f\x4d\x96\x01\xf8\xa4\x19\xee\x58\xb8\x1f\x7f\x30\xeb\xf6\xec\x7e\xd9\xde\xca\x22\x93\x24\x45\xbf\x98\xb2\x11\x92\x40\x46\xf7\xc8\x3b\x0e\xfa\x15\xea\x5f\x1d\xb8\x77\x4a\xed\x1d\x0e\xce\x76\xf6\x3c\x08\xf9\xe0\x3e\xce\x6f\xf0\xbe\x00\xa5\x35\xe6\x85\x36\x25\x56\x25\x91\x6e\x80\x8a\x99\x86\x49\xfc\x1d\xef\x31\x9e\x7b\xf0\xf0\xd4\xdd\xd6\xd7\x98\x69\x59\xa4\xc4\x24\x14\x07\x05\x89\xc4\x14\xb9\xa6\x84\x29\x53\x26\xa7\x5e\x01\xba\x5b\x37\x18\xf3\x8f\xab\x45\x00\x3f\xe9\x1b\x6d\x8b\xa1\x0b\xf1\x80\xc2\x68\x88\xce\xc8\x41\x7d\x9f\x30\xfe\x28\x25\x7e\xa5\x38\x0c\x4a\x9f\x40\x5a\xe3\xbd\x22\x69\xc1\xfc\x20\xa1\x98\x55\xbe\x5c\x2c\x9f\x47\xa3\x1c\x95\x32\xa5\x6e\xbb\x16\x68\xaa\x8a\x2b\x13\xb8\xfc\x1d\x48\x95\x6a\x6b\x61\x82\x61\x9d\xdc\x61\x6a\x81\x95\x96\xa6\xac\x37\x41\x0e\x5e\xc0\x93\x8b\x26\x82\x7a\x58\x53\xcf\x57\x17\x02\xd6\xfa\x2d\x44\xb4\xf4\xb5\x87\x5b\x15\x98\x34\x48\x2f\xe0\xec\x62\x90\x5b\x2b\xca\xa0\x0a\xda\xa1\xbd\xa8\x10\xd2\xde\x05\x85\x6c\x1f\x88\x0a\x99\x86\xcd\xd1\x5d\x13\x49\xfc\xbd\x44\xe5\x62\xd6\x46\x08\x06\xe2\xb6\xb3\x81\x14\x35\xa1\x4c\xb5\x25\xe1\x51\x41\xa2\x2a\x04\x57\x2e\xba\x57\x6e\x4e\x63\x5e\x03\xb6\xb7\x10\x55\x1d\x5f\x22\x6d\x26\xc4\x2d\xa6\x50\x16\x77\xca\x3a\xc4\xaf\xc4\xa7\x60\x42\x0e\x6a\x46\x6e\xd5\x6c\x9f\x1f\x88\xc4\x19\xea\xe4\x24\x24\x13\x08\xfa\xd9\x00\x97\x2d\x29\x2f\x55\xc4\x22\xe5\x2e\xc9\x39\x2a\x8d\x79\x57\x8e\xa1\x54\x5e\x5a\x41\xde\x29\x9b\x76\x61\x13\x1e\x2e\xd1\x40\xa3\xb5\xff\x4b\x39\x29\x68\xe1\xb2\x33\x71\xfc\xff\x14\x50\xb7\xd0\x6a\x98\x5d\x88\x92\xa5\x91\x98\xaa\x0c\xd2\x24\x4b\x83\xda\xb6\xaa\x6b\x5b\x83\x1a\xea\xa6\x67\xc6\x17\xbf\xc3\x1a\xe5\x0b\x8b\x86\x93\xf9\xc7\x15\x04\xce\xc7\x0e\xb7\x9c\xbb\x09\x0e\x21\x17\xd6\x61\x75\x91\xda\x2e\xd0\xb9\x51\xcb\xca\x8f\xd6\xc0\xba\x24\xfa\x56\x2d\xf4\x48\x6f\x7b\x2b\x35\x2c\x8c\x4b\x49\xfb\x6c\xb7\x2b\xea\x10\xa8\x61\xe6\x65\xcb\x70\xc3\xfd\xd1\x74\x50\x0b\x7b\xa0\xbd\xd6\x36\x42\x0d\xf5\x5e\x45\xfa\xd1\x83\x5d\xeb\xc7\xd3\x3e\xa6\x03\xfb\xfb\x6b\xb3\xde\x83\x1f\x5c\xed\x68\x51\xdd\xec\x98\x9f\x03\xe4\x02\xf8\xb6\x5e\x0d\x47\x9d\x5e\x67\x53\xeb\xe7\x29\x24\xa5\x94\xc8\x35\xf3\xc1\x83\x3a\xdb\x11\x12\x72\x42\xd4\xbd\x81\xb0\x2a\x2e\xc4\x16\xde\x94\x1b\x94\x1c\x35\x46\x58\xb7\x3f\xa9\x75\x05\x64\xe5\x68\x27\x05\x47\xb1\xad\xb9\x58\x87\xa5\x49\x93\x1e\xf8\x25\x8c\xb5\x77\xc3\x6c\x27\xd4\xce\x3f\xae\xec\x7e\x9d\xe5\x3f\xbd\x18\x80\x7a\xe3\xa1\xbc\xa1\x3f\x1b\x80\xfb\x70\xf9\x91\x48\xb4\xa0\xce\xc4\xe1\x05\xfc\x4f\x95\x68\x7c\x41\x6c\xa6\x0a\x5e\xcf\x1b\x9b\xdd\xd1\x6c\xb7\x26\x7b\x42\x19\xd9\x50\x46\xf5\x11\x5e\xc0\xf3\x48\x90\x5b\xb2\x91\x34\xf1\xc1\xd1\xe4\x6e\x91\xe8\x51\x1f\x84\xbc\x5d\x7b\xa0\x17\xf0\xb7\x8b\xd1\xe0\xe9\x57\x82\xf8\x73\xd4\x12\xe2\x4b\xa2\x09\x2c\x90\x57\x5a\x35\xff\xb8\x32\x43\x6e\x04\x52\xa2\xc9\x3a\x71\xbf\xc3\x53\x0e\xdd\xa3\xe1\xae\xa4\x71\x14\xe8\xf3\xbe\x61\x1e\x1a\x1a\xcf\x3f\x7f\x7b\x07\x54\x63\x5e\xbb\xec\x6b\xe9\x15\xba\x94\x98\x1a\x23\x36\xd9\x8b\x12\xa5\x4c\x30\x36\x1b\x7b\x5b\xc0\x13\x84\x4c\x8a\xb2\x68\x39\xb9\xf9\xc7\x55\x35\xff\xca\x4c\xbb\xdb\x10\x9e\xe0\xda\x41\xbb\x73\x6e\x4e\x8d\x26\xbb\x8e\x30\x2a\x51\xc6\x42\x89\x94\xd1\x21\x4a\xcc\x6c\x66\x5b\xaa\x53\x24\x4a\x9f\x3e\x79\x04\xa8\x93\xe9\x49\x0d\xe9\xcf\xcc\xc3\xd5\xa2\x8c\x88\x44\xaa\xf0\x87\xe0\xa8\x02\x82\x9b\x47\x50\xfd\x3e\x4b\xec\xef\x03\x9a\xdf\x69\x7b\xa5\x5a\x00\x7e\xc9\x90\xea\xda\x51\xad\xa5\xdf\x68\xed\xbf\x84\x84\xc3\x0e\x39\x28\x91\xdb\x87\x45\x9e\x29\x30\x1a\x5e\x5d\xf9\x24\x56\x9b\xd2\xb6\x58\x7a\xce\xaa\x63\xab\x1f\xae\x17\x40\xd3\x47\xb0\x61\x84\xdf\xda\xea\xc3\xfc\x6f\xec\x28\x1a\xab\xb7\xdf\x47\x51\x8e\x1f\xc1\x96\x32\x86\x29\xd0\xad\x7d\xec\x34\x0c\x18\xf5\xf8\x70\xbd\x68\x4b\x72\x5f\x24\xeb\xd0\x6b\x57\x89\x05\x26\xa5\x34\xf2\xb3\x87\xdc\x46\x52\x7e\xd6\xa9\x80\xc3\x3f\xbb\x68\xf3\xbb\x9c\x5f\x82\x14\xac\x79\xe0\xab\xec\x77\x42\x24\x3f\xa9\x0c\x4a\x29\x91\x50\xeb\x7a\xd2\xb4\xbd\x0e\x25\xf9\xda\x50\x58\x13\xc9\x1b\x8d\x6d\xa4\xdd\x52\x5c\x48\x71\x4b\xb9\x29\xcf\xf5\xb1\x40\x7b\xc9\xcf\xcb\x7c\x63\x9c\xc8\xb6\x56\x5b\xd5\x16\x7d\xac\xdd\x91\xd4\x6b\xfa\x96\xde\x24\x7f\x3e\x65\x44\x66\x38\xa0\x94\x16\xa8\x2d\xc8\x4b\xca\x69\x5e\xe6\x7d\x8c\xc0\x24\xc5\x2d\x29\x99\xb6\xb6\xff\x07\x4a\xd1\x90\xa4\x5c\x3f\x3d\x83\x9c\xf2\xf5\xef\x25\xe1\xda\x39\xb5\x58\xc4\x97\xe4\xd3\x77\x50\x26\x9f\x42\xca\x4f\x83\x32\x6f\x36\x33\x89\x54\x18\x7c\xe6\xd7\x4b\x58\xb9\xab\xac\x20\xd5\x6a\xee\xac\xe0\x4f\x8f\xe7\x52\x2e\x73\xdc\x15\x76\x95\x92\x76\xf1\xda\xe9\xd9\x16\x44\x81\xd2\x85\x29\x53\x7c\xbd\x7b\x33\x50\x1b\x54\xa4\x7a\xae\xd2\x3a\x26\xa3\x49\x06\xc2\x65\x7a\x19\x35\x95\x57\x21\x14\xd5\x42\x1e\xdb\x67\x97\x51\x1d\x44\xd2\x27\x1d\x5d\xde\x11\xb5\xab\x72\x11\x43\x29\x11\x79\x4e\x75\x1f\x15\x37\xd3\x39\xad\x9e\x70\xa6\x25\xa2\xdd\x6a\xc2\x90\x70\xe7\x36\x4c\x04\xe8\x25\x6b\x80\xd7\x26\xe5\xc1\x38\x00\xcf\x66\xc6\xdb\xda\x2c\xcb\x46\x8f\x36\xae\x1d\x5c\xa7\x0e\xef\x59\x84\xf7\xa1\x39\xe1\x4c\xb8\x2b\x0d\x9b\x29\xe5\x05\x65\xd8\xe1\x41\x04\xf2\x79\x1e\xd1\x59\x38\x0c\xd9\x44\xd6\x00\x2f\xa9\x26\x6d\x5c\x0d\xb0\xae\x19\xd1\xe6\xe4\x80\x6a\x27\x04\x07\xe8\xae\x55\x66\x20\x4b\x6e\x1f\xfe\x83\x8c\xa4\x4a\xff\x2b\xc4\x9e\xa4\xa1\xda\x52\xa0\x14\x76\xaa\x47\x57\xfc\x6e\xa2\xf4\xa8\xca\xdd\xfd\xa1\x27\x71\x74\x2e\x7d\xaf\x82\x75\xb8\xd6\xe0\x83\x40\x1d\x38\x94\x30\x58\x47\x79\xc2\x0a\x13\x89\xfa\x0d\x1e\x97\x6e\x97\xc6\xae\xe6\x49\x82\x2a\x4a\xea\x94\x85\x5a\xdf\xe2\x71\xdd\x4a\xa7\x1b\x1a\x0e\xeb\x0d\x1e\x6b\x3a\x64\x88\x8e\x9b\x30\xe4\xa2\x6c\xc1\xd0\x7a\xef\xa2\xe8\x30\x89\x3a\xcc\xba\xea\xe0\xbb\xe4\xd2\xae\x06\xe3\x0c\xaa\x28\xee\x94\x09\x29\x8a\x3e\x61\xdc\x20\x27\x5c\xdf\xb1\x01\xed\x00\xda\x1b\xbf\x26\x4a\x1d\x84\x4c\xef\xc0\x2c\x2a\x90\x30\x51\xb2\x07\x50\x6e\xea\xd7\xfe\xbb\xa4\x1f\x80\x39\xd6\x9f\x55\xaa\x65\xc4\x43\x92\x44\x94\x5c\x3b\xab\xb3\x77\x4b\xd1\x1d\x8e\x8f\xe9\x2e\x91\x6e\x92\xb6\x09\x7e\x3a\x07\x26\x48\x0a\x1b\xc2\x8c\xa7\x97\x27\x2d\x01\x3b\x12\x2b\xf7\xec\x3f\xf7\x8b\x44\xa2\x5e\x30\x8a\x5c\x2f\x53\x98\x90\x5b\x72\x6e\x25\xff\x32\x2a\xaf\x13\x0b\xd0\x27\x6e\x87\xea\x34\xd0\xa3\x57\x62\xea\xa3\xe0\x14\xb0\x32\xaa\xfe\x74\xfa\x4d\x5f\x3a\x6d\x77\xdd\xce\x21\x3d\x6d\x26\x92\xca\x56\xbf\x36\x8d\x6e\x6b\xe0\x50\x22\x5d\x5d\xe2\x57\xcd\x13\xd1\x59\x99\x02\x92\xb0\x5b\xf3\xaf\x3b\x1d\x7b\x26\xb5\xea\xb7\x0e\xa7\x59\xb7\xf7\x60\x3c\x7b\xd5\xe7\x97\xe7\xe4\x6f\xbe\x26\x27\x7f\x80\x2c\xa9\xbd\x5e\x27\xd0\xf2\xa0\xd2\xef\x4d\x19\xe3\x02\xb7\xcd\x99\xcb\xaf\x56\x9a\xf0\x94\xc8\x74\xfd\xf2\x6c\xbd\x3f\xbb\x3b\xcb\x3a\xfb\x61\x59\xd6\xd3\x1f\x96\x65\x3d\xbb\xef\x32\x3d\x28\x8c\x6b\x8b\xb8\x24\xc9\x8e\x9a\x6a\xe3\x60\x8b\x1b\x13\x26\x25\x55\xd8\x51\xef\x5a\x39\x1c\x11\x8f\x66\x69\x25\x82\x6b\x29\xd8\xba\x60\x84\xe3\x9a\xdb\xf6\x89\x50\xd7\x1e\x60\x09\x53\x41\xa3\xac\x69\x3f\x0b\xfc\x06\x55\xa0\x76\xf6\x7a\x73\x63\x94\x6e\x4f\x58\x89\xc0\xe8\x2d\x02\x2d\xce\x6d\xdf\x9b\xde\x11\x5d\x3f\x9b\x13\xd8\x53\xa9\x4b\xc2\x60\x79\x3d\x33\xd3\x15\x25\xe3\xb4\x8d\xb3\x24\x89\xb5\xbe\xaa\x93\x0b\x92\x52\x69\x91\xa3\x54\xbe\xbe\xb7\xdd\x91\x2e\x91\xc9\x4b\x4e\x13\xe3\x48\x87\xaf\x7d\x48\x41\xd7\xc8\xd3\x42\x50\x6b\x80\xcf\xa3\x8b\x9f\xe6\xd6\xe5\x2d\xd9\x20\x8b\xdd\x54\xa5\xf2\x04\x98\x99\xbc\xff\x36\xc7\x6e\xbc\x1f\xc1\xcd\xb5\xd2\x8f\xe8\x5e\xc6\xbf\x36\xd5\x3d\x92\x46\xd2\x35\x9f\xdd\xf3\x88\x38\x2d\x95\x91\x54\xee\xa2\xf4\x6a\xf5\xba\x27\x5c\xd5\x20\x6d\xae\x77\x42\xe9\x3b\xf0\xec\x74\x3b\xbc\xda\x43\xed\xc1\x71\x46\x61\x67\xdb\x51\xf5\xf6\x27\x55\xd7\x0c\x75\xb9\xe8\xd4\x16\xac\xda\x4e\x9d\x26\x99\x6d\x03\x55\x20\x38\x3b\x02\x81\x9c\xb8\x0b\xa1\x6d\xd5\xc3\x8b\x2c\xb5\x2d\xad\xd6\xc5\xa5\xd3\x81\x88\xfe\x2c\x5a\xdb\x9e\x86\xaa\x97\xcd\xbd\x35\xc4\x2a\xdf\x56\x05\x8f\x54\x69\x4c\x7d\x14\xdd\xee\x96\xe0\x92\xbf\x0a\xf0\xae\x13\xa6\xb1\x0a\xdf\x52\x62\xfb\x6f\xe3\x40\x5a\x3d\x7a\xc4\x77\xaa\xaa\x20\xc6\x69\x0e\x93\xa1\xbc\xad\x8e\x0e\x25\x3c\x29\x9b\x13\x73\x61\xbd\xb6\xa5\x64\xdb\x1e\x5c\x27\xb1\xeb\x77\x99\xd5\x0f\xde\x5a\x44\xda\x5a\x17\x02\x41\xbc\x72\x77\x9f\x9e\xa7\xfa\x59\xf4\xf4\x40\xd3\x6a\xf4\xe7\x0a\x76\xe5\x38\xa6\x1a\x76\x64\x8f\x31\xa8\x6d\xe3\x84\x42\xd2\x3d\x65\x98\xa1\xfa\xb9\xa9\x02\xab\x16\x5b\x0b\x17\x1e\x62\x2d\x12\xe5\x5c\x09\xd5\xa1\xc7\xf1\xee\xc0\x11\xf6\xf2\xed\x5c\xee\x98\xc9\x35\x6f\xe8\x84\x37\x88\xdf\xfd\x4a\xf1\xb7\xc8\xa9\xf4\xb5\x38\x05\x17\xc9\xc4\x09\xb2\x29\x86\x55\x69\x2d\x68\x5b\xb2\x6e\x41\x0c\xc1\xed\xb3\xa7\xaf\xe0\x80\x12\x5d\x9b\x46\xc8\x4f\xb5\x7c\xfb\x7d\xa2\xa7\x91\xe8\x81\x35\xd6\x37\x7e\x29\xd4\x26\x45\x72\x76\xf5\x0a\x39\x4a\x9a\xb8\xa9\x95\x9b\xa9\x56\x89\x72\x31\xdb\x08\xb4\xea\x41\x6d\xda\x84\x5c\x5f\x55\xa8\x8c\x0f\x7c\x62\xbd\xdd\x54\xff\xc1\x23\xeb\xb6\x45\xfd\xe5\x4e\xec\xaa\xea\x5e\xab\x56\xf9\xd1\x67\xd4\xd7\x0d\xf6\x1f\x3c\xa2\x5e\x69\xf5\xbe\x16\x79\x11\xd6\xbe\x67\xc8\x71\x3f\xe9\x7d\xe5\x0a\x6e\xe9\x02\x27\xde\xef\xac\x7b\x39\x6c\xcc\xa8\x97\xbb\x30\xaf\x77\xad\x7b\x39\x72\x7d\x67\xae\xd3\x46\xf7\xc1\x4a\x78\x7c\x57\xfe\x36\xed\xea\xad\xd8\xd2\x1f\xab\xa2\xb7\x7c\xcb\x6d\xeb\x2a\xaf\xbe\xb0\x28\xc4\xe0\x8b\xa0\x43\xe4\x03\x9a\xf9\x2c\xc6\x21\x12\xbd\xc6\xb8\xe6\xb7\x09\x47\x65\x02\xc6\x91\xe4\x0c\x4e\xed\xd4\x07\x93\xb4\xa9\xa9\x1d\x31\xb9\x0a\x72\xad\x4e\x3a\x59\x9d\xea\x64\x95\xf7\x74\xc3\xf5\x37\x78\x7c\x93\x89\xf4\x1f\x4a\x7d\xcf\x60\xd3\x6e\xb4\x5b\x4d\x04\x57\x06\xc9\x10\x30\x89\x90\x0f\xfc\x3d\x07\xdd\x79\x72\xbf\xbb\x5f\x2f\xf0\x4c\x84\xb7\x1b\x1c\xfc\x2a\xc3\xfd\x0d\x96\x6d\xaf\xc1\xee\x1d\xa5\x10\x4a\x51\x13\xd2\xdd\x7f\x49\xc6\xc5\xa1\x37\xa0\xd7\x38\x6d\xb5\xef\x34\xe6\xfd\xf5\xc5\xdd\x23\x0b\x4b\xe4\x50\x09\xd0\x7a\x62\xf1\x73\xbf\xd5\x3f\xbf\x63\xfb\xbd\x5e\x92\x2a\x53\x67\xd4\xee\x71\xb8\xe3\x29\x20\xdb\xee\xc5\xbf\xb3\x0b\xe7\x1b\x25\xd1\x48\xb7\x7a\x82\x37\xb6\xcb\x33\x9f\xa9\xb7\x5e\xbd\xfd\xd4\xd7\xbc\x78\xcf\x66\xd1\x36\x06\xdf\xbc\xdb\x70\xc3\xaf\xde\x11\x5c\xdf\xab\xf7\xf3\xe8\x02\xbb\x57\x9a\x9d\x3b\x81\xfe\xa2\xfd\x80\x70\x20\x5c\xbb\x4c\x37\xed\x2b\x78\xef\xa9\xe0\x49\x9a\xd6\xe5\x7b\xeb\x09\x6b\x70\x25\x89\xb9\xd8\x23\x6c\xa5\xc8\xbf\x64\xb9\xf7\x16\x3c\x5c\xd4\x11\xa8\xd7\x3d\xeb\x15\xc7\x10\x72\xe7\x68\x87\x6a\x55\xe8\xd4\xab\x4f\xea\x85\x86\x94\xf8\xc1\x4c\x63\xa0\x11\xb6\x9b\xb1\xb5\x03\x53\x47\xed\x1f\xa4\x59\xe0\x1e\xce\x1e\x7a\xdb\xdd\x76\xd7\x1f\xb6\xf1\x7b\xaf\x77\xef\xe5\xee\xbb\x37\xff\x7f\x01\x00\x00\xff\xff\xe8\x04\xd7\x80\xe5\x3c\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 15589, mode: os.FileMode(420), modTime: time.Unix(1537232870, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": {apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
