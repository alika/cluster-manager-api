// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\x6b\x6f\x1b\x39\x92\xdf\xf5\x2b\x0a\xfa\x72\xf2\x21\x96\x12\x27\x99\x1b\xd8\x9b\x9b\xd5\xda\xb3\x89\x90\xd8\x31\x22\x4f\x82\xf9\x24\x50\xdd\xa5\x16\xd7\xdd\x64\x0f\xc9\x96\xa2\x19\xe4\xbf\x1f\xf8\xea\x26\xfb\x61\xe7\xe1\x20\x8b\xc3\x1a\xd8\x1d\x75\xb3\xaa\x58\xac\x77\xb1\x2b\xb3\x19\x9c\xf3\xf2\x20\x68\xb6\x55\x70\xf2\xf8\xc9\xcf\xb0\x24\x85\xac\x58\x06\xcb\x8b\x25\x9c\xe7\xbc\x4a\xe1\x8a\x28\xba\x43\x38\xe7\x45\x59\x29\xca\x32\xb8\x41\x52\x00\xa9\xd4\x96\x0b\x39\x1d\xcd\x66\xa3\xd9\x0c\xde\xd0\x04\x99\xc4\x14\x2a\x96\xa2\x00\xb5\x45\x98\x97\x24\xd9\xa2\x5f\x79\x04\xef\x51\x48\xca\x19\x9c\x4c\x1f\xc3\x44\x03\x8c\xdd\xd2\xf8\xe8\x4c\x93\x38\xf0\x0a\x0a\x72\x00\xc6\x15\x54\x12\x41\x6d\xa9\x84\x0d\xcd\x11\xf0\x63\x82\xa5\x02\xca\x20\xe1\x45\x99\x53\xc2\x12\x84\x3d\x55\x5b\xb3\x8f\xa3\xa2\x39\x81\xdf\x1d\x0d\xbe\x56\x84\x32\x20\x90\xf0\xf2\x00\x7c\x13\x02\x02\x51\x8e\x69\xfd\xb7\x55\xaa\x3c\x9d\xcd\xf6\xfb\xfd\x94\x18\x86\xa7\x5c\x64\xb3\xdc\x82\xca\xd9\x9b\xc5\xf9\xaf\x57\xcb\x5f\x8f\x4f\xa6\x8f\x1d\xd2\x6f\x2c\x47\x29\x41\xe0\x1f\x15\x15\x98\xc2\xfa\x00\xa4\x2c\x73\x9a\x90\x75\x8e\x90\x93\x3d\x70\x01\x24\x13\x88\x29\x28\xae\x99\xde\x0b\xaa\xe5\xf6\x08\x24\xdf\xa8\x3d\x11\xa8\xc9\xa4\x54\x2a\x41\xd7\x95\x8a\x64\xe6\x59\xa4\x32\x02\xe0\x0c\x08\x83\xf1\x7c\x09\x8b\xe5\x18\xfe\x31\x5f\x2e\x96\x8f\x34\x91\x0f\x8b\x9b\x57\x6f\x7f\xbb\x81\x0f\xf3\x77\xef\xe6\x57\x37\x8b\x5f\x97\xf0\xf6\x1d\x9c\xbf\xbd\xba\x58\xdc\x2c\xde\x5e\x2d\xe1\xed\x3f\x61\x7e\xf5\x3b\xbc\x5e\x5c\x5d\x3c\x02\xa4\x6a\x8b\x02\xf0\x63\x29\xf4\x09\xb8\x00\xaa\xa5\x89\xa9\x11\xdd\x12\x31\x62\x61\xc3\x2d\x4b\xb2\xc4\x84\x6e\x68\x02\x39\x61\x59\x45\x32\x84\x8c\xef\x50\x30\x6d\x09\x25\x8a\x82\x4a\xad\x55\x09\x84\xa5\x9a\x4c\x4e\x0b\xaa\x88\x32\xaf\x3a\xe7\x9a\x8e\x34\xc8\x25\x4d\xb6\x04\x73\x78\x8f\x0c\xff\xa4\x04\xfe\x56\xec\xec\xaf\xbf\x67\x05\xa1\xf9\x34\xe1\xc5\xff\x6a\xb8\x79\x4e\x6f\x09\xbc\x21\x42\x22\x83\xbf\x11\xfd\x34\xcd\xcd\x53\x08\x38\x92\x07\xa6\xc8\x47\x78\x01\xe3\x52\x70\xc5\x9f\x8e\xcf\x46\xa3\x92\x24\xb7\x9a\xd5\x24\xaf\xa4\x42\xb1\x2a\x08\x23\x19\x8a\x15\x29\xe9\xd9\x68\x44\x8b\x92\x0b\x05\xe3\x8c\xf3\x2c\xc7\x19\x29\xe9\x8c\x30\xc6\x1d\xdb\x53\x43\x66\x7c\x56\x83\x99\xe7\xe4\x38\x43\x76\x2c\xf7\x24\xcb\x50\xcc\x78\x69\x40\x7b\xd1\x46\x23\xbb\x0a\x93\x4c\x94\xc9\x34\x23\x0a\xf7\xe4\x60\x97\x93\x55\x86\x6c\xe5\xa8\x4c\x1d\x95\x29\x2f\x91\x91\x92\xee\x4e\xfc\xca\x11\xbc\x80\xbf\x46\x00\x94\x6d\xf8\xa9\xf9\x05\xa0\xa8\xca\xf1\x14\xc6\xe7\xf6\x48\x70\x69\x8f\x04\xf3\xeb\xc5\xf8\xcc\x40\xec\xac\x83\x9d\xc2\x78\xf7\x78\x7a\x32\x7d\xec\x5e\x27\x9c\x29\x92\x28\x4f\x47\xff\x31\x52\x68\x52\xde\xd7\xcf\xaf\xce\x6f\x1c\xb0\xfe\xab\x44\x7e\x0a\x63\xed\x18\xf2\x74\x36\xcb\xa8\xda\x56\x6b\x2d\xeb\x99\xb4\xf0\xc7\x09\x4b\xd4\xcc\x89\xf6\xd8\x89\xf6\x98\x94\x34\xa0\x81\x5a\x41\xa7\x30\x26\x69\x41\xd9\xdf\x43\xc4\x29\xe5\x0e\xee\x93\xfe\x8f\xf9\x3f\xfc\xa8\x50\x30\x92\xaf\x52\x9e\x48\xcf\xe8\xb7\xb2\x91\xa2\x4c\x04\x35\x22\x3e\x85\xf1\x25\x17\x08\x64\xcd\x2b\x05\x43\x12\xfc\x34\x02\x90\xc9\x16\x0b\x94\xa7\xf0\xea\xe6\xe6\x7a\x79\xd6\x7e\xa3\x5f\x24\x9c\xc9\xca\xbc\x19\x3b\xc7\xd7\x5b\xcc\xfe\x25\x39\x33\x64\x4a\xc1\xd3\x2a\x19\x5a\xff\x74\x36\x1a\x49\x14\x3b\x9a\x60\xcd\x88\x3d\xaf\xf6\x67\x9a\xe7\x1a\x7f\x47\x4d\xa4\x24\xde\x7e\xcd\xba\x28\x13\x38\x17\x48\x14\x7a\xbc\x49\xf4\x78\x29\xb3\x23\x10\xa8\x2a\xc1\x64\x6b\xe9\x1d\x96\xf9\xe1\x28\x30\x80\xda\x42\x8d\x07\x4c\x49\x49\xa7\x5a\xd0\xde\xee\x9a\xbf\x92\x4b\x05\xa7\x30\x36\x4e\xb2\x7b\xe2\xc5\x3d\x8e\x80\xd6\x3c\x3d\x68\xa0\xff\x6e\x5e\x7f\x72\x2a\x8e\x4e\x26\x50\x09\x8a\x3b\x1b\x67\xa4\x22\xaa\x92\x3a\x36\xd7\xc7\xd4\x31\x04\xa8\x92\x70\x5b\xad\x31\xe1\x6c\x43\x33\x13\x86\x12\xce\x18\x26\x8a\xee\xa8\x3a\xd4\xa2\x78\x89\xaa\x96\x43\xf3\x3b\x16\x42\xf3\xfe\xeb\x25\x90\xe1\xdd\x02\xe8\x3d\x69\x8a\x39\x2a\xec\x51\xe0\x85\x59\xa8\x19\x8f\x1e\x63\xde\xa3\xa5\xaf\x67\xdf\x71\xf2\xc5\x27\x20\xe9\xbf\x2a\xa9\x80\xdc\x69\x8e\x73\x03\xe4\x78\xbc\xe2\x29\x4a\x98\x44\xef\xe2\x23\x45\x4b\xdf\x60\x93\xd5\x77\x30\x49\x02\x39\x95\x4a\x9b\xa3\xa3\x27\x7b\x2c\xed\x8d\x06\x99\xc4\xcf\x43\x16\xa7\xd7\x1e\xda\xea\x66\x9a\xc7\x7b\x4e\x44\x99\x54\x24\xcf\x61\xc2\x05\x08\x74\x4f\x47\xa0\x68\x9e\x07\x9a\xbb\xf6\x5a\xbd\x31\xef\x61\xd2\x7a\x11\x9f\xaa\xb5\xf8\x70\xe1\xc4\x72\xf5\x75\xaa\x1b\x38\xe8\x16\xf3\x02\x92\x2d\x11\xca\x43\xdf\xe8\x42\x72\xaf\x51\xd6\xa8\xb3\x82\x12\x55\x62\x4a\x5a\x6a\x62\x8f\x06\x85\x2d\x91\x40\x72\x81\x24\x3d\xc0\x1a\x91\x41\x8a\x65\xce\x0f\x98\x36\x75\xa6\x24\x05\x9a\xcc\x59\x0b\x71\x61\xf7\x7c\x85\x79\x71\x6e\xa8\x4c\xda\x6f\x62\x31\xb6\x57\x1f\x4e\x8e\xfa\xd0\x5f\x27\x45\x17\x1f\xea\xe3\xb6\xc4\xd7\xc4\xac\xe0\x94\xad\x17\x7d\x71\xeb\x01\xce\xd8\x8d\x5c\xf1\x29\x87\xfc\xb9\x12\xcc\x97\x42\xa6\x80\x12\x85\x49\xc0\x2e\xf9\x93\x92\x82\xce\xbf\x81\x2f\xbc\x44\xe5\x7a\x93\x45\x00\x3e\x69\x5e\x77\x5c\xdc\xbd\x7f\x30\xf7\x76\xec\x7e\xde\xd9\xaa\x32\x13\x24\x45\xb7\x99\x34\x19\x92\x40\x46\x77\xc8\x3a\x01\xfa\x25\xaa\xdf\x2c\xb8\x8b\x4a\xed\x13\x0e\xae\x76\xce\x3c\x08\xf9\xe0\x41\xce\x1d\xf0\xbe\x04\xa5\x14\x16\xa5\xd2\x3d\x96\x97\x48\x37\x41\xc5\x4c\xc3\x24\x7e\x8e\xcf\x18\xaf\x3d\x74\x7a\xea\x9e\xea\x4b\xbc\xb4\x2a\x53\xa2\xeb\x89\xbd\x84\x44\x60\x8a\x4c\x51\x92\x4b\xdd\x26\xa7\x4e\xff\xdd\x93\x6b\x8c\xf9\x87\xe5\x79\x00\x3f\xe9\x7b\xdb\x96\x42\x17\xe2\xe1\x64\xd1\xd0\x9c\x91\xbd\xfc\x36\x59\xfc\x59\x09\xfc\x42\x69\x68\x94\x3e\x79\xb4\xde\xf7\x4a\xa4\x05\xf3\x7d\x64\xa2\x37\xf9\x7c\xa9\x7c\x1a\x8d\x0a\x94\x52\x37\xba\xed\x4e\xa0\xe9\x29\xae\x74\xda\x72\x37\x20\xbe\xce\x56\x5c\xa7\xc2\xba\xb2\xc3\xd4\x00\x4b\x25\x74\x53\xaf\x53\x1c\xbc\x80\x27\x67\x4d\xfe\x74\xb0\xba\x9b\xf7\xd7\x01\xc6\xf5\x0d\x44\xb4\xf5\xb5\x83\x5b\x96\x98\x34\x48\x2f\xe0\xe4\x6c\x90\x5b\x23\xc9\xa0\x07\xda\xa2\xb9\xa6\xe0\xc2\xdc\x04\x85\x6c\xef\x89\x0c\x99\x86\xf5\xc1\x5e\x12\x09\xfc\xa3\x42\x69\x13\xd6\x9a\xf3\x1c\xf8\x6d\xe7\x00\x29\x2a\x42\x73\xd9\x96\x84\x43\x05\x81\xb2\xe4\x4c\xda\xdc\xee\x63\x9c\xc2\xa2\x06\x6c\x1f\x21\x6a\x39\x3e\x47\xda\x39\xe7\xb7\x98\x42\x55\xde\x29\xeb\xf9\x87\x25\x04\x56\x66\x5e\xb7\x9c\x58\x07\x01\xc3\x8d\x47\x31\x8e\xd0\x41\x6a\xdb\xba\xf5\x97\x17\xf0\xf4\xac\x8f\x57\xaf\x2a\x09\x13\xb2\x97\x33\x72\x2b\x67\xbb\x62\x4f\x04\xce\x50\x25\x47\x21\xcb\x81\x52\x9f\x0d\x48\xa4\xa5\xd1\x85\x8c\xc4\x41\x99\x2d\xa7\x0e\x52\x61\xd1\xd5\x59\xa8\x81\x0b\xa3\xb4\x3b\xf5\xd0\xee\xa0\x42\x43\x22\x0a\x68\xb4\xf7\x7f\x49\x2b\x71\xc5\x6d\x1d\xc8\x0f\xff\x5f\x95\xd1\xed\x1e\x1b\xc1\x9c\xf3\x2a\x4f\x23\x95\xf8\xba\x58\x57\x80\x83\x5e\xb4\xac\x1b\x76\x8d\x1a\xfa\x9c\x63\xc6\x75\xf4\xc3\x9e\xe2\xda\xa5\x86\x93\xcf\x16\xf0\x93\xaf\x15\xf0\xc9\xf7\xb7\xf6\xba\xd1\xfb\x5a\x8b\x77\x48\x6f\x7a\xfb\x4f\x2c\x75\xa8\x4c\xfb\x62\x52\x57\xd4\x21\x50\xc3\xcc\x45\x2b\x20\x85\xe7\xa3\x69\xc4\x43\x4f\xf8\xea\xf1\x90\x46\xa8\xa1\x8f\xc9\xc8\x3e\x7a\xb0\x6b\xfb\x78\xda\xc7\x74\xe0\xeb\xff\xde\xac\xf7\xe0\x07\xf7\x55\x8a\xfb\xeb\x2a\xfd\x73\x80\x5c\x00\xdf\xb6\xab\xe1\x6c\xda\x1b\xd8\x6a\xfb\x3c\x86\xa4\x12\x02\x99\xca\x5d\x52\xa4\xd6\x77\xb8\x80\x82\x10\x79\x6f\x82\xf7\x1d\x13\xdf\xc0\xeb\x6a\x8d\x82\xa1\xc2\x08\xeb\xf6\x67\xb9\xf2\x40\x46\x8e\x66\x91\x33\xe4\x9b\x9a\x8b\x55\xd8\x6f\x35\x55\x8f\xdb\x42\x7b\x7b\xb7\x7c\xe8\x94\x10\xf3\x0f\x4b\x73\x5e\xeb\xf9\x4f\xcf\x06\xa0\x5e\x3b\x28\xe7\xe8\xcf\x06\xe0\xde\x5f\x7e\x20\x02\x0d\xa8\x75\x71\x78\x01\xff\xe3\x0b\xa8\xcf\xa8\x39\xa8\x84\x57\xf3\xc6\x67\xb7\x34\xdb\xae\xc8\x8e\xd0\x9c\xac\x69\x4e\xd5\x01\x5e\xc0\xf3\x48\x90\x1b\xb2\x16\x34\x71\x49\x5f\x97\xa4\x91\xe8\x51\xed\xb9\xb8\x5d\x39\xa0\x17\xf0\xd3\xd9\x68\x50\xfb\x5e\x10\x7f\x8d\x5a\x42\xbc\x20\x8a\xc0\x39\x32\x6f\x55\xf3\x0f\x4b\xfd\xca\xbe\x81\x94\x28\xb2\x4a\xec\xef\x50\xcb\x61\x78\xd4\xdc\x55\x34\xce\x02\x7d\xd1\x37\x2c\xaf\x43\xe7\xf9\xc7\xef\x6f\x81\x2a\x2c\xea\x90\x7d\x2d\x9c\x41\x57\x02\x53\xed\xc4\xba\x2a\x93\xbc\x12\x09\xc6\x6e\x63\xee\x40\x58\x82\x90\x09\x5e\x95\xad\x20\x37\xff\xb0\xf4\xeb\x2f\xf5\xb2\xbd\xe3\x61\x09\xae\x2c\xb4\xd5\x73\xa3\x35\x9a\x6c\x3b\xc2\xf0\xa2\x8c\x85\x12\x19\xa3\x45\x14\x98\x99\x82\xbd\x92\xc7\x48\xa4\x3a\x7e\xf2\x08\x50\x25\xd3\xa3\x1a\xd2\xe9\xcc\xc1\xd5\xa2\x8c\x88\x44\xa6\xf0\x27\x67\x28\x03\x82\xeb\x47\xe0\x7f\x9f\x24\xe6\xf7\x1e\xf5\xef\xb4\xbd\x53\x2d\x00\xb7\x65\x48\x75\x65\xa9\xd6\xd2\x6f\xac\xf6\x9f\x5c\xc0\x7e\x8b\x0c\x24\x2f\xcc\xe7\x52\x96\x49\xd0\x16\xee\x2f\xb2\x12\x63\x4d\x69\x5b\x2c\x3d\xba\xea\xf8\xea\xfb\xeb\x73\xa0\xe9\x23\x58\xe7\x84\xdd\x9a\xa6\x4a\xff\x6f\x6c\x29\x6a\xaf\x37\xcf\x07\x5e\x8d\x1f\xc1\x86\xe6\x39\xa6\x40\x37\xe6\x13\xae\x66\x40\x9b\xc7\xfb\xeb\xf3\xb6\x24\x77\x65\xb2\x0a\xa3\xb6\x2f\x2c\x30\xa9\x84\x96\x9f\x51\x72\x1b\x49\xba\x55\x6b\x02\x16\xff\xe4\xac\xcd\xef\x62\x7e\x09\x82\xe7\xcd\x67\x4b\xef\xbf\x13\x22\xd8\x91\x77\x28\x29\x79\x42\x4d\xe8\x49\xd3\xf6\x3e\x94\x14\x2b\x4d\x61\x45\x04\x6b\x2c\xb6\x91\x76\xcb\x70\x21\xc5\x0d\x65\x08\x04\xd4\xa1\x44\xf3\xe5\x82\x55\xc5\x5a\x07\x91\x4d\x6d\xb6\xb2\x2d\xfa\xd8\xba\x23\xa9\xd7\xf4\x0d\xbd\x49\xf1\x7c\x9a\x13\x91\xe1\x80\x51\x1a\xa0\xb6\x20\x2f\x29\xa3\x45\x55\xf4\x31\x02\x93\x14\x37\xa4\xca\x95\xf1\xfd\x3f\x51\xf0\x86\x24\x65\xea\xe9\x09\x14\x94\xad\xfe\xa8\x08\x53\x36\xa8\xc5\x22\xbe\x24\x1f\xbf\x81\x32\xf9\x18\x52\x7e\x1a\xb4\xaf\xb3\x99\x2e\xa4\xc2\xe4\x33\xbf\x5e\xc0\xd2\xde\xcf\x05\xa5\x56\x73\x11\x07\x7f\x39\x3c\x5b\x72\x69\x75\x7b\x6c\x5f\x92\x76\xf1\xda\xe5\xd9\x06\x78\x89\xc2\xa6\x29\xdd\x54\xbe\x7d\x3d\xd0\x87\x78\x52\x3d\xf7\x83\x1d\x97\x51\x24\x03\x6e\x2b\xbd\x8c\xea\x8e\xb2\xe4\x92\x2a\x2e\x0e\x6d\xdd\x65\x54\x05\x99\xf4\x49\xc7\x96\xb7\x44\x6e\x7d\x2d\xa2\x29\x25\xbc\x28\xa8\xea\xa3\x62\x57\x3a\xda\xea\x49\x67\x4a\x20\x9a\xa3\x26\x39\x12\x66\xc3\x86\xce\x00\xbd\x64\x35\xf0\x4a\x97\x3c\x18\x27\xe0\xd9\x4c\x47\x5b\x53\x65\x99\xec\xd1\xc6\x35\x2f\x57\xa9\xc5\x7b\x16\xe1\xbd\x6f\x34\x9c\x71\x7b\x53\x63\x2a\xa5\xa2\xa4\x39\x76\x78\xe0\x81\x7c\x9e\x47\x74\xce\x2d\x86\x68\x32\x6b\x80\x97\xf8\x45\x93\x57\x03\xac\xeb\x9c\x28\xad\x39\xa0\xca\x0a\xc1\x02\xda\xdb\xa2\x19\x88\x8a\x99\x71\x86\xa0\x22\xf1\xe5\xbf\x47\xec\x29\x1a\xfc\x91\x02\xa3\x30\x4b\x3d\xb6\xe2\x4e\x13\x95\x47\xbe\x76\x77\x4a\x4f\xe2\xec\x5c\xb9\x09\x0c\x13\x70\x8d\xc3\x07\x89\x3a\x08\x28\x61\xb2\x8e\xea\x84\x25\x26\x02\xd5\x6b\x3c\x2c\xec\x29\xb5\x5f\xcd\x93\x04\x65\x54\xd4\x49\x03\xb5\xba\xc5\xc3\xaa\x55\x4e\x37\x34\x2c\xd6\x6b\x3c\xd4\x74\xc8\x10\x1d\xbb\xa0\xc9\x45\xd5\x82\xa6\xf5\xce\x66\xd1\x61\x12\x75\x9a\xb5\xdd\xc1\x37\xc9\xa5\xdd\x0d\xc6\x15\x54\x59\xde\x29\x13\x52\x96\x7d\xc2\xb8\x41\x46\x98\xba\xe3\x00\xca\x02\xb4\x0f\x7e\x4d\xa4\xdc\x73\x91\xde\x81\x59\x7a\x90\xb0\x50\x32\x0a\xa8\xd6\xf5\x0c\xc3\x5d\xd2\x0f\xc0\x2c\xeb\xcf\xbc\x69\x69\xf1\x90\x24\xe1\x15\x53\xd6\xeb\xcc\x9d\x59\x74\x37\xe5\x72\xba\x2d\xa4\x9b\xa2\x6d\x82\x1f\x4f\x21\xe7\x24\x85\x35\xc9\x75\xa4\x17\x47\x2d\x01\x5b\x12\x4b\x3b\xcc\x30\x77\x9b\x44\xa2\x3e\xcf\x29\x32\xb5\x48\x61\x42\x6e\xc9\xa9\x91\xfc\x45\xd4\x5e\x27\x06\xa0\x4f\xdc\x16\xd5\x5a\xa0\x43\xf7\x62\xea\xa3\x60\x0d\xd0\x3b\x55\x7f\x39\xfd\xba\xaf\x9c\x36\xa7\x6e\xd7\x90\x8e\x76\xce\x13\xef\xab\x5f\x5a\x46\xb7\x2d\x70\xa8\x90\xf6\x5f\x26\xfc\x48\x48\xa4\x2b\xdd\x40\x92\xfc\x56\xff\xd7\x6a\xc7\xe8\xa4\x36\xfd\x96\x72\x9a\x7d\x7b\x15\xe3\xd8\xf3\x8f\x9f\x5f\x93\xbf\xfe\x92\x9a\xfc\x01\xaa\xa4\xf6\x7e\x9d\x44\xcb\x82\x4e\xbf\xb7\x64\x8c\x1b\xdc\x36\x67\xb6\xbe\x5a\x2a\xc2\x52\x22\xd2\xd5\xc5\xc9\x6a\x77\x72\x77\x95\x75\xf2\xdd\xaa\xac\xa7\xdf\xad\xca\x7a\x76\xdf\x47\x82\xa0\x31\xae\x3d\xe2\x92\x24\x5b\xaa\xbb\x8d\xbd\x69\x6e\x74\x9a\x14\x54\x62\xc7\xbc\x6b\xe3\xb0\x44\x1c\x9a\xa1\x95\x70\xa6\x04\xcf\x57\x65\x4e\x18\xae\x98\x99\x09\x09\x6d\xed\x01\xb6\xd0\x1d\x34\x8a\x9a\xf6\xb3\x20\x6e\x50\x09\x72\x6b\xae\x37\xd7\xda\xe8\x76\x24\xaf\x10\x72\x7a\x8b\x40\xcb\x53\x33\xcd\xa7\xb6\x44\xd5\xc3\x00\x04\x76\x54\xa8\x8a\xe4\xb0\xb8\x9e\xe9\x65\x4f\x49\x07\x6d\x1d\x2c\x49\x62\xbc\xcf\xcf\xa7\x41\x52\x49\xc5\x0b\x14\xd2\xf5\xf7\x66\xe6\xd3\x16\x32\x45\xc5\x68\xa2\x03\xe9\xf0\xb5\x0f\x29\xe9\x0a\x59\x5a\x72\x6a\x1c\xf0\x79\x74\xf1\xd3\xdc\xba\xbc\x21\x6b\xcc\xe3\x30\xe5\x4d\x9e\x40\xae\x17\xef\xbf\xcd\x31\x07\xef\x47\xb0\x6b\xad\xf2\x23\xba\x97\x71\x1f\xd1\xea\xc9\x4f\x2d\xe9\x9a\xcf\xae\x3e\x22\x4e\x2b\xa9\x25\x55\xd8\x2c\xbd\x5c\xbe\xea\x49\x57\x35\x48\x9b\xeb\x2d\x97\xea\x0e\x3c\xb3\xdc\x4e\xaf\x46\xa9\x3d\x38\xd6\x29\xcc\x6a\x3b\xab\xde\xfe\x2c\xeb\x9e\xa1\x6e\x17\xad\xd9\x82\x31\xdb\xa9\xb5\x24\x7d\x6c\xa0\x12\x38\xcb\x0f\x40\xa0\x20\xf6\x42\x68\xe3\x27\x93\x31\x4f\xcd\xa0\xae\x09\x71\xe9\x74\x20\xa3\x3f\x8b\xf6\x36\xda\x90\xf5\xb6\x85\xf3\x86\xd8\xe4\xdb\xa6\xe0\x90\xbc\xc5\xd4\xaa\xe8\xce\xec\x04\x97\xfc\x3e\xc1\xdb\xf9\x9e\xc6\x2b\xdc\xa0\x8c\x99\x2a\x8e\x13\xa9\xff\xc0\x12\xdf\xa9\xca\x92\xe8\xa0\x39\x4c\x86\xb2\xb6\x39\x5a\x94\x50\x53\xa6\x26\x66\xdc\x44\x6d\x43\xc9\xcc\x72\xd8\xf9\x68\x3b\xc5\x33\xab\xbf\xe2\x2b\x1e\x59\x6b\xdd\x08\x04\xf9\xca\xde\x7d\x3a\x9e\xea\xaf\xbd\xc7\x7b\x9a\xfa\xb7\xbf\x78\xd8\xa5\xe5\x98\x2a\xd8\x92\x1d\xc6\xa0\x66\x38\x15\x4a\x41\x77\x34\xc7\x0c\xe5\x2f\x4d\x17\xe8\x07\x87\x0d\x5c\xa8\xc4\x5a\x24\xd2\x86\x12\xaa\xc2\x88\xe3\xc2\x81\x25\xec\xe4\xdb\xb9\xdc\xd1\x8b\x2b\xd6\xd0\x09\x6f\x10\xbf\xf9\x2b\xc5\x4f\x51\x50\xe9\x1b\xdc\x0a\x2e\x92\x89\x15\x64\xd3\x0c\xcb\xca\x78\xd0\xa6\xca\xbb\x0d\x31\x04\xb7\xcf\x8e\xbe\x84\x3d\x0a\xb4\xb3\x27\x21\x3f\x7e\xfb\xf6\xf7\x89\x9e\xf1\xa8\x07\xb6\x58\x37\xce\x26\x51\xe9\x12\xc9\xfa\xd5\x4b\x64\x28\x68\x62\x97\x96\x76\xc5\xef\x12\xd5\x62\x66\xba\x69\xd9\x83\xda\xcc\x3e\xd9\x69\xb1\x07\xfd\x70\xf7\xd3\x9d\x22\xfa\xd1\x2a\xeb\xce\x7a\xfd\xdb\x69\xec\xca\xcf\xe4\xf9\x5d\xbe\xb7\x8e\xfa\x46\xdc\x7e\xa0\x8a\x7a\xa5\xd5\xfb\xb5\xc8\x89\xb0\x8e\x3d\x43\x81\xfb\x49\xef\x57\xae\xe0\x96\x2e\x08\xe2\xfd\xc1\xba\x97\xc3\xc6\x8d\x7a\xb9\x0b\xeb\x7a\x3b\x8f\x58\x20\x53\x77\xd6\x3a\x6d\x74\x97\xac\xb8\xc3\xb7\xed\x6f\x33\x84\xdf\xca\x2d\xfd\xb9\x2a\x9a\x1b\x30\xdc\xb6\xae\xf2\xea\x0b\x8b\x92\x0f\x7e\x11\xb4\x88\x6c\xc0\x32\x9f\xc5\x38\x44\xa0\xb3\x18\x3b\xd1\x37\x61\x28\x75\xc2\x38\x90\x22\x87\x63\xb3\xf4\x5e\x17\x6d\x72\x6a\xde\xe8\x5a\x05\x99\x92\x47\x9d\xaa\x4e\x76\xaa\xca\x7b\x46\xfc\xfa\x07\x57\xbe\xca\x45\x7e\xcc\xd8\x44\xcf\x90\x87\x2b\xf1\xd1\x88\x35\xe1\x4c\x6a\x06\x35\xb3\xba\xe8\x72\x45\x46\x8f\x51\x75\x3e\xef\xdf\x3d\xf0\x18\x44\x41\xc2\xda\xc3\x14\x6e\x97\xe1\x59\x0a\xc3\xb6\xf3\x16\xfb\xcd\xa6\xe4\x52\x52\x5d\x3e\xd8\x7f\x8b\xc7\xf8\xbe\xb7\x78\xa8\x71\xda\x2e\xd6\x99\x6c\xfc\x8f\x6a\x43\xd5\xf6\xc8\xdd\x10\xd9\x7b\x65\x99\x0c\xc3\x7f\xe9\x8f\x66\xcf\xef\x10\x75\x6f\xf4\xa7\x52\xf7\x4f\x75\xd8\x1f\x9e\x50\x0b\xc8\xb6\xff\xe1\xc4\x9d\x93\x4c\x5f\x29\x89\x1f\xa3\x49\x3f\xc6\xa0\xe3\x1f\xcb\x5c\xb7\xd3\x9a\x1c\x70\x4b\x5f\x32\x35\x30\x9b\x45\x22\x8b\xe7\x06\xa2\xcf\x0f\x31\x5c\x6b\x72\x20\xf8\xc0\x10\xc1\xf5\x4d\x0e\xfc\x14\x7d\x04\xe8\xd5\x5c\xe7\x5e\x05\x7a\x2f\x3e\xf6\x08\x7b\xc2\x94\xed\x16\xd2\xbe\x4b\x03\xb8\xfb\x16\x84\xa4\x69\x7d\x05\xd2\xfa\x0c\x38\xb8\x93\xc0\x82\xef\x10\x36\x82\x17\x9f\xb3\xdd\x3b\x03\x1e\x6e\x6a\x09\xd4\xfb\x9e\xf4\x8a\x63\x08\xb9\xa3\xda\xa1\x7e\x1f\x3a\x3d\xff\x93\x7a\xa3\x21\x87\x79\x30\x37\x1c\x18\x91\xee\x56\xbd\xed\xe4\xde\x71\xb1\x07\x19\xb8\xb8\x87\xb3\x87\x3e\x76\x77\x12\xfa\xbb\x1d\xfc\xde\x2b\xf2\x7b\xb9\xfb\xe6\xc3\xff\x5f\x00\x00\x00\xff\xff\x03\x28\x06\x1f\xff\x3e\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 16127, mode: os.FileMode(420), modTime: time.Unix(1537314951, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": {apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
