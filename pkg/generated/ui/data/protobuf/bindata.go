// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\x6d\x6f\x1b\x37\xd2\xdf\xf5\x2b\x06\xfa\xf2\xc8\x0f\x62\xa9\x71\x92\xbb\xc2\xbe\x3c\x3d\x9d\xdd\x4b\x84\xc4\x8e\x11\xb9\x09\xfa\x49\xa0\x76\x47\x2b\x9e\x77\xc9\x2d\xc9\x95\xa2\x16\xf9\xef\x0f\xf8\xb6\x4b\xee\x8b\x9d\x38\x0e\x7a\x38\x9c\x80\x36\xd2\x72\x66\x38\x9c\xf7\xe1\x8e\x67\x33\x38\xe7\xe5\x41\xd0\x6c\xab\xe0\xe4\x87\xa7\x3f\xc2\x92\x14\xb2\x62\x19\x2c\x2f\x96\x70\x9e\xf3\x2a\x85\x2b\xa2\xe8\x0e\xe1\x9c\x17\x65\xa5\x28\xcb\xe0\x06\x49\x01\xa4\x52\x5b\x2e\xe4\x74\x34\x9b\x8d\x66\x33\x78\x4b\x13\x64\x12\x53\xa8\x58\x8a\x02\xd4\x16\x61\x5e\x92\x64\x8b\x7e\xe5\x09\x7c\x40\x21\x29\x67\x70\x32\xfd\x01\x26\x1a\x60\xec\x96\xc6\x47\x67\x9a\xc4\x81\x57\x50\x90\x03\x30\xae\xa0\x92\x08\x6a\x4b\x25\x6c\x68\x8e\x80\x9f\x12\x2c\x15\x50\x06\x09\x2f\xca\x9c\x12\x96\x20\xec\xa9\xda\x9a\x7d\x1c\x15\xcd\x09\xfc\xea\x68\xf0\xb5\x22\x94\x01\x81\x84\x97\x07\xe0\x9b\x10\x10\x88\x72\x4c\xeb\xcf\x56\xa9\xf2\x74\x36\xdb\xef\xf7\x53\x62\x18\x9e\x72\x91\xcd\x72\x0b\x2a\x67\x6f\x17\xe7\x3f\x5f\x2d\x7f\x3e\x3e\x99\xfe\xe0\x90\x7e\x61\x39\x4a\x09\x02\x7f\xab\xa8\xc0\x14\xd6\x07\x20\x65\x99\xd3\x84\xac\x73\x84\x9c\xec\x81\x0b\x20\x99\x40\x4c\x41\x71\xcd\xf4\x5e\x50\x2d\xb7\x27\x20\xf9\x46\xed\x89\x40\x4d\x26\xa5\x52\x09\xba\xae\x54\x24\x33\xcf\x22\x95\x11\x00\x67\x40\x18\x8c\xe7\x4b\x58\x2c\xc7\xf0\x8f\xf9\x72\xb1\x7c\xa2\x89\x7c\x5c\xdc\xbc\x7e\xf7\xcb\x0d\x7c\x9c\xbf\x7f\x3f\xbf\xba\x59\xfc\xbc\x84\x77\xef\xe1\xfc\xdd\xd5\xc5\xe2\x66\xf1\xee\x6a\x09\xef\xfe\x09\xf3\xab\x5f\xe1\xcd\xe2\xea\xe2\x09\x20\x55\x5b\x14\x80\x9f\x4a\xa1\x4f\xc0\x05\x50\x2d\x4d\x4c\x8d\xe8\x96\x88\x11\x0b\x1b\x6e\x59\x92\x25\x26\x74\x43\x13\xc8\x09\xcb\x2a\x92\x21\x64\x7c\x87\x82\x69\x4b\x28\x51\x14\x54\x6a\xad\x4a\x20\x2c\xd5\x64\x72\x5a\x50\x45\x94\x79\xd4\x39\xd7\x74\xa4\x41\x2e\x69\xb2\x25\x98\xc3\x07\x64\xf8\x3b\x25\xf0\xb7\x62\x67\xbf\xfd\x3d\x2b\x08\xcd\xa7\x09\x2f\xfe\x4f\xc3\xcd\x73\x7a\x4b\xe0\x2d\x11\x12\x19\xfc\x8d\xe8\x5f\xd3\xdc\xfc\x0a\x01\x47\xf2\xc0\x14\xf9\x04\x2f\x61\x5c\x0a\xae\xf8\xb3\xf1\xd9\x68\x54\x92\xe4\x56\xb3\x9a\xe4\x95\x54\x28\x56\x05\x61\x24\x43\xb1\x22\x25\x3d\x1b\x8d\x68\x51\x72\xa1\x60\x9c\x71\x9e\xe5\x38\x23\x25\x9d\x11\xc6\xb8\x63\x7b\x6a\xc8\x8c\xcf\x6a\x30\xf3\x3b\x39\xce\x90\x1d\xcb\x3d\xc9\x32\x14\x33\x5e\x1a\xd0\x5e\xb4\xd1\xc8\xae\xc2\x24\x13\x65\x32\xcd\x88\xc2\x3d\x39\xd8\xe5\x64\x95\x21\x5b\x39\x2a\x53\x47\x65\xca\x4b\x64\xa4\xa4\xbb\x13\xbf\x72\x04\x2f\xe1\x8f\x11\x00\x65\x1b\x7e\x6a\xbe\x01\x28\xaa\x72\x3c\x85\xf1\xb9\x3d\x12\x5c\xda\x23\xc1\xfc\x7a\x31\x3e\x33\x10\x3b\xeb\x60\xa7\x30\xde\xfd\x30\x3d\x99\xfe\xe0\x1e\x27\x9c\x29\x92\x28\x4f\x47\x7f\x18\x29\x34\x29\xef\xeb\xe7\x57\xe7\x37\x0e\x58\x7f\x2a\x91\x9f\xc2\x58\x3b\x86\x3c\x9d\xcd\x32\xaa\xb6\xd5\x5a\xcb\x7a\x26\x2d\xfc\x71\xc2\x12\x35\x73\xa2\x3d\x76\xa2\x3d\x26\x25\x0d\x68\xa0\x56\xd0\x29\x8c\x49\x5a\x50\xf6\xf7\x10\x71\x4a\xb9\x83\xfb\xac\xff\x31\xff\xc3\x4f\x0a\x05\x23\xf9\x2a\xe5\x89\xf4\x8c\x7e\x2b\x1b\x29\xca\x44\x50\x23\xe2\x53\x18\x5f\x72\x81\x40\xd6\xbc\x52\x30\x24\xc1\xcf\x23\x00\x99\x6c\xb1\x40\x79\x0a\xaf\x6f\x6e\xae\x97\x67\xed\x27\xfa\x41\xc2\x99\xac\xcc\x93\xb1\x73\x7c\xbd\xc5\xec\x5f\x92\x33\x43\xa6\x14\x3c\xad\x92\xa1\xf5\xcf\x67\xa3\x91\x44\xb1\xa3\x09\xd6\x8c\xd8\xf3\x6a\x7f\xa6\x79\xae\xf1\x77\xd4\x44\x4a\xe2\xed\xd7\xac\x8b\x32\x81\x73\x81\x44\xa1\xc7\x9b\x44\x3f\x2f\x65\x76\x04\x02\x55\x25\x98\x6c\x2d\xbd\xc7\x32\x3f\x1c\x05\x06\x50\x5b\xa8\xf1\x80\x29\x29\xe9\x54\x0b\xda\xdb\x5d\xf3\x29\x2b\x05\xa7\x30\x36\x3e\xb2\x7b\xea\xa5\x3d\x8e\x60\xd6\x3c\x3d\x68\xa0\xff\x6d\x1e\x7f\x76\x1a\x8e\x0e\x26\x50\x09\x8a\x3b\x1b\x66\xa4\x22\xaa\x92\x3a\x34\xd7\xa7\xd4\x21\x04\xa8\x92\x70\x5b\xad\x31\xe1\x6c\x43\x33\x13\x85\x12\xce\x18\x26\x8a\xee\xa8\x3a\xd4\x92\x78\x85\xaa\x16\x43\xf3\x3d\x96\x41\xf3\xfc\xe1\x02\xc8\xf0\x6e\x01\xf4\x9e\x34\xc5\x1c\x15\xf6\xe8\xef\xc2\x2c\xd4\x8c\x47\x3f\x63\xde\xa3\xa5\x87\xb3\xef\x38\xf9\xea\x13\x90\xf4\x5f\x95\x54\x40\xee\xb4\xc6\xb9\x01\x72\x3c\x5e\xf1\x14\x25\x4c\xa2\x67\xf1\x91\xa2\xa5\x6f\x30\x49\x2e\xbf\x83\x4d\x12\xc8\xa9\x54\xda\x1e\x1d\x3d\xd9\x63\x6a\x6f\x35\xc8\x24\xfe\x3d\x64\x72\x7a\xed\xb1\xcd\x6e\xa6\x79\xbc\xe7\x44\x94\x49\x45\xf2\x1c\x26\x5c\x80\x40\xf7\xeb\x08\x14\xcd\xf3\x40\x75\xd7\x5e\xad\x37\xe6\x39\x4c\x5a\x0f\xe2\x53\xb5\x16\x1f\x4f\x77\x96\xab\x87\xa9\x6e\xe0\xa0\x5b\xcc\x0b\x48\xb6\x44\x28\x0f\x7d\xa3\x0b\xc9\xbd\x46\x59\xa3\xce\x0a\x4a\x54\x89\x29\x69\xa9\x09\x3e\x1a\x14\xb6\x44\x02\xc9\x05\x92\xf4\x00\x6b\x44\x06\x29\x96\x39\x3f\x60\xda\xd4\x99\x92\x14\x68\x32\x67\x2d\xc4\x85\xdd\xf3\x35\xe6\xc5\xb9\xa1\x32\x69\x3f\x89\xc5\xd8\x5e\x7d\xb4\xb0\xac\xcf\xfc\x30\x21\xba\xf8\x50\x9f\xb6\x25\xbd\x26\x66\x05\x87\x6c\x3d\xe8\x8b\x5b\x8f\x70\xc4\x6e\xe4\x8a\x4f\x39\xe4\xce\x95\x60\xbe\x12\x32\xf5\x93\x28\x4c\xfe\x75\xb9\x9f\x94\x14\x74\xfa\x0d\x5c\xe1\x15\x2a\xd7\x9a\x2c\x02\xf0\x49\xf3\xb8\xe3\xe1\xee\xf9\xa3\x79\xb7\x63\xf7\xcb\xce\x56\x95\x99\x20\x29\xba\xcd\xa4\xc9\x90\x04\x32\xba\x43\xd6\x09\xd0\xaf\x50\xfd\x62\xc1\x5d\x50\x6a\x9f\x70\x70\xb5\x73\xe6\x41\xc8\x47\x8f\x71\xee\x80\xf7\x25\x28\xa5\xb0\x28\x95\x6e\xb1\xbc\x44\xba\x09\x2a\x66\x1a\x26\xf1\xef\xf8\x8c\xf1\xda\xa3\xa7\xa7\xee\xb1\xbe\xc6\x4d\xab\x32\x25\xba\xa0\xd8\x4b\x48\x04\xa6\xc8\x14\x25\xb9\xd4\x6d\x72\xea\x0c\xa0\x7b\x74\x8d\x31\xff\xb8\x3c\x0f\xe0\x27\x7d\x4f\xdb\x62\xe8\x42\x3c\xa2\x30\x1a\xa2\x33\xb2\x97\xdf\x26\x8c\xdf\x2b\x81\x5f\x29\x0e\x8d\xd2\x27\x90\xd6\xf3\x5e\x91\xb4\x60\xbe\x93\x50\xf4\x2e\x5f\x2e\x96\xcf\xa3\x51\x81\x52\xea\x56\xb7\xdd\x0b\x34\x5d\xc5\x95\x4e\x5c\xee\x0e\xc4\x97\xda\x8a\xeb\x64\x58\x17\x77\x98\x1a\x60\xa9\x84\x6e\xeb\x75\x92\x83\x97\xf0\xf4\xac\xc9\xa0\x0e\x56\xf7\xf3\xfe\x42\xc0\x78\xbf\x81\x88\xb6\xbe\x76\x70\xcb\x12\x93\x06\xe9\x25\x9c\x9c\x0d\x72\x6b\x44\x19\x74\x41\x5b\x34\x17\x15\x5c\x98\xbb\xa0\x90\xed\x3d\x91\x21\xd3\xb0\x3e\xd8\x6b\x22\x81\xbf\x55\x28\x6d\xce\x5a\x73\x9e\x03\xbf\xed\x1c\x20\x45\x45\x68\x2e\xdb\x92\x70\xa8\x20\x50\x96\x9c\x49\x9b\xdd\x7d\x98\x53\x58\xd4\x80\xed\x23\x44\x5d\xc7\x97\x48\x3b\xe7\xfc\x16\x53\xa8\xca\x3b\x65\x3d\xff\xb8\x84\xc0\xcc\xcc\xe3\x96\x1b\xeb\x30\x60\xb8\xf1\x28\xc6\x13\x3a\x48\x6d\x63\xb7\x0e\xf3\x12\x9e\x9d\xf5\xf1\xea\x55\x25\x61\x42\xf6\x72\x46\x6e\xe5\x6c\x57\xec\x89\xc0\x19\xaa\xe4\x28\x64\x39\x50\xea\xf3\x01\x89\xb4\x34\xba\x90\x91\x38\x28\xb3\x05\xd5\x41\x2a\x2c\xba\x3a\x0b\x35\x70\x61\x94\x76\xa7\x1e\xda\x4d\x54\x68\x48\x44\x01\x8d\xf6\xfe\x1f\x69\x25\xae\xb8\xad\x04\xf9\xe1\x3f\x55\x19\xdd\x06\xb2\x11\xcc\x39\xaf\xf2\x34\x52\x89\xaf\x8c\x75\x11\x38\xe8\x45\xcb\xba\x67\xd7\xa8\xa1\xcf\x39\x66\x5c\x53\x3f\xec\x29\xae\x61\x6a\x38\xf9\x62\x01\x3f\x7d\xa8\x80\x4f\xbe\xbf\xb5\xd7\xad\xde\x43\x2d\xde\x21\xbd\xed\xed\x40\xb1\xd4\xa1\x32\xed\x8b\x49\x5d\x51\x87\x40\x0d\x33\x17\xad\x80\x14\x9e\x8f\xa6\x11\x0f\x3d\xe1\xab\xc7\x43\x1a\xa1\x86\x3e\x26\x23\xfb\xe8\xc1\xae\xed\xe3\x59\x1f\xd3\x81\xaf\xff\x7b\xb3\xde\x83\x1f\x5c\x59\x29\xee\x6f\xac\xf4\xd7\x01\x72\x01\x7c\xdb\xae\x86\xb3\x69\x6f\x60\xab\xed\xf3\x18\x92\x4a\x08\x64\x2a\x77\x49\x91\x5a\xdf\xe1\x02\x0a\x42\xe4\xbd\x09\xde\x37\x4d\x7c\x03\x6f\xaa\x35\x0a\x86\x0a\x23\xac\xdb\x1f\xe5\xca\x03\x19\x39\x9a\x45\xce\x90\x6f\x6a\x2e\x56\x61\xcb\xd5\x94\x3d\x6e\x0b\xed\xed\xdd\xf2\xa1\x53\x42\xcc\x3f\x2e\xcd\x79\xad\xe7\x3f\x3b\x1b\x80\x7a\xe3\xa0\x9c\xa3\x3f\x1f\x80\xfb\x70\xf9\x91\x08\x34\xa0\xd6\xc5\xe1\x25\xfc\xd5\x17\x50\x5f\x50\x73\x50\x09\xaf\xe7\x8d\xcf\x6e\x69\xb6\x5d\x91\x1d\xa1\x39\x59\xd3\x9c\xaa\x03\xbc\x84\x17\x91\x20\x37\x64\x2d\x68\xe2\x92\xbe\xae\x49\x23\xd1\xa3\xda\x73\x71\xbb\x72\x40\x2f\xe1\x2f\x67\xa3\x41\xed\x7b\x41\xfc\x31\x6a\x09\xf1\x82\x28\x02\xe7\xc8\xbc\x55\xcd\x3f\x2e\xf5\x23\xfb\x04\x52\xa2\xc8\x2a\xb1\xdf\x43\x2d\x87\xe1\x51\x73\x57\xd1\x38\x0b\xf4\x45\xdf\xb0\xbe\x0e\x9d\xe7\x1f\xbf\xbe\x03\xaa\xb0\xa8\x43\xf6\xb5\x70\x06\x5d\x09\x4c\xb5\x13\xeb\xaa\x4c\xf2\x4a\x24\x18\xbb\x8d\xb9\x05\x61\x09\x42\x26\x78\x55\xb6\x82\xdc\xfc\xe3\xd2\xaf\xbf\xd2\xcb\xf6\x96\x87\x25\xb8\xb2\xd0\x56\xcf\x8d\xd6\x68\xb2\xed\x08\xc3\x8b\x32\x16\x4a\x64\x8c\x16\x51\x60\x66\x2a\xf6\x4a\x1e\x23\x91\xea\xf8\xe9\x13\x40\x95\x4c\x8f\x6a\x48\xa7\x33\x07\x57\x8b\x32\x22\x12\x99\xc2\xef\x9c\xa1\x0c\x08\xae\x9f\x80\xff\x7e\x92\x98\xef\x7b\xd4\xdf\xd3\xf6\x4e\xb5\x00\xdc\x96\x21\xd5\x95\xa5\x5a\x4b\xbf\xb1\xda\x7f\x72\x01\xfb\x2d\x32\x90\xbc\x30\x2f\x4c\x59\x26\x41\x5b\xb8\xbf\xca\x4a\x8c\x35\xa5\x6d\xb1\xf4\xe8\xaa\xe3\xab\x1f\xae\xcf\x81\xa6\x4f\x60\x9d\x13\x76\x6b\xba\x2a\xfd\xdf\xd8\x52\xd4\x5e\x6f\x7e\x1f\x78\x35\x7e\x02\x1b\x9a\xe7\x98\x02\xdd\x98\x97\xb8\x9a\x01\x6d\x1e\x1f\xae\xcf\xdb\x92\xdc\x95\xc9\x2a\x8c\xda\xbe\xb0\xc0\xa4\x12\x5a\x7e\x46\xc9\x6d\x24\xe9\x56\xad\x09\x58\xfc\x93\xb3\x36\xbf\x8b\xf9\x25\x08\x9e\x37\x2f\x2e\xbd\xff\x4e\x88\x60\x47\xde\xa1\xa4\xe4\x09\x35\xa1\x27\x4d\xdb\xfb\x50\x52\xac\x34\x85\x15\x11\xac\xb1\xd8\x46\xda\x2d\xc3\x85\x14\x37\x94\x21\x10\x50\x87\x12\xcd\xcb\x0b\x56\x15\x6b\x1d\x44\x36\xb5\xd9\xca\xb6\xe8\x63\xeb\x8e\xa4\x5e\xd3\x37\xf4\x26\xc5\x8b\x69\x4e\x44\x86\x03\x46\x69\x80\xda\x82\xbc\xa4\x8c\x16\x55\xd1\xc7\x08\x4c\x52\xdc\x90\x2a\x57\xc6\xf7\x7f\x47\xc1\x1b\x92\x94\xa9\x67\x27\x50\x50\xb6\xfa\xad\x22\x4c\xd9\xa0\x16\x8b\xf8\x92\x7c\xfa\x06\xca\xe4\x53\x48\xf9\x59\xd0\xbe\xce\x66\xba\x90\x0a\x93\xcf\xfc\x7a\x01\x4b\x7b\x45\x17\x94\x5a\xcd\x5d\x1c\xfc\xe1\xf0\x6c\xc9\xa5\xd5\xed\xb1\x7d\x49\xda\xc5\x6b\x97\x67\x1b\xe0\x25\x0a\x9b\xa6\x74\x53\xf9\xee\xcd\x40\x1f\xe2\x49\xf5\x5c\x11\x76\x5c\x46\x91\x0c\xb8\xad\xf4\x32\xaa\x3b\xca\x92\x4b\xaa\xb8\x38\xb4\x75\x97\x51\x15\x64\xd2\xa7\x1d\x5b\xde\x12\xb9\xf5\xb5\x88\xa6\x94\xf0\xa2\xa0\xaa\x8f\x8a\x5d\xe9\x68\xab\x27\x9d\x29\x81\x68\x8e\x9a\xe4\x48\x98\x0d\x1b\x3a\x03\xf4\x92\xd5\xc0\x2b\x5d\xf2\x60\x9c\x80\x67\x33\x1d\x6d\x4d\x95\x65\xb2\x47\x1b\xd7\x3c\x5c\xa5\x16\xef\x79\x84\xf7\xa1\xd1\x70\xc6\xed\x55\x8d\xa9\x94\x8a\x92\xe6\xd8\xe1\x81\x07\xf2\x79\x11\xd1\x39\xb7\x18\xa2\xc9\xac\x01\x5e\xe2\x17\x4d\x5e\x0d\xb0\xae\x73\xa2\xb4\xe6\x80\x2a\x2b\x04\x0b\x68\xaf\x8b\x66\x20\x2a\x66\x06\x1a\x82\x8a\xc4\x97\xff\x1e\xb1\xa7\x68\xf0\x47\x0a\x8c\xc2\x2c\xf5\xd8\x8a\x3b\x4d\x54\x1e\xf9\xda\xdd\x29\x3d\x89\xb3\x73\xe5\x66\x30\x4c\xc0\x35\x0e\x1f\x24\xea\x20\xa0\x84\xc9\x3a\xaa\x13\x96\x98\x08\x54\x6f\xf0\xb0\xb0\xa7\xd4\x7e\x35\x4f\x12\x94\x51\x51\x27\x0d\xd4\xea\x16\x0f\xab\x56\x39\xdd\xd0\xb0\x58\x6f\xf0\x50\xd3\x21\x43\x74\xec\x82\x26\x17\x55\x0b\x9a\xd6\x7b\x9b\x45\x87\x49\xd4\x69\xd6\x76\x07\xdf\x24\x97\x76\x37\x18\x57\x50\x65\x79\xa7\x4c\x48\x59\xf6\x09\xe3\x06\x19\x61\xea\x8e\x03\x28\x0b\xd0\x3e\xf8\x35\x91\x72\xcf\x45\x7a\x07\x66\xe9\x41\xc2\x42\xc9\x28\xa0\x5a\xd7\x53\x0c\x77\x49\x3f\x00\xb3\xac\x3f\xf7\xa6\xa5\xc5\x43\x92\x84\x57\x4c\x59\xaf\x33\x77\x66\xd1\xdd\x94\xcb\xe9\xb6\x90\x6e\x8a\xb6\x09\x7e\x3a\x85\x9c\x93\x14\xd6\x24\xd7\x91\x5e\x1c\xb5\x04\x6c\x49\x2c\xed\x38\xc3\xdc\x6d\x12\x89\xfa\x3c\xa7\xc8\xd4\x22\x85\x09\xb9\x25\xa7\x46\xf2\x17\x51\x7b\x9d\x18\x80\x3e\x71\x5b\x54\x6b\x81\x0e\xdd\x8b\xa9\x8f\x82\x35\x40\xef\x54\xfd\xe5\xf4\x9b\xbe\x72\xda\x9c\xba\x5d\x43\x3a\xda\x39\x4f\xbc\xaf\x7e\x6d\x19\xdd\xb6\xc0\xa1\x42\xda\xbf\x9c\xf0\x43\x21\x91\xae\x74\x03\x49\xf2\x5b\xfd\xaf\xd5\x8e\xd1\x49\x6d\xfa\x2d\xe5\x34\xfb\xf6\x2a\xc6\xb1\xe7\x7f\x7e\x79\x4d\xfe\xe6\x6b\x6a\xf2\x47\xa8\x92\xda\xfb\x75\x12\x2d\x0b\x3a\xfd\xde\x92\x31\x6e\x70\xdb\x9c\xd9\xfa\x6a\xa9\x08\x4b\x89\x48\x57\x17\x27\xab\xdd\xc9\xdd\x55\xd6\xc9\x77\xab\xb2\x9e\x7d\xb7\x2a\xeb\xf9\x7d\x2f\x09\x82\xc6\xb8\xf6\x88\x4b\x92\x6c\xa9\xee\x36\xf6\xa6\xb9\xd1\x69\x52\x50\x89\x1d\xf3\xae\x8d\xc3\x12\x71\x68\x86\x56\xc2\x99\x12\x3c\x5f\x95\x39\x61\xb8\x62\x66\x2c\x24\xb4\xb5\x47\xd8\x42\x77\xd0\x28\x6a\xda\xcf\x83\xb8\x41\x25\xc8\xad\xb9\xde\x5c\x6b\xa3\xdb\x91\xbc\x42\xc8\xe9\x2d\x02\x2d\x4f\xcd\x3c\x9f\xda\x12\x55\x8f\x03\x10\xd8\x51\xa1\x2a\x92\xc3\xe2\x7a\xa6\x97\x3d\x25\x1d\xb4\x75\xb0\x24\x89\xf1\x3e\x3f\xa1\x06\x49\x25\x15\x2f\x50\x48\xd7\xdf\x9b\xa9\x4f\x5b\xc8\x14\x15\xa3\x89\x0e\xa4\xc3\xd7\x3e\xa4\xa4\x2b\x64\x69\xc9\xa9\x71\xc0\x17\xd1\xc5\x4f\x73\xeb\xf2\x96\xac\x31\x8f\xc3\x94\x37\x79\x02\xb9\x5e\xbc\xff\x36\xc7\x1c\xbc\x1f\xc1\xae\xb5\xca\x8f\xe8\x5e\xc6\xbd\x45\xab\x67\x3f\xb5\xa4\x6b\x3e\xbb\xfa\x88\x38\xad\xa4\x96\x54\x61\xb3\xf4\x72\xf9\xba\x27\x5d\xd5\x20\x6d\xae\xb7\x5c\xaa\x3b\xf0\xcc\x72\x3b\xbd\x1a\xa5\xf6\xe0\x58\xa7\x30\xab\xed\xac\x7a\xfb\xa3\xac\x7b\x86\xba\x5d\xb4\x66\x0b\xc6\x6c\xa7\xd6\x92\xf4\xb1\x81\x4a\xe0\x2c\x3f\x00\x81\x82\xd8\x0b\xa1\x8d\x9f\x4d\xc6\x3c\x35\xa3\xba\x26\xc4\xa5\xd3\x81\x8c\xfe\x3c\xda\xdb\x68\x43\xd6\xdb\x16\xce\x1b\x62\x93\x6f\x9b\x82\x43\xf2\x16\x53\xab\xa2\x3b\xb5\x13\x5c\xf2\xfb\x04\x6f\x27\x7c\x1a\xaf\x70\xa3\x32\x66\xae\x38\x4e\xa4\xfe\x05\x4b\x7c\xa7\x2a\x4b\xa2\x83\xe6\x30\x19\xca\xda\xe6\x68\x51\x42\x4d\x99\x9a\x98\x71\x13\xb5\x0d\x25\x33\xce\x61\x27\xa4\xed\x1c\xcf\xac\x7e\x91\xaf\x78\x64\xad\x75\x23\x10\xe4\x2b\x7b\xf7\xe9\x78\xaa\x5f\xf7\x1e\xef\x69\xea\x9f\xfe\xe4\x61\x97\x96\x63\xaa\x60\x4b\x76\x18\x83\x9a\xf1\x54\x28\x05\xdd\xd1\x1c\x33\x94\x3f\x35\x5d\xa0\x1f\x1d\x36\x70\xa1\x12\x6b\x91\x48\x1b\x4a\xa8\x0a\x23\x8e\x0b\x07\x96\xb0\x93\x6f\xe7\x72\x47\x2f\xae\x58\x43\x27\xbc\x41\xfc\xe6\xb7\x14\x7f\xf9\xfa\xb7\x57\x7f\x7d\xe8\xcb\x95\x1f\xa3\x00\xd6\x37\x26\x16\x5c\x5a\x13\xab\xb4\xa6\xf1\x96\x95\xf1\xd6\x4d\x95\x77\x9b\x6f\x08\x6e\xba\x1d\x7d\x09\x7b\x14\x68\x47\x5d\xc2\xb3\xfb\xed\xdb\xef\x42\x7a\x86\xb1\x1e\xd9\x3b\xdc\xf0\x9c\x44\xa5\xcb\x31\x2b\xab\x57\xc8\x50\xd0\xc4\x2e\x2d\xed\x8a\xdf\x25\xaa\xfb\xcc\x30\xd5\xb2\x07\xb5\x19\xb5\xb2\xb3\x69\x8f\xfa\x92\xf0\xcf\xb3\x8e\xde\xe9\xb7\x3f\xd1\x3c\xba\x63\x6c\xff\x76\xd6\x71\xe5\xa7\x0d\xfd\x2e\xff\x49\xf6\xd0\x37\x29\xf8\x27\x9a\x43\xaf\x66\x7a\xdf\xb8\x39\x75\xd5\xf1\x7b\x28\xf9\x3d\xed\x7d\x53\x18\xdc\x74\x06\x89\xb0\x3f\xe1\xf5\x72\xd8\x84\x87\x5e\xee\xc2\xde\xc8\x8e\x75\x16\xc8\xd4\x9d\xf5\x62\x1b\xdd\x25\x7c\xee\xf0\xed\x15\x42\xf3\xa7\x0c\xad\xfc\xdc\x9f\xef\xa3\xd9\x0b\xc3\x6d\xeb\x3a\xb4\xbe\xf4\x29\xf9\xe0\x5b\x55\x8b\xc8\x06\xbc\xe0\x79\x8c\x43\x04\x3a\x8b\xb1\x83\x91\x13\x86\x52\x27\xdd\x03\x29\x72\x38\x36\x4b\x1f\x74\xe1\x2b\xa7\xe6\x89\xae\xf7\x90\x29\x79\xd4\xa9\x8c\x65\xa7\x32\xbf\x67\x52\xb2\x7f\xf8\xe7\x41\xee\xf8\xe7\x8c\x9e\xf4\x0c\xca\xb8\x36\x09\x8d\x58\x13\xce\xa4\x66\x50\x33\xab\x0b\x57\x57\xa8\xf5\x18\x55\x67\x44\xe2\xee\xb9\xd1\x20\xe2\x12\xd6\x1e\x48\x71\xbb\x0c\xcf\xa3\x18\xb6\x9d\xb7\xd8\xf7\x5e\x25\x97\x92\xea\x12\xcc\xfe\x45\x23\xe3\xfb\xde\x02\xac\xc6\x69\xbb\x58\x67\x40\xf4\xbf\xaa\x0d\x55\xdb\x23\x77\x43\x64\xef\x95\x65\xb2\x19\xff\xa9\x3f\x9a\xbd\xb8\x43\xd4\xbd\xd1\x9f\x4a\xdd\x83\xd6\x61\x7f\x78\xca\x2f\x20\xdb\xfe\xfb\x93\x3b\xa7\xc1\x1e\x28\x89\x46\x93\x7e\x3c\x43\xc7\x24\x96\xb9\x2e\xae\x35\x11\xe1\x96\xbe\x66\x1a\x62\x36\x8b\x8e\x31\x38\x0f\xd1\x86\x1b\x9e\x88\x88\xe0\xfa\x26\x22\x5e\x44\x2f\x37\x7a\xa5\xd9\xb9\x2f\x82\xde\x0b\x9d\x3d\xc2\x9e\x30\x65\xbb\xa0\xb4\xef\x32\x04\xee\xbe\xdd\x21\x69\x5a\x5f\xed\xb4\x5e\x6f\x0e\xee\x24\xb0\xe0\x3b\x84\x8d\xe0\xc5\x97\x6c\xf7\xde\x80\x87\x9b\x5a\x02\xf5\xbe\x27\xbd\xe2\x18\x42\xee\xa8\x76\xe8\x1e\x03\x3a\x77\x19\x4f\xeb\x8d\x86\x8c\xf8\xd1\x5c\x63\x60\xf8\xbb\x5b\xf5\xb6\x13\x6e\xc7\xec\x1f\x65\x90\xe4\x1e\xce\x1e\xfb\xd8\xdd\x11\xef\xef\x76\xf0\x7b\xaf\xfe\xef\xe5\xee\x9b\x0f\xff\xff\x01\x00\x00\xff\xff\xf8\xc8\x16\x7c\xd9\x3f\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 16345, mode: os.FileMode(420), modTime: time.Unix(1537205101, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": {apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
