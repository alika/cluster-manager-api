// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\xdd\x6f\x1b\xb9\x11\x7f\xd7\x5f\x31\xd0\x4b\xed\x22\x96\x12\xdf\x5d\x5b\xd8\x30\xae\xaa\x9d\x26\x42\x12\xdb\x88\x7c\x31\xee\x49\xa0\xb8\xe3\x5d\x36\x5c\x92\x47\x72\xa5\xa8\x41\xfe\xf7\x82\x1f\xfb\xc1\xdd\x95\xd3\x4b\x0c\xdc\xe9\xc1\xd1\x92\x33\x3f\xce\x37\x67\x56\x99\xcf\xe1\x52\xaa\xbd\x66\x79\x61\xe1\xf4\xf9\x8b\x7f\xc0\x8a\x94\xa6\x12\x39\xac\xae\x56\x70\xc9\x65\x95\xc1\x35\xb1\x6c\x8b\x70\x29\x4b\x55\x59\x26\x72\xb8\x43\x52\x02\xa9\x6c\x21\xb5\x99\x4d\xe6\xf3\xc9\x7c\x0e\x6f\x19\x45\x61\x30\x83\x4a\x64\xa8\xc1\x16\x08\x0b\x45\x68\x81\xf5\xce\x33\xf8\x80\xda\x30\x29\xe0\x74\xf6\x1c\x8e\x1c\xc1\x34\x6e\x4d\x8f\xcf\x1d\xc4\x5e\x56\x50\x92\x3d\x08\x69\xa1\x32\x08\xb6\x60\x06\x1e\x18\x47\xc0\x4f\x14\x95\x05\x26\x80\xca\x52\x71\x46\x04\x45\xd8\x31\x5b\xf8\x73\x22\x8a\x93\x04\x7e\x8d\x18\x72\x63\x09\x13\x40\x80\x4a\xb5\x07\xf9\xd0\x25\x04\x62\xa3\xd0\xee\x53\x58\xab\xce\xe6\xf3\xdd\x6e\x37\x23\x5e\xe0\x99\xd4\xf9\x9c\x07\x52\x33\x7f\xbb\xbc\x7c\x79\xbd\x7a\x79\x72\x3a\x7b\x1e\x99\x7e\x11\x1c\x8d\x01\x8d\xbf\x55\x4c\x63\x06\x9b\x3d\x10\xa5\x38\xa3\x64\xc3\x11\x38\xd9\x81\xd4\x40\x72\x8d\x98\x81\x95\x4e\xe8\x9d\x66\xce\x6e\xcf\xc0\xc8\x07\xbb\x23\x1a\x1d\x4c\xc6\x8c\xd5\x6c\x53\xd9\xc4\x66\xb5\x88\xcc\x24\x04\x52\x00\x11\x30\x5d\xac\x60\xb9\x9a\xc2\xbf\x16\xab\xe5\xea\x99\x03\xb9\x5f\xde\xbd\xbe\xf9\xe5\x0e\xee\x17\xef\xdf\x2f\xae\xef\x96\x2f\x57\x70\xf3\x1e\x2e\x6f\xae\xaf\x96\x77\xcb\x9b\xeb\x15\xdc\xfc\x1b\x16\xd7\xbf\xc2\x9b\xe5\xf5\xd5\x33\x40\x66\x0b\xd4\x80\x9f\x94\x76\x1a\x48\x0d\xcc\x59\x13\x33\x6f\xba\x15\x62\x22\xc2\x83\x0c\x22\x19\x85\x94\x3d\x30\x0a\x9c\x88\xbc\x22\x39\x42\x2e\xb7\xa8\x85\x8b\x04\x85\xba\x64\xc6\x79\xd5\x00\x11\x99\x83\xe1\xac\x64\x96\x58\xbf\x34\xd0\x6b\x36\x99\x98\xbd\xb0\xe4\x13\x5c\xc0\x54\x69\x69\xe5\x0f\xd3\xf3\xc9\x44\x11\xfa\xd1\x01\x53\x5e\x19\x8b\x7a\x5d\x12\x41\x72\xd4\x6b\xa2\xd8\xf9\x64\xc2\x4a\x25\xb5\x85\x69\x2e\x65\xce\x71\x4e\x14\x9b\x13\x21\x64\x3c\x64\xe6\x61\xa6\xe7\x0d\x99\x7f\xa6\x27\x39\x8a\x13\xb3\x23\x79\x8e\x7a\x2e\x95\x27\x1d\x65\x9b\x4c\xc2\x2e\x1c\xe5\x5a\xd1\x59\x4e\x2c\xee\xc8\x3e\x6c\xd3\x75\x8e\x62\x1d\x51\x66\x11\x65\x26\x15\x0a\xa2\xd8\xf6\xb4\xde\x39\x86\x0b\xf8\x3c\x01\x60\xe2\x41\x9e\xf9\x6f\x00\x96\x59\x8e\x67\x30\xbd\x0c\x2a\xc1\xbb\xa0\x12\x2c\x6e\x97\xd3\x73\x4f\xb1\x0d\xe9\x70\x06\xd3\xed\xf3\xd9\x8b\xd9\xf3\xb8\x4c\xa5\xb0\x84\xda\x1a\xc7\x7d\x04\x29\x1d\xd4\x3b\x46\x0b\x82\x1c\x3e\xa0\xc0\xff\x32\x12\xe9\xdd\xa7\xd2\xfc\x0c\xa6\x2e\x92\xcd\xd9\x7c\x9e\x33\x5b\x54\x9b\x19\x95\xe5\x7c\x3b\x20\xc5\x92\x30\x47\x5c\xc6\xad\x7f\xe6\x6e\xc1\x11\x47\xa2\x2f\xee\x1f\xff\x07\x3f\x59\xd4\x82\xf0\x75\x26\xa9\xa9\xe5\x39\x78\x94\x09\x75\xe3\x84\x0a\x6a\xe7\xd1\x91\x27\xd1\x91\x27\x44\xb1\x08\x9f\xa1\xa1\x9a\x79\x4b\x3a\x95\xa4\x46\x20\x1b\x59\x59\x38\x64\xa8\x2f\x13\x00\x43\x0b\x2c\xd1\x9c\xc1\xeb\xbb\xbb\xdb\xf3\xfe\xc2\xca\xad\x50\x29\x4c\xe5\x97\xa6\x31\x1b\xdd\x11\xf3\xff\x18\x29\x3c\x8c\xd2\x32\xab\xe8\xa1\xfd\x2f\xe7\x93\x89\x41\xbd\x65\x14\x1b\x41\x82\xbe\x2e\x31\x5c\x96\x20\xbc\x46\xce\x25\xdc\x4b\xcd\x33\x58\x45\xda\x13\xd8\x31\xce\x41\xa3\x42\x62\x81\x80\xcb\x7a\x5f\x22\xad\xf4\x61\xef\x3c\xe7\x8e\xde\xb2\x0c\x33\x8f\xa7\x15\x0d\x48\x01\xe8\xa8\xfd\xfe\xce\xe4\xc7\xa0\xd1\x56\x5a\x98\xee\xfa\x7b\x54\x7c\x7f\xdc\x09\x87\x26\x5e\x7d\x3e\xcc\x88\x62\x33\xe7\x8f\x3a\x0a\xdd\x47\x49\x63\xe1\x0c\xa6\x3e\x59\xb6\x2f\xe6\x85\x43\xdb\x39\xb4\x69\xa4\xd8\xc8\x6c\x7f\x06\xd3\xbf\x4e\x5b\xa7\x07\x5b\x77\x55\x56\x32\x03\x2a\x2b\x61\x41\xa3\x51\xd2\x25\x30\xc0\x7d\xd0\xd8\x3d\x67\x6d\x11\x16\x55\xb9\x41\xed\x2a\xad\x92\x99\x71\x55\xaf\xd6\xdf\x28\x42\x47\x8c\xf0\x0a\xed\xad\xcc\x2e\x3d\xfa\x51\xe7\x21\x35\x43\x67\xe3\x5b\xec\x30\x6e\x8d\x1c\xad\x92\x99\x57\x6c\x9a\x10\x3a\xa3\x40\x6b\x95\x31\xcb\x78\xed\xbd\x32\xfe\x2e\x23\x75\xcd\x6a\xf4\xba\xd4\x48\x2c\xd6\x41\x74\x94\x3c\xa6\xba\x25\x5b\xdf\xa1\x5d\x95\x28\x17\xe5\xf9\x36\xc5\x34\x5a\xcd\x70\x1b\x2e\x02\x63\x89\xad\x8c\x73\x69\xa3\xa5\x2b\xf2\xc0\xac\x81\x8f\xd5\x06\xa9\x14\x0f\x2c\xf7\xf7\x04\x95\x42\x20\xb5\x6c\xcb\xec\xbe\xeb\xe1\xc6\x0c\xed\xf7\x81\x7f\xbf\xdb\x00\x39\x3e\x6e\x80\x51\x4d\x33\xe4\x68\x71\xc4\x7f\x57\x7e\xa3\x11\x3c\x79\x4c\x65\x4f\xb6\xbe\x5d\xfc\x28\xc9\xef\xd6\xa0\xf1\x15\x01\xce\x8c\x75\x7e\x8a\x8c\x66\xc4\x05\x6f\x1d\xc9\x51\xfa\x7c\xc8\x15\x6e\xef\xa9\xdd\x31\x77\x32\x7e\x45\x23\x26\x8c\x25\x9c\xc3\x91\xd4\xa0\x31\x3e\x1d\x83\x65\x9c\x77\x1c\x74\x5b\x27\xdf\x9d\x5f\x87\xa3\xde\x42\xaa\x55\x6f\xf3\xe9\x8a\x48\x90\xea\xdb\xd2\xec\x80\xa2\x05\xf2\x12\x68\x41\xb4\xad\xa9\xef\x5c\x0b\xec\xaf\x98\x0d\xba\xab\xd3\xea\x8a\xfa\x66\x9c\xf9\xa4\x74\xa4\x50\x10\x03\x84\x6b\x24\xd9\x1e\x36\x88\x02\x32\x54\x5c\xee\xb1\x53\x9c\x8d\xbb\x86\x5c\x2d\x6e\x8c\xb8\x0c\x67\xbe\x46\x5e\x5e\x7a\x94\xa3\xfe\x4a\x6a\xc6\xfe\xee\x93\x95\x2b\xa7\xf3\xb7\x19\x31\xe6\x4d\xa3\x6d\xcf\x7a\x6d\x2e\x77\x94\xec\x2d\x8c\xe5\xf3\x13\xa8\x38\xcc\xe8\x54\xcb\x43\xe9\x5c\x69\x51\x77\x85\xbe\x97\xd4\xa5\x6f\x52\x62\x83\x44\x14\x03\xd7\xa3\x74\x52\xe1\x15\xda\x38\x54\x2d\x3b\xe4\x47\xed\xf2\x20\xc3\xe3\xfa\x93\x65\x77\x14\x77\x44\xb7\x2f\x93\x89\x0f\xe0\xb4\x71\x72\x53\x13\x1a\x3b\x29\xd1\x18\xd7\xf1\x27\xed\x4f\x3c\xca\x8d\x3d\x22\x0f\xbd\xd3\x05\xbc\x38\xef\x40\xd5\x6d\x88\xeb\xaf\x3a\xb0\x23\x70\x5e\xc3\x14\xb0\x26\xaa\x31\xeb\xe7\xb4\xf9\x68\xfb\xbe\xeb\xa6\x79\xb1\x12\x1e\xd0\xd2\x90\x4c\x4d\x53\x54\xd3\xbd\x45\xb2\x45\xc0\x52\xd9\xbd\xa3\xfc\xad\x42\xbd\x07\x97\xde\x4d\xf7\x63\xfa\x7a\x05\xd8\x47\x04\xe9\x8a\xef\x44\xf9\x4a\x77\xe5\x0a\x49\x7a\xe2\xb1\x67\x65\xc2\xfe\x70\x1a\x78\xfa\x87\xf5\x1b\x93\x54\xef\x7a\x64\xae\xef\x7d\x2b\x5d\x05\x6a\xfa\x9e\xd8\xc7\x0d\x3c\xd5\x94\xad\xa6\xe1\xd3\xcd\xfc\xe8\x83\xd3\x53\x24\x47\xdf\x46\xba\x95\x42\xda\x32\x5d\xc0\xe9\x61\x69\x7b\xc6\xb9\x2f\xd0\xcf\xb5\x52\xfb\x57\x07\x5d\xb1\x77\xc4\x74\x85\x76\xb3\xba\x7f\xab\x50\x87\x61\xa8\x37\x92\x83\xfc\x18\x14\xf0\x2b\x52\x60\x7b\x99\xae\xa5\x5e\xa3\xd6\x52\x77\x12\x21\xca\xb1\xb4\x58\x36\x47\x79\x89\x6b\x82\x97\x9e\x21\xb0\x5d\xc0\xdf\x3b\x39\xd1\xf1\xf5\xef\xb3\x3d\x97\xf2\x23\x66\x50\xa9\x83\x39\x32\x84\xee\x19\x6a\x69\x12\xdc\x18\x45\x66\x6f\x2c\x96\xdf\x69\x8a\x2b\xb4\x84\xf1\xef\x31\x48\xbf\xd1\xea\xfa\x97\x58\x60\x89\xec\x7f\x31\x41\x75\x2b\xc3\xad\x28\xf7\x5f\xb5\xca\xb0\x5b\x6b\x4f\xb8\x94\x15\xcf\x12\xdb\xd4\xd7\xad\xbb\x59\x86\xa6\x89\x6c\xab\xa6\x41\xb6\xbe\x36\xb5\x31\x15\x05\x89\x1d\x74\x3f\x98\x07\x5d\x18\x7c\x3e\xbc\xfd\x5d\x3e\xac\x2b\xd4\x68\x7f\xe8\x87\x56\xcc\xc6\xa2\x79\x28\x73\x97\xa8\x15\xe6\xaa\x17\xab\x5d\xe5\x59\x96\xc8\x30\x12\xd9\x23\x3e\x3b\x3d\x1f\xf3\xba\x49\x0c\x3d\xc2\xdd\x18\xfa\x87\x31\xa1\x3b\xc1\xf9\xe7\x16\x7d\x84\xbf\x33\x68\x59\x59\xcf\x59\xf5\xeb\x85\x11\xb8\x0e\xfd\x05\xfc\x98\x58\xe3\x65\x27\x75\x63\x91\x0e\x09\x49\x65\x86\x5d\x0c\xf7\x3c\xa8\xe7\x81\x34\x62\x8d\x5f\xab\x69\xc4\x0c\xdb\xf2\x4e\xc2\xd5\xa5\x2d\xb4\xf0\xa6\xf0\x09\xb8\xc1\xba\x33\xf6\xaf\x3c\x13\x91\x9a\xa2\x92\xba\x25\xde\xcf\x87\x61\x98\x38\x74\xf7\xb6\xfe\xf2\x4d\x91\x90\xde\x49\x1e\xc9\xf7\x6b\xe1\xe5\x6d\x68\xd4\xe7\x50\xa9\x5c\x93\xcc\x55\x9c\x2e\x5e\xdd\xad\x75\xbd\x17\x33\x34\xca\xd4\x0c\x98\x27\x3b\x96\xd5\xab\x3f\x37\x15\x24\x48\xcc\x5c\x17\xbf\xc5\x94\x94\x64\x25\x13\xa0\x34\xdb\x32\x8e\x39\x9a\x9f\xdb\xf4\xae\xeb\xb1\xa7\xf3\x6e\xee\x9b\xc4\xc9\xe0\x82\xc8\x76\x8c\xe2\xdf\x4f\x5b\x19\x81\xa3\x7d\x9b\x2a\x10\x35\xf2\x9b\xeb\xb6\x8f\x80\x0b\xf8\xe9\x31\xb7\xf6\xef\x62\x12\xb4\x97\x0a\x75\xe8\x46\x4d\x45\x29\x1a\xf3\x50\xf1\x83\xe5\xc9\xc7\x7b\xc4\x37\xb0\x43\x8d\x90\xb3\x2d\x8a\xff\x27\xca\x46\xc6\x96\x27\x0e\xb3\x38\x66\x1a\xb4\x96\x89\x3c\xd4\xce\x57\x28\x50\x33\x1a\xb6\x56\x61\xa7\x3e\xa5\x1b\x59\x61\xec\x58\x8d\xb0\xb6\x43\x49\x98\xe2\xfa\xa5\x6b\x74\xe0\xfa\x03\xed\x3c\x9c\x9c\xfe\x74\x66\xbe\xae\x07\xdc\xfa\x94\x51\xc3\x8e\x4d\x79\x7f\xa0\x5d\x47\x55\x1c\x6d\x7d\xa2\xde\x4d\x6a\x3e\x32\x53\x8c\x70\xd7\x95\x2a\xad\x71\xe3\xb5\x6c\x54\xc2\x36\x60\x47\xa5\x13\x9d\x3b\x32\x8c\xe4\x25\x0a\xfb\xe8\x94\xd0\x67\x6f\x66\xad\xc0\xef\xd7\x3b\xef\xea\x7b\xa5\x77\xbc\x94\x27\xbd\xa2\x97\x56\xa3\x92\x86\x59\xa9\x93\x16\xd1\xad\x1e\xbc\x73\x03\xa3\x38\x10\x4e\x3f\xa6\x3c\x44\x63\x8c\x98\xf0\x9b\xd7\x91\x40\xe3\xea\xe9\x9e\x94\x1c\x4e\xfc\xd6\x07\xc2\x2b\x34\x33\xbf\x42\xa5\xb0\x28\x6c\x9c\xcf\x6a\xd3\x7b\x82\x41\xa9\x3d\x3c\x27\x8d\xba\xa0\x19\x9e\x4e\x80\x56\x5a\xa3\xb0\x3c\x8e\x3b\xcc\x00\xd9\xf9\x1f\xfc\x4a\x42\x06\xc3\xe8\xe0\xaa\x7f\x47\xc8\xea\x6b\x63\x9b\xa3\xf1\xa2\x38\xc4\xc4\x05\x0e\x61\x71\xff\x55\x80\xc5\x7d\xe0\x77\x82\x0d\xfa\xb6\xd1\x93\x3e\x0f\x64\x5c\xdc\x2e\x01\x45\xa6\x24\x4b\x43\xad\x5e\x1b\x68\x56\x19\xd4\x5e\xe5\xd8\x37\xd7\x28\x5d\xe6\x86\xa6\xaf\xd4\xcd\xa2\xb2\x05\x7c\xc4\x7d\xf3\xd3\xe8\xd8\xd9\x92\x54\xb6\x58\x3b\xaa\x47\xb5\xaa\xd5\x4f\x94\xd2\x98\xbb\x40\x77\xf0\x8b\xfb\x55\x1a\xaf\x79\xc8\xcd\x54\x9f\x15\x52\x8d\xf6\x0d\xee\x97\x59\xe0\xba\x5d\xc2\xc2\xd7\xab\xa4\xc5\xf4\x54\x4e\xa6\xb5\xef\x6c\x4f\x47\x30\x02\xd7\x9b\xa8\x9c\xc3\x21\x87\x70\xc2\xc6\xa8\x8a\xc9\x9b\xa7\x30\xd5\x8c\x6d\xf6\x67\x9a\x87\x4e\xbd\x75\x23\xfb\xcd\x9b\x03\xe3\x68\x0d\x35\xf2\xd6\xab\x1d\x49\xa3\x5e\x96\xe4\x20\x83\x9b\x73\x36\xa8\x03\x1d\xb5\x72\x66\xd7\x6d\xf1\x7b\x71\xde\x07\x2a\x88\x29\xea\xd2\xe6\x90\xa8\x2c\x4b\x66\xc7\x50\xc2\x4e\x3a\xf9\x8e\xbf\xa0\xb0\x1a\xd1\xab\x4a\x39\x12\x01\xbb\x02\x05\x6c\x2a\xc6\x47\x61\x1d\xf1\xda\xcd\x09\xd8\x96\xac\x08\x7d\xe5\x16\xe5\x83\xe7\xcd\xfa\xbc\x7e\x71\x9d\x05\xbe\x1f\x13\xbe\x0f\xed\x75\x90\x4b\x17\xf2\x59\x18\x2f\x4a\xc5\x38\x0e\x64\x90\x1d\xfb\xfc\x94\xe0\x5c\x06\x0e\xed\x21\xfa\x7c\xb4\xde\xbc\x80\xbf\x25\x5c\xb7\x9c\x58\xe7\x39\xd7\x9f\x7a\x23\x04\xc2\x10\xc3\x73\xd0\x95\xf0\xff\xbb\x20\x96\x8d\x0e\xa2\xaa\x19\x3b\xef\x10\xdc\xdf\x49\x4f\xad\x4e\x60\xf8\xad\x91\x78\x89\x1a\xad\xbb\x2f\x5a\xeb\xab\x6f\xf2\xbf\x00\x00\x00\xff\xff\x33\x5b\xff\x13\x17\x23\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 8983, mode: os.FileMode(420), modTime: time.Unix(1527976970, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
