// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5d\x6f\x1b\x37\xb3\xbe\xd7\xaf\x18\xe8\xe6\xd8\x07\xb6\x36\x71\x92\x73\x0a\xbb\x3e\xa8\x2a\xb7\x8d\xe0\xf8\x03\x91\x1b\xa3\x57\xc2\x88\x3b\x5a\xf1\x88\x4b\x6e\x49\xae\x64\x25\xc8\x7f\x7f\x41\x72\xbf\xb5\x72\xd2\x34\x05\x5e\xbc\x06\xda\x68\x97\x33\xb3\xc3\x67\xbe\x1e\xae\x14\x45\x30\x51\xd9\x4e\xf3\x64\x65\xe1\xec\xc5\xcb\x1f\x60\x86\xa9\xc9\x65\x02\xb3\xab\x19\x4c\x84\xca\x63\xb8\x45\xcb\x37\x04\x13\x95\x66\xb9\xe5\x32\x81\x07\xc2\x14\x30\xb7\x2b\xa5\xcd\x68\x10\x45\x83\x28\x82\x77\x9c\x91\x34\x14\x43\x2e\x63\xd2\x60\x57\x04\xe3\x0c\xd9\x8a\xca\x95\x13\xf8\x40\xda\x70\x25\xe1\x6c\xf4\x02\x8e\x9c\xc0\xb0\x58\x1a\x1e\x5f\x38\x13\x3b\x95\x43\x8a\x3b\x90\xca\x42\x6e\x08\xec\x8a\x1b\x58\x72\x41\x40\x4f\x8c\x32\x0b\x5c\x02\x53\x69\x26\x38\x4a\x46\xb0\xe5\x76\xe5\x9f\x53\x58\x71\x9e\xc0\x1f\x85\x0d\xb5\xb0\xc8\x25\x20\x30\x95\xed\x40\x2d\x9b\x82\x80\xb6\x70\xda\xfd\xad\xac\xcd\xce\xa3\x68\xbb\xdd\x8e\xd0\x3b\x3c\x52\x3a\x89\x44\x10\x35\xd1\xbb\xe9\xe4\x97\xdb\xd9\x2f\xa7\x67\xa3\x17\x85\xd2\xef\x52\x90\x31\xa0\xe9\xcf\x9c\x6b\x8a\x61\xb1\x03\xcc\x32\xc1\x19\x2e\x04\x81\xc0\x2d\x28\x0d\x98\x68\xa2\x18\xac\x72\x4e\x6f\x35\x77\xb8\x9d\x80\x51\x4b\xbb\x45\x4d\xce\x4c\xcc\x8d\xd5\x7c\x91\xdb\x16\x66\xa5\x8b\xdc\xb4\x04\x94\x04\x94\x30\x1c\xcf\x60\x3a\x1b\xc2\xcf\xe3\xd9\x74\x76\xe2\x8c\x3c\x4e\x1f\xde\xde\xfd\xfe\x00\x8f\xe3\xf7\xef\xc7\xb7\x0f\xd3\x5f\x66\x70\xf7\x1e\x26\x77\xb7\x57\xd3\x87\xe9\xdd\xed\x0c\xee\x7e\x85\xf1\xed\x1f\x70\x3d\xbd\xbd\x3a\x01\xe2\x76\x45\x1a\xe8\x29\xd3\x6e\x07\x4a\x03\x77\x68\x52\xec\xa1\x9b\x11\xb5\x5c\x58\xaa\xe0\x92\xc9\x88\xf1\x25\x67\x20\x50\x26\x39\x26\x04\x89\xda\x90\x96\x2e\x13\x32\xd2\x29\x37\x2e\xaa\x06\x50\xc6\xce\x8c\xe0\x29\xb7\x68\xfd\xad\xbd\x7d\x8d\x06\x4e\xe4\x86\xb3\x15\x92\x80\x0f\x24\xe9\x23\x47\xf8\x31\xdd\x84\x4f\x3f\x25\x29\x72\x31\x62\x2a\xfd\x3f\x27\x37\x16\x7c\x8d\xf0\x0e\xb5\x21\x09\x3f\xa2\xbb\x1a\x09\x7f\xd5\x14\x1c\x98\x9d\xb4\xf8\x04\x97\x30\xcc\xb4\xb2\xea\xd5\xf0\x62\x30\xc8\x90\xad\x9d\xab\x4c\xe4\xc6\x92\x9e\xa7\x28\x31\x21\x3d\xc7\x8c\x5f\x0c\x06\x3c\xcd\x94\xb6\x30\x4c\x94\x4a\x04\x45\x98\xf1\x08\xa5\x54\x85\xdb\x23\x6f\x66\x78\x51\x89\xf9\x6b\x76\x9a\x90\x3c\x35\x5b\x4c\x12\xd2\x91\xca\xbc\x68\xaf\xda\x60\x10\x56\xe1\x28\xd1\x19\x1b\x25\x68\x69\x8b\xbb\xb0\xcc\xe6\x09\xc9\x79\x61\x65\x54\x58\x19\xa9\x8c\x24\x66\x7c\x73\x56\xae\x1c\xc3\x25\x7c\x1a\x00\x70\xb9\x54\xe7\xfe\x13\x80\xe5\x56\xd0\x39\x0c\x27\x61\x4b\x70\x13\xb6\x04\xe3\xfb\xe9\xf0\xc2\x4b\x6c\x42\x81\x9d\xc3\x70\xf3\x62\x74\x36\x7a\x51\xdc\x66\x4a\x5a\x64\xb6\xb4\xe3\xfe\x24\xa6\xce\x54\x59\xeb\x93\xdb\xc9\x43\x21\xec\xfe\x72\x2d\xce\x61\xe8\x0a\xc3\x9c\x47\x51\xc2\xed\x2a\x5f\x38\xac\x23\x13\xe4\x4f\x99\x64\x36\x2a\xa0\x3d\x2d\xa0\x3d\xc5\x8c\x37\x6c\x90\x0b\xd0\x39\x0c\x31\x4e\xb9\xfc\xa9\xa9\x38\xe2\xaa\x90\xfb\xec\xfe\xf1\xff\xa3\x27\x4b\x5a\xa2\x98\xc7\x8a\x99\xd2\xd1\xbf\xeb\x46\x4c\x86\x69\xee\x21\x3e\x87\xe1\x8d\xd2\x04\xb8\x50\xb9\x85\x43\x08\x7e\x1e\x00\x18\xb6\xa2\x94\xcc\x39\xbc\x7d\x78\xb8\x9f\x5d\x74\xef\xb8\x1b\x4c\x49\x93\xfb\x3b\xc3\xa2\xf0\xdd\x23\xa2\xff\x37\x4a\x7a\x33\x99\x56\x71\xce\x0e\xad\x7f\xbe\x18\x0c\x0c\xe9\x0d\x67\x54\x39\x12\xf6\xeb\xea\x99\x0b\xe1\xf4\x37\xdc\x77\x4a\x2c\xf3\xd7\xaf\xeb\x8c\xc1\x44\x13\x5a\x2a\xf5\x8e\x5a\x97\x37\x26\x39\x06\x4d\x36\xd7\xd2\x74\x96\xde\x53\x26\x76\xc7\x8d\x04\xa8\x32\xd4\x57\xc0\x08\x33\x3e\x72\x40\x97\x79\x57\xff\x65\xb9\x85\x73\x18\xfa\x1a\xd9\xbc\x2c\xd1\x1e\xb6\x64\x16\x2a\xde\x39\xa1\xff\xae\x6f\x7f\x2e\x22\xdc\xda\x98\x26\xab\x39\x6d\x42\x9b\x31\x16\x6d\x6e\x5c\x6b\xae\x76\xe9\x5a\x08\x70\x6b\x60\x9d\x2f\x88\x29\xb9\xe4\x89\xef\x42\x4c\x49\x49\xcc\xf2\x0d\xb7\xbb\x0a\x89\xdf\xc8\x56\x30\xd4\x9f\xdb\x18\xd4\xf7\xbf\x1d\x80\x84\x9e\x07\xa0\x77\xa7\x31\x09\xb2\xd4\x13\xbf\x2b\xbf\x50\x39\xde\xba\x6c\xfb\xde\x5a\xfa\x76\xf7\x0b\x4f\xfe\xf2\x0e\xaa\x58\x21\x08\x6e\xac\x8b\x53\xa1\x68\x7a\x42\xf0\xce\x89\x1c\xb5\xaf\x0f\x85\xc2\xad\x7d\xef\x70\x44\xce\xc7\x2f\xef\x28\xd7\xb2\x6c\x92\xbe\xb5\xea\xd4\x97\x66\xd1\x16\x30\xe3\xe0\x2a\xb3\x11\xae\xdf\xc8\x16\xac\x65\xda\x10\x3f\xaa\x6f\xef\x6d\xb2\xb8\xff\xdd\x36\x58\xb8\xdb\xb3\xb7\xcf\x83\x41\x4a\xc6\xb8\x29\xd7\x6d\x03\x75\x43\xb9\xc5\x94\x4a\xfa\x53\x56\x99\x55\xb0\xa0\xba\xcb\x50\xec\x85\x1d\xd9\x90\x89\x9f\x0c\x70\x09\x2f\x2f\x4a\x0b\x0f\xab\x42\xd6\x8d\xf2\x92\x0b\x78\x1c\xbc\x44\xeb\xd1\xf7\x85\xdc\x2c\x23\x56\x2b\x5d\xc2\xd9\xc5\x41\x6f\x3d\x50\x8d\x06\xb8\x22\xcf\x51\x94\xf6\x34\xb0\xe9\xf6\x16\x4d\xd3\x69\xc7\xbb\x3c\x43\x74\x44\x8c\x8c\x1d\x84\x4e\xa4\x04\xa8\xf5\xde\x06\x62\xb2\xc8\x85\xe9\x22\x51\xa8\x82\x26\x93\x29\x69\x28\xec\x28\x2c\x4e\x2d\xa5\x95\x60\x77\x0b\xad\x86\xf3\x35\x68\x0b\xa5\xd6\x8e\xe8\x65\xcf\x62\x3d\x7e\x9c\x39\x74\x62\x92\x96\xa3\x08\x85\x36\x7e\x9c\x35\x6e\x01\x6e\x4d\xf0\xa6\x54\xf9\x98\x6b\xda\x57\x72\x77\x5b\x6a\x5e\xec\x12\x5e\x5d\xf4\xf9\x5a\x86\xca\xc0\x11\x6e\x4d\x84\x6b\x13\x6d\x52\x47\x54\x23\xb2\xec\xb8\xe9\x72\x23\xa8\xaf\x0f\x20\xd2\x89\xe8\xd4\xb4\xe0\xe0\x32\x74\xff\x9d\xb1\x94\xee\xc7\xac\x19\x81\x2b\x1f\xb4\x67\xe3\xd0\xed\x9f\xcd\x44\x42\xeb\x58\x74\xe3\xd9\xff\x65\x02\xe2\x56\x39\x6a\x60\xb5\xda\xfd\xa7\x06\x63\x7f\x76\xd4\xc0\x4c\x54\x2e\xe2\x56\x48\x16\x54\xe2\x51\xb4\x82\xbe\x2a\x9a\x55\xe3\xda\xa9\x36\x6b\xae\x70\xa6\x98\xe7\x87\x2b\xa5\x98\x09\xb5\x27\x5f\x0d\xf0\xcb\x6f\x05\xf8\xec\x9f\xcf\xf6\x6a\x9a\x7d\x6b\xc6\x17\x4a\xef\x7a\x87\x2c\x65\xae\x55\xc6\x7d\x3d\x69\x1f\xea\xa6\x50\xed\xcc\x55\xa7\x21\x35\xf7\xc7\xe3\x96\x0f\x3d\xed\xab\xa7\x42\x6a\x50\x9b\x35\x66\x5a\xf9\xd1\xa3\x5d\xe5\xc7\xab\x3e\xa7\x1b\xb5\xfe\xef\xed\x7a\x8f\x7e\x83\xad\x5a\x55\x92\x55\xf7\xf1\x80\xb9\x86\x7c\x37\xaf\x0e\x4f\xd3\xde\xc6\x56\xe5\xe7\x29\xb0\x5c\x6b\x92\x56\x14\x43\x91\x87\xda\x51\x1a\x52\x44\xf3\xc5\x01\x5f\x92\x22\xb5\x84\xeb\x7c\x41\x5a\x92\xa5\x96\xd6\xfa\x07\x33\x2f\x85\x3c\x8e\x7e\x51\x49\x52\xcb\xca\x8b\x79\x93\x52\xd5\xa4\xa6\x78\x84\xab\xf6\x7d\xfa\xb0\x47\x21\xc6\x8f\x33\xbf\xdf\x50\xf9\xaf\x2e\x0e\x48\x5d\x17\x52\x45\xa1\xbf\x3e\x20\xf7\xe1\xe6\x11\x35\x79\xd1\x50\xe2\x70\x09\xff\x5b\x12\xa8\xaf\xe0\x1c\xdc\xc0\xdb\x71\x5d\xb3\x2b\x9e\xac\xe6\xb8\x41\x2e\x70\xc1\x05\xb7\x3b\xb8\x84\x37\x2d\x20\x97\xb8\xd0\x9c\x15\x43\x3f\x37\x1d\x6e\x45\x76\xab\xf4\x7a\x5e\x08\x5d\xc2\xff\x5c\x0c\x0e\x46\xbf\x04\xe2\xd3\xa0\x03\xe2\x15\x5a\x84\x09\xc9\x32\xab\xc6\x8f\x33\x77\x2b\xdc\x81\x18\x2d\xce\x59\xf8\xdc\x8c\x72\xb3\x3d\x3a\xef\x72\xde\x9e\x02\x7d\xdd\x97\x35\x3e\x37\x8b\xe7\xe7\x3f\xee\x80\x5b\x4a\xab\x96\x7d\xaf\x8b\x84\xce\x35\xc5\xae\x88\x1d\x2b\x33\x2a\xd7\x8c\xda\x65\x33\x95\xc6\xfa\x97\x77\x89\x56\x79\xd6\x69\x72\xe3\xc7\x59\xb9\xfe\x9b\x5b\x06\x5e\x5c\xcd\x83\x74\x88\x73\x1d\x35\xce\x56\x7b\x60\x94\x50\xb6\x41\x69\x25\x63\x50\xd4\x94\x78\x3e\x9e\x9b\x53\x42\x63\x4f\x5f\x9e\x00\x59\x36\x3a\xae\x24\x8b\x98\x15\x72\x15\x94\x2d\x23\xad\x54\xf8\xa8\x24\x99\x86\xc1\xc5\x09\x94\x9f\xcf\x98\xff\xbc\x25\xf7\x39\xee\x3e\xa9\x02\xa0\x78\x64\xd3\xea\x3c\x58\xad\xd0\xaf\xb3\xf6\x57\xa5\x61\xbb\x22\x09\x46\xa5\xfe\x5d\xa9\x4c\x0c\xb8\x0c\x47\xa1\x09\xe3\x9d\x8b\x9e\xb3\xda\x85\xa5\x27\x56\x7b\xb5\xfa\xe1\x7e\x02\x3c\x3e\x81\x85\x40\xb9\xf6\x47\x70\xf7\xdf\x30\x58\x74\x55\xef\xaf\x77\x2a\x1f\x9e\xc0\x92\x0b\x41\x31\xf0\xa5\x7f\x7f\xeb\x1c\x70\xe9\xf1\xe1\x7e\xd2\x45\x72\x93\xb1\x79\xb3\x6b\x97\xc4\x82\x58\xae\x1d\x7e\x3e\xc8\x5d\x25\x53\xac\x86\x14\x08\xfa\x67\x17\x5d\x7f\xa7\xe3\x1b\xd0\x4a\xd4\xef\x2c\xcb\xfa\x3d\x42\x2d\x8f\xcb\x82\x32\x46\x31\xee\x5b\x4f\x1c\x77\x9f\xc3\x31\x9d\x3b\x0b\x73\xd4\xb2\xce\xd8\x1a\xed\x4e\xe2\x42\x4c\x4b\x2e\xdd\xe1\xd8\xee\x32\xf2\xef\x2d\x64\x9e\x2e\x5c\x13\x59\x56\x69\x6b\xba\xd0\xb7\xb3\xbb\x85\x7a\x65\xdf\xdb\x3b\x4a\xdf\x8c\x04\xea\x84\x0e\x24\xa5\x17\xea\x02\x79\xc3\x25\x4f\xf3\xb4\xcf\x11\x38\x8a\x69\x89\xb9\xb0\xbe\xf6\x3f\x92\x56\xb5\x49\x2e\xed\xab\x33\x48\xb9\x9c\xff\x99\xa3\xb4\xa1\xa9\xb5\x21\xbe\xc1\xa7\xbf\x61\x19\x9f\x9a\x96\x5f\x35\x8e\xaf\x51\xe4\x88\x54\x73\xf8\x8c\xef\xa7\x30\x0b\x47\xf0\x06\xd5\xaa\xcf\xda\xf0\xa9\xd0\x0b\x94\xcb\x85\xbb\xd4\x2e\x29\xe9\xbe\x5e\x97\x9e\x2d\x41\x65\xa4\xc3\x98\x72\x87\xca\xbb\xeb\x03\xe7\x90\xd2\x54\xcf\x2b\x80\xbd\x92\xb1\x98\x80\x0a\x4c\x2f\xe1\xee\x44\x99\x29\xc3\xad\xd2\xbb\x6e\xec\x12\x6e\x1b\x93\xf4\xe5\x5e\x2e\xaf\xd0\xac\x4a\x2e\xe2\x2c\x31\x95\xa6\xdc\xf6\x59\x09\x2b\x7b\xd1\xea\x19\x67\x56\x13\xf9\xad\x32\x41\x28\x43\xdb\x70\x13\xa0\xd7\xac\x13\x9e\x3b\xca\x43\xed\x01\x1c\x45\xae\xdb\x7a\x96\xe5\xa7\x47\x57\xd7\xdf\x9c\xc7\x41\xef\x75\x4b\xef\x43\x1d\xe1\x44\xf9\xb1\x18\x98\x52\x9a\x71\x41\x7b\x3e\xa8\x06\x3e\x6f\x5a\x76\x26\x41\x43\xd7\x93\xb5\xa1\xc7\xca\x45\x3f\x57\x1b\x5a\xf7\x02\xad\x8b\x1c\x70\x1b\x40\x08\x82\xb1\x4f\x9f\x08\x74\x2e\xfd\x77\x19\x0d\x46\x52\xd2\xff\x52\xb1\x87\x34\x94\x5b\x6a\x24\x85\x5f\xea\xc9\x95\x62\x37\x2d\x7a\x54\x72\xf7\x22\xe8\xac\x3d\x9d\xf3\xe2\xeb\x17\xdf\x70\x7d\xc1\x37\x06\x75\xa3\xa1\x34\x87\x75\x8b\x27\xcc\x88\x69\xb2\xd7\xb4\x9b\x86\x5d\xba\xba\x1a\x33\x46\xa6\x45\xea\x8c\x97\x9a\xaf\x69\x37\xef\xd0\xe9\xda\x46\xd0\xba\xa6\x5d\x65\x07\x0f\xd9\x09\x0b\xce\x5c\x8b\x2d\x38\x5b\xef\xc3\x14\x3d\x6c\xa2\x1a\xb3\xe1\x74\xf0\xb7\x70\xe9\x9e\x06\xdb\x0c\x2a\xcb\x9e\xc5\x04\xb3\xac\x0f\x8c\x07\x92\x28\xed\x33\x1b\xb0\x41\xa0\xbb\xf1\x7b\x34\x66\xab\x74\xfc\x8c\x66\x56\x8a\x34\x89\x92\x0f\x40\xbe\xa8\xbe\xc0\x78\x0e\xfd\x86\x58\x70\xfd\x75\x99\x5a\x0e\x1e\x64\x4c\xe5\xd2\x86\xaa\xf3\xef\xcc\x5a\xef\xa6\x8a\x99\x1e\x88\x74\x4d\xda\x8e\xe8\xe9\x1c\x84\xc2\x18\x16\x28\x5c\xa7\xd7\xc7\x1d\x80\x83\x89\x59\xf8\x26\x63\x5c\x3c\xa4\x05\xf5\x44\x70\x92\x76\x1a\xc3\x11\xae\xf1\xdc\x23\x7f\xd5\x3a\x5e\x33\x2f\xd0\x07\x77\x50\x0d\x19\x58\xa8\x97\x30\xf5\x59\x08\x09\x58\x16\x55\x3f\x9d\xbe\xee\xa3\xd3\x7e\xd7\x5d\x0e\x59\xd8\x16\x8a\x95\xb5\xfa\x57\x69\x74\x37\x03\x0f\x11\xe9\xf2\x7b\x80\xf2\xfb\xa0\x56\xac\xdc\x01\x12\xc5\xda\xfd\x1b\xa2\xe3\x63\x52\xa5\x7e\x27\x38\xf5\x73\x7b\x03\x53\xb8\x57\x5e\x7e\x3d\x27\xbf\xfe\x2b\x9c\xfc\x3b\xb0\xa4\xee\xf3\xf6\x06\xad\x6c\x9c\xf4\x7b\x29\x63\xfb\x80\xdb\xf5\x2c\xf0\xab\x99\x45\x19\xa3\x8e\xe7\x57\x67\xf3\xcd\xd9\xf3\x2c\xeb\xec\x1f\x63\x59\xaf\xfe\x31\x96\xf5\xfa\x4b\x5f\x12\x34\x0e\xc6\x9f\x5a\x01\xa8\x8f\xff\xef\x70\x41\xe2\x30\xfe\x08\xc2\x09\x7c\x15\xfa\xfe\x15\x03\x8a\xfc\x39\xc5\xb0\xde\x73\xd0\x79\x68\xfc\x06\x01\xab\x5e\x88\xf5\xef\x12\xa4\x8a\xa9\xcd\xd7\xfc\xe6\x6e\x90\xad\xb8\x6c\xee\xb1\x61\x30\x37\xa4\xbd\xab\xce\xd6\x6c\xf6\xb6\xd9\x57\x1b\x4e\x55\x62\xbd\x4c\x4d\x19\xfb\x05\x7d\x2f\xd2\x77\x62\xf1\x3f\x2c\x38\xa0\x1b\x22\xea\x25\xba\x39\xe2\x54\xd7\x3f\x98\x8a\xf4\x56\xe7\x1d\x25\xad\x56\xc2\x31\x16\x49\x23\x78\x58\x71\xe3\x61\x01\x6e\x40\x49\xb1\x03\x84\x14\xc3\x1b\x8d\x65\xf9\xbb\x1a\x12\xb1\xff\x99\x89\xaf\xd1\x78\xb4\x47\x7e\xea\xb1\xf4\x7a\xcf\x07\x1f\x41\x53\x3d\x3e\x0d\x50\x9b\xfd\x23\x6d\x37\x9d\x0a\xc5\x8a\xd8\xd5\x61\x2e\xc2\x65\x60\xeb\x8f\xd6\x8e\xa4\x69\x6e\x68\xaf\xb9\x56\xa6\xf7\xa3\x5c\xa0\x30\xf7\x28\xcc\xdd\xfe\xdb\x6f\x1f\xbe\xc3\x23\xb6\x4a\xaf\x49\x57\xb6\x5f\x37\xa6\x16\x37\x60\x56\xfe\xe5\xfa\xc2\xb5\xbc\x90\xcf\x82\xaf\x09\x78\x76\xee\xa3\x69\x57\x68\x61\xcb\x85\x28\x24\xb8\xb6\x39\x0a\x98\xde\x47\x6e\xb9\xb4\xe4\x28\x83\x1b\xd5\xc8\x7c\xef\x2f\x7f\x1a\x01\x2c\x37\x56\xa5\xa4\x4d\xf1\x76\xc9\xff\xdc\x28\xd0\xe8\x34\x97\xae\x36\xe8\x99\x97\x8e\x98\xf1\x39\xc9\x38\x53\xdc\xb7\xff\x37\x6e\x50\xfe\x2b\x00\x00\xff\xff\x37\xe6\x65\x4f\xfd\x25\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 9725, mode: os.FileMode(420), modTime: time.Unix(1537158880, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
