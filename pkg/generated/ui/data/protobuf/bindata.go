// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\x5d\x73\xdb\xb6\xb2\xef\xfa\x15\x3b\x7a\xb9\xf2\x9d\x58\x8a\x1d\xa7\xcd\xb5\x4f\x6e\x8f\x8e\xdd\x93\x68\x12\x3b\x9e\xc8\x4d\xa6\x4f\x1a\x88\x5c\x51\x38\x26\x01\x16\x00\xa5\xa8\x9d\xfc\xf7\x3b\xf8\x20\x09\xf0\x43\x71\x1c\xe5\xf6\xcc\x99\x7a\xa6\x8d\x44\xec\x2e\x16\xfb\xbd\xe0\x6a\x32\x81\x4b\x9e\xef\x04\x4d\xd6\x0a\x4e\x9f\x9e\xbc\x80\x39\xc9\x64\xc1\x12\x98\x5f\xcd\xe1\x32\xe5\x45\x0c\x37\x44\xd1\x0d\xc2\x25\xcf\xf2\x42\x51\x96\xc0\x1d\x92\x0c\x48\xa1\xd6\x5c\xc8\xf1\x60\x32\x19\x4c\x26\xf0\x96\x46\xc8\x24\xc6\x50\xb0\x18\x05\xa8\x35\xc2\x34\x27\xd1\x1a\xcb\x95\x27\xf0\x01\x85\xa4\x9c\xc1\xe9\xf8\x29\x8c\x34\xc0\xd0\x2d\x0d\x8f\x2e\x34\x89\x1d\x2f\x20\x23\x3b\x60\x5c\x41\x21\x11\xd4\x9a\x4a\x58\xd1\x14\x01\x3f\x45\x98\x2b\xa0\x0c\x22\x9e\xe5\x29\x25\x2c\x42\xd8\x52\xb5\x36\xfb\x38\x2a\x9a\x13\xf8\xd5\xd1\xe0\x4b\x45\x28\x03\x02\x11\xcf\x77\xc0\x57\x3e\x20\x10\xe5\x98\xd6\x7f\x6b\xa5\xf2\xf3\xc9\x64\xbb\xdd\x8e\x89\x61\x78\xcc\x45\x32\x49\x2d\xa8\x9c\xbc\x9d\x5d\xfe\x7c\x33\xff\xf9\xf8\x74\xfc\xd4\x21\xfd\xc2\x52\x94\x12\x04\xfe\x56\x50\x81\x31\x2c\x77\x40\xf2\x3c\xa5\x11\x59\xa6\x08\x29\xd9\x02\x17\x40\x12\x81\x18\x83\xe2\x9a\xe9\xad\xa0\x5a\x6e\x4f\x40\xf2\x95\xda\x12\x81\x9a\x4c\x4c\xa5\x12\x74\x59\xa8\x40\x66\x25\x8b\x54\x06\x00\x9c\x01\x61\x30\x9c\xce\x61\x36\x1f\xc2\x3f\xa6\xf3\xd9\xfc\x89\x26\xf2\x71\x76\xf7\xfa\xdd\x2f\x77\xf0\x71\xfa\xfe\xfd\xf4\xe6\x6e\xf6\xf3\x1c\xde\xbd\x87\xcb\x77\x37\x57\xb3\xbb\xd9\xbb\x9b\x39\xbc\xfb\x27\x4c\x6f\x7e\x85\x37\xb3\x9b\xab\x27\x80\x54\xad\x51\x00\x7e\xca\x85\x3e\x01\x17\x40\xb5\x34\x31\x36\xa2\x9b\x23\x06\x2c\xac\xb8\x65\x49\xe6\x18\xd1\x15\x8d\x20\x25\x2c\x29\x48\x82\x90\xf0\x0d\x0a\xa6\x2d\x21\x47\x91\x51\xa9\xb5\x2a\x81\xb0\x58\x93\x49\x69\x46\x15\x51\xe6\x51\xeb\x5c\xe3\x81\x06\xb9\xa6\xd1\x9a\x60\x0a\x1f\x90\xe1\xef\x94\xc0\xdf\xb2\x8d\xfd\xf4\xf7\x24\x23\x34\x1d\x47\x3c\xfb\x5f\x0d\x37\x4d\xe9\x3d\x81\xb7\x44\x48\x64\xf0\x37\xa2\xbf\x8d\x53\xf3\xcd\x07\x1c\xc8\x1d\x53\xe4\x13\xbc\x84\x61\x2e\xb8\xe2\xcf\x86\x17\x83\x41\x4e\xa2\x7b\xcd\x6a\x94\x16\x52\xa1\x58\x64\x84\x91\x04\xc5\x82\xe4\xf4\x62\x30\xa0\x59\xce\x85\x82\x61\xc2\x79\x92\xe2\x84\xe4\x74\x42\x18\xe3\x8e\xed\xb1\x21\x33\xbc\xa8\xc0\xcc\xf7\xe8\x38\x41\x76\x2c\xb7\x24\x49\x50\x4c\x78\x6e\x40\x3b\xd1\x06\x03\xbb\x0a\xa3\x44\xe4\xd1\x38\x21\x0a\xb7\x64\x67\x97\xa3\x45\x82\x6c\xe1\xa8\x8c\x1d\x95\x31\xcf\x91\x91\x9c\x6e\x4e\xcb\x95\x23\x78\x09\x7f\x0c\x00\x28\x5b\xf1\x73\xf3\x09\x40\x51\x95\xe2\x39\x0c\x2f\xed\x91\xe0\xda\x1e\x09\xa6\xb7\xb3\xe1\x85\x81\xd8\x58\x07\x3b\x87\xe1\xe6\xe9\xf8\x74\xfc\xd4\x3d\x8e\x38\x53\x24\x52\x25\x1d\xfd\xc7\x48\xa6\x49\x95\xbe\x7e\x79\x73\x79\xe7\x80\xf5\x5f\x21\xd2\x73\x18\x6a\xc7\x90\xe7\x93\x49\x42\xd5\xba\x58\x6a\x59\x4f\xa4\x85\x3f\x8e\x58\xa4\x26\x4e\xb4\xc7\x4e\xb4\xc7\x24\xa7\x1e\x0d\xd4\x0a\x3a\x87\x21\x89\x33\xca\xfe\xee\x23\x8e\x29\x77\x70\x9f\xf5\x3f\xe6\x7f\xf8\x49\xa1\x60\x24\x5d\xc4\x3c\x92\x25\xa3\xdf\xca\x46\x8c\x32\x12\xd4\x88\xf8\x1c\x86\xd7\x5c\x20\x90\x25\x2f\x14\xf4\x49\xf0\xf3\x00\x40\x46\x6b\xcc\x50\x9e\xc3\xeb\xbb\xbb\xdb\xf9\x45\xf3\x89\x7e\x10\x71\x26\x0b\xf3\x64\xe8\x1c\x5f\x6f\x31\xf9\x97\xe4\xcc\x90\xc9\x05\x8f\x8b\xa8\x6f\xfd\xf3\xc5\x60\x20\x51\x6c\x68\x84\x15\x23\xf6\xbc\xda\x9f\x69\x9a\x6a\xfc\x0d\x35\x91\x92\x94\xf6\x6b\xd6\x45\x1e\xc1\xa5\x40\xa2\xb0\xc4\x1b\x05\x5f\xaf\x65\x72\x04\x02\x55\x21\x98\x6c\x2c\xbd\xc7\x3c\xdd\x1d\x79\x06\x50\x59\xa8\xf1\x80\x31\xc9\xe9\x58\x0b\xba\xb4\xbb\xfa\x2f\xe7\x52\xc1\x39\x0c\x8d\x93\x6c\x4e\x4a\x71\x0f\x03\xa0\x25\x8f\x77\x1a\xe8\xbf\xeb\xc7\x9f\x9d\x8a\x83\x93\x09\x54\x82\xe2\xc6\xc6\x19\xa9\x88\x2a\xa4\x8e\xcd\xd5\x31\x75\x0c\x01\xaa\x24\xdc\x17\x4b\x8c\x38\x5b\xd1\xc4\x84\xa1\x88\x33\x86\x91\xa2\x1b\xaa\x76\x95\x28\x5e\xa1\xaa\xe4\x50\x7f\x0e\x85\x50\x3f\x7f\xbc\x04\x12\xdc\x2f\x80\xce\x93\xc6\x98\xa2\xc2\x0e\x05\x5e\x99\x85\x8a\xf1\xe0\x6b\xc8\x7b\xb0\xf4\x78\xf6\x1d\x27\x5f\x7d\x02\x12\xff\xab\x90\x0a\xc8\x5e\x73\x9c\x1a\x20\xc7\xe3\x0d\x8f\x51\xc2\x28\x78\x16\x1e\x29\x58\xfa\x06\x9b\x2c\xbe\x83\x49\x12\x48\xa9\x54\xda\x1c\x1d\x3d\xd9\x61\x69\x6f\x35\xc8\x28\xfc\xde\x67\x71\x7a\xed\xd0\x56\x37\xd1\x3c\x7e\xe1\x44\x94\x49\x45\xd2\x14\x46\x5c\x80\x40\xf7\xed\x08\x14\x4d\x53\x4f\x73\xb7\xa5\x56\xef\xcc\x73\x18\x35\x1e\x84\xa7\x6a\x2c\x1e\x2e\x9c\x58\xae\x1e\xa7\xba\x9e\x83\xae\x31\xcd\x20\x5a\x13\xa1\x4a\xe8\x3b\x5d\x48\x6e\x35\xca\x12\x75\x56\x50\xa2\x88\x4c\x49\x4b\x4d\xec\xd1\xa0\xb0\x26\x12\x48\x2a\x90\xc4\x3b\x58\x22\x32\x88\x31\x4f\xf9\x0e\xe3\xba\xce\x94\x24\x43\x93\x39\x2b\x21\xce\xec\x9e\xaf\x31\xcd\x2e\x0d\x95\x51\xf3\x49\x28\xc6\xe6\xea\xe1\xe4\xa8\x0f\xfd\x38\x29\xba\xf8\x50\x1d\xb7\x21\xbe\x3a\x66\x79\xa7\x6c\x3c\xe8\x8a\x5b\x07\x38\x63\x3b\x72\x85\xa7\xec\xf3\xe7\x42\xb0\xb2\x14\x32\x05\x94\xc8\x4c\x02\x76\xc9\x9f\xe4\x14\x74\xfe\xf5\x7c\xe1\x15\x2a\xd7\x9b\xcc\x3c\xf0\x51\xfd\xb8\xe5\xe2\xee\xf9\xc1\xdc\xdb\xb1\xfb\xb0\xb3\x15\x79\x22\x48\x8c\x6e\x33\x69\x32\x24\x81\x84\x6e\x90\xb5\x02\xf4\x2b\x54\xbf\x58\x70\x17\x95\x9a\x27\xec\x5d\x6d\x9d\xb9\x17\xf2\xe0\x41\xce\x1d\xf0\x4b\x09\x4a\x29\xcc\x72\xa5\x7b\xac\x52\x22\xed\x04\x15\x32\x0d\xa3\xf0\x7b\x78\xc6\x70\xed\xd0\xe9\xa9\x7d\xaa\xaf\xf1\xd2\x22\x8f\x89\xae\x27\xb6\x12\x22\x81\x31\x32\x45\x49\x2a\x75\x9b\x1c\x3b\xfd\xb7\x4f\xae\x31\xa6\x1f\xe7\x97\x1e\xfc\xa8\xeb\x69\x53\x0a\x6d\x88\xc3\xc9\xa2\xa6\x39\x21\x5b\xf9\x6d\xb2\xf8\xbd\x10\xf8\x95\xd2\xd0\x28\x5d\xf2\x68\x3c\xef\x94\x48\x03\xe6\xfb\xc8\x44\x6f\xf2\x70\xa9\x7c\x1e\x0c\x90\x15\x99\x4d\xe6\x71\xd5\x48\xe8\xb6\x7b\x45\x19\xc6\xf0\x12\x9e\x5a\x58\x6d\x38\x2f\xe1\xc4\x7d\x31\x92\x7b\x09\xa7\xae\x6d\xcc\xb6\xc4\x7c\x7f\x76\xa1\x29\x66\x28\xa5\x6e\x9d\x9b\xbd\x45\xdd\xa5\xdc\xe8\x44\xe8\xee\x54\xca\xca\x5d\x71\x9d\x5c\xab\x5a\x11\x63\x03\x2c\x95\xa0\x2c\x31\x49\xb3\xde\xde\x64\x64\x07\xab\x99\x2e\x2f\x18\x4c\x30\x31\x10\xc1\xd6\xe5\xe1\xe6\x39\x46\x35\x52\xc5\xfd\x64\x02\x53\x28\x18\xfd\xad\x40\xa0\xee\xc6\x25\xd6\xc4\xdc\x05\x92\xc0\xdf\x0a\x94\xca\x67\xc7\x3d\x5a\xd0\x78\xff\xa1\x8d\x8a\xbd\xe6\x6c\x8d\xe6\xfe\x84\x0b\x73\x45\xe5\x9f\x7e\x4b\xa4\x7f\x76\x58\xee\xda\x9b\x2f\x39\x4f\x81\xdf\xb7\xe4\x10\xa3\x22\x34\x95\x4d\x81\x3a\x54\x10\x28\x73\xce\xa4\x2d\x3a\xca\xe0\xab\x30\xab\x00\x8d\x24\xbc\x23\x04\xbd\xd0\x43\x94\x96\x72\x7e\x8f\x31\x14\xf9\x5e\x95\x4d\x3f\xce\xc1\x33\x7f\xf3\xb8\x11\x5d\xac\x91\x79\x7a\x31\x76\xd6\x42\x6a\x3a\x61\x69\x8e\xcf\x2e\xba\x78\x2d\x35\x2e\x61\x44\xb6\xce\x43\x26\xd6\x64\x27\xa8\xa2\x23\x83\x53\x39\x80\x67\x1f\x67\x3d\x52\x69\x68\x75\x26\x03\x91\x50\x66\x6b\xbd\x9d\x54\x98\xb5\xf5\xe6\x6b\xe1\xca\x28\x6e\xaf\x2e\x9a\xed\x9d\x6f\x4c\x44\x01\x0d\xf6\xfe\x2f\x69\xa5\xae\xb8\x2d\x52\xf9\xee\x3f\x4e\x21\x87\x70\xd8\xe7\xfd\x12\x6e\xa8\xf6\x92\x17\x69\x1c\x68\xb7\xac\xff\x75\xa5\xdb\xeb\x94\xf3\xea\x62\x42\xa3\x76\xb0\xe3\x6e\x2e\xfa\x1d\xcf\xb5\x85\x35\x27\x0f\xd6\xd5\xc9\x63\x75\x75\xfa\xff\xe3\x3c\x55\x53\xfb\x58\x07\x72\x48\x6f\x3b\x7b\x6d\xcc\x75\xf4\x8d\xbb\xc2\x5c\x5b\xdc\x3e\x50\xcd\xcc\x55\x23\xc6\xf9\x7a\x33\xe6\x73\xd2\x29\xa8\x0e\x68\xe7\x70\xb5\x60\x7d\x97\x95\x81\x8d\x74\x60\x57\x36\xf2\xac\x8b\x69\x2f\x74\xfc\x7b\xb3\xde\x81\xef\xdd\xcd\x29\x5e\x5e\xcd\xe9\x8f\x3d\xe4\x3c\xf8\xa6\x5d\xf5\xe7\xf9\xce\x38\x59\xd9\xe7\x31\x44\x85\x10\xc8\x54\xea\xf2\x2c\xb5\xfe\xc3\x05\x64\x84\xc8\x2f\x96\x1e\x65\x77\xc8\x57\xf0\xa6\x58\xa2\x60\xa8\x30\xc0\xba\x7f\x21\x17\x25\x90\x91\xa3\x59\xe4\x0c\xf9\xaa\xe2\x62\xe1\xf7\x96\x75\x85\xe7\xb6\xd0\x1e\xdf\x2e\x6c\x5a\xc5\xcd\xf4\xe3\xdc\x9c\xd7\x7a\xff\xb3\x8b\x1e\xa8\x37\x0e\xca\x39\xfb\x59\x0f\xdc\x87\xeb\x8f\x44\xa0\x01\xad\x8a\xba\x1f\xcb\x62\xf1\x01\x65\x0c\x95\xf0\x7a\x5a\xfb\xec\x9a\x26\xeb\x05\xd9\x10\x9a\x92\x25\x4d\xa9\xda\xd9\xe8\xeb\x9d\x72\x45\x96\x82\x46\xae\x8e\xd0\xe5\x77\x20\x7a\x54\x5b\x2e\xee\x17\x0e\xe8\x25\xfc\x70\x31\xe8\xd5\x7e\x29\x88\x3f\x06\x0d\x21\x5e\x11\x45\xe0\x12\x59\x69\x55\xd3\x8f\x73\xfd\xc8\x3e\x81\x98\x28\xb2\x88\xec\x67\x5f\xcb\x7e\x88\xd4\xdc\x15\x34\xcc\x04\x5d\x11\xd8\x6f\x25\x7c\xe7\xf9\xc7\xaf\xef\x80\x2a\xcc\xaa\xb0\x7d\x2b\x9c\x41\x17\x02\x63\xed\xc4\x3a\x69\x49\x5e\x88\x08\x43\xb7\x31\xf7\x3d\x2c\x42\x48\x04\x2f\xf2\x46\x90\x9b\x7e\x9c\x97\xeb\xaf\xf4\xb2\xbd\xcf\x62\x11\x2e\x2c\xb4\xd5\x73\xad\x35\x1a\xad\x5b\xc2\x28\x45\x19\x0a\x25\x30\x46\x8b\x28\x30\x31\xcd\x49\x21\x8f\x91\x48\x75\x7c\xf2\x04\x50\x45\xe3\xa3\x0a\xb2\xca\xb4\x89\xb5\xf9\x93\x8b\x36\x91\xc0\x14\x7e\xe7\x0c\xa5\x47\x70\xf9\x04\xca\xcf\xa7\x91\xf9\xbc\x45\xfd\x39\x6e\xee\x54\x09\xc0\x6d\xe9\x53\x5d\x58\xaa\x95\xf4\x6b\xab\xfd\x27\x17\xb0\x5d\x23\x03\xc9\x33\x53\x28\xb0\x44\x82\xb6\xf0\xf2\xd2\x2e\x32\xd6\x14\x37\xc5\xd2\xa1\xab\x96\xaf\x7e\xb8\xbd\x04\x1a\x3f\x81\x65\x4a\xd8\xbd\x69\x20\xf5\x7f\x43\x4b\x51\x7b\xbd\xf9\xbe\xe3\xc5\xf0\x09\xac\x68\x9a\x62\x0c\x74\x65\x5e\x57\x6b\x06\xb4\x79\x7c\xb8\xbd\x6c\x4a\x72\x93\x47\x0b\x3f\x6a\x97\xc5\x05\x46\x85\xd0\xf2\x33\x4a\x6e\x22\x49\xb7\x6a\x4d\xc0\xe2\x9f\x5e\x34\xf9\x9d\x4d\xaf\x41\xf0\xb4\x7e\x45\x5b\xfa\xef\x88\x08\x76\x54\x3a\x94\x94\x3c\xa2\x26\xf4\xc4\x71\x73\x1f\x4a\xb2\x85\xa6\xb0\x20\x82\xd5\x16\x5b\x4b\xbb\x61\xb8\x60\xfb\x49\x20\xa0\x76\x39\x9a\xb7\x34\xac\xc8\x96\x3a\x88\xac\x2a\xb3\x95\x4d\xd1\x87\xd6\x1d\x48\xbd\xa2\x6f\xe8\x8d\xb2\xe7\xe3\x94\x88\x04\x7b\x8c\xd2\x00\x35\x05\x79\x4d\x19\xcd\x8a\xac\x8b\x11\x18\xc5\xb8\x22\x45\xaa\x8c\xef\xff\x8e\x82\xd7\x24\x29\x53\xcf\x4e\x21\xa3\x6c\xf1\x5b\x41\x98\xb2\x41\x2d\x14\xf1\x35\xf9\xf4\x0d\x94\xc9\x27\x9f\xf2\x33\xaf\x55\x9f\x4c\x74\x21\xe5\x27\x9f\xe9\xed\x0c\xe6\xf6\x2e\xd2\x2b\xb5\xea\x4b\x47\xf8\xc3\xe1\xd9\x92\x4b\xab\xbb\xc4\x2e\xcb\xd2\x36\x5e\xb3\x3c\x5b\x01\xcf\x51\xd8\x34\xa5\xfb\xd4\x77\x6f\x7a\xda\x9a\x92\x54\xc7\x5d\x68\xcb\x65\x14\x49\x80\xdb\x4a\x2f\xa1\xba\x49\xcd\xb9\xa4\x8a\x8b\x5d\x53\x77\x09\x55\x5e\x26\x3d\x69\xd9\xf2\x9a\xc8\x75\x59\x8b\x68\x4a\x11\xcf\x32\xaa\xba\xa8\xd8\x95\x96\xb6\x3a\xd2\x99\x12\x88\xe6\xa8\x51\x8a\x84\xd9\xb0\xa1\x33\x40\x27\x59\x0d\xbc\xd0\x25\x0f\x86\x09\x78\x32\xd1\xd1\xd6\x54\x59\x26\x7b\x34\x71\xcd\xc3\x45\x6c\xf1\xce\x02\xbc\x0f\xb5\x86\x13\x6e\x6f\xa5\x4c\xa5\x94\xe5\x34\xc5\x16\x0f\xdc\x93\xcf\xf3\x80\xce\xa5\xc5\x10\x75\x66\xf5\xf0\xa2\x72\xd1\xe4\x55\x0f\xeb\x36\x25\x4a\x6b\x0e\xa8\xb2\x42\xb0\x80\xf6\x66\x6c\x02\xa2\x60\x66\x74\xc3\xab\x48\x1c\xc5\xbc\x44\xec\x28\x1a\xca\x23\x79\x46\x61\x96\x3a\x6c\xc5\x9d\x26\x28\x8f\xca\xda\xdd\x29\x3d\x0a\xb3\x73\xe1\xa6\x4d\x4c\xc0\x35\x0e\xef\x25\x6a\x2f\xa0\xf8\xc9\x3a\xa8\x13\xe6\x18\x09\x54\x6f\x70\x37\xb3\xa7\xd4\x7e\x35\x8d\x22\x94\x41\x51\x27\x0d\xd4\xe2\x1e\x77\x8b\x46\x39\x5d\xd3\xb0\x58\x6f\x70\x57\xd1\x21\x7d\x74\xec\x82\x26\x17\x54\x0b\x9a\xd6\x7b\x9b\x45\xfb\x49\x54\x69\xd6\x76\x07\xdf\x24\x97\x66\x47\x18\x56\x50\x79\xbe\x57\x26\x24\xcf\xbb\x84\x71\x87\x8c\x30\xb5\xe7\x00\xca\x02\x34\x0f\x7e\x4b\xa4\xdc\x72\x11\xef\xc1\xcc\x4b\x10\xbf\x50\x32\x0a\x28\x96\xd5\xbc\xc6\x3e\xe9\x7b\x60\x96\xf5\xb3\xd2\xb4\xb4\x78\x48\x14\xf1\x82\x29\xeb\x75\xe6\x1a\x2e\xb8\xee\x72\x39\xdd\x16\xd2\x75\xd1\x36\xc2\x4f\xe7\x90\x72\x12\xc3\x92\xa4\x3a\xd2\x8b\xa3\x86\x80\x2d\x89\xb9\x1d\xdc\x98\xba\x4d\x02\x51\x5f\xa6\x14\x99\x9a\xc5\x30\x22\xf7\xe4\xdc\x48\xfe\xea\xc8\xe7\x3c\x32\x00\x5d\xe2\xb6\xa8\xd6\x02\x1d\x7a\x29\xa6\x2e\x0a\xd6\x00\x4b\xa7\xea\x2e\xa7\xdf\x74\x95\xd3\xe6\xd4\xcd\x1a\xd2\xd1\x4e\x79\x54\xfa\xea\xd7\x96\xd1\x4d\x0b\xec\x2b\xa4\xcb\xb7\x30\xe5\xf8\x4b\xa0\x2b\xdd\x40\x92\xf4\x5e\xff\x6b\xb5\x63\x74\x52\x99\x7e\x43\x39\xf5\xbe\x9d\x8a\x71\xec\x95\x5f\x1f\x5e\x93\xbf\xf9\x9a\x9a\xfc\x00\x55\x52\x73\xbf\x56\xa2\x65\x5e\xa7\xdf\x59\x32\x86\x0d\x6e\x93\x33\x5b\x5f\xcd\x15\x61\x31\x11\xf1\xe2\xea\x74\xb1\x39\xdd\x5f\x65\x9d\x7e\xb7\x2a\xeb\xd9\x77\xab\xb2\xce\xbc\x2a\xab\xd3\x1d\xbc\xc6\xb8\xf2\x88\x6b\x12\xad\xa9\xee\x36\xb6\xa6\xb9\xd1\x69\x52\x50\x89\x2d\xf3\xae\x8c\xc3\x12\x71\x68\x86\x56\xc4\x99\x12\x3c\x5d\xe4\x29\x61\xb8\x60\x66\xfe\xc5\xb7\xb5\x03\x6c\xa1\x3b\x68\x14\x15\xed\x33\x2f\x6e\x50\x09\x72\x6d\xae\x38\x97\xda\xe8\x36\x24\x2d\x10\x52\x7a\x8f\x40\xf3\x73\x33\xb9\xa8\xd6\x44\x55\x83\x0f\x04\x36\x54\xa8\x82\xa4\x30\xbb\x9d\xe8\xe5\x92\x92\x0e\xda\x3a\x58\x92\xc8\x78\x5f\x39\x8b\x07\x51\x21\x15\xcf\x50\x48\xd7\xdf\x9b\xf9\x56\x5b\xc8\x64\x05\x73\x37\xb6\xbd\xd7\x3e\x24\xa7\x0b\x64\x71\xce\xa9\x71\xc0\xf0\xd6\xb6\xbe\x75\x79\x4b\x96\x98\x86\x61\xaa\x34\x79\x02\xa9\x5e\xfc\xf2\x6d\x8e\x39\x78\x37\x82\x5d\x6b\x94\x1f\xc1\xbd\x8c\x7b\x61\x58\x4d\xb9\x6a\x49\x57\x7c\xb6\xf5\x11\x70\x5a\x48\x2d\xa9\xcc\x66\xe9\xf9\xfc\x75\x47\xba\xaa\x40\x9a\x5c\xaf\xb9\x54\x7b\xf0\xcc\x72\x33\xbd\x1a\xa5\x76\xe0\x58\xa7\x30\xab\xcd\xac\x7a\xff\x42\x56\x3d\x43\xd5\x2e\x5a\xb3\x05\x63\xb6\x63\x6b\x49\xfa\xd8\x40\x25\x70\x96\xee\x80\x40\x46\xec\x85\xd0\xaa\x9c\xc2\xc6\x34\x36\x43\xc9\xf6\xc5\xe2\xb8\x27\xa3\x9f\x05\x7b\x1b\x6d\xc8\x6a\xdb\xcc\x79\x43\x68\xf2\x4d\x53\x70\x48\xa5\xc5\x54\xaa\x68\xcf\x27\x79\x17\xfd\x65\x82\xb7\xb3\x4c\xb5\x57\xb8\xa1\x20\x33\x41\x1d\x26\xd2\xf2\x7d\x4d\x78\xa7\x2a\x73\xa2\x83\x66\x3f\x19\xca\x9a\xe6\x68\x51\x7c\x4d\x99\x9a\x98\x71\x13\xb5\x0d\x25\x33\xb7\x62\x5f\x74\xd8\x89\xa5\x49\x35\xb1\xa0\x78\x60\xad\x55\x23\xe0\xe5\x2b\x7b\xf7\xe9\x78\xaa\xde\x6c\x1f\x6f\x69\x5c\x3e\xfd\xa9\x84\x9d\x5b\x8e\xa9\x82\x35\xd9\x60\x08\x6a\x06\x71\x21\x17\x74\x43\x53\x4c\x50\xfe\x54\x77\x81\xe5\x90\xb4\x81\xf3\x95\x58\x89\x44\xda\x50\x42\x95\x1f\x71\x5c\x38\xb0\x84\x9d\x7c\x5b\x97\x3b\x7a\x71\xc1\x6a\x3a\xfe\x0d\xe2\x83\xdf\x8a\xfc\xf0\xd8\xb7\x22\x3f\x1e\xf6\xad\xc8\x8b\xc3\xbc\xc1\xfa\x9f\x20\x16\x76\xcd\xd6\x79\xf7\xdf\xc4\xea\xbf\xee\xe1\x65\x61\x1c\x7f\x55\xa4\xed\x3e\x1e\xbc\x4b\x73\x47\x5f\xc2\x16\x05\xda\xf1\x20\x9f\xa3\x72\xfb\xe6\x6b\x95\x8e\x09\xb6\x03\x3b\x9a\x9b\x38\x94\xa8\x74\x65\x67\x35\xf8\x0a\x19\x0a\x1a\xd9\xa5\xb9\x5d\x29\x77\x09\x4a\x48\x33\x80\x36\xef\x40\xad\xc7\xd3\xec\x40\x9f\xef\x43\x0f\x36\xb4\xb3\xc7\x1a\xda\xf3\xc3\x1a\xda\x0f\x87\x31\xb4\x1f\xf7\x6a\xf6\xcf\xb6\xb4\xf6\x14\xe1\xbf\x9d\xa1\xdd\x94\xd3\x9e\xe5\x2e\x7f\x99\x56\xa7\x69\x75\xcd\x7c\xfe\x89\x96\xd5\xa9\xe4\xce\x57\x8a\x4e\xf3\x55\x82\xea\xcb\xee\x27\x9d\xaf\x42\xbd\xab\x5c\x2f\xd3\x77\x67\xf4\x4e\x0e\xeb\xa0\xd5\xc9\x9d\xdf\xfc\xd9\x01\xdd\x0c\x99\xda\x5b\x10\x37\xd1\x5d\x45\xc3\x1d\xbe\xbd\x23\xa9\x7f\x95\xd2\x28\x40\xba\x0b\x9a\x60\x56\xc5\x70\xdb\xb8\xef\xad\x0c\x24\xe7\xbd\xaf\x8d\x2d\x22\xeb\x71\xa8\xb3\x10\x87\x08\x74\x16\x63\x47\x5c\x47\x0c\xa5\xae\x2a\x76\x24\x4b\xe1\xd8\x2c\x7d\xd0\x95\xbd\x1c\x9b\x27\xba\xa0\x45\xa6\xe4\x51\xab\xf4\x97\xad\xd6\xe3\x0b\x33\xaf\xdd\x03\x53\x8f\xf6\xb6\x3f\x67\x5c\xa7\x63\xb8\xc8\xf5\x82\x68\x44\x1b\x71\x26\x35\x83\x5a\x4c\xba\x3a\x77\xd5\x68\x87\x61\xb5\xe6\x40\xf6\x4f\x01\x7b\x01\x9c\xb0\xe6\xe4\x8d\xdb\xa5\x7f\xf0\xc6\xb0\xed\x3c\xc6\xbe\xdc\xcb\xb9\x94\x54\xd7\x99\xf6\x07\xaa\x8c\x6f\x3b\xab\xcc\x0a\xa7\xe9\x66\xad\x71\xdf\xbf\xd4\xdb\x54\x6f\x87\xec\x0d\x91\x6d\xa9\x30\x93\x20\xf9\x4f\xdd\x51\xed\xf9\x61\xb2\xc9\x0f\x7b\xb4\xd6\x99\x4c\xa8\xd4\x3d\x7b\x95\x45\xfa\x07\x2d\x3d\xb2\xcd\x1f\x26\xed\x1d\xc6\x7b\xa4\x40\xbb\x47\x74\x1e\x6d\x5f\xa7\x5f\x6f\x5f\xcf\x1e\x6b\x5f\xb5\x2d\x54\x9c\x44\x6b\xc2\x12\xd7\xb0\x37\x86\x5f\xdc\xd2\xd7\x0c\xbe\x4c\x26\x81\x06\xc2\xd1\x97\xe0\xcd\x57\x08\xd7\x18\x7e\xf1\xde\x76\x05\x70\x7b\x87\x5f\x0e\x61\xa4\x2f\x1a\xef\x49\xfb\x76\x0f\x44\xd2\xb8\x02\xdc\x22\x6c\x09\x53\xb6\x6f\x8e\xbb\xae\xcf\x60\xff\x7d\x20\x89\xe3\xea\x32\xb0\xf1\x42\xbc\x77\x27\x81\x19\xdf\x20\xac\x04\xcf\x1e\xb2\xdd\x7b\x03\xee\x6f\x6a\x09\x54\xfb\x86\xc3\x19\xe1\x5d\x59\x1b\xb9\x65\x21\x7d\x37\x5f\xd0\xba\xfd\x3a\xa9\x36\xea\x73\xe3\x83\x05\x87\x9e\x1f\x46\xb4\x3b\x92\x66\x05\xd3\x72\xfc\x83\x8c\x1e\x7d\x81\xb3\x43\x1f\xbb\xfd\xfb\x87\xef\x76\xf0\x2f\xbe\x2c\xfa\x22\x77\xdf\x7c\xf8\xff\x0b\x00\x00\xff\xff\xb9\x5e\x6b\x53\xf5\x42\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 17141, mode: os.FileMode(420), modTime: time.Unix(1537427612, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": {apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
