// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\x5d\x73\xdb\x38\x92\xef\xfe\x15\x5d\x7a\x39\xf9\x2a\x96\x12\x27\x99\xc9\xd9\x9b\xdb\xd5\xca\xb3\x89\x2a\xb1\xe3\x8a\x3c\x49\xcd\x93\x0a\x02\x5b\x14\xd6\x24\xc0\x01\x40\x29\x9a\xad\xfc\xf7\x2b\x7c\x90\x04\x48\x4a\x49\x14\xe7\xe6\x6a\xeb\x5c\x35\x13\x89\xe8\x6e\x34\xfa\x0b\xdd\xcd\xd6\x78\x0c\x53\x51\xec\x24\x4b\xd7\x1a\xce\x1f\x3f\x79\x01\x73\x92\xab\x92\xa7\x30\xbf\x9a\xc3\x34\x13\x65\x02\x37\x44\xb3\x0d\xc2\x54\xe4\x45\xa9\x19\x4f\xe1\x0e\x49\x0e\xa4\xd4\x6b\x21\xd5\xe8\x64\x3c\x3e\x19\x8f\xe1\x2d\xa3\xc8\x15\x26\x50\xf2\x04\x25\xe8\x35\xc2\xa4\x20\x74\x8d\xd5\xca\x23\xf8\x80\x52\x31\xc1\xe1\x7c\xf4\x18\x86\x06\x60\xe0\x97\x06\xa7\x97\x86\xc4\x4e\x94\x90\x93\x1d\x70\xa1\xa1\x54\x08\x7a\xcd\x14\xac\x58\x86\x80\x9f\x28\x16\x1a\x18\x07\x2a\xf2\x22\x63\x84\x53\x84\x2d\xd3\x6b\xbb\x8f\xa7\x62\x38\x81\xdf\x3c\x0d\xb1\xd4\x84\x71\x20\x40\x45\xb1\x03\xb1\x0a\x01\x81\x68\xcf\xb4\xf9\x5b\x6b\x5d\x5c\x8c\xc7\xdb\xed\x76\x44\x2c\xc3\x23\x21\xd3\x71\xe6\x40\xd5\xf8\xed\x6c\xfa\xcb\xcd\xfc\x97\xb3\xf3\xd1\x63\x8f\xf4\x2b\xcf\x50\x29\x90\xf8\x7b\xc9\x24\x26\xb0\xdc\x01\x29\x8a\x8c\x51\xb2\xcc\x10\x32\xb2\x05\x21\x81\xa4\x12\x31\x01\x2d\x0c\xd3\x5b\xc9\x8c\xdc\x1e\x81\x12\x2b\xbd\x25\x12\x0d\x99\x84\x29\x2d\xd9\xb2\xd4\x91\xcc\x2a\x16\x99\x8a\x00\x04\x07\xc2\x61\x30\x99\xc3\x6c\x3e\x80\xbf\x4f\xe6\xb3\xf9\x23\x43\xe4\xe3\xec\xee\xf5\xbb\x5f\xef\xe0\xe3\xe4\xfd\xfb\xc9\xcd\xdd\xec\x97\x39\xbc\x7b\x0f\xd3\x77\x37\x57\xb3\xbb\xd9\xbb\x9b\x39\xbc\xfb\x07\x4c\x6e\x7e\x83\x37\xb3\x9b\xab\x47\x80\x4c\xaf\x51\x02\x7e\x2a\xa4\x39\x81\x90\xc0\x8c\x34\x31\xb1\xa2\x9b\x23\x46\x2c\xac\x84\x63\x49\x15\x48\xd9\x8a\x51\xc8\x08\x4f\x4b\x92\x22\xa4\x62\x83\x92\x1b\x4b\x28\x50\xe6\x4c\x19\xad\x2a\x20\x3c\x31\x64\x32\x96\x33\x4d\xb4\x7d\xd4\x39\xd7\xe8\xc4\x80\x5c\x33\xba\x26\x98\xc1\x07\xe4\xf8\x07\x23\xf0\x97\x7c\xe3\x3e\xfd\x2d\xcd\x09\xcb\x46\x54\xe4\xff\x6d\xe0\x26\x19\xbb\x27\xf0\x96\x48\x85\x1c\xfe\x42\xcc\xb7\x51\x66\xbf\x85\x80\x27\x6a\xc7\x35\xf9\x04\x2f\x61\x50\x48\xa1\xc5\xd3\xc1\xe5\xc9\x49\x41\xe8\xbd\x61\x95\x66\xa5\xd2\x28\x17\x39\xe1\x24\x45\xb9\x20\x05\xbb\x3c\x39\x61\x79\x21\xa4\x86\x41\x2a\x44\x9a\xe1\x98\x14\x6c\x4c\x38\x17\x9e\xed\x91\x25\x33\xb8\xac\xc1\xec\x77\x7a\x96\x22\x3f\x53\x5b\x92\xa6\x28\xc7\xa2\xb0\xa0\xbd\x68\x27\x27\x6e\x15\x86\xa9\x2c\xe8\x28\x25\x1a\xb7\x64\xe7\x96\xe9\x22\x45\xbe\xf0\x54\x46\x9e\xca\x48\x14\xc8\x49\xc1\x36\xe7\xd5\xca\x29\xbc\x84\x7f\x9d\x00\x30\xbe\x12\x17\xf6\x13\x80\x66\x3a\xc3\x0b\x18\x4c\xdd\x91\xe0\xda\x1d\x09\x26\xb7\xb3\xc1\xa5\x85\xd8\x38\x07\xbb\x80\xc1\xe6\xf1\xe8\x7c\xf4\xd8\x3f\xa6\x82\x6b\x42\x75\x45\xc7\xfc\x71\x92\x1b\x52\x95\xaf\x4f\x6f\xa6\x77\x1e\xd8\xfc\x95\x32\xbb\x80\x81\x71\x0c\x75\x31\x1e\xa7\x4c\xaf\xcb\xa5\x91\xf5\x58\x39\xf8\x33\xca\xa9\x1e\x7b\xd1\x9e\x79\xd1\x9e\x91\x82\x05\x34\xd0\x28\xe8\x02\x06\x24\xc9\x19\xff\x5b\x88\x38\x62\xc2\xc3\x7d\x36\xff\xd8\xff\xe1\x27\x8d\x92\x93\x6c\x91\x08\xaa\x2a\x46\xbf\x97\x8d\x04\x15\x95\xcc\x8a\xf8\x02\x06\xd7\x42\x22\x90\xa5\x28\x35\xec\x93\xe0\xe7\x13\x00\x45\xd7\x98\xa3\xba\x80\xd7\x77\x77\xb7\xf3\xcb\xf6\x13\xf3\x80\x0a\xae\x4a\xfb\x64\xe0\x1d\xdf\x6c\x31\xfe\xa7\x12\xdc\x92\x29\xa4\x48\x4a\xba\x6f\xfd\xf3\xe5\xc9\x89\x42\xb9\x61\x14\x6b\x46\xdc\x79\x8d\x3f\xb3\x2c\x33\xf8\x1b\x66\x23\x25\xa9\xec\xd7\xae\xcb\x82\xc2\x54\x22\xd1\x58\xe1\x0d\xa3\xaf\xd7\x2a\x3d\x05\x89\xba\x94\x5c\xb5\x96\xde\x63\x91\xed\x4e\x03\x03\xa8\x2d\xd4\x7a\xc0\x88\x14\x6c\x64\x04\x5d\xd9\x5d\xf3\x57\x08\xa5\xe1\x02\x06\xd6\x49\x36\x4f\x2a\x71\x0f\x22\xa0\xa5\x48\x76\x06\xe8\x3f\x9b\xc7\x9f\xbd\x8a\xa3\x93\x49\xd4\x92\xe1\xc6\xc5\x19\xa5\x89\x2e\x95\x89\xcd\xf5\x31\x4d\x0c\x01\xa6\x15\xdc\x97\x4b\xa4\x82\xaf\x58\x6a\xc3\x10\x15\x9c\x23\xd5\x6c\xc3\xf4\xae\x16\xc5\x2b\xd4\xb5\x1c\x9a\xcf\xb1\x10\x9a\xe7\xc7\x4b\x20\xc5\xc3\x02\xe8\x3d\x69\x82\x19\x6a\xec\x51\xe0\x95\x5d\xa8\x19\x8f\xbe\xc6\xbc\x47\x4b\xc7\xb3\xef\x39\xf9\xe6\x13\x90\xe4\x9f\xa5\xd2\x40\x0e\x9a\xe3\xc4\x02\x79\x1e\x6f\x44\x82\x0a\x86\xd1\xb3\xf8\x48\xd1\xd2\x77\xd8\x64\xf9\x03\x4c\x92\x40\xc6\x94\x36\xe6\xe8\xe9\xa9\x1e\x4b\x7b\x6b\x40\x86\xf1\xf7\x7d\x16\x67\xd6\x1e\xda\xea\xc6\x86\xc7\x2f\x9c\x88\x71\xa5\x49\x96\xc1\x50\x48\x90\xe8\xbf\x9d\x82\x66\x59\x16\x68\xee\xb6\xd2\xea\x9d\x7d\x0e\xc3\xd6\x83\xf8\x54\xad\xc5\x87\x0b\x27\x8e\xab\xe3\x54\xb7\xe7\xa0\x6b\xcc\x72\xa0\x6b\x22\x75\x05\x7d\x67\x12\xc9\xad\x41\x59\xa2\xb9\x15\xb4\x2c\xa9\x4d\x69\x99\x8d\x3d\x06\x14\xd6\x44\x01\xc9\x24\x92\x64\x07\x4b\x44\x0e\x09\x16\x99\xd8\x61\xd2\xe4\x99\x8a\xe4\x68\x6f\xce\x5a\x88\x33\xb7\xe7\x6b\xcc\xf2\xa9\xa5\x32\x6c\x3f\x89\xc5\xd8\x5e\x7d\x38\x39\x9a\x43\x1f\x27\x45\x1f\x1f\xea\xe3\xb6\xc4\xd7\xc4\xac\xe0\x94\xad\x07\x7d\x71\xeb\x01\xce\xd8\x8d\x5c\xf1\x29\xf7\xf9\x73\x29\x79\x95\x0a\xd9\x04\x4a\xe6\xf6\x02\xf6\x97\x3f\x29\x18\x98\xfb\x37\xf0\x85\x57\xa8\x7d\x6d\x32\x0b\xc0\x87\xcd\xe3\x8e\x8b\xfb\xe7\x0f\xe6\xde\x9e\xdd\xaf\x3b\x5b\x59\xa4\x92\x24\xe8\x37\x53\xf6\x86\x24\x90\xb2\x0d\xf2\x4e\x80\x7e\x85\xfa\x57\x07\xee\xa3\x52\xfb\x84\x7b\x57\x3b\x67\xde\x0b\xf9\xe0\x41\xce\x1f\xf0\x4b\x17\x94\xd6\x98\x17\xda\xd4\x58\x95\x44\xba\x17\x54\xcc\x34\x0c\xe3\xef\xf1\x19\xe3\xb5\x87\xbe\x9e\xba\xa7\xfa\x16\x2f\x2d\x8b\x84\x98\x7c\x62\xab\x80\x4a\x4c\x90\x6b\x46\x32\x65\xca\xe4\xc4\xeb\xbf\x7b\x72\x83\x31\xf9\x38\x9f\x06\xf0\xc3\xbe\xa7\x6d\x29\x74\x21\x1e\x4e\x16\x0d\xcd\x31\xd9\xaa\xef\x93\xc5\x1f\xa5\xc4\x6f\x94\x86\x41\xe9\x93\x47\xeb\x79\xaf\x44\x5a\x30\x3f\x46\x26\x66\x93\xaf\x97\xca\xe7\x93\x13\xe4\x65\xee\x2e\xf3\xa4\x2e\x24\x4c\xd9\xbd\x62\x1c\x13\x78\x09\x8f\x1d\xac\x31\x9c\x97\xf0\xc4\x7f\xb1\x92\x7b\x09\xe7\xbe\x6c\xcc\xb7\xc4\x7e\x7f\x7a\x69\x28\xe6\xa8\x94\x29\x9d\xa7\x24\xcb\x96\x84\xde\x37\xd5\xc9\xdd\x1a\xe1\xd7\xf7\x6f\x8d\xc7\x51\x73\xf1\xda\x55\x2d\xec\xb2\xd2\x92\xf1\xd4\xd4\x6c\xcd\x3e\x1e\x65\x76\x55\x35\x60\x24\xfe\x5e\xa2\xd2\x21\x82\x7f\xb4\x60\x89\x63\x28\x64\xa0\x55\xdc\x34\x8c\xdc\x98\x9b\xd8\xd3\xac\x4a\x07\x2d\xcc\xed\x5e\x27\xab\x98\x84\xbb\x98\x5b\xbb\xc3\x57\x51\x49\xad\xea\x70\xd8\x68\x66\x21\xa2\xad\x2b\xe9\xce\x0b\xa4\x0d\x52\x2d\xbe\xf1\xb8\x11\x55\x70\xdd\x38\x3a\xd5\x02\xad\x3e\x74\xa4\xdc\x29\xd3\x82\x6a\x70\x8d\xb6\x61\x23\xa4\xed\x89\x85\xa7\xdd\x12\x15\x9e\x15\x96\x3b\xd7\x2e\x0b\x25\xbc\x14\x22\x03\x71\xdf\x39\x77\x82\x9a\xb0\x4c\xb5\x05\xe8\x51\x41\xa2\x2a\x04\x57\x2e\xcb\xa9\xa2\xbd\xc6\xbc\x06\x6c\xeb\x29\x2a\xbe\xbe\x46\x49\x99\x10\xf7\x98\x40\x59\x1c\x54\xd1\xe4\xe3\x1c\x02\x7f\xb3\x8f\x5b\xe1\xcc\x59\x75\xa3\x07\xeb\xa3\x5d\xa4\xb6\xd7\x57\xf6\xff\xf4\xb2\x8f\xd7\x4a\xc3\x0a\x86\x64\xeb\x5d\x72\xec\x7c\x64\x8c\x9a\x9e\x5a\x9c\xda\xe3\x02\x7b\x78\xb6\x47\x2a\x2d\xad\xce\x54\x24\x12\xc6\x5d\x72\xb9\x53\x1a\xf3\xae\xde\x42\x2d\x5c\x59\xc5\x1d\xd4\x45\xbb\x9e\x0c\x8d\x89\x68\x60\xd1\xde\xff\xa1\x9c\xd4\xb5\x70\x59\xb1\xd8\xfd\xdb\x29\xe4\x18\x07\x7d\xbe\x5f\xa2\x2d\x55\x4e\x45\x99\x25\x91\x36\xab\x02\xc3\xa4\xd2\x7b\x9d\x70\x5e\x77\x3e\xf6\x04\x45\xdf\x1a\xd9\xef\x68\xbe\xee\x6c\x38\xf9\x6a\xdd\x3c\x39\x56\x37\xe7\xff\x3b\xce\x52\x57\xcd\xc7\x3a\x8c\x47\x7a\xdb\x5b\xcc\x63\x61\xa2\x6d\xd2\x17\xd6\xba\xe2\x0e\x81\x1a\x66\xae\x5a\x31\x2d\xd4\x9b\xbd\xc4\x9e\xf4\x0a\xaa\x07\xda\x3b\x58\x23\xd8\xd0\x45\x55\x64\x23\x3d\xd8\xb5\x8d\x3c\xed\x63\x3a\x08\x15\xff\xb7\x59\xef\xc1\x0f\x9a\x7f\x26\xd3\x70\xbd\x3f\xf3\x71\x0f\xb9\x00\xbe\x6d\x57\xfb\xef\xf1\xde\xb8\x58\xdb\xe7\x19\xd0\x52\x4a\xe4\x3a\xf3\xf7\x2a\x73\xfe\x23\x24\xe4\x84\xa8\x2f\xa6\x16\x55\xf9\x29\x56\xf0\xa6\x5c\xa2\xe4\xa8\x31\xc2\xba\x7f\xa1\x16\x15\x90\x95\xa3\x5d\x14\x1c\xc5\xaa\xe6\x62\x11\x16\xaf\x4d\x0a\xe9\xb7\x30\x1e\xdf\x4d\x5c\x3a\xc9\xcb\xe4\xe3\xdc\x9e\xd7\x79\xff\xd3\xcb\x3d\x50\x6f\x3c\x94\x77\xf6\x67\x7b\xe0\x3e\x5c\x7f\x24\x12\x2d\x68\x9d\x35\xfe\x5c\x65\xa3\x5f\x91\xb6\x30\x05\xaf\x27\x8d\xcf\xae\x59\xba\x5e\x90\x0d\x61\x19\x59\xb2\x8c\xe9\x9d\x8b\xbe\xc1\x29\x57\x64\x29\x19\xf5\x79\x83\xc9\xef\x23\xd1\xa3\xde\x0a\x79\xbf\xf0\x40\x2f\xe1\xa7\xcb\x93\xbd\xda\xaf\x04\x11\x65\xb3\x46\x88\x57\x44\x13\x98\x22\xaf\xac\x6a\xf2\x71\x6e\x1e\xb9\x27\x90\x10\x4d\x16\xd4\x7d\x0e\xb5\x1c\x86\x48\xc3\x5d\xc9\xe2\x9b\xa0\x2f\x02\x87\xb5\x4a\xe8\x3c\x7f\xff\xed\x1d\x30\x8d\x79\x1d\xb6\x6f\xa5\x37\xe8\x52\x62\x62\x9c\xd8\x24\x76\x4a\x94\x92\x62\xec\x36\xb6\xa1\xc4\x29\x42\x2a\x45\x59\xb4\x82\xdc\xe4\xe3\xbc\x5a\x7f\x65\x96\x5d\xc3\x8c\x53\x5c\x38\x68\xa7\xe7\x46\x6b\x8c\xae\x3b\xc2\xa8\x44\x19\x0b\x25\x32\x46\x87\x28\x31\xb5\xd5\x4f\xa9\xce\x90\x28\x7d\xf6\xe4\x11\xa0\xa6\xa3\xd3\x1a\xb2\xce\xf7\x53\x67\xf3\x4f\x2e\xbb\x44\x22\x53\xf8\x43\x70\x54\x01\xc1\xe5\x23\xa8\x3e\x9f\x53\xfb\x79\x8b\xe6\x73\xd2\xde\xa9\x16\x80\xdf\x32\xa4\xba\x70\x54\x6b\xe9\x37\x56\xfb\x0f\x21\x61\xbb\x46\x0e\x4a\xe4\xf6\xdd\x33\x4f\x15\x18\x0b\xaf\xba\x82\xd4\x5a\x53\xd2\x16\x4b\x8f\xae\x3a\xbe\xfa\xe1\x76\x0a\x2c\x79\x04\xcb\x8c\xf0\x7b\x5b\xa1\x9a\xff\x06\x8e\xa2\xf1\x7a\xfb\x7d\x27\xca\xc1\x23\x58\xb1\x2c\xc3\x04\xd8\xca\xbe\x0f\x37\x0c\x18\xf3\xf8\x70\x3b\x6d\x4b\x72\x53\xd0\x45\x18\xb5\xab\xe4\x02\x69\x29\x8d\xfc\xac\x92\xdb\x48\xca\xaf\x3a\x13\xa8\xab\xae\x16\xbf\xb3\xc9\x35\x48\x91\x35\xef\x80\x2b\xff\x1d\x12\xc9\x4f\x2b\x87\x52\x4a\x50\x66\x43\x4f\x92\xb4\xf7\x61\x24\x5f\x18\x0a\x0b\x22\x79\x63\xb1\x8d\xb4\x5b\x86\x0b\xae\x60\x05\x02\x7a\x57\xa0\x7d\x0d\xc4\xcb\x7c\x69\x82\xc8\xaa\x36\x5b\xd5\x16\x7d\x6c\xdd\x91\xd4\x6b\xfa\x96\xde\x30\x7f\x3e\xca\x88\x4c\x71\x8f\x51\x5a\xa0\xb6\x20\xaf\x19\x67\x79\x99\xf7\x31\x02\xc3\x04\x57\xa4\xcc\xb4\xf5\xfd\x3f\x50\x8a\x86\x24\xe3\xfa\xe9\x39\xe4\x8c\x2f\x7e\x2f\x09\xd7\x2e\xa8\xc5\x22\xbe\x26\x9f\xbe\x83\x32\xf9\x14\x52\x7e\x1a\xf4\x02\xc6\x63\x93\x48\x85\x97\xcf\xe4\x76\x06\x73\xd7\xec\x0c\x52\xad\xa6\xab\x09\xff\xf2\x78\x2e\xe5\x32\xea\xae\xb0\xab\xb4\xb4\x8b\xd7\x4e\xcf\x56\x20\x0a\x94\xee\x9a\x32\x75\xe9\xbb\x37\x7b\xca\x98\x8a\x54\x4f\xb3\xb5\xe3\x32\x9a\xa4\x20\x5c\xa6\x97\x32\x53\x94\x16\x42\x31\x2d\xe4\xae\xad\xbb\x94\xe9\xe0\x26\x7d\xd2\xb1\xe5\x35\x51\xeb\x2a\x17\x31\x94\xa8\xc8\x73\xa6\xfb\xa8\xb8\x95\x8e\xb6\x7a\xae\x33\x2d\x11\xed\x51\x69\x86\x84\xbb\xb0\x61\x6e\x80\x5e\xb2\x06\x78\x61\x52\x1e\x8c\x2f\xe0\xf1\xd8\x44\x5b\x9b\x65\xd9\xdb\xa3\x8d\x6b\x1f\x2e\x12\x87\xf7\x2c\xc2\xfb\xd0\x68\x38\x15\xae\xed\x65\x33\xa5\xbc\x60\x19\x76\x78\x10\x81\x7c\x9e\x47\x74\xa6\x0e\x43\x36\x37\x6b\x80\x47\xab\x45\x7b\xaf\x06\x58\xb7\x19\xd1\x46\x73\xc0\xb4\x13\x82\x03\x74\xad\xb7\x31\xc8\x92\xdb\xd9\x90\x20\x23\xf1\x14\x8b\x0a\xb1\x27\x69\xa8\x8e\x34\x6b\x15\x68\x3d\xb6\xe2\x4f\x13\xa5\x47\x55\xee\xee\x95\x4e\xe3\xdb\xb9\xf4\xe3\x2c\x36\xe0\x5a\x87\x0f\x2e\xea\x20\xa0\x84\x97\x75\x94\x27\xcc\x91\x4a\xd4\x6f\x70\x37\x73\xa7\x34\x7e\x35\xa1\x14\x55\x94\xd4\x29\x0b\xb5\xb8\xc7\xdd\xa2\x95\x4e\x37\x34\x1c\xd6\x1b\xdc\xd5\x74\xc8\x3e\x3a\x6e\xc1\x90\x8b\xb2\x05\x43\xeb\xbd\xbb\x45\xf7\x93\xa8\xaf\x59\x57\x1d\x7c\x97\x5c\xda\x15\x61\x9c\x41\x15\xc5\x41\x99\x90\xa2\xe8\x13\xc6\x1d\x72\xc2\xf5\x81\x03\x68\x07\xd0\x3e\xf8\x2d\x51\x6a\x2b\x64\x72\x00\xb3\xa8\x40\xc2\x44\xc9\x2a\xa0\x5c\xd6\x03\x21\x87\xa4\x1f\x80\x39\xd6\x9f\x55\xa6\x65\xc4\x43\x28\x15\x25\xd7\xce\xeb\x6c\xdb\x2d\x6a\x6f\xf9\x3b\xdd\x25\xd2\x4d\xd2\x36\xc4\x4f\x17\x90\x09\x92\xc0\x92\x64\x26\xd2\xcb\xd3\x96\x80\x1d\x89\xb9\x9b\x0c\x99\xf8\x4d\x22\x51\x4f\x33\x86\x5c\xcf\x12\x18\x92\x7b\x72\x61\x25\x7f\x75\x1a\x72\x4e\x2d\x40\x9f\xb8\x1d\xaa\xb3\x40\x8f\x5e\x89\xa9\x8f\x82\x33\xc0\xca\xa9\xfa\xd3\xe9\x37\x7d\xe9\xb4\x3d\x75\x3b\x87\xf4\xb4\x33\x41\x2b\x5f\xfd\xd6\x34\xba\x6d\x81\xfb\x12\xe9\xc3\xe9\xf0\x9b\x6f\x49\x87\x1f\x20\x41\x69\xef\xd7\xb9\xe3\x78\x50\x64\xf7\x66\x6b\x71\x6d\xd9\xe6\xcc\xa5\x36\x73\x4d\x78\x42\x64\xb2\xb8\x3a\x5f\x6c\xce\x0f\x27\x38\xe7\x3f\x2c\xc1\x79\xfa\xc3\x12\x9c\x67\x41\x82\xd3\x6b\x89\x41\x4d\x5a\x1b\xe3\x35\xa1\x6b\x66\x12\xfd\xad\xad\x2b\xcc\x0d\x25\x99\xc2\x8e\x65\xd5\xc6\xe1\x88\x78\x34\x4b\x8b\x0a\xae\xa5\xc8\x16\x45\x46\x38\x2e\xb8\x9d\x6d\x09\x23\xca\x03\x6c\x61\x8a\x57\x94\x35\xed\x67\x81\xcb\x32\x05\x6a\x6d\xbb\x8b\x4b\x63\x74\x1b\x92\x95\x08\x19\xbb\x47\x60\xc5\x85\x9d\x4a\xd4\x6b\xa2\xeb\xa1\x06\x02\x1b\x26\x75\x49\x32\x98\xdd\x8e\xcd\x72\x45\xc9\xc4\x4b\x13\xa7\xdc\x9b\x9a\x7a\xce\x0e\x68\xa9\xb4\xc8\x51\x2a\x5f\x5a\xdb\xd9\x55\x97\x43\xe4\x25\x67\xd4\xc4\xb0\xfd\x1d\x17\x52\xb0\x05\xf2\xa4\x10\xcc\x86\xe8\xb8\x61\xda\x34\x3c\xde\x92\x25\x66\x71\x84\xa8\x4c\x9e\x40\x66\x16\xbf\xdc\x48\xb1\x07\xef\x47\x70\x6b\xad\x9b\x3f\x6a\x89\xf8\x97\x81\xf5\x04\xab\x91\x74\xcd\x67\x57\x1f\x11\xa7\xa5\x32\x92\xca\xdd\x05\x39\x9f\xbf\xee\xb9\x29\x6a\x90\x36\xd7\x6b\xa1\xf4\x01\x3c\xbb\xdc\xbe\xd9\xac\x52\x7b\x70\x9c\x53\xd8\xd5\xf6\x85\x76\xff\x42\xd5\xe9\x7a\x5d\xa9\x39\xb3\x05\x6b\xb6\x23\x67\x49\xe6\xd8\xc0\x14\x08\x9e\xed\x80\x40\x4e\x5c\x2f\x66\x55\x4d\x58\x63\x96\xd8\x81\x63\xf7\xd2\x70\xb4\xe7\x32\x7d\x16\xed\x6d\xb5\xa1\xea\x6d\x73\xef\x0d\xb1\xc9\xb7\x4d\xc1\x23\xb5\x2d\xa6\x3b\x7a\x14\xb4\xd8\xab\xab\xd5\x8d\x29\x35\x4e\xe1\xe7\x7d\xec\x70\x74\x7c\x85\x55\x6f\x46\xe2\x6e\xa6\x2a\x88\x89\x99\xfb\xc9\x30\xde\xb6\x46\x87\x12\x2a\xca\x66\xa3\x5c\xd8\xa0\x6d\x29\xd9\x91\x14\x37\xe6\xed\x86\x91\xc6\xf5\x30\x42\xfc\x62\xb4\x49\xc1\x83\xee\x8d\xeb\x3a\x7a\x9e\xea\x97\xd6\x67\x5b\x96\x54\x4f\xff\x5a\xc1\xce\x1d\xc7\x4c\xc3\x9a\x6c\x30\x06\xb5\x33\xb6\x50\x48\xb6\x61\x19\xa6\xa8\xfe\xda\xd4\x5f\xd5\xfc\xb3\x85\x0b\x75\x58\x8b\x44\xb9\x48\xc2\x74\x18\x70\x7c\x34\x70\x84\xbd\x7c\x3b\x6d\x15\xb3\xb8\xe0\x0d\x9d\xb0\x77\xf7\xd5\xef\x23\x7e\x3a\xf6\x7d\xc4\xcf\x0f\xfb\x3e\xe2\xc5\x71\xef\x8a\xfe\xeb\x90\x21\xb7\x5f\xe7\x12\xa7\xef\xa6\x5a\x56\xa5\xf5\xf3\x55\x99\x75\x2b\x66\x08\xda\xd3\x9e\xbe\x82\x2d\x4a\x74\x93\x3e\xa1\x6d\x55\xdb\xb7\x5f\x60\xf4\x0c\xa3\x3d\xb0\x63\x59\xee\x3a\x14\xda\x7d\x5a\x3f\x8c\xbf\xc8\x09\x4f\xdb\x6f\xce\xed\x40\xd9\x1c\xb5\x29\x3f\x9c\xc6\x5f\x21\x47\xc9\x68\x33\x6e\xe6\x06\xf4\x42\xc7\xf9\x6a\xeb\x7a\x76\xac\x75\x3d\x7f\x58\xeb\xfa\xe9\x38\xeb\xfa\xf9\xa0\x3a\xff\x6c\xf3\xea\x4e\x01\xfe\xd9\xd6\x45\xfa\xcd\xeb\xa6\x9a\xd9\xac\xf6\xfa\x77\x32\xa8\x09\x94\x9c\xfd\x5e\x22\x30\xff\x73\xa3\xc4\x67\x6f\xed\x71\x90\xbe\x81\x9b\x9f\x8f\xb3\xcb\x17\x87\xec\xe0\xcf\x36\xcb\x4e\xfc\xe8\x7d\xd5\x17\xd6\x5e\x6e\xf6\x35\x47\xae\x0f\xe6\xa3\x6d\x74\x9f\x51\x08\x8f\xef\xba\x03\xcd\x0f\x3e\x5a\x09\x40\x7f\x42\x11\x4d\x65\x58\x6e\x5b\x9d\xce\x5a\x6b\x85\xd8\xfb\xc2\xd4\x21\xf2\x3d\x56\xfe\x2c\xc6\x21\x12\xbd\x3e\xdc\xf4\xe8\x90\xa3\x32\xb7\xfa\x8e\xe4\x19\x9c\xd9\xa5\x0f\x26\xb1\x56\x23\xfb\xc4\xe4\x93\xc8\xb5\x3a\xed\x64\xde\xdd\x3c\xee\x0b\xe3\xa4\xfd\xa3\x41\x47\xbb\xc0\x9f\x33\x98\xd2\x33\x46\xe3\x4b\x31\xb4\xa2\xa5\x82\x2b\xc3\xa0\x11\x93\x49\x8e\x7d\x36\xd8\x63\x58\x9d\x09\x88\xc3\x03\xb6\x41\x6c\x25\xbc\x3d\x73\xe2\x77\xd9\x3f\x72\x62\xd9\xf6\x39\xa8\x7b\xad\x55\x08\xa5\x98\xc9\xf3\xdc\x6f\x3f\xb9\xd8\xf6\x66\x79\x35\x4e\xdb\xcd\x3a\x93\xb4\xff\xaf\xde\xb6\x7a\x7b\x64\x6f\x89\x6c\x2b\x85\xd9\xd6\x8c\xf8\x6b\x7f\x9d\xf0\xfc\xb8\xd8\xfc\xd3\x01\x2d\xf5\x86\x66\xa6\x4c\x89\x5c\xc7\xe4\xfd\x23\x84\x01\xd9\xf6\x6f\x7c\x0e\x8e\x99\x1d\x29\xc0\xfe\x61\x94\xa3\xed\xe9\xfc\xdb\xed\xe9\xe9\xb1\xf6\xd4\xe8\xbe\xe6\x84\xae\x4d\xf2\xeb\xf0\x5a\x63\x1e\x7e\xe9\x5b\x46\x3c\xc6\xe3\x48\x03\xf1\x90\x47\xf4\x8e\x27\x86\x6b\x8d\x79\x04\xef\x75\x22\xb8\x83\x63\x1e\x47\x26\x0c\x76\xad\xd7\x7e\x3a\x0d\x3c\xe8\xed\xb0\x6d\x11\xb6\x84\x6b\x57\x97\x26\x7d\xdd\x29\x38\xdc\x6e\x23\x49\x52\xf7\xda\x5a\xaf\x7a\xf7\xee\x24\x31\x17\x1b\x84\x95\x14\xf9\xd7\x6c\xf7\xde\x82\x87\x9b\x3a\x02\xf5\xbe\xf1\xd8\x41\xdc\x8a\xea\x22\x77\x2c\x62\x5f\x63\x09\x3a\xcd\xa5\x27\x3d\x6d\xd3\xee\xcf\xef\x1e\x22\x16\xec\xf9\x49\x41\xb7\x16\x68\x27\x28\x1d\x3f\x7f\x90\x99\x9a\x2f\x70\xf6\xd0\xc7\xee\xfe\x72\xe0\x87\x1d\xfc\x8b\x6f\x41\xbe\xc8\xdd\x77\x1f\xfe\x7f\x02\x00\x00\xff\xff\x12\x02\x01\x8a\x2f\x42\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 16943, mode: os.FileMode(420), modTime: time.Unix(1537515624, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": {apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
