// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\xef\x6f\xdb\x38\xb2\xdf\xfd\x57\x0c\xfc\xe5\x39\x0f\x8d\xdd\xa6\xed\xdd\x22\xb9\xbe\x3d\x5f\xb2\xd7\x1a\x6d\xd2\xa0\xce\x36\xd8\x4f\x06\x2d\x8d\x65\x5e\x28\x52\x47\x52\x76\xbd\x8b\xfe\xef\x0f\xfc\x25\x91\xb2\x9c\xb6\x69\x16\x7b\x58\x5c\x80\xbb\xb5\xc4\x99\xd1\x70\x7e\x0f\x39\x9d\x4c\xe0\x5c\x54\x3b\x49\x8b\xb5\x86\x93\xa7\xcf\x7e\x80\x39\x29\x55\xcd\x0b\x98\x5f\xcc\xe1\x9c\x89\x3a\x87\x2b\xa2\xe9\x06\xe1\x5c\x94\x55\xad\x29\x2f\xe0\x06\x49\x09\xa4\xd6\x6b\x21\xd5\x78\x30\x99\x0c\x26\x13\x78\x47\x33\xe4\x0a\x73\xa8\x79\x8e\x12\xf4\x1a\x61\x5a\x91\x6c\x8d\x61\xe5\x09\x7c\x44\xa9\xa8\xe0\x70\x32\x7e\x0a\x23\x03\x30\xf4\x4b\xc3\xa3\x33\x43\x62\x27\x6a\x28\xc9\x0e\xb8\xd0\x50\x2b\x04\xbd\xa6\x0a\x56\x94\x21\xe0\xa7\x0c\x2b\x0d\x94\x43\x26\xca\x8a\x51\xc2\x33\x84\x2d\xd5\x6b\xfb\x1d\x4f\xc5\x70\x02\xbf\x78\x1a\x62\xa9\x09\xe5\x40\x20\x13\xd5\x0e\xc4\x2a\x06\x04\xa2\x3d\xd3\xe6\x6f\xad\x75\x75\x3a\x99\x6c\xb7\xdb\x31\xb1\x0c\x8f\x85\x2c\x26\xcc\x81\xaa\xc9\xbb\xd9\xf9\x4f\x57\xf3\x9f\x8e\x4f\xc6\x4f\x3d\xd2\xcf\x9c\xa1\x52\x20\xf1\xdf\x35\x95\x98\xc3\x72\x07\xa4\xaa\x18\xcd\xc8\x92\x21\x30\xb2\x05\x21\x81\x14\x12\x31\x07\x2d\x0c\xd3\x5b\x49\x8d\xdc\x9e\x80\x12\x2b\xbd\x25\x12\x0d\x99\x9c\x2a\x2d\xe9\xb2\xd6\x89\xcc\x02\x8b\x54\x25\x00\x82\x03\xe1\x30\x9c\xce\x61\x36\x1f\xc2\x3f\xa6\xf3\xd9\xfc\x89\x21\x72\x3b\xbb\x79\xf3\xfe\xe7\x1b\xb8\x9d\x7e\xf8\x30\xbd\xba\x99\xfd\x34\x87\xf7\x1f\xe0\xfc\xfd\xd5\xc5\xec\x66\xf6\xfe\x6a\x0e\xef\xff\x09\xd3\xab\x5f\xe0\xed\xec\xea\xe2\x09\x20\xd5\x6b\x94\x80\x9f\x2a\x69\x76\x20\x24\x50\x23\x4d\xcc\xad\xe8\xe6\x88\x09\x0b\x2b\xe1\x58\x52\x15\x66\x74\x45\x33\x60\x84\x17\x35\x29\x10\x0a\xb1\x41\xc9\x8d\x25\x54\x28\x4b\xaa\x8c\x56\x15\x10\x9e\x1b\x32\x8c\x96\x54\x13\x6d\x5f\xed\xed\x6b\x3c\x30\x20\x97\x34\x5b\x13\x64\xf0\x11\x39\xfe\x4a\x09\xfc\xad\xdc\xb8\x5f\x7f\x2f\x4a\x42\xd9\x38\x13\xe5\xff\x19\xb8\x29\xa3\x77\x04\xde\x11\xa9\x90\xc3\xdf\x88\x79\x1a\x33\xfb\x14\x03\x0e\xd4\x8e\x6b\xf2\x09\x5e\xc1\xb0\x92\x42\x8b\xe7\xc3\xb3\xc1\xa0\x22\xd9\x9d\x61\x35\x63\xb5\xd2\x28\x17\x25\xe1\xa4\x40\xb9\x20\x15\x3d\x1b\x0c\x68\x59\x09\xa9\x61\x58\x08\x51\x30\x9c\x90\x8a\x4e\x08\xe7\xc2\xb3\x3d\xb6\x64\x86\x67\x0d\x98\x7d\xce\x8e\x0b\xe4\xc7\x6a\x4b\x8a\x02\xe5\x44\x54\x16\xb4\x17\x6d\x30\x70\xab\x30\x2a\x64\x95\x8d\x0b\xa2\x71\x4b\x76\x6e\x39\x5b\x14\xc8\x17\x9e\xca\xd8\x53\x19\x8b\x0a\x39\xa9\xe8\xe6\x24\xac\x1c\xc1\x2b\xf8\x6d\x00\x40\xf9\x4a\x9c\xda\x5f\x00\x9a\x6a\x86\xa7\x30\x3c\x77\x5b\x82\x4b\xb7\x25\x98\x5e\xcf\x86\x67\x16\x62\xe3\x1c\xec\x14\x86\x9b\xa7\xe3\x93\xf1\x53\xff\x3a\x13\x5c\x93\x4c\x07\x3a\xe6\x8f\x93\xd2\x90\x0a\xbe\x7e\x7e\x75\x7e\xe3\x81\xcd\x5f\x2d\xd9\x29\x0c\x8d\x63\xa8\xd3\xc9\xa4\xa0\x7a\x5d\x2f\x8d\xac\x27\xca\xc1\x1f\x67\x3c\xd3\x13\x2f\xda\x63\x2f\xda\x63\x52\xd1\x88\x06\x1a\x05\x9d\xc2\x90\xe4\x25\xe5\x7f\x8f\x11\xc7\x54\x78\xb8\xcf\xe6\x3f\xf6\xff\xf0\x93\x46\xc9\x09\x5b\xe4\x22\x53\x81\xd1\xef\x65\x23\x47\x95\x49\x6a\x45\x7c\x0a\xc3\x4b\x21\x11\xc8\x52\xd4\x1a\x0e\x49\xf0\xf3\x00\x40\x65\x6b\x2c\x51\x9d\xc2\x9b\x9b\x9b\xeb\xf9\x59\xf7\x8d\x79\x91\x09\xae\x6a\xfb\x66\xe8\x1d\xdf\x7c\x62\xf2\x2f\x25\xb8\x25\x53\x49\x91\xd7\xd9\xa1\xf5\xcf\x67\x83\x81\x42\xb9\xa1\x19\x36\x8c\xb8\xfd\x1a\x7f\xa6\x8c\x19\xfc\x0d\xb5\x91\x92\x04\xfb\xb5\xeb\xb2\xca\xe0\x5c\x22\xd1\x18\xf0\x46\xc9\xe3\xa5\x2a\x8e\x40\xa2\xae\x25\x57\x9d\xa5\x0f\x58\xb1\xdd\x51\x64\x00\x8d\x85\x5a\x0f\x18\x93\x8a\x8e\x8d\xa0\x83\xdd\xb5\x7f\x55\xad\xe1\x14\x86\xd6\x47\x36\xcf\x82\xb4\x87\x09\xcc\x52\xe4\x3b\x03\xf4\xbf\xed\xeb\xcf\x5e\xc3\xc9\xc6\x24\x6a\x49\x71\xe3\xc2\x8c\xd2\x44\xd7\xca\x84\xe6\x66\x97\x26\x84\x00\xd5\x0a\xee\xea\x25\x66\x82\xaf\x68\x61\xa3\x50\x26\x38\xc7\x4c\xd3\x0d\xd5\xbb\x46\x12\xaf\x51\x37\x62\x68\x7f\xa7\x32\x68\xdf\x3f\x5c\x00\x05\xde\x2f\x80\xde\x9d\xe6\xc8\x50\x63\x8f\xfe\x2e\xec\x42\xc3\x78\xf2\x98\xf2\x9e\x2c\x3d\x9c\x7d\xcf\xc9\x37\xef\x80\xe4\xff\xaa\x95\x06\x72\xaf\x35\x4e\x2d\x90\xe7\xf1\x4a\xe4\xa8\x60\x94\xbc\x4b\xb7\x94\x2c\x7d\x87\x49\x0a\xf5\x3b\xd8\x24\x01\x46\x95\x36\xf6\xe8\xe9\xa9\x1e\x53\x7b\x67\x40\x46\xe9\xf3\x21\x93\x33\x6b\x8f\x6d\x76\x13\xc3\xe3\x17\x76\x44\xb9\xd2\x84\x31\x18\x09\x09\x12\xfd\xd3\x11\x68\xca\x58\xa4\xba\xeb\xa0\xd6\x1b\xfb\x1e\x46\x9d\x17\xe9\xae\x3a\x8b\x8f\xa7\x3b\xc7\xd5\xc3\x54\x77\x60\xa3\x6b\x64\x25\x64\x6b\x22\x75\x80\xbe\x31\x85\xe4\xd6\xa0\x2c\xd1\x64\x05\x2d\xeb\xcc\x96\xb4\xd4\x06\x1f\x03\x0a\x6b\xa2\x80\x30\x89\x24\xdf\xc1\x12\x91\x43\x8e\x15\x13\x3b\xcc\xdb\x3a\x53\x91\x12\x6d\xe6\x6c\x84\x38\x73\xdf\x7c\x83\xac\x3c\xb7\x54\x46\xdd\x37\xa9\x18\xbb\xab\x8f\x16\x96\xcd\x9e\x1f\x26\x44\x1f\x1f\x9a\xdd\x76\xa4\xd7\xc6\xac\x68\x93\x9d\x17\x7d\x71\xeb\x11\xb6\xb8\x1f\xb9\xd2\x5d\x1e\x72\xe7\x5a\xf2\x50\x09\xd9\xfa\x49\x96\x36\xff\xfa\xdc\x4f\x2a\x0a\x26\xfd\x46\xae\xf0\x1a\xb5\x6f\x4d\x66\x11\xf8\xa8\x7d\xbd\xe7\xe1\xfe\xfd\xa3\x79\xb7\x67\xf7\xeb\xf6\x56\x57\x85\x24\x39\xfa\x8f\x29\x9b\x21\x09\x14\x74\x83\x7c\x2f\x40\xbf\x46\xfd\xb3\x03\xf7\x41\xa9\xbb\xc3\x83\xab\x7b\x7b\x3e\x08\xf9\xe8\x31\xce\x6f\xf0\x4b\x09\x4a\x6b\x2c\x2b\x6d\x5a\xac\x20\x91\xfd\x04\x95\x32\x0d\xa3\xf4\x39\xdd\x63\xba\xf6\xe8\xe9\x69\x7f\x5b\x5f\x72\xd3\xcf\x83\x41\x89\x4a\x99\x36\xa6\x5b\xe7\xb5\x15\xe3\x95\x09\x4a\xbe\xbf\x0d\x65\x94\x16\x26\xd0\x35\x89\x1b\x73\x0b\x6c\xba\x49\x5e\xd8\x00\x06\xaf\xe0\xd9\x59\x1b\x1d\x3d\xac\xe9\xd5\x42\xb3\x67\x35\x6b\x21\x92\x4f\x5f\x7b\xb8\x79\x85\x59\x8b\xf4\x0a\x4e\xce\x0e\x72\x6b\x05\x19\x55\xb8\x6b\xb4\x4d\xa8\x90\xb6\xcf\x8f\xd9\xde\x12\x15\x33\x6d\x1a\x6b\x7b\x04\x60\x3a\x6d\x54\x2e\x1e\x2d\x85\x60\x20\xee\xf6\x36\x90\xa3\x26\x94\xa9\xae\x24\x3c\x2a\x48\x54\x95\xe0\xca\x45\xee\x60\xc2\x1a\xcb\x06\xb0\xbb\x85\xa4\xa2\xfc\x1a\x69\x33\x21\xee\x4c\x27\x5f\xdd\x2b\xeb\xe9\xed\xdc\x48\x27\x47\xae\x29\x61\xae\xc2\x98\xde\xce\xa3\x57\x40\xb6\xca\x71\x13\x50\x7e\xad\x25\xee\x23\x99\xb7\x09\x9a\x05\x7b\x05\xcf\xcf\xfa\x78\x0d\xaa\x52\x30\x22\x5b\x35\x21\x77\x6a\xb2\x29\xb7\x44\xe2\x04\x75\x76\x14\xb3\x1c\x29\xf5\xc5\x01\x89\x74\x34\x3a\x53\x89\x38\x28\x77\xc9\x72\xa7\x34\x96\xfb\x3a\x8b\x35\x70\x61\x95\x76\xaf\x1e\xba\x05\x72\x6c\x48\x44\x03\x4d\xbe\xfd\x3f\xca\x49\x5c\x0b\x97\xe5\xc5\xee\xcf\xaa\x8c\xfd\xe6\xa0\x15\xcc\xb9\xa8\x59\x9e\xa8\x24\x54\x3d\x26\xc1\x1f\xf4\xa2\x79\xd3\x8f\x19\xd4\xd8\xe7\x3c\x33\xbe\x61\x3b\xec\x29\xbe\x18\x6e\x39\xf9\x6a\x01\x3f\x7b\xa8\x80\x4f\x7e\x7f\x6b\x6f\xca\xf8\x87\x5a\xbc\x47\x7a\xd7\xdb\x5d\x60\x65\x42\x65\xde\x17\x93\xf6\x45\x1d\x03\xb5\xcc\x5c\x74\x02\x52\xbc\x3f\x9a\x27\x3c\xf4\x84\xaf\x1e\x0f\x69\x85\x1a\xfb\x98\x4a\xec\xa3\x07\xbb\xb1\x8f\xe7\x7d\x4c\x47\xbe\xfe\x9f\xcd\x7a\x0f\x7e\x74\x1c\xa1\x45\x38\x8d\x30\x3f\x0f\x90\x8b\xe0\xbb\x76\x75\x38\x9b\xf6\x06\xb6\xc6\x3e\x8f\x21\xab\xa5\x44\xae\x99\x4f\x8a\xd4\xf9\x8e\x90\x50\x12\xa2\xbe\x98\xe0\x43\x41\x2c\x56\xf0\xb6\x5e\xa2\xe4\xa8\x31\xc1\xba\xfb\x41\x2d\x02\x90\x95\xa3\x5d\x14\x1c\xc5\xaa\xe1\x62\x11\x97\xd3\x6d\xd1\xe3\x3f\x61\xbc\x7d\xbf\x7c\xd8\x2b\x21\xa6\xb7\x73\xbb\x5f\xe7\xf9\xcf\xcf\x0e\x40\xbd\xf5\x50\xde\xd1\x5f\x1c\x80\xfb\x78\x79\x4b\x24\x5a\x50\xe7\xe2\xf0\x0a\xfe\x1a\x0a\xa8\xaf\xa8\x39\xa8\x82\x37\xd3\xd6\x67\xd7\xb4\x58\x2f\xc8\x86\x50\x46\x96\x94\x51\xbd\x83\x57\xf0\x32\x11\xe4\x8a\x2c\x25\xcd\x7c\xd2\xaf\x55\xa7\xb6\x42\xbd\x15\xf2\x6e\xe1\x81\x5e\xc1\x5f\xce\x06\x07\xb5\x1f\x04\xf1\xdb\xa0\x23\xc4\x0b\xa2\x09\x9c\x23\x0f\x56\x35\xbd\x9d\x9b\x57\xee\x0d\xe4\x44\x93\x45\xe6\x7e\xc7\x5a\x8e\xc3\xa3\xe1\xae\xa6\x69\x16\xe8\x8b\xbe\x59\xf4\x3b\x76\x9e\x7f\xfc\xf2\x1e\xa8\xc6\xb2\x09\xd9\xd7\xd2\x1b\x74\x2d\x31\x37\x4e\x6c\xaa\x32\x25\x6a\x99\x61\xea\x36\xb6\xc3\xe5\x19\x42\x21\x45\x5d\x75\x82\xdc\xf4\x76\x1e\xd6\x5f\x9b\x65\xd7\xc1\xf3\x0c\x17\x0e\xda\xe9\xb9\xd5\x1a\xcd\xd6\x7b\xc2\x08\xa2\x4c\x85\x92\x18\xa3\x43\x94\x58\xd8\x7a\xbd\x56\xc7\x48\x94\x3e\x7e\xf6\x04\x50\x67\xe3\xa3\x06\xd2\xeb\xcc\xc3\x35\xa2\x4c\x88\x24\xa6\xf0\xab\xe0\xa8\x22\x82\xcb\x27\x10\x7e\x9f\x64\xf6\xf7\x16\xcd\xef\xbc\xfb\xa5\x46\x00\xfe\x93\x31\xd5\x85\xa3\xda\x48\xbf\xb5\xda\x7f\x0a\x09\xdb\x35\x72\x50\xa2\xb4\x97\x61\xbc\x50\x60\x2c\x3c\x1c\x53\x64\xd6\x9a\xf2\xae\x58\x7a\x74\xb5\xe7\xab\x1f\xaf\xcf\x81\xe6\x4f\x60\xc9\x08\xbf\xb3\x1d\xa4\xf9\xdf\xd0\x51\x34\x5e\x6f\x9f\x77\xa2\x1e\x3e\x81\x15\x65\x0c\x73\xa0\x2b\x7b\x41\x67\x18\x30\xe6\xf1\xf1\xfa\xbc\x2b\xc9\x4d\x95\x2d\xe2\xa8\x1d\x0a\x0b\xcc\x6a\x69\xe4\x67\x95\xdc\x45\x52\x7e\xd5\x99\x80\xc3\x3f\x39\xeb\xf2\x3b\x9b\x5e\x82\x14\xac\xbd\x94\x0a\xfe\x3b\x22\x92\x1f\x05\x87\x52\x4a\x64\xd4\x86\x9e\x3c\xef\x7e\x87\x92\x72\x61\x28\x2c\x88\xe4\xad\xc5\xb6\xd2\xee\x18\x2e\xe4\xb8\xa2\xdc\xb4\x94\x7a\x57\xa1\x3d\x98\xe6\x75\xb9\x34\x41\x64\xd5\x98\xad\xea\x8a\x3e\xb5\xee\x44\xea\x0d\x7d\x4b\x6f\x54\xbe\x1c\x33\x22\x0b\x3c\x60\x94\x16\xa8\x2b\xc8\x4b\xca\x69\x59\x97\x7d\x8c\xc0\x28\xc7\x15\xa9\x99\xb6\xbe\xff\x2b\x4a\xd1\x92\xa4\x5c\x3f\x3f\x81\x92\xf2\xc5\xbf\x6b\xc2\xb5\x0b\x6a\xa9\x88\x2f\xc9\xa7\xef\xa0\x4c\x3e\xc5\x94\x9f\x47\xed\xeb\x64\x62\x0a\xa9\x38\xf9\x4c\xaf\x67\x30\x77\xc7\x2f\x51\xa9\xd5\x9e\xb3\xc0\x6f\x1e\xcf\x95\x5c\x46\xdd\x01\x3b\x94\xa4\xfb\x78\xdd\xf2\x6c\x05\xa2\x42\xe9\xd2\x94\x69\x2a\xdf\xbf\x3d\xd0\x87\x04\x52\x3d\xc7\x3f\x7b\x2e\xa3\x49\x01\xc2\x55\x7a\x05\x35\x1d\x65\x25\x14\xd5\x42\xee\xba\xba\x2b\xa8\x8e\x32\xe9\xb3\x3d\x5b\x5e\x13\xb5\x0e\xb5\x88\xa1\x94\x89\xb2\xa4\xba\x8f\x8a\x5b\xd9\xd3\x56\x4f\x3a\xd3\x12\xd1\x6e\x35\x63\x48\xb8\x0b\x1b\x26\x03\xf4\x92\x35\xc0\x0b\x53\xf2\x60\x9a\x80\x27\x13\x13\x6d\x6d\x95\x65\xb3\x47\x17\xd7\xbe\x5c\xe4\x0e\xef\x45\x82\xf7\xb1\xd5\x70\x21\x6c\x5a\x74\x95\x52\x59\x51\x86\x7b\x3c\x88\x48\x3e\x2f\x13\x3a\xe7\x0e\x43\xb6\x99\x35\xc2\xcb\xc2\xa2\xcd\xab\x11\xd6\x35\x23\xda\x68\x0e\xa8\x76\x42\x70\x80\xb9\x35\x9f\x09\xc8\x9a\xdb\xcb\xea\xa8\x22\x09\xe5\x7f\x40\xec\x29\x1a\xc2\x96\x22\xa3\xb0\x4b\x3d\xb6\xe2\x77\x93\x94\x47\xa1\x76\xf7\x4a\xcf\xd2\xec\x5c\xfb\xfb\x75\x1b\x70\xad\xc3\x47\x89\x3a\x0a\x28\x71\xb2\x4e\xea\x84\x39\x66\x12\xf5\x5b\xdc\xcd\xdc\x2e\x8d\x5f\x4d\xb3\x0c\x55\x52\xd4\x29\x0b\xb5\xb8\xc3\xdd\xa2\x53\x4e\xb7\x34\x1c\xd6\x5b\xdc\x35\x74\xc8\x21\x3a\x6e\xc1\x90\x4b\xaa\x05\x43\xeb\x83\xcb\xa2\x87\x49\x34\x69\xd6\x75\x07\xdf\x25\x97\x6e\x37\x98\x56\x50\x55\x75\xaf\x4c\x48\x55\xf5\x09\xe3\x06\x39\xe1\xfa\x9e\x0d\x68\x07\xd0\xdd\xf8\x35\x51\x6a\x2b\x64\x7e\x0f\x66\x15\x40\xe2\x42\xc9\x2a\xa0\x5e\x36\x37\xd4\xf7\x49\x3f\x02\x73\xac\xbf\x08\xa6\x65\xc4\x43\xb2\x4c\xd4\x5c\x3b\xaf\xb3\x67\x66\xc9\xd9\x94\xcf\xe9\xae\x90\x6e\x8b\xb6\x11\x7e\x3a\x05\x26\x48\x0e\x4b\xc2\x4c\xa4\x97\x47\x1d\x01\x3b\x12\x73\x77\x55\x3d\xf5\x1f\x49\x44\x7d\xce\x28\x72\x3d\xcb\x61\x44\xee\xc8\xa9\x95\xfc\x45\xd2\x5e\x67\x16\xa0\x4f\xdc\x0e\xd5\x59\xa0\x47\x0f\x62\xea\xa3\xe0\x0c\x30\x38\x55\x7f\x39\xfd\xb6\xaf\x9c\xb6\xbb\xee\xd6\x90\x9e\x36\x13\x59\xf0\xd5\x6f\x2d\xa3\xbb\x16\x78\xa8\x90\x0e\x07\xcf\xe1\xc2\x3f\xd1\x95\x69\x20\x09\xbb\x33\xff\x75\xda\xb1\x3a\x69\x4c\xbf\xa3\x9c\xf6\xbb\xbd\x8a\xf1\xec\x85\xc7\xaf\xaf\xc9\xdf\x7e\x4b\x4d\xfe\x08\x55\x52\xf7\x7b\x7b\x89\x96\x47\x9d\x7e\x6f\xc9\x98\x36\xb8\x5d\xce\x5c\x7d\x35\xd7\x84\xe7\x44\xe6\x8b\x8b\x93\xc5\xe6\xe4\xfe\x2a\xeb\xe4\x77\xab\xb2\x9e\xff\x6e\x55\xd6\x8b\x2f\x5d\x12\x44\x8d\x71\xe3\x11\x97\x24\x5b\x53\xd3\x6d\x6c\x6d\x73\x63\xd2\xa4\xa4\x0a\xf7\xcc\xbb\x31\x0e\x47\xc4\xa3\x59\x5a\x99\xe0\x5a\x0a\xb6\xa8\x18\xe1\xb8\xe0\xf6\xca\x3f\xb6\xb5\x47\xf8\x84\xe9\xa0\x51\x36\xb4\x5f\x44\x71\x83\x2a\x50\x6b\x7b\xbc\xb9\x34\x46\xb7\x21\xac\x46\x60\xf4\x0e\x81\x56\xa7\x76\x56\x4b\xaf\x89\x6e\xae\x7a\x09\x6c\xa8\xd4\x35\x61\x30\xbb\x9e\x98\xe5\x40\xc9\x04\x6d\x13\x2c\x49\x66\xbd\x2f\x4c\x1f\x41\x56\x2b\x2d\x4a\x94\xca\xf7\xf7\x76\xa2\xcf\x15\x32\x65\xcd\x69\x66\x02\xe9\xe1\x63\x1f\x52\xd1\x05\xf2\xbc\x12\xd4\x3a\xe0\xcb\xe4\xe0\xa7\x3d\x75\x79\x47\x96\xc8\xd2\x30\x15\x4c\x9e\x00\x33\x8b\x5f\x3e\xcd\xb1\x1b\xef\x47\x70\x6b\x9d\xf2\x23\x39\x97\xf1\x37\x86\xcd\x5c\x9f\x91\x74\xc3\xe7\xbe\x3e\x12\x4e\x6b\x65\x24\x55\xba\x2c\x3d\x9f\xbf\xe9\x49\x57\x0d\x48\x97\xeb\xb5\x50\xfa\x1e\x3c\xbb\xdc\x4d\xaf\x56\xa9\x3d\x38\xce\x29\xec\x6a\x37\xab\xde\xfd\xa0\x9a\x9e\xa1\x69\x17\x9d\xd9\x82\x35\xdb\xb1\xb3\x24\xb3\x6d\xa0\x0a\x04\x67\x3b\x20\x50\x12\x77\x20\xb4\x0a\x73\xa7\xc8\x72\x3b\x86\x69\x43\x5c\x3e\x3e\x90\xd1\x5f\x24\xdf\xb6\xda\x50\xcd\x67\x4b\xef\x0d\xa9\xc9\x77\x4d\xc1\x23\x05\x8b\x69\x54\xb1\x3f\x91\x11\x1d\xf2\x87\x04\xef\xa6\x37\x5a\xaf\xf0\x63\x10\x76\x66\x34\x4d\xa4\xe1\x82\x25\x3d\x53\x55\x15\x31\x41\xf3\x30\x19\xca\xbb\xe6\xe8\x50\x62\x4d\xd9\x9a\x98\x0b\x1b\xb5\x2d\x25\x7b\x55\xef\xa6\x5f\xdd\x8c\xc6\xa4\xb9\xa4\xd5\x22\xb1\xd6\xa6\x11\x88\xf2\x95\x3b\xfb\xf4\x3c\x35\x97\xba\xc7\x5b\x9a\x87\xb7\x3f\x06\xd8\xb9\xe3\x98\x6a\x58\x93\x0d\xa6\xa0\x76\xf4\x10\x2a\x49\x37\x94\x61\x81\xea\xc7\xb6\x0b\x0c\x63\xa1\x16\x2e\x56\x62\x23\x12\xe5\x42\x09\xd5\x71\xc4\xf1\xe1\xc0\x11\xf6\xf2\xdd\x3b\xdc\x31\x8b\x0b\xde\xd2\x89\x4f\x10\xbf\xfb\x96\xe2\x2f\xdf\x7e\x7b\xf5\xd7\x87\x5e\xae\xfc\x90\x04\xb0\xbe\x11\xa0\xe8\xd0\x9a\x38\xa5\xb5\x8d\xb7\xaa\xad\xb7\xae\x6a\xb6\xdf\x7c\x43\x74\xd2\xed\xe9\x2b\xd8\xa2\x44\x37\xc6\x10\xef\x3d\x7c\xbe\x7b\x17\xd2\x33\x68\xf3\xc8\xde\xe1\x07\xa3\x14\x6a\x53\x8e\x39\x59\xbd\x46\x8e\x92\x66\x6e\x69\xee\x56\xc2\x57\x92\xba\xcf\x0e\xca\xcc\x7b\x50\xdb\x31\x1a\x37\x77\xf4\xa8\x97\x84\x7f\x9c\x75\xf4\x4e\x36\xfd\x81\xe6\xb1\x3f\xa2\xf4\x1f\x67\x1d\x57\x61\x92\x2c\x7c\xe5\xcf\x64\x0f\x7d\x53\x60\x7f\xa0\x39\xf4\x6a\xa6\xf7\xc6\xcd\xab\xab\x89\xdf\x87\x92\xdf\xb3\xde\x9b\xc2\xe8\xa4\x33\x4a\x84\xfd\x09\xaf\x97\xc3\x36\x3c\xf4\x72\x17\xf7\x46\x6e\x64\xaf\x44\xae\xef\xad\x17\xbb\xe8\x3e\xe1\x0b\x8f\xef\x8e\x10\xda\x31\xf5\x4e\x7e\xee\xcf\xf7\xc9\xec\x85\xe5\xb6\x73\x1c\xda\x1c\xfa\x54\xe2\xe0\xad\xaa\x43\xe4\x07\xbc\xe0\x45\x8a\x43\x24\x7a\x8b\x71\x43\x6f\x23\x8e\xca\x24\xdd\x1d\x29\x19\x1c\xdb\xa5\x8f\xa6\xf0\x55\x63\xfb\xc6\xd4\x7b\xc8\xb5\x3a\xda\xab\x8c\xd5\x5e\x65\xfe\x85\x29\xb8\xfe\xe1\x9f\x07\xb9\xe3\x1f\x33\x7a\xd2\x33\x28\xe3\xdb\x24\xb4\x62\xcd\x04\x57\x86\x41\xc3\xac\x29\x5c\x7d\xa1\xd6\x63\x54\x7b\x23\x12\xf7\xcf\x04\x46\x11\x97\xf0\xee\x40\x8a\xff\xca\xe1\x79\x14\xcb\xb6\xf7\x16\x77\xef\x55\x09\xa5\xa8\x29\xc1\xdc\xbf\x56\xe3\x62\xdb\x5b\x80\x35\x38\x5d\x17\xdb\x1b\xfe\xfb\xaf\x6a\x63\xd5\xf6\xc8\xdd\x12\xd9\x06\x65\xd9\x6c\x26\x7e\xec\x8f\x66\x2f\xef\x11\x75\x6f\xf4\xa7\xca\xf4\xa0\x4d\xd8\x3f\x3c\xe5\x17\x91\xed\xfe\xdb\x82\x7b\xa7\xc1\x1e\x28\x89\x56\x93\x61\x3c\xc3\xc4\x24\x5e\xf8\x2e\xae\x33\x11\xe1\x97\xbe\x65\x1a\x62\x32\x49\xb6\x71\x70\x1e\xa2\x0b\x77\x78\x22\x22\x81\xeb\x9b\x88\x78\x99\x5c\x6e\xf4\x4a\x73\xef\xbc\x08\x7a\x0f\x74\xb6\x08\x5b\xc2\xb5\xeb\x82\xf2\xbe\xc3\x10\xb8\xff\x74\x87\xe4\x79\x73\xb4\xd3\xb9\xde\x3c\xf8\x25\x89\xa5\xd8\x20\xac\xa4\x28\xbf\xf5\x73\x0e\xb5\xf9\x62\x7b\xc9\x7e\xc8\xaa\xbe\xd7\x56\xff\x3f\x00\x00\xff\xff\x3c\x7a\x72\xb7\x51\x3b\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 15185, mode: os.FileMode(420), modTime: time.Unix(1537162928, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
