// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5d\x6f\xe3\x36\xb3\xbe\xf7\xaf\x18\xf8\xe6\x24\x07\x89\xb5\x9b\xdd\x9e\x53\xc4\xcd\x41\x5d\xa7\xed\x1a\xd9\x64\x83\x75\xba\x41\xaf\x0c\x9a\x1a\xcb\x3c\xa6\x48\x95\xa4\xec\x78\x8b\xfd\xef\x2f\xf8\x21\x89\x92\xe5\xec\x47\x5b\xe0\xc5\x1b\xa0\x5d\x4b\x9c\x19\x0d\x9f\xf9\x7a\x28\x3b\x49\x60\x2a\x8b\xbd\x62\xd9\xda\xc0\xc5\x8b\x97\xdf\xc3\x9c\xe4\xba\x14\x19\xcc\xaf\xe7\x30\xe5\xb2\x4c\xe1\x8e\x18\xb6\x45\x98\xca\xbc\x28\x0d\x13\x19\x3c\x20\xc9\x81\x94\x66\x2d\x95\x1e\x0d\x92\x64\x90\x24\xf0\x96\x51\x14\x1a\x53\x28\x45\x8a\x0a\xcc\x1a\x61\x52\x10\xba\xc6\x6a\xe5\x0c\x3e\xa0\xd2\x4c\x0a\xb8\x18\xbd\x80\x13\x2b\x30\x0c\x4b\xc3\xd3\xb1\x35\xb1\x97\x25\xe4\x64\x0f\x42\x1a\x28\x35\x82\x59\x33\x0d\x2b\xc6\x11\xf0\x89\x62\x61\x80\x09\xa0\x32\x2f\x38\x23\x82\x22\xec\x98\x59\xbb\xe7\x04\x2b\xd6\x13\xf8\x3d\xd8\x90\x4b\x43\x98\x00\x02\x54\x16\x7b\x90\xab\x58\x10\x88\x09\x4e\xdb\xbf\xb5\x31\xc5\x65\x92\xec\x76\xbb\x11\x71\x0e\x8f\xa4\xca\x12\xee\x45\x75\xf2\x76\x36\xfd\xf9\x6e\xfe\xf3\xf9\xc5\xe8\x45\x50\xfa\x4d\x70\xd4\x1a\x14\xfe\x51\x32\x85\x29\x2c\xf7\x40\x8a\x82\x33\x4a\x96\x1c\x81\x93\x1d\x48\x05\x24\x53\x88\x29\x18\x69\x9d\xde\x29\x66\x71\x3b\x03\x2d\x57\x66\x47\x14\x5a\x33\x29\xd3\x46\xb1\x65\x69\x5a\x98\x55\x2e\x32\xdd\x12\x90\x02\x88\x80\xe1\x64\x0e\xb3\xf9\x10\x7e\x9a\xcc\x67\xf3\x33\x6b\xe4\x71\xf6\xf0\xe6\xdd\x6f\x0f\xf0\x38\x79\xff\x7e\x72\xf7\x30\xfb\x79\x0e\xef\xde\xc3\xf4\xdd\xdd\xf5\xec\x61\xf6\xee\x6e\x0e\xef\x7e\x81\xc9\xdd\xef\x70\x33\xbb\xbb\x3e\x03\x64\x66\x8d\x0a\xf0\xa9\x50\x76\x07\x52\x01\xb3\x68\x62\xea\xa0\x9b\x23\xb6\x5c\x58\x49\xef\x92\x2e\x90\xb2\x15\xa3\xc0\x89\xc8\x4a\x92\x21\x64\x72\x8b\x4a\xd8\x4c\x28\x50\xe5\x4c\xdb\xa8\x6a\x20\x22\xb5\x66\x38\xcb\x99\x21\xc6\xdd\x3a\xd8\xd7\x68\x60\x45\x6e\x19\x5d\x13\xe4\xf0\x01\x05\x7e\x64\x04\x7e\xc8\xb7\xfe\xd3\x8f\x59\x4e\x18\x1f\x51\x99\xff\x9f\x95\x9b\x70\xb6\x21\xf0\x96\x28\x8d\x02\x7e\x20\xf6\x6a\xc4\xdd\x55\x2c\x38\xd0\x7b\x61\xc8\x13\x5c\xc1\xb0\x50\xd2\xc8\x57\xc3\xf1\x60\x50\x10\xba\xb1\xae\x52\x5e\x6a\x83\x6a\x91\x13\x41\x32\x54\x0b\x52\xb0\xf1\x60\xc0\xf2\x42\x2a\x03\xc3\x4c\xca\x8c\x63\x42\x0a\x96\x10\x21\x64\x70\x7b\xe4\xcc\x0c\xc7\xb5\x98\xbb\xa6\xe7\x19\x8a\x73\xbd\x23\x59\x86\x2a\x91\x85\x13\xed\x55\x1b\x0c\xfc\x2a\x9c\x64\xaa\xa0\xa3\x8c\x18\xdc\x91\xbd\x5f\xa6\x8b\x0c\xc5\x22\x58\x19\x05\x2b\x23\x59\xa0\x20\x05\xdb\x5e\x54\x2b\xa7\x70\x05\x7f\x0e\x00\x98\x58\xc9\x4b\xf7\x09\xc0\x30\xc3\xf1\x12\x86\x53\xbf\x25\xb8\xf5\x5b\x82\xc9\xfd\x6c\x38\x76\x12\x5b\x5f\x60\x97\x30\xdc\xbe\x18\x5d\x8c\x5e\x84\xdb\x54\x0a\x43\xa8\xa9\xec\xd8\x3f\x41\x72\x6b\xaa\xaa\xf5\xe9\xdd\xf4\x21\x08\xdb\xbf\x52\xf1\x4b\x18\xda\xc2\xd0\x97\x49\x92\x31\xb3\x2e\x97\x16\xeb\x44\x7b\xf9\x73\x2a\xa8\x49\x02\xb4\xe7\x01\xda\x73\x52\xb0\xc8\x06\xda\x00\x5d\xc2\x90\xa4\x39\x13\x3f\xc6\x8a\x23\x26\x83\xdc\x27\xfb\x8f\xfb\x1f\x3e\x19\x54\x82\xf0\x45\x2a\xa9\xae\x1c\xfd\xab\x6e\xa4\xa8\xa9\x62\x0e\xe2\x4b\x18\xde\x4a\x85\x40\x96\xb2\x34\x70\x0c\xc1\x4f\x03\x00\x4d\xd7\x98\xa3\xbe\x84\x37\x0f\x0f\xf7\xf3\x71\xf7\x8e\xbd\x41\xa5\xd0\xa5\xbb\x33\x0c\x85\x6f\x1f\x91\xfc\xbf\x96\xc2\x99\x29\x94\x4c\x4b\x7a\x6c\xfd\xd3\x78\x30\xd0\xa8\xb6\x8c\x62\xed\x88\xdf\xaf\xad\x67\xc6\xb9\xd5\xdf\x32\xd7\x29\x49\x95\xbf\x6e\x5d\x15\x14\xa6\x0a\x89\xc1\x4a\xef\xa4\x75\x79\xab\xb3\x53\x50\x68\x4a\x25\x74\x67\xe9\x3d\x16\x7c\x7f\x1a\x25\x40\x9d\xa1\xae\x02\x46\xa4\x60\x23\x0b\x74\x95\x77\xcd\x5f\x51\x1a\xb8\x84\xa1\xab\x91\xed\xcb\x0a\xed\x61\x4b\x66\x29\xd3\xbd\x15\xfa\xef\xe6\xf6\xa7\x10\xe1\xd6\xc6\x14\x1a\xc5\x70\xeb\xdb\x8c\x36\xc4\x94\xda\xb6\xe6\x7a\x97\xb6\x85\x00\x33\x1a\x36\xe5\x12\xa9\x14\x2b\x96\xb9\x2e\x44\xa5\x10\x48\x0d\xdb\x32\xb3\xaf\x91\xf8\x15\x4d\x0d\x43\xf3\xb9\x8d\x41\x73\xff\xdb\x01\xc8\xf0\x79\x00\x7a\x77\x9a\x22\x47\x83\x3d\xf1\xbb\x76\x0b\xb5\xe3\xad\xcb\xb6\xef\xad\xa5\x6f\x77\x3f\x78\xf2\xd5\x3b\xa8\x63\x45\x80\x33\x6d\x6c\x9c\x82\xa2\xee\x09\xc1\x5b\x2b\x72\xd2\xbe\x3e\x16\x0a\xbb\xf6\x77\x87\x23\xb1\x3e\x7e\x7e\x47\xa5\x12\x55\x93\x74\xad\x55\xe5\xae\x34\x43\x5b\x20\x05\x03\x5b\x99\x51\xb8\x7e\x45\x13\x58\xcb\x2c\x12\x3f\x69\x6e\x1f\x6c\x32\xdc\xff\xdb\x36\x18\xdc\xed\xd9\xdb\xa7\xc1\x20\x47\xad\xed\x94\xeb\xb6\x81\xa6\xa1\xdc\x91\x1c\x2b\xfa\x53\x55\x99\x91\xb0\xc4\xa6\xcb\x60\xea\x84\x2d\xd9\x10\x99\x9b\x0c\x70\x05\x2f\xc7\x95\x85\x87\x75\x90\xb5\xa3\xbc\xe2\x02\x0e\x07\x27\xd1\x7a\xf4\x7d\x90\x9b\x17\x48\x1b\xa5\x2b\xb8\x18\x1f\xf5\xd6\x01\x15\x35\xc0\x35\x3a\x8e\x22\x95\xa3\x81\xb1\xdb\x3b\xa2\x63\xa7\x2d\xef\x72\x0c\xd1\x12\x31\xd4\x66\xe0\x3b\x91\xe4\x20\x37\x07\x1b\x48\xd1\x10\xc6\x75\x17\x89\xa0\x0a\x0a\x75\x21\x85\x46\xbf\x23\xbf\x38\x33\x98\xd7\x82\xdd\x2d\xb4\x1a\xce\x97\xa0\xcd\xa5\xdc\x58\xa2\x57\x3c\x8b\xf5\xe4\x71\x6e\xd1\x49\x51\x18\x46\xb8\x2f\xb4\xc9\xe3\x3c\xba\x05\x64\xa7\xbd\x37\x95\xca\xc7\x52\xe1\xa1\x92\xbd\xdb\x52\x73\x62\x57\xf0\x6a\xdc\xe7\x6b\x15\x2a\x0d\x27\x64\xa7\x13\xb2\xd1\xc9\x36\xb7\x44\x35\x41\x43\x4f\x63\x97\xa3\xa0\xbe\x3e\x82\x48\x27\xa2\x33\xdd\x82\x83\x09\xdf\xfd\xf7\xda\x60\x7e\x18\xb3\x38\x02\xd7\x2e\x68\xcf\xc6\xa1\xdb\x3f\xe3\x44\x22\xc6\xb2\xe8\xe8\xd9\xff\xa5\x3d\xe2\x46\x5a\x6a\x60\x94\xdc\xff\xa7\x06\xe3\x70\x76\x34\xc0\x4c\x65\xc9\xd3\x56\x48\x96\x58\xe1\x11\x5a\x41\x5f\x15\xcd\xeb\x71\x6d\x55\xe3\x9a\x0b\xce\x84\x79\x7e\xbc\x52\xc2\x4c\x68\x3c\xf9\x62\x80\x5f\x7e\x2b\xc0\x17\xff\x7c\xb6\xd7\xd3\xec\x5b\x33\x3e\x28\xbd\xed\x1d\xb2\x58\xd8\x56\x99\xf6\xf5\xa4\x43\xa8\x63\xa1\xc6\x99\xeb\x4e\x43\x8a\xf7\xc7\xd2\x96\x0f\x3d\xed\xab\xa7\x42\x1a\x50\xe3\x1a\xd3\xad\xfc\xe8\xd1\xae\xf3\xe3\x55\x9f\xd3\x51\xad\xff\x7b\xbb\xde\xa3\x1f\xb1\x55\x23\x2b\xb2\x6a\x3f\x1e\x31\x17\xc9\x77\xf3\xea\xf8\x34\xed\x6d\x6c\x75\x7e\x9e\x03\x2d\x95\x42\x61\x78\x18\x8a\xcc\xd7\x8e\x54\x90\x13\xa2\x3f\x3b\xe0\x2b\x52\x24\x57\x70\x53\x2e\x51\x09\x34\xd8\xd2\xda\x7c\xaf\x17\x95\x90\xc3\xd1\x2d\x4a\x81\x72\x55\x7b\xb1\x88\x29\x55\x43\x6a\xc2\x23\x6c\xb5\x1f\xd2\x87\x03\x0a\x31\x79\x9c\xbb\xfd\xfa\xca\x7f\x35\x3e\x22\x75\x13\xa4\x42\xa1\xbf\x3e\x22\xf7\xe1\xf6\x91\x28\x74\xa2\xbe\xc4\xe1\x0a\xfe\xb7\x22\x50\x5f\xc0\x39\x98\x86\x37\x93\xa6\x66\xd7\x2c\x5b\x2f\xc8\x96\x30\x4e\x96\x8c\x33\xb3\x87\x2b\xf8\xae\x05\xe4\x8a\x2c\x15\xa3\x61\xe8\x97\xba\xc3\xad\xd0\xec\xa4\xda\x2c\x82\xd0\x15\xfc\xcf\x78\x70\x34\xfa\x15\x10\x7f\x0e\x3a\x20\x5e\x13\x43\x60\x8a\xa2\xca\xaa\xc9\xe3\xdc\xde\xf2\x77\x20\x25\x86\x2c\xa8\xff\x1c\x47\x39\x6e\x8f\xd6\xbb\x92\xb5\xa7\x40\x5f\xf7\xa5\xd1\xe7\xb8\x78\x7e\xfa\xfd\x1d\x30\x83\x79\xdd\xb2\xef\x55\x48\xe8\x52\x61\x6a\x8b\xd8\xb2\x32\x2d\x4b\x45\xb1\x5d\x36\x33\xa1\x8d\x7b\x79\x97\x29\x59\x16\x9d\x26\x37\x79\x9c\x57\xeb\xbf\xda\x65\x60\xe1\x6a\xe1\xa5\x7d\x9c\x9b\xa8\x31\xba\x3e\x00\xa3\x82\xb2\x0d\x4a\x2b\x19\xbd\xa2\xc2\xcc\xf1\xf1\x52\x9f\x23\xd1\xe6\xfc\xe5\x19\xa0\xa1\xa3\xd3\x5a\x32\xc4\x2c\xc8\xd5\x50\xb6\x8c\xb4\x52\xe1\xa3\x14\xa8\x23\x83\xcb\x33\xa8\x3e\x5f\x50\xf7\x79\x87\xf6\x73\xda\x7d\x52\x0d\x40\x78\x64\x6c\x75\xe1\xad\xd6\xe8\x37\x59\xfb\x8b\x54\xb0\x5b\xa3\x00\x2d\x73\xf7\xae\x54\x64\x1a\x6c\x86\x13\xae\x90\xa4\x7b\x1b\x3d\x6b\xb5\x0b\x4b\x4f\xac\x0e\x6a\xf5\xc3\xfd\x14\x58\x7a\x06\x4b\x4e\xc4\xc6\x1d\xc1\xed\x7f\x43\x6f\xd1\x56\xbd\xbb\xde\xcb\x72\x78\x06\x2b\xc6\x39\xa6\xc0\x56\xee\xfd\xad\x75\xc0\xa6\xc7\x87\xfb\x69\x17\xc9\x6d\x41\x17\x71\xd7\xae\x88\x05\xd2\x52\x59\xfc\x5c\x90\xbb\x4a\x3a\xac\xfa\x14\xf0\xfa\x17\xe3\xae\xbf\xb3\xc9\x2d\x28\xc9\x9b\x77\x96\x55\xfd\x9e\x10\x25\x4e\xab\x82\xd2\x5a\x52\xe6\x5a\x4f\x9a\x76\x9f\xc3\x48\xbe\xb0\x16\x16\x44\x89\x26\x63\x1b\xb4\x3b\x89\x0b\x29\xae\x98\xb0\x87\x63\xb3\x2f\xd0\xbd\xb7\x10\x65\xbe\xb4\x4d\x64\x55\xa7\xad\xee\x42\xdf\xce\xee\x16\xea\xb5\x7d\x67\xef\x24\xff\x6e\xc4\x89\xca\xf0\x48\x52\x3a\xa1\x2e\x90\xb7\x4c\xb0\xbc\xcc\xfb\x1c\x81\x93\x14\x57\xa4\xe4\xc6\xd5\xfe\x47\x54\xb2\x31\xc9\x84\x79\x75\x01\x39\x13\x8b\x3f\x4a\x22\x8c\x6f\x6a\x6d\x88\x6f\xc9\xd3\x5f\xb0\x4c\x9e\x62\xcb\xaf\xa2\xe3\x6b\x92\x58\x22\x15\x0f\x9f\xc9\xfd\x0c\xe6\xfe\x08\x1e\x51\xad\xe6\xac\x0d\x7f\x06\x3d\x4f\xb9\x6c\xb8\x2b\xed\x8a\x92\x1e\xea\x75\xe9\xd9\x0a\x64\x81\xca\x8f\x29\x7b\xa8\x7c\x77\x73\xe4\x1c\x52\x99\xea\x79\x05\x70\x50\x32\x86\x64\x20\x3d\xd3\xcb\x98\x3d\x51\x16\x52\x33\x23\xd5\xbe\x1b\xbb\x8c\x99\x68\x92\xbe\x3c\xc8\xe5\x35\xd1\xeb\x8a\x8b\x58\x4b\x54\xe6\x39\x33\x7d\x56\xfc\xca\x41\xb4\x7a\xc6\x99\x51\x88\x6e\xab\x94\x23\x11\xbe\x6d\xd8\x09\xd0\x6b\xd6\x0a\x2f\x2c\xe5\xc1\xf6\x00\x4e\x12\xdb\x6d\x1d\xcb\x72\xd3\xa3\xab\xeb\x6e\x2e\x52\xaf\xf7\xba\xa5\xf7\xa1\x89\x70\x26\xdd\x58\xf4\x4c\x29\x2f\x18\xc7\x03\x1f\x64\x84\xcf\x77\x2d\x3b\x53\xaf\xa1\x9a\xc9\x1a\xe9\xd1\x6a\xd1\xcd\xd5\x48\xeb\x9e\x13\x63\x23\x07\xcc\x78\x10\xbc\x60\xea\xd2\x27\x01\x55\x0a\xf7\x5d\x46\xc4\x48\x2a\xfa\x5f\x29\xf6\x90\x86\x6a\x4b\x51\x52\xb8\xa5\x9e\x5c\x09\xbb\x69\xd1\xa3\x8a\xbb\x87\xa0\xd3\xf6\x74\x2e\xc3\xd7\x2f\xae\xe1\xba\x82\x8f\x06\x75\xd4\x50\xe2\x61\xdd\xe2\x09\x73\xa4\x0a\xcd\x0d\xee\x67\x7e\x97\xb6\xae\x26\x94\xa2\x6e\x91\x3a\xed\xa4\x16\x1b\xdc\x2f\x3a\x74\xba\xb1\xe1\xb5\x6e\x70\x5f\xdb\x21\xc7\xec\xf8\x05\x6b\xae\xc5\x16\xac\xad\xf7\x7e\x8a\x1e\x37\x51\x8f\x59\x7f\x3a\xf8\x4b\xb8\x74\x4f\x83\x6d\x06\x55\x14\xcf\x62\x42\x8a\xa2\x0f\x8c\x07\x14\x44\x98\x67\x36\x60\xbc\x40\x77\xe3\xf7\x44\xeb\x9d\x54\xe9\x33\x9a\x45\x25\x12\x13\x25\x17\x80\x72\x59\x7f\x81\xf1\x1c\xfa\x91\x98\x77\xfd\x75\x95\x5a\x16\x1e\x42\xa9\x2c\x85\xf1\x55\xe7\xde\x99\xb5\xde\x4d\x85\x99\xee\x89\x74\x43\xda\x4e\xf0\xe9\x12\xb8\x24\x29\x2c\x09\xb7\x9d\x5e\x9d\x76\x00\xf6\x26\xe6\xfe\x9b\x8c\x49\x78\x48\x0b\xea\x29\x67\x28\xcc\x2c\x85\x13\xb2\x21\x97\x0e\xf9\xeb\xd6\xf1\x9a\x3a\x81\x3e\xb8\xbd\xaa\xcf\xc0\xa0\x5e\xc1\xd4\x67\xc1\x27\x60\x55\x54\xfd\x74\xfa\xa6\x8f\x4e\xbb\x5d\x77\x39\x64\xb0\xcd\x25\xad\x6a\xf5\x6b\x69\x74\x37\x03\x8f\x11\xe9\xea\x7b\x80\xea\xfb\xa0\x56\xac\xec\x01\x92\xf0\x8d\xfd\xd7\x47\xc7\xc5\xa4\x4e\xfd\x4e\x70\x9a\xe7\xf6\x06\x26\xb8\x57\x5d\x7e\x39\x27\xbf\xf9\x1a\x4e\xfe\x37\xb0\xa4\xee\xf3\x0e\x06\xad\x88\x4e\xfa\xbd\x94\xb1\x7d\xc0\xed\x7a\xe6\xf9\xd5\xdc\x10\x91\x12\x95\x2e\xae\x2f\x16\xdb\x8b\xe7\x59\xd6\xc5\x3f\xc6\xb2\x5e\xfd\x63\x2c\xeb\xf5\xe7\xbe\x24\x88\x0e\xc6\xad\x8a\xf8\x9a\x86\x1b\xc7\xcd\xdb\xbb\x25\x74\xcd\x44\x6c\x36\x32\x5d\x6a\x54\x2e\x36\xd6\xe0\x7c\xfe\x26\x6e\x65\x11\xea\xb5\x58\x2f\x39\x92\xda\x7c\x46\xdf\x89\xf4\x1d\x12\xdc\x77\xf9\x47\x74\x3d\x88\x4e\xa2\x1b\x16\xab\xba\xf9\x5e\xd7\x3c\xb3\x3e\x62\x48\x61\x94\xe4\x96\x24\x08\x1c\xc1\xc3\x9a\x69\x10\x32\x75\x3f\xdd\x90\x82\xef\x81\x40\x4e\xfc\x4b\x84\x55\xf5\x53\x16\xe4\xa9\xfb\x65\x87\x2b\x8b\x74\x74\xc8\x60\x9c\xc9\x85\x33\x19\x91\xa0\xd7\x5d\xf2\xe1\x1f\x46\x72\xd4\x05\xb1\x6d\x83\x4b\x91\x35\xbf\x87\x09\xf1\x71\x20\xba\x9b\xc7\xdf\x2a\x95\x82\xfd\x51\x22\xdf\x03\x73\x51\x5f\x79\xaf\x05\xc9\x30\x3d\xf6\x1a\xcd\x3f\x32\xee\x89\xf7\x8a\x6d\xed\x0c\xd9\x04\x92\x40\x38\x77\x48\xe8\xea\xd5\x67\xb0\x34\xb6\x7c\xd4\x1e\x55\x89\xa9\x56\xaa\x06\xe8\x78\xff\xfc\x4d\xf3\x42\xcb\xac\x51\x23\x50\x22\x60\x59\xff\x02\xc5\x9e\x32\x45\x8a\x05\x8a\xd4\xbd\xe9\x1a\xb5\xa6\xa8\x77\xe2\x80\x7d\x84\x94\xd4\xb0\x73\x27\x76\xcb\xfd\x14\xd3\x78\x90\xc8\x75\xc7\x3b\xcc\xe4\xbc\x32\x11\xd8\xc9\xbf\x02\x00\x00\xff\xff\x03\x56\x0a\x51\x34\x25\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 9524, mode: os.FileMode(420), modTime: time.Unix(1537144379, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
