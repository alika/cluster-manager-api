// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\x5d\x73\xdb\x38\x92\xef\xfe\x15\x5d\x7a\x39\xf9\x2a\x96\x62\x27\x99\xc9\xd9\x9b\xdb\xd5\xca\xb3\x89\x2a\x89\xe3\x8a\x9c\xa4\xe6\x49\x05\x91\x2d\x0a\x6b\x12\x60\x00\x50\x8a\x66\x2b\xff\xfd\x0a\x1f\x24\x01\x90\x92\x13\xc7\xb9\xb9\xda\x3a\x57\xcd\x44\x02\x1a\x8d\x46\x7f\x37\xd0\x1a\x8f\x61\xca\xcb\x9d\xa0\xd9\x5a\xc1\xd9\xe3\xd3\xe7\x30\x27\x85\xac\x58\x06\xf3\xcb\x39\x4c\x73\x5e\xa5\x70\x45\x14\xdd\x20\x4c\x79\x51\x56\x8a\xb2\x0c\x6e\x90\x14\x40\x2a\xb5\xe6\x42\x8e\x8e\xc6\xe3\xa3\xf1\x18\xde\xd0\x04\x99\xc4\x14\x2a\x96\xa2\x00\xb5\x46\x98\x94\x24\x59\x63\x3d\xf3\x08\x3e\xa2\x90\x94\x33\x38\x1b\x3d\x86\xa1\x06\x18\xb8\xa9\xc1\xf1\x85\x46\xb1\xe3\x15\x14\x64\x07\x8c\x2b\xa8\x24\x82\x5a\x53\x09\x2b\x9a\x23\xe0\x97\x04\x4b\x05\x94\x41\xc2\x8b\x32\xa7\x84\x25\x08\x5b\xaa\xd6\x66\x1f\x87\x45\x53\x02\xbf\x3b\x1c\x7c\xa9\x08\x65\x40\x20\xe1\xe5\x0e\xf8\xca\x07\x04\xa2\x1c\xd1\xfa\x6f\xad\x54\x79\x3e\x1e\x6f\xb7\xdb\x11\x31\x04\x8f\xb8\xc8\xc6\xb9\x05\x95\xe3\x37\xb3\xe9\x6f\x57\xf3\xdf\x4e\xce\x46\x8f\xdd\xa2\x0f\x2c\x47\x29\x41\xe0\xe7\x8a\x0a\x4c\x61\xb9\x03\x52\x96\x39\x4d\xc8\x32\x47\xc8\xc9\x16\xb8\x00\x92\x09\xc4\x14\x14\xd7\x44\x6f\x05\xd5\x7c\x7b\x04\x92\xaf\xd4\x96\x08\xd4\x68\x52\x2a\x95\xa0\xcb\x4a\x05\x3c\xab\x49\xa4\x32\x00\xe0\x0c\x08\x83\xc1\x64\x0e\xb3\xf9\x00\xfe\x3e\x99\xcf\xe6\x8f\x34\x92\x4f\xb3\x9b\x57\xef\x3e\xdc\xc0\xa7\xc9\xfb\xf7\x93\xab\x9b\xd9\x6f\x73\x78\xf7\x1e\xa6\xef\xae\x2e\x67\x37\xb3\x77\x57\x73\x78\xf7\x0f\x98\x5c\xfd\x0e\xaf\x67\x57\x97\x8f\x00\xa9\x5a\xa3\x00\xfc\x52\x0a\x7d\x02\x2e\x80\x6a\x6e\x62\x6a\x58\x37\x47\x0c\x48\x58\x71\x4b\x92\x2c\x31\xa1\x2b\x9a\x40\x4e\x58\x56\x91\x0c\x21\xe3\x1b\x14\x4c\x6b\x42\x89\xa2\xa0\x52\x4b\x55\x02\x61\xa9\x46\x93\xd3\x82\x2a\xa2\xcc\x50\xe7\x5c\xa3\x23\x0d\xf2\x96\x26\x6b\x82\x39\x7c\x44\x86\x7f\x50\x02\x7f\x29\x36\xf6\xd3\xdf\xb2\x82\xd0\x7c\x94\xf0\xe2\xbf\x35\xdc\x24\xa7\xb7\x04\xde\x10\x21\x91\xc1\x5f\x88\xfe\x36\xca\xcd\x37\x1f\xf0\x48\xee\x98\x22\x5f\xe0\x05\x0c\x4a\xc1\x15\x7f\x32\xb8\x38\x3a\x2a\x49\x72\xab\x49\x4d\xf2\x4a\x2a\x14\x8b\x82\x30\x92\xa1\x58\x90\x92\x5e\x1c\x1d\xd1\xa2\xe4\x42\xc1\x20\xe3\x3c\xcb\x71\x4c\x4a\x3a\x26\x8c\x71\x47\xf6\xc8\xa0\x19\x5c\x34\x60\xe6\x7b\x72\x92\x21\x3b\x91\x5b\x92\x65\x28\xc6\xbc\x34\xa0\xbd\xcb\x8e\x8e\xec\x2c\x0c\x33\x51\x26\xa3\x8c\x28\xdc\x92\x9d\x9d\x4e\x16\x19\xb2\x85\xc3\x32\x72\x58\x46\xbc\x44\x46\x4a\xba\x39\xab\x67\x8e\xe1\x05\xfc\xeb\x08\x80\xb2\x15\x3f\x37\x9f\x00\x14\x55\x39\x9e\xc3\x60\x6a\x8f\x04\x6f\xed\x91\x60\x72\x3d\x1b\x5c\x18\x88\x8d\x35\xb0\x73\x18\x6c\x1e\x8f\xce\x46\x8f\xdd\x70\xc2\x99\x22\x89\xaa\xf1\xe8\x3f\x46\x0a\x8d\xaa\xb6\xf5\xe9\xd5\xf4\xc6\x01\xeb\xbf\x4a\xe4\xe7\x30\xd0\x86\x21\xcf\xc7\xe3\x8c\xaa\x75\xb5\xd4\xbc\x1e\x4b\x0b\x7f\x92\xb0\x44\x8d\x1d\x6b\x4f\x1c\x6b\x4f\x48\x49\x3d\x1c\xa8\x05\x74\x0e\x03\x92\x16\x94\xfd\xcd\x5f\x38\xa2\xdc\xc1\x7d\xd5\xff\x98\xff\xe1\x17\x85\x82\x91\x7c\x91\xf2\x44\xd6\x84\xfe\x28\x19\x29\xca\x44\x50\xc3\xe2\x73\x18\xbc\xe5\x02\x81\x2c\x79\xa5\x60\x1f\x07\xbf\x1e\x01\xc8\x64\x8d\x05\xca\x73\x78\x75\x73\x73\x3d\xbf\x88\x47\xf4\x40\xc2\x99\xac\xcc\xc8\xc0\x19\xbe\xde\x62\xfc\x4f\xc9\x99\x41\x53\x0a\x9e\x56\xc9\xbe\xf9\xaf\x17\x47\x47\x12\xc5\x86\x26\xd8\x10\x62\xcf\xab\xed\x99\xe6\xb9\x5e\xbf\xa1\xc6\x53\x92\x5a\x7f\xcd\xbc\x28\x13\x98\x0a\x24\x0a\xeb\x75\xc3\xe0\xeb\x5b\x99\x1d\x83\x40\x55\x09\x26\xa3\xa9\xf7\x58\xe6\xbb\x63\x4f\x01\x1a\x0d\x35\x16\x30\x22\x25\x1d\x69\x46\xd7\x7a\xd7\xfe\x95\x5c\x2a\x38\x87\x81\x31\x92\xcd\x69\xcd\xee\x41\x00\xb4\xe4\xe9\x4e\x03\xfd\x67\x3b\xfc\xd5\x89\x38\x38\x99\x40\x25\x28\x6e\xac\x9f\x91\x8a\xa8\x4a\x6a\xdf\xdc\x1c\x53\xfb\x10\xa0\x4a\xc2\x6d\xb5\xc4\x84\xb3\x15\xcd\x8c\x1b\x4a\x38\x63\x98\x28\xba\xa1\x6a\xd7\xb0\xe2\x25\xaa\x86\x0f\xed\xe7\x90\x09\xed\xf8\xfd\x39\x90\xe1\x61\x06\xf4\x9e\x34\xc5\x1c\x15\xf6\x08\xf0\xd2\x4c\x34\x84\x07\x5f\x43\xda\x83\xa9\xfb\x93\xef\x28\xf9\xee\x13\x90\xf4\x9f\x95\x54\x40\x0e\xaa\xe3\xc4\x00\x39\x1a\xaf\x78\x8a\x12\x86\xc1\x58\x78\xa4\x60\xea\x07\x74\xb2\xfa\x09\x2a\x49\x20\xa7\x52\x69\x75\x74\xf8\x64\x8f\xa6\xbd\xd1\x20\xc3\xf0\xfb\x3e\x8d\xd3\x73\x0f\xad\x75\x63\x4d\xe3\x1d\x27\xa2\x4c\x2a\x92\xe7\x30\xe4\x02\x04\xba\x6f\xc7\xa0\x68\x9e\x7b\x92\xbb\xae\xa5\x7a\x63\xc6\x61\x18\x0d\x84\xa7\x8a\x26\x1f\xce\x9d\x58\xaa\xee\x27\xba\x3d\x07\x5d\x63\x5e\x40\xb2\x26\x42\xd5\xd0\x37\x3a\x91\xdc\xea\x25\x4b\xd4\x51\x41\x89\x2a\x31\x29\x2d\x35\xbe\x47\x83\xc2\x9a\x48\x20\xb9\x40\x92\xee\x60\x89\xc8\x20\xc5\x32\xe7\x3b\x4c\xdb\x3c\x53\x92\x02\x4d\xe4\x6c\x98\x38\xb3\x7b\xbe\xc2\xbc\x98\x1a\x2c\xc3\x78\x24\x64\x63\x3c\xfb\x70\x7c\xd4\x87\xbe\x1f\x17\x9d\x7f\x68\x8e\x1b\xb1\xaf\xf5\x59\xde\x29\xa3\x81\x3e\xbf\xf5\x00\x67\xec\x7a\xae\xf0\x94\xfb\xec\xb9\x12\xac\x4e\x85\x4c\x02\x25\x0a\x13\x80\x5d\xf0\x27\x25\x05\x1d\x7f\x3d\x5b\x78\x89\xca\xd5\x26\x33\x0f\x7c\xd8\x0e\x77\x4c\xdc\x8d\x3f\x98\x79\x3b\x72\xbf\xed\x6c\x55\x99\x09\x92\xa2\xdb\x4c\x9a\x08\x49\x20\xa3\x1b\x64\x1d\x07\xfd\x12\xd5\x07\x0b\xee\xbc\x52\x7c\xc2\xbd\xb3\x9d\x33\xef\x85\x7c\x70\x27\xe7\x0e\x78\x57\x80\x52\x0a\x8b\x52\xe9\x1a\xab\xe6\x48\x37\x40\x85\x44\xc3\x30\xfc\x1e\x9e\x31\x9c\x7b\xe8\xf0\xd4\x3d\xd5\xf7\x58\x69\x55\xa6\x44\xe7\x13\x5b\x09\x89\xc0\x14\x99\xa2\x24\x97\xba\x4c\x4e\x9d\xfc\xbb\x27\xd7\x2b\x26\x9f\xe6\x53\x0f\x7e\xd8\x37\x1a\x73\xa1\x0b\xf1\x70\xbc\x68\x71\x8e\xc9\x56\xfe\x18\x2f\xfe\xa8\x04\x7e\x27\x37\xf4\x92\x3e\x7e\x44\xe3\xbd\x1c\x89\x60\x7e\x0e\x4f\xf4\x26\xdf\xce\x95\xaf\x47\x47\xc8\xaa\xc2\x06\xf3\xb4\x29\x24\x74\xd9\xbd\xa2\x0c\x53\x78\x01\x8f\x2d\xac\x56\x9c\x17\x70\xea\xbe\x18\xce\xbd\x80\x33\x57\x36\x16\x5b\x62\xbe\x3f\xb9\xd0\x18\x0b\x94\x52\x97\xce\x53\x92\xe7\x4b\x92\xdc\xb6\xd5\xc9\xcd\x1a\xe1\xc3\xfb\x37\xda\xe2\x12\x1d\x78\xcd\xac\xe2\x66\x5a\x2a\x41\x59\xa6\x6b\xb6\x76\x1f\xb7\x64\x76\x59\x5f\xc0\x08\xfc\x5c\xa1\x54\xfe\x02\x37\xb4\xa0\xa9\x25\xc8\x27\x20\x2a\x6e\x5a\x42\xae\x74\x24\x76\x38\xeb\xd2\x41\x71\x1d\xdd\x9b\x64\x15\x53\x7f\x17\x1d\xb5\x3b\x74\x95\x35\xd7\xea\x1b\x0e\xe3\xcd\x0c\x44\xb0\x75\xcd\xdd\x79\x89\x49\xbb\xa8\x61\xdf\x78\xdc\xb2\xca\x0b\x37\x16\x4f\x3d\x91\xd4\x1f\x3a\x5c\xee\x94\x69\x5e\x35\xb8\x46\x73\x61\xc3\x85\xb9\x13\xf3\x4f\xbb\x25\xd2\x3f\x2b\x2c\x77\xf6\xba\xcc\xe7\xf0\x92\xf3\x1c\xf8\x6d\xe7\xdc\x29\x2a\x42\x73\x19\x33\xd0\x2d\x05\x81\xb2\xe4\x4c\xda\x2c\xa7\xf6\xf6\x0a\x8b\x06\x30\x96\x53\x50\x7c\x7d\x8b\x90\x72\xce\x6f\x31\x85\xaa\x3c\x28\xa2\xc9\xa7\x39\x78\xf6\x66\x86\x23\x77\x66\xb5\xba\x95\x83\xb1\xd1\xee\xa2\xd8\xea\x6b\xfd\x7f\x72\xd1\x47\x6b\x2d\x61\x09\x43\xb2\x75\x26\x39\xb6\x36\x32\x46\x95\x1c\x9b\x35\x8d\xc5\x79\xfa\xf0\x74\x0f\x57\x22\xa9\xce\x64\xc0\x12\xca\x6c\x72\xb9\x93\x0a\x8b\xae\xdc\x7c\x29\x5c\x1a\xc1\x1d\x94\x45\x5c\x4f\xfa\xca\x44\x14\xd0\x60\xef\xff\x90\x96\xeb\x8a\xdb\xac\x98\xef\xfe\xed\x04\x72\x1f\x03\x7d\xb6\x9f\xa3\x91\x28\xa7\xbc\xca\xd3\x40\x9a\x75\x81\xa1\x53\xe9\xbd\x46\x38\x6f\x6e\x3e\xf6\x38\x45\x77\x35\xb2\xdf\xd0\x5c\xdd\xd9\x52\xf2\xcd\xb2\x39\xbd\xaf\x6c\xce\xfe\x77\x8c\xa5\xa9\x9a\xef\x6b\x30\x6e\xd1\x9b\xde\x62\x1e\x4b\xed\x6d\xd3\x3e\xb7\xd6\x65\xb7\x0f\xd4\x12\x73\x19\xf9\x34\x5f\x6e\x26\x88\x9d\xf6\x32\xaa\x07\xda\x19\x58\xcb\x58\xdf\x44\x65\xa0\x23\x3d\xab\x1b\x1d\x79\xd2\x47\xb4\xe7\x2a\xfe\x6f\x93\xde\xb3\xde\xbb\xfc\xd3\x99\x86\xbd\xfb\xd3\x1f\xf7\xa0\xf3\xe0\x63\xbd\xda\x1f\xc7\x7b\xfd\x62\xa3\x9f\x27\x90\x54\x42\x20\x53\xb9\x8b\xab\xd4\xda\x0f\x17\x50\x10\x22\xef\x4c\x2d\xea\xf2\x93\xaf\xe0\x75\xb5\x44\xc1\x50\x61\xb0\xea\xf6\xb9\x5c\xd4\x40\x86\x8f\x66\x92\x33\xe4\xab\x86\x8a\x85\x5f\xbc\xb6\x29\xa4\xdb\x42\x5b\x7c\x37\x71\xe9\x24\x2f\x93\x4f\x73\x73\x5e\x6b\xfd\x4f\x2e\xf6\x40\xbd\x76\x50\xce\xd8\x9f\xee\x81\xfb\xf8\xf6\x13\x11\x68\x40\x9b\xac\xf1\xd7\x3a\x1b\xfd\x86\xb4\x85\x4a\x78\x35\x69\x6d\x76\x4d\xb3\xf5\x82\x6c\x08\xcd\xc9\x92\xe6\x54\xed\xac\xf7\xf5\x4e\xb9\x22\x4b\x41\x13\x97\x37\xe8\xfc\x3e\x60\x3d\xaa\x2d\x17\xb7\x0b\x07\xf4\x02\x7e\xb9\x38\xda\x2b\xfd\x9a\x11\x41\x36\xab\x99\x78\x49\x14\x81\x29\xb2\x5a\xab\x26\x9f\xe6\x7a\xc8\x8e\x40\x4a\x14\x59\x24\xf6\xb3\x2f\x65\xdf\x45\x6a\xea\x2a\x1a\x46\x82\x3e\x0f\xec\xd7\x2a\xbe\xf1\xfc\xfd\xf7\x77\x40\x15\x16\x8d\xdb\xbe\x16\x4e\xa1\x2b\x81\xa9\x36\x62\x9d\xd8\x49\x5e\x89\x04\x43\xb3\x31\x17\x4a\x2c\x41\xc8\x04\xaf\xca\xc8\xc9\x4d\x3e\xcd\xeb\xf9\x97\x7a\xda\x5e\x98\xb1\x04\x17\x16\xda\xca\xb9\x95\x1a\x4d\xd6\x1d\x66\xd4\xac\x0c\x99\x12\x28\xa3\x5d\x28\x30\x33\xd5\x4f\x25\x4f\x90\x48\x75\x72\xfa\x08\x50\x25\xa3\xe3\x06\xb2\xc9\xf7\x33\xab\xf3\xa7\x17\x5d\x24\x81\x2a\xfc\xc1\x19\x4a\x0f\xe1\xf2\x11\xd4\x9f\xcf\x12\xf3\x79\x8b\xfa\x73\x1a\xef\xd4\x30\xc0\x6d\xe9\x63\x5d\x58\xac\x0d\xf7\x5b\xad\xfd\x07\x17\xb0\x5d\x23\x03\xc9\x0b\xf3\xf6\xcc\x32\x09\x5a\xc3\xeb\x5b\xc1\xc4\x68\x53\x1a\xb3\xa5\x47\x56\x1d\x5b\xfd\x78\x3d\x05\x9a\x3e\x82\x65\x4e\xd8\xad\xa9\x50\xf5\x7f\x03\x8b\x51\x5b\xbd\xf9\xbe\xe3\xd5\xe0\x11\xac\x68\x9e\x63\x0a\x74\x65\xde\xc3\x35\x01\x5a\x3d\x3e\x5e\x4f\x63\x4e\x6e\xca\x64\xe1\x7b\xed\x3a\xb9\xc0\xa4\x12\x9a\x7f\x46\xc8\xf1\x22\xe9\x66\xad\x0a\x34\x55\x57\x44\xef\x6c\xf2\x16\x04\xcf\xdb\x37\xe0\xda\x7e\x87\x44\xb0\xe3\xda\xa0\xa4\xe4\x09\x35\xae\x27\x4d\xe3\x7d\x28\x29\x16\x1a\xc3\x82\x08\xd6\x6a\x6c\xcb\xed\x48\x71\xc1\x16\xac\x40\x40\xed\x4a\x34\xcf\x40\xac\x2a\x96\xda\x89\xac\x1a\xb5\x95\x31\xeb\x43\xed\x0e\xb8\xde\xe0\x37\xf8\x86\xc5\xb3\x51\x4e\x44\x86\x7b\x94\xd2\x00\xc5\x8c\x7c\x4b\x19\x2d\xaa\xa2\x8f\x10\x18\xa6\xb8\x22\x55\xae\x8c\xed\xff\x81\x82\xb7\x28\x29\x53\x4f\xce\xa0\xa0\x6c\xf1\xb9\x22\x4c\x59\xa7\x16\xb2\xf8\x2d\xf9\xf2\x03\x98\xc9\x17\x1f\xf3\x13\xef\x2e\x60\x3c\xd6\x89\x94\x1f\x7c\x26\xd7\x33\x98\xdb\xcb\x4e\x2f\xd5\x6a\x6f\x35\xe1\x5f\x6e\x9d\x4d\xb9\xb4\xb8\xeb\xd5\x75\x5a\xda\x5d\x17\xa7\x67\x2b\xe0\x25\x0a\x1b\xa6\x74\x5d\xfa\xee\xf5\x9e\x32\xa6\x46\xd5\x73\xd9\xda\x31\x19\x45\x32\xe0\x36\xd3\xcb\xa8\x2e\x4a\x4b\x2e\xa9\xe2\x62\x17\xcb\x2e\xa3\xca\x8b\xa4\xa7\x1d\x5d\x5e\x13\xb9\xae\x73\x11\x8d\x29\xe1\x45\x41\x55\x1f\x16\x3b\xd3\x91\x56\x4f\x38\x53\x02\xd1\x1c\x35\xc9\x91\x30\xeb\x36\x74\x04\xe8\x45\xab\x81\x17\x3a\xe5\xc1\x30\x00\x8f\xc7\xda\xdb\x9a\x2c\xcb\x44\x8f\x78\xad\x19\x5c\xa4\x76\xdd\xd3\x60\xdd\xc7\x56\xc2\x19\xb7\xd7\x5e\x26\x53\x2a\x4a\x9a\x63\x87\x06\xee\xf1\xe7\x59\x80\x67\x6a\x57\x88\x36\xb2\x7a\xeb\x92\x7a\xd2\xc4\x55\x6f\xd5\x75\x4e\x94\x96\x1c\x50\x65\x99\x60\x01\xed\xd5\xdb\x18\x44\xc5\x4c\x6f\x88\x97\x91\x38\x8c\x65\xbd\xb0\x27\x69\xa8\x8f\x34\x8b\x0a\xb4\x1e\x5d\x71\xa7\x09\xd2\xa3\x3a\x77\x77\x42\x4f\xc2\xe8\x5c\xb9\x76\x16\xe3\x70\x8d\xc1\x7b\x81\xda\x73\x28\x7e\xb0\x0e\xf2\x84\x39\x26\x02\xd5\x6b\xdc\xcd\xec\x29\xb5\x5d\x4d\x92\x04\x65\x90\xd4\x49\x03\xb5\xb8\xc5\xdd\x22\x4a\xa7\x5b\x1c\x76\xd5\x6b\xdc\x35\x78\xc8\x3e\x3c\x76\x42\xa3\x0b\xb2\x05\x8d\xeb\xbd\x8d\xa2\xfb\x51\x34\x61\xd6\x56\x07\x3f\xc4\x97\xb8\x22\x0c\x33\xa8\xb2\x3c\xc8\x13\x52\x96\x7d\xcc\xb8\x41\x46\x98\x3a\x70\x00\x65\x01\xe2\x83\x5f\x13\x29\xb7\x5c\xa4\x07\x56\x96\x35\x88\x9f\x28\x19\x01\x54\xcb\xa6\x21\xe4\x10\xf7\x3d\x30\x4b\xfa\xd3\x5a\xb5\x34\x7b\x48\x92\xf0\x8a\x29\x6b\x75\xe6\xda\x2d\xb8\xde\x72\x31\xdd\x26\xd2\x6d\xd2\x36\xc4\x2f\xe7\x90\x73\x92\xc2\x92\xe4\xda\xd3\x8b\xe3\x88\xc1\x16\xc5\xdc\x76\x86\x4c\xdc\x26\x01\xab\xa7\x39\x45\xa6\x66\x29\x0c\xc9\x2d\x39\x37\x9c\xbf\x3c\xf6\x29\x4f\x0c\x40\x1f\xbb\xed\x52\xab\x81\x6e\x79\xcd\xa6\x3e\x0c\x56\x01\x6b\xa3\xea\x4f\xa7\x5f\xf7\xa5\xd3\xe6\xd4\x71\x0e\xe9\x70\xe7\x3c\xa9\x6d\xf5\x7b\xd3\xe8\x58\x03\xf7\x25\xd2\x87\xd3\xe1\xd7\xdf\x93\x0e\x3f\x40\x82\x12\xef\xd7\x89\x71\xcc\x2b\xb2\x7b\xb3\xb5\xb0\xb6\x8c\x29\xb3\xa9\xcd\x5c\x11\x96\x12\x91\x2e\x2e\xcf\x16\x9b\xb3\xc3\x09\xce\xd9\x4f\x4b\x70\x9e\xfc\xb4\x04\xe7\xa9\x97\xe0\xf4\x6a\xa2\x57\x93\x36\xca\xf8\x96\x24\x6b\xaa\x13\xfd\xad\xa9\x2b\x74\x84\x12\x54\x62\x47\xb3\x1a\xe5\xb0\x48\xdc\x32\x83\x2b\xe1\x4c\x09\x9e\x2f\xca\x9c\x30\x5c\x30\xd3\xdb\xe2\x7b\x94\x07\xd8\x42\x17\xaf\x28\x1a\xdc\x4f\x3d\x93\xa5\x12\xe4\xda\xdc\x2e\x2e\xb5\xd2\x6d\x48\x5e\x21\xe4\xf4\x16\x81\x96\xe7\xa6\x2b\x51\xad\x89\x6a\x9a\x1a\x08\x6c\xa8\x50\x15\xc9\x61\x76\x3d\xd6\xd3\x35\x26\xed\x2f\xb5\x9f\xb2\x2f\x35\x4d\x9f\x1d\x24\x95\x54\xbc\x40\x21\x5d\x69\x6d\x7a\x57\x6d\x0e\x51\x54\x8c\x26\xda\x87\xed\xbf\x71\x21\x25\x5d\x20\x4b\x4b\x4e\x8d\x8b\x0e\x2f\x4c\xdb\x0b\x8f\x37\x64\x89\x79\xe8\x21\x6a\x95\x27\x90\xeb\xc9\xbb\x2f\x52\xcc\xc1\xfb\x17\xd8\xb9\x28\xf2\x07\x57\x22\xee\x31\xb0\xe9\x60\xd5\x9c\x6e\xe8\xec\xca\x23\xa0\xb4\x92\x9a\x53\x85\x0d\x90\xf3\xf9\xab\x9e\x48\xd1\x80\xc4\x54\xaf\xb9\x54\x07\xd6\x99\xe9\x38\xb2\x19\xa1\xf6\xac\xb1\x46\x61\x66\xe3\x80\x76\xfb\x5c\x36\xe9\x7a\x53\xa9\x59\xb5\x05\xa3\xb6\x23\xab\x49\xfa\xd8\x40\x25\x70\x96\xef\x80\x40\x41\xec\x5d\xcc\xaa\xee\xb0\xc6\x3c\x35\x0d\xc7\xf6\xd1\x70\xb4\x27\x98\x3e\x0d\xf6\x36\xd2\x90\xcd\xb6\x85\xb3\x86\x50\xe5\x63\x55\x70\x8b\x62\x8d\xe9\xb6\x1e\xf5\xbf\x22\xd9\x66\x21\x18\x43\xdd\xdd\xeb\x7a\x3e\xfb\xb4\xe8\x71\x1b\x62\xea\xe0\x6c\x57\xb7\x66\xe5\x3a\x86\x4c\x7b\x75\x18\x04\xeb\xb7\x95\xf0\x3e\x54\x96\x24\xc1\x43\x68\x28\x8b\x29\xb1\x4b\x7c\x51\xd3\x42\x13\x3e\xa4\xab\xa6\x98\x70\xfe\xf0\xd8\xf2\xd2\x75\x63\x7d\xae\xc8\x6e\x44\xf9\x58\xf2\x02\xb3\x6a\xe7\xfa\xa4\x82\x58\x6d\x31\xbd\x80\xd3\x96\x4a\xaf\x2e\xb0\x0b\x4c\xc7\x8c\xed\x42\xb7\xbd\x52\xe3\xa6\x57\x42\x71\x18\x6e\xce\x46\xa7\xa7\xa3\xc7\x26\x68\x04\xb8\xdb\x82\xc1\xbb\x6b\x92\xbe\x10\x9a\x27\xf6\x93\x2d\x4d\xeb\xd1\xbf\xd6\xb0\x73\xcb\x1d\xaa\x60\x4d\x36\x18\x82\x9a\x8e\x60\x28\x05\xdd\xd0\x1c\x33\x94\x7f\x6d\xab\xc5\xba\x5b\xdb\xc0\xf9\x1a\xd7\xb0\x5f\x5a\xbf\x47\x95\xef\x1e\x9d\xef\xb2\x88\x9d\x2c\x3b\x97\x40\x7a\x72\xc1\x5a\x3c\xfe\x4d\xe3\x37\xbf\x9e\xfc\x72\xdf\xd7\x93\x5f\x1f\xf6\xf5\xe4\xf9\xfd\x5e\xb6\xfe\xeb\x90\xd9\xc5\x8f\xcf\xc4\xca\xbb\xad\xed\x65\x65\xbc\xd2\xaa\xca\xbb\xf5\x3d\x78\x97\xe9\x0e\xbf\x84\x2d\x0a\xb4\x7d\x49\xbe\x6e\xd5\xdb\xc7\xcf\x2d\x3d\xad\x73\xde\x4b\xdb\x43\x18\xb1\xa1\xae\x83\x21\xbe\x55\x76\xce\x65\x51\x10\x96\xc5\xef\xfc\xa6\xfd\x6d\x8e\x4a\x17\x4b\x56\xe2\x2f\x91\xa1\xa0\x49\xdb\x1c\x67\xdb\x09\x7d\xc3\xf9\x66\xed\x7a\x7a\x5f\xed\x7a\xf6\xb0\xda\xf5\xcb\xfd\xb4\xeb\xd7\x83\xe2\xfc\xb3\xd5\xab\xdb\xb3\xf8\x67\x6b\x17\xe9\x57\xaf\xab\xba\xc3\xb4\xde\xeb\xdf\x49\xa1\x26\x50\x31\xfa\xb9\x42\xa0\xee\xc7\x51\xa9\xcb\x35\xe3\xe6\x95\xbe\xf6\xa0\x5f\xef\xa7\x97\xcf\x0f\xe9\xc1\x9f\xad\x96\x1d\xff\xd1\xfb\x30\xe9\x57\x8a\xb6\x53\xb7\x40\xa6\x0e\x66\xcf\xf1\x72\x97\xbd\x70\xb7\xde\xde\x65\xb4\x3f\x4f\x89\xfa\xb8\xfa\x93\x97\xa0\x87\xc4\x50\x1b\xdd\xcb\xd6\x2c\x75\x63\x66\x7a\xef\x3b\xaf\xc5\xc0\xf6\xa8\xfb\xd3\x03\x6b\x5c\x7a\xd2\x9f\xb1\x3c\x0b\x17\x12\x81\x4e\xa2\xb6\x5b\x76\xc8\x50\xea\xbc\x60\x47\x8a\x1c\x4e\xcc\xd4\x47\x5d\x48\xc8\x91\x19\xd1\xf9\x33\x32\x25\x8f\x3b\x95\x46\x18\xff\x4d\xca\x4e\x76\xe6\x4a\x87\xb7\x6d\xe4\x43\x53\x71\x50\x91\x91\xb2\xd4\xc9\x07\xcf\x2b\xb3\xad\x97\x62\x2d\x77\x0a\xa5\x05\x5f\xd4\x18\x8c\x6e\x07\xb7\x07\x31\x27\xa3\x27\xb7\x96\x23\x1f\xde\xbf\x69\x93\xff\x46\x26\xf1\x05\x40\xd0\x97\xd7\x83\xc5\x08\xaa\x11\x45\x57\xaf\xce\x7a\xaa\xf0\x3b\xba\x87\xfb\x73\xf8\x7b\xfb\x90\x3f\xa7\x0f\xa9\xa7\x6b\xca\x55\xde\x68\x34\x2b\xe1\x4c\x6a\x02\x35\xab\xb4\x14\x5c\x76\xdd\x63\x99\x9d\x86\x97\xc3\xfd\xd4\x5e\x70\x22\x2c\x6e\x31\x72\xbb\xec\xef\x30\x32\x64\x3b\x93\xb0\xaf\x98\x25\x97\x92\xea\x44\xd9\xfe\xd4\x97\xf1\x6d\x6f\x9a\xdc\xac\x89\xfd\x54\xa7\x71\xfa\xff\xc5\x1b\x8b\xb7\x87\xf7\x06\xc9\xb6\x16\x98\xb9\x89\xe3\x7f\xbd\xcb\x6d\x7d\x57\x70\xfb\xe5\x80\x94\x7a\x63\x1b\x95\x40\xbc\xa0\xb6\xbf\x63\xd4\x43\x1b\xff\xa4\xeb\x60\x57\xe1\x3d\x19\xd8\xdf\x7b\x74\x6f\x7d\x3a\xfb\x7e\x7d\x7a\x72\x5f\x7d\x6a\x65\xdf\x50\x92\xac\x75\xf5\x60\xd7\x45\x5d\x3d\x6e\xea\x7b\x3a\x7a\xc6\xe3\x40\x02\x61\x4f\x4f\xf0\xa4\x17\xc2\x45\x5d\x3d\xde\x33\x5e\x00\x77\xb0\xab\xe7\x9e\x19\x57\x10\xcc\xf6\xed\x16\xb0\x20\xba\x50\xdd\x22\x6c\x09\x53\xb6\xb0\x4f\xfb\x2e\x23\xe1\xf0\xed\x2a\x49\xd3\xe6\x6a\x35\x7a\xd9\xdf\xbb\x93\xc0\x82\x6f\x10\x56\x82\x17\xdf\xb2\xdd\x7b\x03\xee\x6f\x6a\x11\x34\xfb\x86\x5d\x26\xe1\xcd\x63\x77\x71\x47\x23\xf6\xdd\x23\x42\xe7\x2e\xf1\xb4\x27\x3e\x77\x7f\x6d\xf9\x10\xbe\x60\xcf\x2f\x48\xba\xc5\x54\x9c\xd8\x75\xec\xfc\x41\x5a\xa8\xee\xa0\xec\xa1\x8f\xdd\xfd\xa1\xc8\x4f\x3b\xf8\x9d\x8f\x5e\x77\x52\xf7\xc3\x87\xff\x9f\x00\x00\x00\xff\xff\x59\xda\x14\xac\x1e\x44\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 17438, mode: os.FileMode(420), modTime: time.Unix(1538000402, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": {apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
