// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdf\x6f\xdb\x38\xf2\x7f\xd7\x5f\x31\xf0\xcb\x37\xfd\x22\xb1\xda\x74\xf7\x6e\x91\x20\xc0\xb9\x4e\xb7\x6b\xb4\x4d\x82\x2a\x9b\xa0\x4f\x06\x4d\x8d\x65\x5e\x28\x92\x4b\x52\x76\xd5\x22\xff\xfb\x81\x3f\x24\x4b\xb2\xdc\xde\xed\xed\xc3\x19\x68\x23\x73\x66\x3e\x9c\xf9\xcc\x70\x38\x72\x9a\xc2\x5c\xaa\x5a\xb3\x62\x63\xe1\xfc\xe5\xab\x5f\x20\x23\xa5\xa9\x44\x01\xd9\x75\x06\x73\x2e\xab\x1c\x6e\x88\x65\x5b\x84\xb9\x2c\x55\x65\x99\x28\xe0\x1e\x49\x09\xa4\xb2\x1b\xa9\xcd\x34\x49\xd3\x24\x4d\xe1\x03\xa3\x28\x0c\xe6\x50\x89\x1c\x35\xd8\x0d\xc2\x4c\x11\xba\xc1\x46\x72\x0a\x0f\xa8\x0d\x93\x02\xce\xa7\x2f\xe1\xc4\x29\x4c\xa2\x68\xf2\xe2\xd2\x41\xd4\xb2\x82\x92\xd4\x20\xa4\x85\xca\x20\xd8\x0d\x33\xb0\x66\x1c\x01\xbf\x50\x54\x16\x98\x00\x2a\x4b\xc5\x19\x11\x14\x61\xc7\xec\xc6\xef\x13\x51\x9c\x27\xf0\x39\x62\xc8\x95\x25\x4c\x00\x01\x2a\x55\x0d\x72\xdd\x55\x04\x62\xa3\xd3\xee\xb3\xb1\x56\x5d\xa4\xe9\x6e\xb7\x9b\x12\xef\xf0\x54\xea\x22\xe5\x41\xd5\xa4\x1f\x16\xf3\xb7\x37\xd9\xdb\xb3\xf3\xe9\xcb\x68\xf4\xbb\xe0\x68\x0c\x68\xfc\xa3\x62\x1a\x73\x58\xd5\x40\x94\xe2\x8c\x92\x15\x47\xe0\x64\x07\x52\x03\x29\x34\x62\x0e\x56\x3a\xa7\x77\x9a\x39\xde\x4e\xc1\xc8\xb5\xdd\x11\x8d\x0e\x26\x67\xc6\x6a\xb6\xaa\x6c\x8f\xb3\xc6\x45\x66\x7a\x0a\x52\x00\x11\x30\x99\x65\xb0\xc8\x26\xf0\x66\x96\x2d\xb2\x53\x07\xf2\xb8\xb8\xff\xed\xf6\xf7\x7b\x78\x9c\x7d\xfa\x34\xbb\xb9\x5f\xbc\xcd\xe0\xf6\x13\xcc\x6f\x6f\xae\x17\xf7\x8b\xdb\x9b\x0c\x6e\x7f\x85\xd9\xcd\x67\x78\xbf\xb8\xb9\x3e\x05\x64\x76\x83\x1a\xf0\x8b\xd2\x2e\x02\xa9\x81\x39\x36\x31\xf7\xd4\x65\x88\x3d\x17\xd6\x32\xb8\x64\x14\x52\xb6\x66\x14\x38\x11\x45\x45\x0a\x84\x42\x6e\x51\x0b\x57\x09\x0a\x75\xc9\x8c\xcb\xaa\x01\x22\x72\x07\xc3\x59\xc9\x2c\xb1\x7e\xe9\x20\xae\x69\x92\x98\x5a\x58\xf2\x05\xae\x60\xa2\xb4\xb4\xf2\xf5\xe4\x32\x49\x14\xa1\x4f\x0e\x98\xf2\xca\x58\xd4\xcb\x92\x08\x52\xa0\x5e\x12\xc5\x2e\x93\x84\x95\x4a\x6a\x0b\x93\x42\xca\x82\x63\x4a\x14\x4b\x89\x10\x32\x6e\x32\xf5\x30\x93\xcb\x56\xcd\x7f\xa7\x67\x05\x8a\x33\xb3\x23\x45\x81\x3a\x95\xca\xab\x8e\x9a\x25\x49\x90\xc2\x49\xa1\x15\x9d\x16\xc4\xe2\x8e\xd4\x41\x4c\x97\x05\x8a\x65\x44\x99\x46\x94\xa9\x54\x28\x88\x62\xdb\xf3\x46\xf2\x02\xae\xe0\x5b\x02\xc0\xc4\x5a\x5e\xf8\x27\x00\xcb\x2c\xc7\x0b\x98\xcc\x43\x48\xf0\x31\x84\x04\xb3\xbb\xc5\xe4\xd2\x6b\x6c\xc3\x71\xb8\x80\xc9\xf6\xe5\xf4\x7c\xfa\x32\x2e\x53\x29\x2c\xa1\xb6\xc1\x71\x1f\x41\x4a\x07\xf5\x91\xd1\x0d\x41\x0e\x0f\x28\xf0\x2b\x23\x51\xdf\x7d\x2a\xcd\x2f\x60\xe2\x2a\xd9\x5c\xa4\x69\xc1\xec\xa6\x5a\x4d\xa9\x2c\xd3\xed\x81\x2a\x96\x84\x39\xe5\x32\x8a\xfe\x51\xb8\x05\xa7\x1c\x95\x9e\xdd\x1f\xff\x1f\x7e\xb1\xa8\x05\xe1\xcb\x5c\x52\xd3\xf8\x73\x74\x2b\x13\xfa\xc6\x19\x15\xd4\xa6\x31\x91\x67\x31\x91\x67\x44\xb1\x08\x9f\xa3\xa1\x9a\x79\x26\x5d\x48\x52\x23\x90\x95\xac\x2c\x1c\x23\xea\x39\x01\x30\x74\x83\x25\x9a\x0b\xf8\xed\xfe\xfe\x2e\xbb\x1c\xae\xb8\x05\x2a\x85\xa9\xfc\xca\x24\x9e\x46\xb7\x45\xfa\x4f\x23\x85\x87\x51\x5a\xe6\x15\x3d\x26\x7f\xbe\x4c\x12\x83\x7a\xcb\x28\xb6\x8e\x84\x78\xdd\x21\x63\x9c\x3b\xfb\x2d\xf3\xed\x8b\x34\x65\xea\xe5\x5a\x51\x98\x6b\x24\x16\x1b\xbb\x93\xde\xd7\x8f\xa6\x78\x01\x1a\x6d\xa5\x85\x19\x88\x3e\xa1\xe2\xf5\x8b\x4e\x9e\xdb\x42\xf4\x85\x3e\x25\x8a\x4d\x1d\xd1\x4d\x79\xed\x3f\xaa\xb2\x70\x01\x13\x7f\x14\xb6\xaf\x1a\xb6\x27\x3d\x9d\x95\xcc\x6b\xa7\xf4\xff\xfb\xe5\xe7\x98\xe1\x5e\x60\x1a\xad\x66\xb8\x0d\x67\xdf\x58\x62\x2b\xe3\xfa\x65\x1b\xa5\x3b\xd7\xc0\xac\x81\xa7\x6a\x85\x54\x8a\x35\x2b\x7c\x6b\xa0\x52\x08\xa4\x96\x6d\x99\xad\x5b\x26\xde\xa1\x6d\x69\xd8\x3f\xf7\x39\xd8\xaf\xff\x79\x02\x0a\xfc\x3e\x01\xa3\x91\xe6\xc8\xd1\xe2\x48\xfe\xae\xbd\xa0\x75\xbc\xf7\xb5\xef\x7b\x4f\xf4\xe7\xdd\x8f\x9e\xfc\xc7\x11\xb4\xb9\x22\xc0\x99\xb1\x2e\x4f\xd1\xd0\x8c\xa4\xe0\x83\x53\x39\xe9\x7f\x3f\x96\x0a\x27\xfb\xab\xd3\x91\x3a\x1f\x7f\x1c\x51\xa5\x45\xd3\x0b\x7d\x07\xd5\xa5\x3f\x9a\xb1\x2d\x10\xc5\xc0\x9d\xcc\x4e\xba\xde\xa1\x8d\xa3\xc4\xa2\xa3\x7e\xb2\x5f\x3e\x08\x32\xae\xff\x65\x01\x46\x77\x47\x62\x7b\x4e\x92\x12\x8d\x71\x97\xd9\xb0\x0d\xec\x1b\xca\x0d\x29\xb1\x99\x49\x9a\x53\x66\x25\xac\x70\xdf\x65\x30\xf7\xca\x6e\x02\x10\x85\xbf\x00\xe0\x0a\x5e\x5d\x36\x08\xf7\x9b\xa8\xeb\xee\xd7\xe6\x82\xf6\x3c\x78\x8d\xde\xd6\x77\x51\x2f\x53\x48\xf7\x46\x57\x70\x7e\x79\xd4\x5b\x4f\x54\xa7\x01\x6e\xd0\x0f\x0e\x52\xfb\xd9\xac\xeb\xf6\x8e\x98\xae\xd3\x6e\x18\xf2\x63\x9b\x9b\x8e\xd0\xd8\x24\x74\x22\xc9\x41\x3e\x1d\x04\x90\xa3\x25\x8c\x9b\x21\x13\xd1\x14\x34\x1a\x25\x85\xc1\x10\x51\x10\x2e\x2c\x96\xad\xe2\x30\x84\x5e\xc3\xf9\x77\xd8\xe6\x52\x3e\xb9\xe9\x4b\x8d\x73\x3d\x0a\x3d\xa0\x66\x61\x7a\xb8\x4c\x84\x36\x5a\x1b\x8b\xe5\x61\xf0\xdd\x50\xae\x7d\xf4\xdf\x0d\x68\xd8\x88\xba\x19\x21\xd6\xcd\x88\x9d\xbd\xff\xcf\x04\xd7\xad\x74\x77\xac\xd5\xb2\xfe\x61\x54\x87\xdd\x6c\xbf\xc3\x5c\x56\x3c\xef\xc5\xb6\xc2\x06\x38\x16\xe7\x58\x5e\xb3\xf6\x02\x71\xa6\xdd\x2a\x88\x8e\xc4\x1b\xe6\x78\xee\x62\x97\x82\x6f\xc7\xc5\xff\x55\x0e\xa2\xd1\x87\xd1\xfe\x89\xca\x9d\x82\x7c\xac\xdc\x0e\x7d\xee\x2a\xed\x9d\xb9\x1e\xd4\x5a\x37\x78\x96\xf7\x7c\x18\xa9\xcc\x91\x9c\x9d\x5f\x8e\x65\xdd\xf4\x88\x1e\xb1\x6e\x89\x7e\x3d\xe6\x74\xa7\xfa\xfe\xb7\x5d\x1f\xb1\xef\x0c\x22\x56\x36\x73\x88\x7b\x3c\x02\xd7\xd1\xbf\x82\x9f\x8e\x77\xbd\x5e\xa3\x1c\x3d\x6a\x6d\xf7\x3c\x03\x5a\x69\x8d\xc2\xf2\xd8\xef\x98\x01\xb2\xf3\xaf\x54\x25\x21\xe6\x78\xef\x6e\x5c\xfa\xc5\x2c\x9b\x3b\xcf\xd3\xe4\x85\x52\xa0\x5c\xb7\x9b\x2c\xbb\x97\xe1\xb7\x6e\xe3\x9c\x3d\x66\x3f\x6a\xfa\xb3\xc7\xcc\x87\xe1\x9c\x6a\x79\x3c\x7e\x3d\x35\xea\x07\xdb\x5c\x13\x4b\x60\x8e\xa2\xa1\x74\xf6\x98\xb9\xa5\xb0\x02\x39\xb1\x64\x49\xc3\x73\xb7\x3a\xe6\x1a\x73\x14\x96\x11\x6e\x7c\xab\xad\x58\xbf\x97\x34\x50\x5d\x3d\xda\x79\xee\x56\xce\x9b\xcf\xb7\xc0\x2c\x96\xa6\x31\x7a\xf3\xf9\xd6\xd5\xad\x81\x55\x2d\x7b\x35\xb2\x10\xc6\xfa\x5f\x06\x0a\x2d\x2b\x35\x38\xd1\xb3\xc7\xac\x91\xbf\x73\x62\x60\xf1\xdb\x32\x68\x87\xd2\xd8\x27\x9d\xd1\xcd\x41\xf0\x0d\x75\x7d\x12\xf6\x93\x42\x6b\xa8\xb1\xf0\x73\x45\x65\xce\x90\x18\x7b\xf6\xea\x14\xd0\xd2\xe9\x8b\x56\x33\x96\x41\xd4\x6b\xa9\xeb\x81\x90\x2d\x61\x9c\xac\x18\x67\xb6\x86\xaf\x52\xa0\xe9\x00\xae\x4e\xa1\x79\x3e\xa7\xfe\x79\x87\xee\x39\x1f\xee\xd4\x12\x10\xb7\xec\xa2\x2e\x03\x6a\xcb\xf6\x73\xd2\x4d\x3f\xed\x27\xb1\x8a\x3f\x09\x50\x57\x37\x0e\x69\x98\xcf\x0e\x3b\xdd\xbc\xf6\xe8\x71\xb8\x19\x52\x8d\xf6\x3d\xd6\x8b\xdc\x03\xce\xee\x16\x30\xa3\x14\x8d\x19\xd2\x63\xbc\xe6\xf2\x09\xeb\x65\xb7\xfd\x1c\x60\x05\xeb\xf7\x58\xb7\x78\xe4\x7b\x78\x41\xe8\x60\xc7\x42\xff\x55\x6a\xd8\x6d\x50\x80\x91\xa5\xff\x0d\x4a\x14\x06\x88\x7b\x4d\xe5\x1a\x49\x5e\x07\x02\xe2\x15\xd8\x89\xb9\x2d\xcb\x83\x80\x1f\xee\xe6\xc0\xf2\x53\x58\x71\x22\x9e\xbc\x8b\xee\xdf\x24\xe0\xb8\x43\xef\xbf\xd7\xb2\x9a\x9c\xc2\x9a\x71\x8e\x39\xb0\xb5\xff\x35\xcc\x6d\xeb\xea\xff\xe1\x6e\x3e\x8c\x65\xab\xe8\x18\x29\x19\xd2\x4a\xbb\x82\xf1\x55\x3d\x42\x80\x97\x86\x9a\x0f\xf6\x07\x04\x0c\x8e\x11\xe4\xb8\x66\xc2\xbd\x72\xd8\x5a\xa1\x7f\x1b\x14\x55\xb9\x72\xe3\xe0\xba\x3d\x44\x66\xc8\x46\xff\xac\xf5\x28\x69\xf1\x3d\xde\x49\xf9\xf3\x94\x13\x5d\xe0\x91\x23\xe2\x95\x86\x51\xde\x1c\x3a\x00\x27\x39\xae\x49\xc5\xad\x2f\xd6\xaf\xa8\xe5\x1e\x8a\x09\xfb\xfa\x1c\xfe\xa8\x88\xb0\x8e\x9a\x4e\xcc\xcf\x49\x92\xa6\x6e\xba\x68\xdf\x40\xe4\xda\x17\x50\x16\x5e\x39\x3a\xf3\xc7\xfe\xdd\x22\x8c\x26\x69\x0a\x61\x0e\x71\xc9\x6b\xac\x9b\x81\xe7\xd0\x6e\x38\xb3\xac\x41\x2a\xd4\xa1\xb9\xbb\x21\xfa\xf6\xfd\x91\x71\xb1\x81\x1a\x79\xe5\x39\xa8\x34\x4b\x0a\x90\x61\xfc\x29\x98\x9b\xa0\x95\x34\xcc\x4a\x5d\x0f\x59\x2d\x98\xed\xdc\x3f\x87\xe7\x6a\x43\xcc\xa6\xb9\xa0\x1d\x12\x95\x65\xc9\xec\x18\x4a\x90\xec\x39\x85\xa3\xaf\x0c\x56\x23\xfa\x50\x29\x47\x22\xc2\x19\x73\x37\xc3\x28\xac\x53\x5e\xba\x39\x00\xf7\x2d\x3e\x42\x5f\xfb\x53\xb3\x0e\xb7\xca\xd0\xd6\x2f\x2e\xf3\x60\xf7\x53\xcf\xee\x61\x9f\xe1\xc2\xb7\xb3\x3c\x8c\x0f\xa5\x62\x1c\x0f\x7c\x90\x1d\x7e\x7e\xee\xe1\xcc\x83\x85\xf6\x10\x43\x3b\xda\x08\xaf\xe0\x6f\x3d\xab\x3b\x4e\xac\xcb\x1c\x30\x1b\x48\x08\x8a\xa1\x05\xa6\xa0\x2b\xe1\x7f\x50\x8d\x77\x79\x07\x51\x35\x86\x57\xf0\xf7\xe1\x51\x6d\x42\xea\x14\x85\x17\x8d\xd4\x4a\x8c\xa6\x37\x54\x34\x03\x6d\xf2\xaf\x00\x00\x00\xff\xff\x37\xc2\x44\x8b\x06\x18\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 6150, mode: os.FileMode(420), modTime: time.Unix(1534549596, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
