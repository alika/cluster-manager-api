// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\xdd\x6f\x1b\xb9\x11\x7f\xd7\x5f\x31\xd0\x4b\xed\x22\x96\x12\xdf\x5d\x5b\xd8\x30\xae\xaa\x9d\x26\x42\x12\xdb\x88\x7c\x31\xee\x49\xa0\xb8\xe3\x5d\x36\x5c\x92\x47\x72\xa5\xa8\x41\xfe\xf7\x82\x1f\xfb\xc1\xdd\x95\xd3\x4b\x0c\xdc\xe9\x21\xd1\x92\x33\x3f\xce\x37\x67\x56\x9e\xcf\xe1\x52\xaa\xbd\x66\x79\x61\xe1\xf4\xf9\x8b\x7f\xc0\x8a\x94\xa6\x12\x39\xac\xae\x56\x70\xc9\x65\x95\xc1\x35\xb1\x6c\x8b\x70\x29\x4b\x55\x59\x26\x72\xb8\x43\x52\x02\xa9\x6c\x21\xb5\x99\x4d\xe6\xf3\xc9\x7c\x0e\x6f\x19\x45\x61\x30\x83\x4a\x64\xa8\xc1\x16\x08\x0b\x45\x68\x81\xf5\xce\x33\xf8\x80\xda\x30\x29\xe0\x74\xf6\x1c\x8e\x1c\xc1\x34\x6e\x4d\x8f\xcf\x1d\xc4\x5e\x56\x50\x92\x3d\x08\x69\xa1\x32\x08\xb6\x60\x06\x1e\x18\x47\xc0\x4f\x14\x95\x05\x26\x80\xca\x52\x71\x46\x04\x45\xd8\x31\x5b\xf8\x73\x22\x8a\x93\x04\x7e\x8d\x18\x72\x63\x09\x13\x40\x80\x4a\xb5\x07\xf9\xd0\x25\x04\x62\xa3\xd0\xee\x53\x58\xab\xce\xe6\xf3\xdd\x6e\x37\x23\x5e\xe0\x99\xd4\xf9\x9c\x07\x52\x33\x7f\xbb\xbc\x7c\x79\xbd\x7a\x79\x72\x3a\x7b\x1e\x99\x7e\x11\x1c\x8d\x01\x8d\xbf\x55\x4c\x63\x06\x9b\x3d\x10\xa5\x38\xa3\x64\xc3\x11\x38\xd9\x81\xd4\x40\x72\x8d\x98\x81\x95\x4e\xe8\x9d\x66\xce\x6e\xcf\xc0\xc8\x07\xbb\x23\x1a\x1d\x4c\xc6\x8c\xd5\x6c\x53\xd9\xc4\x66\xb5\x88\xcc\x24\x04\x52\x00\x11\x30\x5d\xac\x60\xb9\x9a\xc2\xbf\x16\xab\xe5\xea\x99\x03\xb9\x5f\xde\xbd\xbe\xf9\xe5\x0e\xee\x17\xef\xdf\x2f\xae\xef\x96\x2f\x57\x70\xf3\x1e\x2e\x6f\xae\xaf\x96\x77\xcb\x9b\xeb\x15\xdc\xfc\x1b\x16\xd7\xbf\xc2\x9b\xe5\xf5\xd5\x33\x40\x66\x0b\xd4\x80\x9f\x94\x76\x1a\x48\x0d\xcc\x59\x13\x33\x6f\xba\x15\x62\x22\xc2\x83\x0c\x22\x19\x85\x94\x3d\x30\x0a\x9c\x88\xbc\x22\x39\x42\x2e\xb7\xa8\x85\x8b\x04\x85\xba\x64\xc6\x79\xd5\x00\x11\x99\x83\xe1\xac\x64\x96\x58\xbf\x34\xd0\x6b\x36\x99\x98\xbd\xb0\xe4\x13\x5c\xc0\x54\x69\x69\xe5\x0f\xd3\xf3\xc9\x44\x11\xfa\xd1\x01\x53\x5e\x19\x8b\x7a\x5d\x12\x41\x72\xd4\x6b\xa2\xd8\xf9\x64\xc2\x4a\x25\xb5\x85\x69\x2e\x65\xce\x71\x4e\x14\x9b\x13\x21\x64\x3c\x64\xe6\x61\xa6\xe7\x0d\x99\x7f\xa6\x27\x39\x8a\x13\xb3\x23\x79\x8e\x7a\x2e\x95\x27\x1d\x65\x9b\x4c\xc2\x2e\x1c\xe5\x5a\xd1\x59\x4e\x2c\xee\xc8\x3e\x6c\xd3\x75\x8e\x62\x1d\x51\x66\x11\x65\x26\x15\x0a\xa2\xd8\xf6\xb4\xde\x39\x86\x0b\xf8\x3c\x01\x60\xe2\x41\x9e\xf9\x6f\x00\x96\x59\x8e\x67\x30\xbd\x0c\x2a\xc1\xbb\xa0\x12\x2c\x6e\x97\xd3\x73\x4f\xb1\x0d\xe9\x70\x06\xd3\xed\xf3\xd9\x8b\xd9\xf3\xb8\x4c\xa5\xb0\x84\xda\x1a\xc7\x7d\x04\x29\x1d\xd4\x3b\x46\x0b\x82\x1c\x3e\xa0\xc0\xff\x32\x12\xe9\xdd\xa7\xd2\xfc\x0c\xa6\x2e\x92\xcd\xd9\x7c\x9e\x33\x5b\x54\x9b\x19\x95\xe5\x7c\x3b\x20\xc5\x92\x30\x47\x5c\xc6\xad\x7f\xe6\x6e\xc1\x11\x47\xa2\x2f\xee\x3f\xff\x0f\x7e\xb2\xa8\x05\xe1\xeb\x4c\x52\x53\xcb\x73\xf0\x28\x13\xea\xc6\x09\x15\xd4\xce\xa3\x23\x4f\xa2\x23\x4f\x88\x62\x11\x3e\x43\x43\x35\xf3\x96\x74\x2a\x49\x8d\x40\x36\xb2\xb2\x70\xc8\x50\x5f\x26\x00\x86\x16\x58\xa2\x39\x83\xd7\x77\x77\xb7\xe7\xfd\x85\x95\x5b\xa1\x52\x98\xca\x2f\x4d\x63\x36\xba\x23\xe6\xff\x31\x52\x78\x18\xa5\x65\x56\xd1\x43\xfb\x5f\xce\x27\x13\x83\x7a\xcb\x28\x36\x82\x04\x7d\x5d\x62\xb8\x2c\x41\x78\x8d\x9c\x4b\xb8\x97\x9a\x67\xb0\x8a\xb4\x27\xb0\x63\x9c\x83\x46\x85\xc4\x02\x01\x97\xf5\xbe\x44\x5a\xe9\xc3\xde\x79\xce\x1d\xbd\x65\x19\x66\x1e\x4f\x2b\x1a\x90\x02\xd0\x51\xfb\xfd\x9d\xc9\x8f\x41\xa3\xad\xb4\x30\xdd\xf5\xf7\xa8\xf8\xfe\xb8\x13\x0e\x4d\xbc\xfa\x7c\x98\x11\xc5\x66\xce\x1f\x75\x14\xba\x8f\x92\xc6\xc2\x19\x4c\x7d\xb2\x6c\x5f\xcc\x0b\x87\xb6\x73\x68\xd3\x48\xb1\x91\xd9\xfe\x0c\xa6\x7f\x9d\xb6\x4e\x0f\xb6\xee\xaa\xac\x64\x06\x54\x56\xc2\x82\x46\xa3\xa4\x4b\x60\x80\xfb\xa0\xb1\x7b\xce\xda\x22\x2c\xaa\x72\x83\xda\x55\x5a\x25\x33\xe3\xaa\x5e\xad\xbf\x51\x84\x8e\x18\xe1\x15\xda\x5b\x99\x5d\x7a\xf4\xa3\xce\x43\x6a\x86\xce\xc6\xb7\xd8\x61\xdc\x1a\x39\x5a\x25\x33\xaf\xd8\x34\x21\x74\x46\x81\xd6\x2a\x63\x96\xf1\xda\x7b\x65\xfc\x5d\x46\xea\x9a\xd5\xe8\x75\xa9\x91\x58\xac\x83\xe8\x28\x79\x4c\x75\x4b\xb6\xbe\x43\xbb\x2a\x51\x2e\xca\xf3\x6d\x8a\x69\xb4\x9a\xe1\x36\x5c\x04\xc6\x12\x5b\x19\xe7\xd2\x46\x4b\x57\xe4\x81\x59\x03\x1f\xab\x0d\x52\x29\x1e\x58\xee\xef\x09\x2a\x85\x40\x6a\xd9\x96\xd9\x7d\xd7\xc3\x8d\x19\xda\xef\x03\xff\x7e\xb7\x01\x72\x7c\xdc\x00\xa3\x9a\x66\xc8\xd1\xe2\x88\xff\xae\xfc\x46\x23\x78\xf2\x98\xca\x9e\x6c\x7d\xbb\xf8\x51\x92\xdf\xad\x41\xe3\x2b\x02\x9c\x19\xeb\xfc\x14\x19\xcd\x88\x0b\xde\x3a\x92\xa3\xf4\xf9\x90\x2b\xdc\xde\x53\xbb\x63\xee\x64\xfc\x8a\x46\x4c\x18\x4b\x38\x87\x23\xa9\x41\x63\x7c\x3a\x06\xcb\x38\xef\x38\xe8\xb6\x4e\xbe\x3b\xbf\x0e\x47\xbd\x85\x54\xab\xde\xe6\xd3\x15\x91\x20\xd5\xb7\xa5\xd9\x01\x45\x0b\xe4\x25\xd0\x82\x68\x5b\x53\xdf\xb9\x16\xd8\x5f\x31\x1b\x74\x57\xa7\xd5\x15\xf5\xcd\x38\xf3\x49\xe9\x48\xa1\x20\x06\x08\xd7\x48\xb2\x3d\x6c\x10\x05\x64\xa8\xb8\xdc\x63\xa7\x38\x1b\x77\x0d\xb9\x5a\xdc\x18\x71\x19\xce\x7c\x8d\xbc\xbc\xf4\x28\x47\xfd\x95\xd4\x8c\xfd\xdd\x27\x2b\x57\x4e\xe7\x6f\x33\x62\xcc\x9b\x46\xdb\x9e\xf5\xda\x5c\xee\x28\xd9\x5b\x18\xcb\xe7\x27\x50\x71\x98\xd1\xa9\x96\x87\xd2\xb9\xd2\xa2\xee\x0a\x7d\x2f\xa9\x4b\xdf\xa4\xc4\x06\x89\x28\x06\xae\x47\xe9\xa4\xc2\x2b\xb4\x71\xa8\x5a\x76\xc8\x8f\xda\xe5\x41\x86\xc7\xf5\x27\xcb\xee\x28\xee\x88\x6e\x5f\x26\x13\x1f\xc0\x69\xe3\xe4\xa6\x26\x34\x76\x52\xa2\x31\xae\xe3\x4f\xda\x9f\x78\x94\x1b\x7b\x44\x1e\x7a\xa7\x0b\x78\x71\xde\x81\xaa\xdb\x10\xd7\x5f\x75\x60\x47\xe0\xbc\x86\x29\x60\x4d\x54\x63\xd6\xcf\x69\xf3\xd1\xf6\x7d\xd7\x4d\xf3\x62\x25\x3c\xa0\xa5\x21\x99\x9a\xa6\xa8\xa6\x7b\x8b\x64\x8b\x80\xa5\xb2\x7b\x47\xf9\x5b\x85\x7a\x0f\x2e\xbd\x9b\xee\xc7\xf4\xf5\x0a\xb0\x8f\x08\xd2\x15\xdf\x89\xf2\x95\xee\xca\x15\x92\xf4\xc4\x63\xcf\xca\x84\xfd\xe1\x34\xf0\xf4\x0f\xeb\x37\x26\xa9\xde\xf5\xc8\x5c\xdf\xfb\x56\xba\x0a\xd4\xf4\x3d\xb1\x8f\x1b\x78\xaa\x29\x5b\x4d\xc3\xa7\x9b\xf9\xd1\x07\xa7\xa7\x48\x8e\xbe\x8d\x74\x2b\x85\xb4\x65\xba\x80\xd3\xc3\xd2\xf6\x8c\x73\x5f\xa0\x9f\x6b\xa5\xf6\xaf\x0e\xba\x62\xef\x88\xe9\x0a\xed\x66\x75\xff\x56\xa1\x0e\xc3\x50\x6f\x24\x07\xf9\x31\x28\xe0\x57\xa4\xc0\xf6\x32\x5d\x4b\xbd\x46\xad\xa5\xee\x24\x42\x94\x63\x69\xb1\x6c\x8e\xf2\x12\xd7\x04\x2f\x3d\x43\x60\xbb\x80\xbf\x77\x72\xa2\xe3\xeb\xdf\x67\x7b\x2e\xe5\x47\xcc\xa0\x52\x07\x73\x64\x08\xdd\x33\xd4\xd2\x24\xb8\x31\x8a\xcc\xde\x58\x2c\xbf\xd3\x14\x57\x68\x09\xe3\xdf\x63\x90\x7e\xa3\xd5\xf5\x2f\xb1\xc0\x12\xd9\xff\x62\x82\xea\x56\x86\x5b\x51\xee\xbf\x6a\x95\x61\xb7\xd6\x9e\x70\x29\x2b\x9e\x25\xb6\xa9\xaf\x5b\x77\xb3\x0c\x4d\x13\xd9\x56\x4d\x83\x6c\x7d\x6d\x6a\x63\x2a\x0a\x12\x3b\xe8\x7e\x30\x0f\xba\x30\xf8\x7c\x78\xfb\xbb\x7c\x58\x57\xa8\xd1\xfe\xd0\x0f\xad\x98\x8d\x45\xf3\x50\xe6\x2e\x51\x2b\xcc\x55\x2f\x56\xbb\xca\xb3\x2c\x91\x61\x24\xb2\x47\x7c\x76\x7a\x3e\xe6\x75\x93\x18\x7a\x84\xbb\x31\xf4\x0f\x63\x42\x77\x82\xf3\xcf\x2d\xfa\x08\x7f\x67\xd0\xb2\xb2\x9e\xb3\xea\xd7\x0b\x23\x70\x1d\xfa\x0b\xf8\x31\xb1\xc6\xcb\x4e\xea\xc6\x22\x1d\x12\x92\xca\x0c\xbb\x18\xee\x79\x50\xcf\x03\x69\xc4\x1a\xbf\x56\xd3\x88\x19\xb6\xe5\x9d\x84\xab\x4b\x5b\x68\xe1\x4d\xe1\x13\x70\x83\x75\x67\xec\x5f\x79\x26\x22\x35\x45\x25\x75\x4b\xbc\x9f\x0f\xc3\x30\x71\xe8\xee\x6d\xfd\xe5\x9b\x22\x21\xbd\x93\x3c\x92\xef\xd7\xc2\xcb\xdb\xd0\xa8\xcf\xa1\x52\xb9\x26\x99\xab\x38\x5d\xbc\xba\x5b\xeb\x7a\x2f\x66\x68\x94\xa9\x19\x30\x4f\x76\x2c\xab\x57\x7f\x6e\x2a\x48\x90\x98\xb9\x2e\x7e\x8b\x29\x29\xc9\x4a\x26\x40\x69\xb6\x65\x1c\x73\x34\x3f\xb7\xe9\x5d\xd7\x63\x4f\xe7\xdd\xdc\x37\x89\x93\xc1\x05\x91\xed\x18\xc5\xbf\x9f\xb6\x32\x02\x47\xfb\x36\x55\x20\x6a\xe4\x37\xd7\x6d\x1f\x01\x17\xf0\xd3\x63\x6e\xed\xdf\xc5\x24\x68\x2f\x15\xea\xd0\x8d\x9a\x8a\x52\x34\xe6\xa1\xe2\x07\xcb\x93\x8f\xf7\x88\x6f\x60\x87\x1a\x21\x67\x5b\x14\xff\x4f\x94\x8d\x8c\x2d\x4f\x1c\x66\x71\xcc\x34\x68\x2d\x13\x79\xa8\x9d\xaf\x50\xa0\x66\x34\x6c\xad\xc2\x4e\x7d\x4a\x37\xb2\xc2\xd8\xb1\x1a\x61\x6d\x87\x92\x30\xc5\xf5\x4b\xd7\xe8\xc0\xf5\x07\xda\x79\x38\x39\xfd\xe9\xcc\x7c\x5d\x0f\xb8\xf5\x29\xa3\x86\x1d\x9b\xf2\xfe\x40\xbb\x8e\xaa\x38\xda\xfa\x44\xbd\x9b\xd4\x7c\x64\xa6\x18\xe1\xae\x2b\x55\x5a\xe3\xc6\x6b\xd9\xa8\x84\x6d\xc0\x8e\x4a\x27\x3a\x77\x64\x18\xc9\x4b\x14\xf6\xd1\x29\xa1\xcf\xde\xcc\x5a\x81\xdf\xaf\x77\xde\xd5\xf7\x4a\xef\x78\x29\x4f\x7a\x45\x2f\xad\x46\x25\x0d\xb3\x52\x27\x2d\xa2\x5b\x3d\x78\xe7\x06\x46\x71\x20\x9c\x7e\x4c\x79\x88\xc6\x18\x31\xe1\x37\xaf\x23\x81\xc6\xd5\xd3\x3d\x29\x39\x9c\xf8\xad\x0f\x84\x57\x68\x66\x7e\x85\x4a\x61\x51\xd8\x38\x9f\xd5\xa6\xf7\x04\x83\x52\x7b\x78\x4e\x1a\x75\x41\x33\x3c\x9d\x00\xad\xb4\x46\x61\x79\x1c\x77\x98\x01\xb2\xf3\x3f\xf8\x95\x84\x0c\x86\xd1\xc1\x55\xff\x8e\x90\xd5\xd7\xc6\x36\x47\xe3\x45\x71\x88\x89\x0b\x1c\xc2\xe2\xfe\xab\x00\x8b\xfb\xc0\xef\x04\x1b\xf4\x6d\xa3\x27\x7d\x1e\xc8\xb8\xb8\x5d\x02\x8a\x4c\x49\x96\x86\x5a\xbd\x36\xd0\xac\x32\xa8\xbd\xca\xb1\x6f\xae\x51\xba\xcc\x0d\x4d\x5f\xa9\x9b\x45\x65\x0b\xf8\x88\xfb\xe6\xa7\xd1\xb1\xb3\x25\xa9\x6c\xb1\x76\x54\x8f\x6a\x55\xab\x9f\x28\xa5\x31\x77\x81\xee\xe0\x17\xf7\xab\x34\x5e\xf3\x90\x9b\xa9\x3e\x2b\xa4\x1a\xed\x1b\xdc\x2f\xb3\xc0\x75\xbb\x84\x85\xaf\x57\x49\x8b\xe9\xa9\x9c\x4c\x6b\xdf\xd9\x9e\x8e\x60\x04\xae\x37\x51\x39\x87\x43\x0e\xe1\x84\x8d\x51\x15\x93\x37\x4f\x61\xaa\x19\xdb\xec\xcf\x34\x0f\x9d\x7a\xeb\x46\xf6\x9b\x37\x07\xc6\xd1\x1a\x6a\xe4\xad\x57\x3b\x92\x46\xbd\x2c\xc9\x41\x06\x37\xe7\x6c\x50\x07\x3a\x6a\xe5\xcc\xae\xdb\xe2\xf7\xe2\xbc\x0f\x54\x10\x53\xd4\xa5\xcd\x21\x51\x59\x96\xcc\x8e\xa1\x84\x9d\x74\xf2\x1d\x7f\x41\x61\x35\xa2\x57\x95\x72\x24\x02\x76\x05\x0a\xd8\x54\x8c\x8f\xc2\x3a\xe2\xb5\x9b\x13\xb0\x2d\x59\x11\xfa\xca\x2d\xca\x07\xcf\x9b\xf5\x79\xfd\xe2\x3a\x0b\x7c\x3f\x26\x7c\x1f\xda\xeb\x20\x97\x2e\xe4\xb3\x30\x5e\x94\x8a\x71\x1c\xc8\x20\x3b\xf6\xf9\x29\xc1\xb9\x0c\x1c\xda\x43\xf4\xf9\x68\xbd\x79\x01\x7f\x4b\xb8\x6e\x39\xb1\xce\x73\xae\x3f\xf5\x46\x08\x84\x21\x86\xe7\xa0\x2b\xe1\xff\xba\x20\x96\x8d\x0e\xa2\xaa\x19\x3b\xef\x10\x26\x3d\x95\x3a\x41\xe1\xb7\x46\x62\x25\x6a\xb3\xee\xbe\x64\xad\xaf\xbd\xc9\xff\x02\x00\x00\xff\xff\x28\xe7\x8e\x33\x13\x23\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 8979, mode: os.FileMode(420), modTime: time.Unix(1527977015, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
