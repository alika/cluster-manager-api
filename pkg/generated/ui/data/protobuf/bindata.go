// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\x5d\x73\xdb\x38\x92\xef\xfa\x15\x5d\x7a\x39\xf9\x2a\x96\x12\x3b\x99\x9b\xb2\x37\x37\xab\xb5\x67\x13\x57\x62\xc7\x15\x79\x92\x9a\x27\x15\x04\xb6\x28\xac\x49\x80\x03\x80\x52\x34\x53\xf9\xef\x57\xf8\x20\x09\xf0\xc3\x4e\x1c\x67\x67\xea\x6a\x5d\xb5\x3b\x22\xd1\xdd\x68\xf4\x77\x83\x9d\xd9\x0c\xce\x44\xb1\x97\x2c\xdd\x68\x38\x7a\xfa\xec\x47\x58\x90\x5c\x95\x3c\x85\xc5\xf9\x02\xce\x32\x51\x26\x70\x45\x34\xdb\x22\x9c\x89\xbc\x28\x35\xe3\x29\xdc\x20\xc9\x81\x94\x7a\x23\xa4\x9a\x8e\x66\xb3\xd1\x6c\x06\x6f\x19\x45\xae\x30\x81\x92\x27\x28\x41\x6f\x10\xe6\x05\xa1\x1b\xac\x56\x9e\xc0\x07\x94\x8a\x09\x0e\x47\xd3\xa7\x30\x31\x00\x63\xbf\x34\x3e\x38\x35\x24\xf6\xa2\x84\x9c\xec\x81\x0b\x0d\xa5\x42\xd0\x1b\xa6\x60\xcd\x32\x04\xfc\x44\xb1\xd0\xc0\x38\x50\x91\x17\x19\x23\x9c\x22\xec\x98\xde\xd8\x7d\x3c\x15\xc3\x09\xfc\xea\x69\x88\x95\x26\x8c\x03\x01\x2a\x8a\x3d\x88\x75\x08\x08\x44\x7b\xa6\xcd\xdf\x46\xeb\xe2\x64\x36\xdb\xed\x76\x53\x62\x19\x9e\x0a\x99\xce\x32\x07\xaa\x66\x6f\x2f\xce\x7e\xbe\x5a\xfc\x7c\x78\x34\x7d\xea\x91\x7e\xe1\x19\x2a\x05\x12\x7f\x2b\x99\xc4\x04\x56\x7b\x20\x45\x91\x31\x4a\x56\x19\x42\x46\x76\x20\x24\x90\x54\x22\x26\xa0\x85\x61\x7a\x27\x99\x91\xdb\x13\x50\x62\xad\x77\x44\xa2\x21\x93\x30\xa5\x25\x5b\x95\x3a\x92\x59\xc5\x22\x53\x11\x80\xe0\x40\x38\x8c\xe7\x0b\xb8\x58\x8c\xe1\x1f\xf3\xc5\xc5\xe2\x89\x21\xf2\xf1\xe2\xe6\xf5\xbb\x5f\x6e\xe0\xe3\xfc\xfd\xfb\xf9\xd5\xcd\xc5\xcf\x0b\x78\xf7\x1e\xce\xde\x5d\x9d\x5f\xdc\x5c\xbc\xbb\x5a\xc0\xbb\x7f\xc2\xfc\xea\x57\x78\x73\x71\x75\xfe\x04\x90\xe9\x0d\x4a\xc0\x4f\x85\x34\x27\x10\x12\x98\x91\x26\x26\x56\x74\x0b\xc4\x88\x85\xb5\x70\x2c\xa9\x02\x29\x5b\x33\x0a\x19\xe1\x69\x49\x52\x84\x54\x6c\x51\x72\x63\x09\x05\xca\x9c\x29\xa3\x55\x05\x84\x27\x86\x4c\xc6\x72\xa6\x89\xb6\xaf\x3a\xe7\x9a\x8e\x0c\xc8\x25\xa3\x1b\x82\x19\x7c\x40\x8e\xbf\x33\x02\x7f\xcb\xb7\xee\xd7\xdf\xd3\x9c\xb0\x6c\x4a\x45\xfe\xbf\x06\x6e\x9e\xb1\x5b\x02\x6f\x89\x54\xc8\xe1\x6f\xc4\x3c\x4d\x33\xfb\x14\x02\x8e\xd4\x9e\x6b\xf2\x09\x5e\xc2\xb8\x90\x42\x8b\xe3\xf1\xe9\x68\x54\x10\x7a\x6b\x58\xa5\x59\xa9\x34\xca\x65\x4e\x38\x49\x51\x2e\x49\xc1\x4e\x47\x23\x96\x17\x42\x6a\x18\xa7\x42\xa4\x19\xce\x48\xc1\x66\x84\x73\xe1\xd9\x9e\x5a\x32\xe3\xd3\x1a\xcc\x3e\xd3\xc3\x14\xf9\xa1\xda\x91\x34\x45\x39\x13\x85\x05\xed\x45\x1b\x8d\xdc\x2a\x4c\x52\x59\xd0\x69\x4a\x34\xee\xc8\xde\x2d\xd3\x65\x8a\x7c\xe9\xa9\x4c\x3d\x95\xa9\x28\x90\x93\x82\x6d\x8f\xaa\x95\x03\x78\x09\x7f\x8c\x00\x18\x5f\x8b\x13\xfb\x0b\x40\x33\x9d\xe1\x09\x8c\xcf\xdc\x91\xe0\xd2\x1d\x09\xe6\xd7\x17\xe3\x53\x0b\xb1\x75\x0e\x76\x02\xe3\xed\xd3\xe9\xd1\xf4\xa9\x7f\x4d\x05\xd7\x84\xea\x8a\x8e\xf9\xe3\x24\x37\xa4\x2a\x5f\x3f\xbb\x3a\xbb\xf1\xc0\xe6\xaf\x94\xd9\x09\x8c\x8d\x63\xa8\x93\xd9\x2c\x65\x7a\x53\xae\x8c\xac\x67\xca\xc1\x1f\x52\x4e\xf5\xcc\x8b\xf6\xd0\x8b\xf6\x90\x14\x2c\xa0\x81\x46\x41\x27\x30\x26\x49\xce\xf8\xdf\x43\xc4\x29\x13\x1e\xee\xb3\xf9\x8f\xfd\x3f\xfc\xa4\x51\x72\x92\x2d\x13\x41\x55\xc5\xe8\xb7\xb2\x91\xa0\xa2\x92\x59\x11\x9f\xc0\xf8\x52\x48\x04\xb2\x12\xa5\x86\x21\x09\x7e\x1e\x01\x28\xba\xc1\x1c\xd5\x09\xbc\xbe\xb9\xb9\x5e\x9c\xb6\xdf\x98\x17\x54\x70\x55\xda\x37\x63\xef\xf8\x66\x8b\xd9\xbf\x94\xe0\x96\x4c\x21\x45\x52\xd2\xa1\xf5\xcf\xa7\xa3\x91\x42\xb9\x65\x14\x6b\x46\xdc\x79\x8d\x3f\xb3\x2c\x33\xf8\x5b\x66\x23\x25\xa9\xec\xd7\xae\xcb\x82\xc2\x99\x44\xa2\xb1\xc2\x9b\x44\x8f\x97\x2a\x3d\x00\x89\xba\x94\x5c\xb5\x96\xde\x63\x91\xed\x0f\x02\x03\xa8\x2d\xd4\x7a\xc0\x94\x14\x6c\x6a\x04\x5d\xd9\x5d\xf3\x57\x08\xa5\xe1\x04\xc6\xd6\x49\xb6\xcf\x2a\x71\x8f\x23\xa0\x95\x48\xf6\x06\xe8\xbf\x9b\xd7\x9f\xbd\x8a\xa3\x93\x49\xd4\x92\xe1\xd6\xc5\x19\xa5\x89\x2e\x95\x89\xcd\xf5\x31\x4d\x0c\x01\xa6\x15\xdc\x96\x2b\xa4\x82\xaf\x59\x6a\xc3\x10\x15\x9c\x23\xd5\x6c\xcb\xf4\xbe\x16\xc5\x2b\xd4\xb5\x1c\x9a\xdf\xb1\x10\x9a\xf7\x0f\x97\x40\x8a\x77\x0b\xa0\xf7\xa4\x09\x66\xa8\xb1\x47\x81\xe7\x76\xa1\x66\x3c\x7a\x8c\x79\x8f\x96\x1e\xce\xbe\xe7\xe4\xab\x4f\x40\x92\x7f\x95\x4a\x03\xb9\xd3\x1c\xe7\x16\xc8\xf3\x78\x25\x12\x54\x30\x89\xde\xc5\x47\x8a\x96\xbe\xc1\x26\xcb\xef\x60\x92\x04\x32\xa6\xb4\x31\x47\x4f\x4f\xf5\x58\xda\x5b\x03\x32\x89\x9f\x87\x2c\xce\xac\x3d\xb6\xd5\xcd\x0c\x8f\xf7\x9c\x88\x71\xa5\x49\x96\xc1\x44\x48\x90\xe8\x9f\x0e\x40\xb3\x2c\x0b\x34\x77\x5d\x69\xf5\xc6\xbe\x87\x49\xeb\x45\x7c\xaa\xd6\xe2\xe3\x85\x13\xc7\xd5\xc3\x54\x37\x70\xd0\x0d\x66\x39\xd0\x0d\x91\xba\x82\xbe\x31\x85\xe4\xce\xa0\xac\xd0\x64\x05\x2d\x4b\x6a\x4b\x5a\x66\x63\x8f\x01\x85\x0d\x51\x40\x32\x89\x24\xd9\xc3\x0a\x91\x43\x82\x45\x26\xf6\x98\x34\x75\xa6\x22\x39\xda\xcc\x59\x0b\xf1\xc2\xed\xf9\x1a\xb3\xfc\xcc\x52\x99\xb4\xdf\xc4\x62\x6c\xaf\x3e\x9e\x1c\xcd\xa1\x1f\x26\x45\x1f\x1f\xea\xe3\xb6\xc4\xd7\xc4\xac\xe0\x94\xad\x17\x7d\x71\xeb\x11\xce\xd8\x8d\x5c\xf1\x29\x87\xfc\xb9\x94\xbc\x2a\x85\x6c\x01\x25\x73\x9b\x80\x7d\xf2\x27\x05\x03\x93\x7f\x03\x5f\x78\x85\xda\xf7\x26\x17\x01\xf8\xa4\x79\xdd\x71\x71\xff\xfe\xd1\xdc\xdb\xb3\xfb\x65\x67\x2b\x8b\x54\x92\x04\xfd\x66\xca\x66\x48\x02\x29\xdb\x22\xef\x04\xe8\x57\xa8\x7f\x71\xe0\x3e\x2a\xb5\x4f\x38\xb8\xda\x39\xf3\x20\xe4\xa3\x07\x39\x7f\xc0\xfb\x12\x94\xd6\x98\x17\xda\xf4\x58\x95\x44\xba\x09\x2a\x66\x1a\x26\xf1\x73\x7c\xc6\x78\xed\xb1\xd3\x53\xf7\x54\x5f\xe3\xa5\x65\x91\x10\x53\x4f\xec\x14\x50\x89\x09\x72\xcd\x48\xa6\x4c\x9b\x9c\x78\xfd\x77\x4f\x6e\x30\xe6\x1f\x17\x67\x01\xfc\xa4\xef\x6d\x5b\x0a\x5d\x88\xc7\x93\x45\x43\x73\x46\x76\xea\xdb\x64\xf1\x7b\x29\xf1\x2b\xa5\x61\x50\xfa\xe4\xd1\x7a\xdf\x2b\x91\x16\xcc\xf7\x91\x89\xd9\xe4\xcb\xa5\xf2\x79\x34\x42\x5e\xe6\x2e\x99\x27\x75\x23\x61\xda\xee\x35\xe3\x98\xc0\x4b\x78\xea\x60\x8d\xe1\xbc\x84\x67\xfe\xc1\x4a\xee\x25\x1c\xf9\xb6\x31\xdf\x11\xfb\x7c\x7c\x6a\x28\xe6\xa8\x94\x69\x9d\xdb\xbd\x45\xd3\xa5\x5c\x99\x44\xe8\xef\x54\xaa\xca\x5d\x0b\x93\x5c\xeb\x5a\x11\x13\x0b\xac\xb4\x64\x3c\xb5\x49\xb3\xd9\xde\x66\x64\x0f\x6b\x98\xae\x2e\x18\x6c\x30\xb1\x10\xd1\xd6\xd5\xe1\x16\x05\xd2\x06\xc9\x72\x3f\xc4\xad\xd5\x4d\xd0\x55\x6d\xd0\x5e\x7c\x08\x69\xef\x96\x42\xb6\x77\x44\x85\x4c\xc3\x6a\xef\xae\x9d\x24\xfe\x56\xa2\x72\x29\x70\x25\x44\x06\xe2\xb6\x73\x80\x04\x35\x61\x99\x6a\x4b\xc2\xa3\x82\x44\x55\x08\xae\x5c\xb5\x50\x45\x4d\x8d\x79\x0d\xd8\x3e\x42\xd4\xc4\x7c\x89\xb4\x33\x21\x6e\x31\x81\xb2\xb8\x53\xd6\xf3\x8f\x0b\x08\xec\xd6\xbe\x6e\x85\x05\x67\x1d\x47\x0d\x8a\x35\x90\x0e\x52\xdb\x7b\x2a\x3b\x3a\x3e\xed\xe3\xb5\x52\x95\x82\x09\xd9\x79\xd3\x9e\x39\x5b\x9b\xa1\xa6\x07\x16\xa7\xb6\xdc\x40\xb1\xcf\x07\xa4\xd2\xd2\xea\x85\x8a\x44\xc2\xb8\x2b\xd2\xf6\x4a\x63\xde\xd5\x5b\xa8\x85\x73\xab\xb8\x3b\x75\xd1\xee\xcb\x42\x63\x22\x1a\x58\xb4\xf7\x7f\x29\x27\x75\x2d\x5c\x75\x29\xf6\xff\x9f\x15\xd2\xed\x4b\x1b\xe1\x9c\x89\x32\x4b\x22\xb5\x54\x15\xb7\xa9\x2d\x07\xbd\x69\x51\x5f\x05\x18\xd4\xd0\xf7\xbc\x0c\xfd\x5d\xc1\xb0\xc7\xf8\x46\xac\xe1\xe4\x8b\x85\xfc\xec\xa1\x42\x3e\xfa\xf7\x58\x7d\xdd\x46\x3e\xd4\xf2\x3d\xd2\xdb\xde\xee\x16\x0b\x13\x36\x93\xbe\xf8\xd4\x15\x77\x08\xd4\x30\x73\xde\x0a\x4e\xa1\xde\x58\x12\xf1\xd0\x13\xca\x7a\x3c\xa5\x11\x6c\xe8\x6b\x2a\xb2\x91\x1e\xec\xda\x46\x8e\xfb\x98\x0e\x7c\xfe\xaf\xcd\x7a\x0f\x7e\x70\x1b\xa6\x45\x75\x19\x66\x7e\x0e\x90\x0b\xe0\xdb\x76\x35\x9c\x59\x7b\x03\x5c\x6d\x9f\x87\x40\x4b\x29\x91\xeb\xcc\x27\x48\xe6\xfc\x47\x48\xc8\x09\x51\xf7\x26\xfb\xaa\x1f\x13\x6b\x78\x53\xae\x50\x72\xd4\x18\x61\xdd\xfe\xa8\x96\x15\x90\x95\xa3\x5d\x14\x1c\xc5\xba\xe6\x62\x19\x76\x73\x4d\x4d\xe5\xb7\x30\x1e\xdf\x2d\x25\x3a\xe5\xc4\xfc\xe3\xc2\x9e\xd7\x79\xff\xf1\xe9\x00\xd4\x1b\x0f\xe5\x9d\xfd\xf9\x00\xdc\x87\xcb\x8f\x44\xa2\x05\xad\xcb\xa8\xff\xa9\xca\xb3\x2f\xa8\x3f\x98\x82\xd7\xf3\xc6\x67\x37\x2c\xdd\x2c\xc9\x96\xb0\x8c\xac\x58\xc6\xf4\x1e\x5e\xc2\x8b\x48\x90\x6b\xb2\x92\x8c\xfa\x02\xc0\x14\xbc\x91\xe8\x51\xef\x84\xbc\x5d\x7a\xa0\x97\xf0\xc3\xe9\x68\x50\xfb\x95\x20\xfe\x18\xb5\x84\x78\x4e\x34\x81\x33\xe4\x95\x55\xcd\x3f\x2e\xcc\x2b\xf7\x06\x12\xa2\xc9\x92\xba\xdf\xa1\x96\xc3\x10\x69\xb8\x2b\x59\x9c\x09\xfa\x22\x70\x58\xbc\x87\xce\xf3\x8f\x5f\xdf\x01\xd3\x98\xd7\x61\xfb\x5a\x7a\x83\x2e\x25\x26\xc6\x89\x4d\x85\xa6\x44\x29\x29\xc6\x6e\x63\x6f\x58\x38\x45\x48\xa5\x28\x8b\x56\x90\x9b\x7f\x5c\x54\xeb\xaf\xcc\xb2\xbb\x41\xe2\x14\x97\x0e\xda\xe9\xb9\xd1\x1a\xa3\x9b\x8e\x30\x2a\x51\xc6\x42\x89\x8c\xd1\x21\x4a\x4c\x6d\x3b\x50\xaa\x43\x24\x4a\x1f\x3e\x7b\x02\xa8\xe9\xf4\xa0\x86\xf4\x3a\xf3\x70\xb5\x28\x23\x22\x91\x29\xfc\x2e\x38\xaa\x80\xe0\xea\x09\x54\xbf\x8f\xa8\xfd\xbd\x43\xf3\x3b\x69\xef\x54\x0b\xc0\x6f\x19\x52\x5d\x3a\xaa\xb5\xf4\x1b\xab\xfd\xa7\x90\xb0\xdb\x20\x07\x25\x72\xfb\x31\x96\xa7\x0a\x8c\x85\x57\xd7\x64\xd4\x5a\x53\xd2\x16\x4b\x8f\xae\x3a\xbe\xfa\xe1\xfa\x0c\x58\xf2\x04\x56\x19\xe1\xb7\xb6\x65\x33\xff\x1b\x3b\x8a\xc6\xeb\xed\xf3\x5e\x94\xe3\x27\xb0\x66\x59\x86\x09\xb0\xb5\xfd\x40\x6c\x18\x30\xe6\xf1\xe1\xfa\xac\x2d\xc9\x6d\x41\x97\x61\xd4\xae\x8a\x0b\xa4\xa5\x34\xf2\xb3\x4a\x6e\x23\x29\xbf\xea\x4c\xc0\xe1\x1f\x9d\xb6\xf9\xbd\x98\x5f\x82\x14\x59\xf3\x51\xb4\xf2\xdf\x09\x91\xfc\xa0\x72\x28\xa5\x04\x65\x36\xf4\x24\x49\x7b\x1f\x46\xf2\xa5\xa1\xb0\x24\x92\x37\x16\xdb\x48\xbb\x65\xb8\xe0\x3a\x38\x20\xa0\xf7\x05\xda\xef\x22\xbc\xcc\x57\x26\x88\xac\x6b\xb3\x55\x6d\xd1\xc7\xd6\x1d\x49\xbd\xa6\x6f\xe9\x4d\xf2\x17\xd3\x8c\xc8\x14\x07\x8c\xd2\x02\xb5\x05\x79\xc9\x38\xcb\xcb\xbc\x8f\x11\x98\x24\xb8\x26\x65\xa6\xad\xef\xff\x8e\x52\x34\x24\x19\xd7\xc7\x47\x90\x33\xbe\xfc\xad\x24\x5c\xbb\xa0\x16\x8b\xf8\x92\x7c\xfa\x06\xca\xe4\x53\x48\xf9\x38\x68\x8e\x67\x33\x53\x48\x85\xc9\x67\x7e\x7d\x01\x0b\x77\xfb\x17\x94\x5a\xcd\x35\x1f\xfc\xe1\xf1\x5c\xc9\x65\xd4\x5d\x61\x57\x65\x69\x17\xaf\x5d\x9e\xad\x41\x14\x28\x5d\x9a\x32\x0d\xe6\xbb\x37\x03\xfd\x48\x45\xaa\xe7\xf6\xb1\xe3\x32\x9a\xa4\x20\x5c\xa5\x97\x32\xd3\x5d\x16\x42\x31\x2d\xe4\xbe\xad\xbb\x94\xe9\x20\x93\x3e\xeb\xd8\xf2\x86\xa8\x4d\x55\x8b\x18\x4a\x54\xe4\x39\xd3\x7d\x54\xdc\x4a\x47\x5b\x3d\xe9\x4c\x4b\x44\x7b\x54\x9a\x21\xe1\x2e\x6c\x98\x0c\xd0\x4b\xd6\x00\x2f\x4d\xc9\x83\x71\x02\x9e\xcd\x4c\xb4\xb5\x55\x96\xcd\x1e\x6d\x5c\xfb\x72\x99\x38\xbc\xe7\x11\xde\x87\x46\xc3\xa9\x70\xf7\x40\xb6\x52\xca\x0b\x96\x61\x87\x07\x11\xc8\xe7\x45\x44\xe7\xcc\x61\xc8\x26\xb3\x06\x78\xb4\x5a\xb4\x79\x35\xc0\xba\xce\x88\x36\x9a\x03\xa6\x9d\x10\x1c\xa0\xbb\x8b\x9a\x81\x2c\xb9\x1d\x96\x08\x2a\x12\x4f\xb1\xa8\x10\x7b\x8a\x86\xea\x48\x81\x51\xd8\xa5\x1e\x5b\xf1\xa7\x89\xca\xa3\xaa\x76\xf7\x4a\xa7\x71\x76\x2e\xfd\x7c\x87\x0d\xb8\xd6\xe1\x83\x44\x1d\x04\x94\x30\x59\x47\x75\xc2\x02\xa9\x44\xfd\x06\xf7\x17\xee\x94\xc6\xaf\xe6\x94\xa2\x8a\x8a\x3a\x65\xa1\x96\xb7\xb8\x5f\xb6\xca\xe9\x86\x86\xc3\x7a\x83\xfb\x9a\x0e\x19\xa2\xe3\x16\x0c\xb9\xa8\x5a\x30\xb4\xde\xbb\x2c\x3a\x4c\xa2\x4e\xb3\xae\x3b\xf8\x26\xb9\xb4\x3b\xc2\xb8\x82\x2a\x8a\x3b\x65\x42\x8a\xa2\x4f\x18\x37\xc8\x09\xd7\x77\x1c\x40\x3b\x80\xf6\xc1\xaf\x89\x52\x3b\x21\x93\x3b\x30\x8b\x0a\x24\x2c\x94\xac\x02\xca\x55\x3d\x21\x71\x97\xf4\x03\x30\xc7\xfa\xf3\xca\xb4\x8c\x78\x08\xa5\xa2\xe4\xda\x79\x9d\xbd\x3f\x8b\xee\xa9\x7c\x4e\x77\x85\x74\x53\xb4\x4d\xf0\xd3\x09\x64\x82\x24\xb0\x22\x99\x89\xf4\xf2\xa0\x25\x60\x47\x62\xe1\x46\x25\xe6\x7e\x93\x48\xd4\x67\x19\x43\xae\x2f\x12\x98\x90\x5b\x72\x62\x25\x7f\x7e\x10\x72\x4e\x2d\x40\x9f\xb8\x1d\xaa\xb3\x40\x8f\x5e\x89\xa9\x8f\x82\x33\xc0\xca\xa9\xfa\xcb\xe9\x37\x7d\xe5\xb4\x3d\x75\xbb\x86\xf4\xb4\x33\x41\x2b\x5f\xfd\xda\x32\xba\x6d\x81\x43\x85\x74\xf5\xdd\xa3\x1a\x38\x89\x74\x65\x1a\x48\x92\xdd\x9a\xff\x3a\xed\x58\x9d\xd4\xa6\xdf\x52\x4e\xb3\x6f\xaf\x62\x3c\x7b\xd5\xe3\x97\xd7\xe4\x6f\xbe\xa6\x26\x7f\x84\x2a\xa9\xbd\x5f\x27\xd1\xf2\xa0\xd3\xef\x2d\x19\xe3\x06\xb7\xcd\x99\xab\xaf\x16\x9a\xf0\x84\xc8\x64\x79\x7e\xb4\xdc\x1e\xdd\x5d\x65\x1d\x7d\xb7\x2a\xeb\xf8\xbb\x55\x59\xcf\x83\x2a\xab\xd7\x1d\x82\xc6\xb8\xf6\x88\x4b\x42\x37\xcc\x74\x1b\x3b\xdb\xdc\x98\x34\x29\x99\xc2\x8e\x79\xd7\xc6\xe1\x88\x78\x34\x4b\x8b\x0a\xae\xa5\xc8\x96\x45\x46\x38\x2e\xb9\x9d\x38\x09\x6d\xed\x11\xb6\x30\x1d\x34\xca\x9a\xf6\xf3\x20\x6e\x30\x05\x6a\x63\xaf\x38\x57\xc6\xe8\xb6\x24\x2b\x11\x32\x76\x8b\xc0\x8a\x13\x3b\x2b\xa8\x37\x44\xd7\xa3\x06\x04\xb6\x4c\xea\x92\x64\x70\x71\x3d\x33\xcb\x15\x25\x13\xb4\x4d\xb0\x24\xd4\x7a\x5f\x35\xfd\x06\xb4\x54\x5a\xe4\x28\x95\xef\xef\xed\x44\xa9\x2b\x64\xf2\x92\x33\x6a\x02\xe9\xf0\xb5\x0f\x29\xd8\x12\x79\x52\x08\x66\x1d\xf0\x45\x74\xf1\xd3\xdc\xba\xbc\x25\x2b\xcc\xe2\x30\x55\x99\x3c\x81\xcc\x2c\xde\x7f\x9b\x63\x0f\xde\x8f\xe0\xd6\x5a\xe5\x47\x74\x2f\xe3\x3f\xd1\xd5\x73\xa5\x46\xd2\x35\x9f\x5d\x7d\x44\x9c\x96\xca\x48\x2a\x77\x59\x7a\xb1\x78\xdd\x93\xae\x6a\x90\x36\xd7\x1b\xa1\xf4\x1d\x78\x76\xb9\x9d\x5e\xad\x52\x7b\x70\x9c\x53\xd8\xd5\x76\x56\xbd\xfd\x51\xd5\x3d\x43\xdd\x2e\x3a\xb3\x05\x6b\xb6\x53\x67\x49\xe6\xd8\xc0\x14\x08\x9e\xed\x81\x40\x4e\xdc\x85\xd0\xba\x9a\x7b\xc6\x2c\xb1\x63\xc0\xee\x53\xde\x74\x20\xa3\x3f\x8f\xf6\xb6\xda\x50\xf5\xb6\xb9\xf7\x86\xd8\xe4\xdb\xa6\xe0\x91\x2a\x8b\xa9\x55\xd1\x9d\x08\x0a\x2e\xfa\xab\x04\xef\xa6\x87\x1a\xaf\xf0\x63\x38\x76\x66\x39\x4e\xa4\xd5\x87\x96\xf8\x4e\x55\x15\xc4\x04\xcd\x61\x32\x8c\xb7\xcd\xd1\xa1\x84\x9a\xb2\x35\x31\x17\x36\x6a\x5b\x4a\x76\x52\xc4\x4d\x5f\xbb\x19\xa1\x59\x3d\x23\xa0\x45\x64\xad\x75\x23\x10\xe4\x2b\x77\xf7\xe9\x79\xaa\xbf\x25\x1f\xee\x58\x52\xbd\xfd\xa9\x82\x5d\x38\x8e\x99\x86\x0d\xd9\x62\x0c\x6a\x47\x5f\xa1\x90\x6c\xcb\x32\x4c\x51\xfd\xd4\x74\x81\xd5\x58\xb2\x85\x0b\x95\x58\x8b\x44\xb9\x50\xc2\x74\x18\x71\x7c\x38\x70\x84\xbd\x7c\x3b\x97\x3b\x66\x71\xc9\x1b\x3a\xe1\x0d\xe2\xa3\x7c\xa9\xf8\x21\x0a\x2c\x7d\xa3\x61\xc1\x65\x32\x71\xc2\x6c\x1a\x62\x55\x5a\x2f\x5a\x97\x59\xb7\x29\x86\xe0\x06\xda\xd3\x57\xb0\x43\x89\x6e\xba\x25\x54\x5c\xb5\x7d\xfb\x1b\x45\xcf\x00\xd6\x23\x5b\xad\x1f\x98\x53\xa8\x4d\x99\xe4\x7c\xeb\x15\x72\x94\x8c\xba\xa5\x85\x5b\xa9\x76\x89\xea\x31\x3b\x3f\xb5\xe8\x41\x6d\xa6\xab\xdc\x3c\xda\xa3\x7f\xc4\xfb\xe1\x4e\x31\xfd\xd9\x6a\xeb\x4e\x94\xfd\xe5\xb4\x76\x55\x4d\xfe\x55\xbb\xfc\x3b\xf4\xd4\x37\x4c\xf7\x27\xaa\xa9\x57\x62\xbd\x5f\x8e\xbc\x18\xeb\x38\x34\x14\xc4\x9f\xf5\x7e\xf1\x0a\x6e\xec\x82\x80\xde\x1f\xb8\x7b\x39\x6c\xdc\xa9\x97\xbb\xb0\xc6\x77\x93\x8f\x39\x72\x7d\x67\xdd\xd3\x46\xf7\x89\x4b\x78\x7c\xd7\x0a\x37\xe3\xfe\xad\x3c\xd3\x9f\xb7\xa2\x59\x02\xcb\x6d\xeb\x5a\xaf\xbe\xbc\x28\xc4\xe0\xd7\x41\x87\xc8\x07\xac\xf3\x79\x8c\x43\x24\x7a\x8b\x71\xb3\x83\x13\x8e\xca\x24\x8f\x3d\xc9\x33\x38\xb4\x4b\x1f\x4c\x01\xa7\xa6\xf6\x8d\xa9\x5b\x90\x6b\x75\xd0\xa9\xf0\x54\xa7\xc2\xbc\x67\x98\xb0\x7f\xa0\xe5\xc1\x6e\xf2\xe7\x8c\x53\xf4\x0c\x7f\xf8\x92\x1f\xad\x68\xa9\xe0\xca\x30\x68\xc4\x64\x8a\x30\x5f\x74\xf4\x18\x56\xe7\x73\xff\xdd\xe3\x95\x41\x34\x24\xbc\x3d\x60\xe1\x77\x19\x9e\xaf\xb0\x6c\x7b\x8f\x71\xdf\x70\x0a\xa1\x14\x33\xe5\x84\xfb\x97\x7f\x5c\xec\x7a\x8b\x89\x1a\xa7\xed\x66\x9d\x39\xca\xff\xa8\xb7\xad\xde\x1e\xd9\x5b\x22\xbb\x4a\x61\x36\xdb\x88\x9f\xfa\xa3\xda\x8b\x3b\xc4\xdd\x9b\x05\x98\x32\x3d\x55\x1d\xfe\x87\x27\xd8\x02\xb2\xed\x7f\xaa\x71\xe7\x94\xd3\x03\x25\xd1\x3f\x42\xf1\x60\xc3\x38\xfa\x7a\xc3\x38\x7e\xa8\x61\x34\x4a\xac\x39\xa1\x1b\xc2\x53\xdf\x50\xb5\x86\x13\xfc\xd2\xd7\x0c\x26\xcc\x66\x91\x06\xe2\xd1\x84\xe8\xcb\x44\x0c\xd7\x1a\x4e\x08\xbe\x46\x44\x70\xf7\x0f\x27\xf4\x1a\x42\xe7\xea\x06\x7a\xef\x56\x76\x08\x3b\xc2\xb5\x6b\x48\x92\xbe\x7b\x09\xb8\xfb\xa2\x85\x24\x49\x7d\xcb\xd2\xfa\xd2\x38\xb8\x93\xc4\x5c\x6c\x11\xd6\x52\xe4\x5f\xb2\xdd\x7b\x0b\x1e\x6e\xea\x08\xd4\xfb\x1e\xf5\x8a\x63\x08\xb9\xa3\xda\xa1\x2b\x05\xe8\x5c\x2b\x3c\xab\x37\x1a\xf2\xbf\x47\xf3\xea\x81\x19\xef\x6e\x41\xdd\xae\x19\x3a\x1e\xfb\x28\x33\x1d\xf7\x70\xf6\xd8\xc7\xee\x8e\x72\x7f\xb7\x83\xdf\x7b\x0b\x7f\x2f\x77\xdf\x7c\xf8\xff\x0b\x00\x00\xff\xff\xfb\x11\x98\x04\xc0\x3f\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 16320, mode: os.FileMode(420), modTime: time.Unix(1537413010, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": {apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
