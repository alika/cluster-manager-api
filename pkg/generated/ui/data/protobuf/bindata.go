// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x5f\x6f\x1b\xb9\x11\x7f\xd7\xa7\x18\xe8\xa5\x76\x11\x4b\x89\x73\xd7\x16\x36\x8c\xab\x6a\xa7\x89\x90\xc4\x36\x2c\x27\xc6\x3d\x09\x14\x77\xb4\x62\xc3\x25\xf7\x48\xae\x14\x35\xc8\x77\x2f\xf8\x6f\x45\xae\x56\x76\x2f\x49\x71\xf5\xc3\x9d\x97\x9c\xf9\x71\xfe\x73\x86\xce\x78\x0c\x97\xb2\xde\x2a\x56\xae\x0c\x9c\x3e\x7f\xf1\x37\x98\x91\x4a\x37\xa2\x84\xd9\xd5\x0c\x2e\xb9\x6c\x0a\xb8\x26\x86\xad\x11\x2e\x65\x55\x37\x86\x89\x12\xee\x91\x54\x40\x1a\xb3\x92\x4a\x8f\x06\xe3\xf1\x60\x3c\x86\x77\x8c\xa2\xd0\x58\x40\x23\x0a\x54\x60\x56\x08\x93\x9a\xd0\x15\xc6\x9d\x67\xf0\x11\x95\x66\x52\xc0\xe9\xe8\x39\x1c\x59\x82\x61\xd8\x1a\x1e\x9f\x5b\x88\xad\x6c\xa0\x22\x5b\x10\xd2\x40\xa3\x11\xcc\x8a\x69\x58\x32\x8e\x80\x9f\x29\xd6\x06\x98\x00\x2a\xab\x9a\x33\x22\x28\xc2\x86\x99\x95\x3b\x27\xa0\x58\x49\xe0\xd7\x80\x21\x17\x86\x30\x01\x04\xa8\xac\xb7\x20\x97\x29\x21\x10\x13\x84\xb6\x3f\x2b\x63\xea\xb3\xf1\x78\xb3\xd9\x8c\x88\x13\x78\x24\x55\x39\xe6\x9e\x54\x8f\xdf\x4d\x2f\x5f\x5d\xcf\x5e\x9d\x9c\x8e\x9e\x07\xa6\x0f\x82\xa3\xd6\xa0\xf0\xb7\x86\x29\x2c\x60\xb1\x05\x52\xd7\x9c\x51\xb2\xe0\x08\x9c\x6c\x40\x2a\x20\xa5\x42\x2c\xc0\x48\x2b\xf4\x46\x31\x6b\xb7\x67\xa0\xe5\xd2\x6c\x88\x42\x0b\x53\x30\x6d\x14\x5b\x34\x26\xb3\x59\x14\x91\xe9\x8c\x40\x0a\x20\x02\x86\x93\x19\x4c\x67\x43\xf8\xc7\x64\x36\x9d\x3d\xb3\x20\x0f\xd3\xfb\x37\x37\x1f\xee\xe1\x61\x72\x77\x37\xb9\xbe\x9f\xbe\x9a\xc1\xcd\x1d\x5c\xde\x5c\x5f\x4d\xef\xa7\x37\xd7\x33\xb8\xf9\x27\x4c\xae\x7f\x85\xb7\xd3\xeb\xab\x67\x80\xcc\xac\x50\x01\x7e\xae\x95\xd5\x40\x2a\x60\xd6\x9a\x58\x38\xd3\xcd\x10\x33\x11\x96\xd2\x8b\xa4\x6b\xa4\x6c\xc9\x28\x70\x22\xca\x86\x94\x08\xa5\x5c\xa3\x12\x36\x12\x6a\x54\x15\xd3\xd6\xab\x1a\x88\x28\x2c\x0c\x67\x15\x33\xc4\xb8\xa5\x3d\xbd\x46\x83\x81\xde\x0a\x43\x3e\xc3\x05\x0c\x6b\x25\x8d\x7c\x39\x3c\x1f\x0c\x6a\x42\x3f\x59\x60\xca\x1b\x6d\x50\xcd\x2b\x22\x48\x89\x6a\x4e\x6a\x76\x3e\x18\xb0\xaa\x96\xca\xc0\xb0\x94\xb2\xe4\x38\x26\x35\x1b\x13\x21\x64\x38\x64\xe4\x60\x86\xe7\x2d\x99\xfb\xa6\x27\x25\x8a\x13\xbd\x21\x65\x89\x6a\x2c\x6b\x47\xda\xcb\x36\x18\xf8\x5d\x38\x2a\x55\x4d\x47\x25\x31\xb8\x21\x5b\xbf\x4d\xe7\x25\x8a\x79\x40\x19\x05\x94\x91\xac\x51\x90\x9a\xad\x4f\xe3\xce\x31\x5c\xc0\x97\x01\x00\x13\x4b\x79\xe6\x7e\x03\x30\xcc\x70\x3c\x83\xe1\xa5\x57\x09\xde\x7b\x95\x60\x72\x3b\x1d\x9e\x3b\x8a\xb5\x4f\x87\x33\x18\xae\x9f\x8f\x5e\x8c\x9e\x87\x65\x2a\x85\x21\xd4\x44\x1c\xfb\x23\x48\x65\xa1\xde\x33\xba\x22\xc8\xe1\x23\x0a\xfc\x37\x23\x81\xde\xfe\x34\x8a\x9f\xc1\xd0\x46\xb2\x3e\x1b\x8f\x4b\x66\x56\xcd\x62\x44\x65\x35\x5e\xef\x91\x62\x45\x98\x25\xae\xc2\xd6\xdf\x4b\xbb\x60\x89\x03\xd1\x57\xfb\x3f\xf7\x1f\xfc\x6c\x50\x09\xc2\xe7\x85\xa4\x3a\xca\x73\xf0\x28\xed\xeb\xc6\x09\x15\xd4\x8c\x83\x23\x4f\x82\x23\x4f\x48\xcd\x02\x7c\x81\x9a\x2a\xe6\x2c\x69\x55\x92\x0a\x81\x2c\x64\x63\xe0\x90\xa1\xbe\x0e\x00\x34\x5d\x61\x85\xfa\x0c\xde\xdc\xdf\xdf\x9e\x77\x17\x66\x76\x85\x4a\xa1\x1b\xb7\x34\x0c\xd9\x68\x8f\x18\xff\x4b\x4b\xe1\x60\x6a\x25\x8b\x86\x1e\xda\xff\x7a\x3e\x18\x68\x54\x6b\x46\xb1\x15\xc4\xeb\x6b\x13\xc3\x66\x09\xc2\x1b\xe4\x5c\xc2\x83\x54\xbc\x80\x59\xa0\x3d\x81\x0d\xe3\x1c\x14\xd6\x48\x0c\x10\xb0\x59\xef\x4a\xa4\x91\x2e\xec\xad\xe7\xec\xd1\x6b\x56\x60\xe1\xf0\x54\x4d\x3d\x92\x07\x3a\xda\xfd\xfe\x5e\x97\xc7\xa0\xd0\x34\x4a\xe8\x74\xfd\x0e\x6b\xbe\x3d\x4e\xc2\xa1\x8d\x57\x97\x0f\x23\x52\xb3\x91\xf5\x47\x8c\x42\xfb\x53\x4b\x6d\xe0\x0c\x86\x2e\x59\xd6\x2f\xc6\x2b\x8b\xb6\xb1\x68\xc3\x40\xb1\x90\xc5\xf6\x0c\x86\x7f\x1e\xee\x9c\xee\x6d\x9d\xaa\x5c\xcb\x02\xa8\x6c\x84\x01\x85\xba\x96\x36\x81\x01\x1e\xbc\xc6\xf6\xbb\xd8\x15\x61\xd1\x54\x0b\x54\xb6\xd2\xd6\xb2\xd0\xb6\xea\x45\xfd\x75\x4d\x68\x8f\x11\x5e\xa3\xb9\x95\xc5\xa5\x43\x3f\x4a\x3e\x72\x33\x24\x1b\xdf\x62\x87\x7e\x6b\x94\x68\x6a\x59\x38\xc5\x86\x19\xa1\x35\x0a\xec\xac\xd2\x67\x19\xa7\xbd\x53\xc6\xdd\x65\x24\xd6\xac\x56\xaf\x4b\x85\xc4\x60\x0c\xa2\xa3\xec\x33\xd7\x2d\xdb\xfa\x0e\xed\x9a\x4c\xb9\x20\xcf\xb7\x29\xa6\xd0\x28\x86\x6b\x7f\x11\x68\x43\x4c\xa3\xad\x4b\x5b\x2d\x6d\x91\x07\x66\x34\x7c\x6a\x16\x48\xa5\x58\xb2\xd2\xdd\x13\x54\x0a\x81\xd4\xb0\x35\x33\xdb\xd4\xc3\xad\x19\x76\xbf\xef\xf9\xf7\xbb\x0d\x50\xe2\xe3\x06\xe8\xd5\xb4\x40\x8e\x06\x7b\xfc\x77\xe5\x36\x5a\xc1\xb3\xcf\x5c\xf6\x6c\xeb\xdb\xc5\x0f\x92\xfc\x6e\x0d\x5a\x5f\x11\xe0\x4c\x1b\xeb\xa7\xc0\xa8\x7b\x5c\xf0\xce\x92\x1c\xe5\xdf\x87\x5c\x61\xf7\x7e\xb4\x3b\xc6\x56\xc6\x27\x34\x62\x42\x1b\xc2\x39\x1c\x49\x05\x0a\xc3\xd7\x31\x18\xc6\x79\xe2\xa0\xdb\x98\x7c\xf7\x6e\x1d\x8e\x3a\x0b\xb9\x56\x9d\xcd\x1f\x57\x44\xbc\x54\xdf\x96\x66\x07\x14\x5d\x21\xaf\x80\xae\x88\x32\x91\xfa\xde\xb6\xc0\xee\x8a\x59\xa0\xbd\x3a\x8d\x6a\xa8\x6b\xc6\x99\x4b\x4a\x4b\x0a\x2b\xa2\x81\x70\x85\xa4\xd8\xc2\x02\x51\x40\x81\x35\x97\x5b\x4c\x8a\xb3\xb6\xd7\x90\xad\xc5\xad\x11\xa7\xfe\xcc\x37\xc8\xab\x4b\x87\x72\xd4\x5d\xc9\xcd\xd8\xdd\xfd\x61\xe5\xca\xea\xfc\x6d\x46\x0c\x79\xd3\x6a\xdb\xb1\xde\x2e\x97\x13\x25\x3b\x0b\x7d\xf9\xfc\x03\x54\xdc\xcf\xe8\x5c\xcb\x43\xe9\xdc\x28\x11\xbb\x42\xd7\x4b\xaa\xca\x35\x29\xa1\x41\x22\x35\x03\xdb\xa3\x24\xa9\xf0\x1a\x4d\x18\xaa\xa6\x09\xf9\xd1\x6e\x79\x2f\xc3\xc3\xfa\x0f\xcb\xee\x20\x6e\x8f\x6e\x5f\x07\x03\x17\xc0\x79\xe3\x64\xa7\x26\xd4\x66\x50\xa1\xd6\xb6\xe3\xcf\xda\x9f\x70\x94\x1d\x7b\x44\xe9\x7b\xa7\x0b\x78\x71\x9e\x40\xc5\x36\xc4\xf6\x57\x09\x6c\x0f\x9c\xd3\x30\x07\x8c\x44\x11\x33\x7e\xe7\xcd\xc7\xae\xef\xbb\x6e\x9b\x17\x23\x61\x89\x86\xfa\x64\x6a\x9b\xa2\x48\xf7\x0e\xc9\x1a\x01\xab\xda\x6c\x2d\xe5\x6f\x0d\xaa\x2d\xd8\xf4\x6e\xbb\x1f\xdd\xd5\xcb\xc3\x3e\x22\x48\x2a\xbe\x15\xe5\x89\xee\xca\x16\x92\xfc\xc4\x63\xc7\xca\x84\x79\x79\xea\x79\xba\x87\x75\x1b\x93\x5c\xef\x38\x32\xc7\x7b\xdf\x48\x5b\x81\xda\xbe\x27\xf4\x71\x7b\x9e\x6a\xcb\x56\xdb\xf0\xa9\x76\x7e\x74\xc1\xe9\x28\xb2\xa3\x6f\x03\xdd\xac\x46\xba\x63\xba\x80\xd3\xc3\xd2\x76\x8c\xf3\xb0\x42\x37\xd7\x4a\xe5\x9e\x0e\x52\xb1\x37\x44\xa7\x42\xdb\x59\xdd\xbd\x2a\xc4\x30\xf4\xf5\x46\x72\x90\x9f\xbc\x02\x6e\x45\x0a\xdc\x5d\xa6\x73\xa9\xe6\xa8\x94\x54\x49\x22\x04\x39\xa6\x06\xab\xf6\x28\x27\x71\x24\x78\xe5\x18\x3c\xdb\x05\xfc\x35\xc9\x89\xc4\xd7\xbf\xcf\xf6\x5c\xca\x4f\x58\x40\x53\x1f\xcc\x91\x7d\xe8\x8e\xa1\xa6\x3a\xc3\x0d\x51\xa4\xb7\xda\x60\xf5\x9d\xa6\xb8\x42\x43\x18\xff\x1e\x83\x74\x1b\xad\xd4\xbf\xc4\x00\xcb\x64\xff\x93\xf6\xaa\x1b\xe9\x6f\x45\xb9\x7d\xd2\x2a\xfb\xdd\xda\xee\x84\x4b\xd9\xf0\x22\xb3\x4d\xbc\x6e\xed\xcd\xb2\x6f\x9a\xc0\x36\x6b\x1b\x64\xe3\x6a\xd3\x2e\xa6\x82\x20\xa1\x83\xee\x06\xf3\x5e\x17\x06\x5f\x0e\x6f\x7f\x97\x0f\x63\x85\xea\xed\x0f\xdd\xd0\x8a\x45\x5f\x34\xef\xcb\x9c\x12\xed\x84\xb9\xea\xc4\x6a\xaa\x3c\x2b\x32\x19\x7a\x22\xbb\xc7\x67\xa7\xe7\x7d\x5e\xd7\x99\xa1\x7b\xb8\x5b\x43\xbf\xec\x13\x3a\x09\xce\xff\x6f\xd1\x7b\xf8\x93\x41\xcb\xc8\x38\x67\xc5\xe7\x85\x1e\xb8\x84\xfe\x02\x7e\xca\xac\xf1\x2a\x49\xdd\x50\xa4\x7d\x42\x52\x59\x60\x8a\x61\xbf\xf7\xea\xb9\x27\x0d\x58\xfd\xd7\x6a\x1e\x31\xfb\x6d\x79\x92\x70\xb1\xb4\xf9\x16\x5e\xaf\x5c\x02\x2e\x30\x76\xc6\xee\xc9\x33\x13\xa9\x2d\x2a\xb9\x5b\xc2\xfd\x7c\x18\x86\x89\x43\x77\xef\xce\x5f\xae\x29\x12\xd2\x39\xc9\x21\xb9\x7e\xcd\x3f\xde\xfa\x46\x7d\x0c\x4d\x5d\x2a\x52\xd8\x8a\x93\xe2\xc5\x6e\x2d\xf5\x5e\xc8\xd0\x20\x53\x3b\x60\x9e\x6c\x58\x11\x57\x7f\x69\x2b\x88\x97\x98\xd9\x2e\x7e\x8d\x39\x29\x29\x2a\x26\xa0\x56\x6c\xcd\x38\x96\xa8\x7f\xd9\xa5\x77\xac\xc7\x8e\xce\xb9\xb9\x6b\x12\x2b\x83\x0d\x22\x93\x18\xc5\xbd\x4f\x1b\x19\x80\x83\x7d\xdb\x2a\x10\x34\x72\x9b\xf3\x5d\x1f\x01\x17\xf0\xf3\x63\x6e\xed\xde\xc5\xc4\x6b\x2f\x6b\x54\xbe\x1b\xd5\x0d\xa5\xa8\xf5\xb2\xe1\x07\xcb\x93\x8b\xf7\x80\xaf\x61\x83\x0a\xa1\x64\x6b\x14\xff\x4d\x94\xf5\x8c\x2d\xfd\x37\x47\x7c\x63\x0e\x4f\x92\xbb\x71\x28\x1c\x10\xf6\xc3\xf3\xe3\x75\xb7\xa5\xf1\x03\xc4\x0c\x8d\x61\xa2\xf4\x05\xf4\x35\x0a\x54\x8c\xee\xc6\x0b\x3f\x8f\xa5\xb1\x70\x87\xb5\xd4\xcc\x48\xb5\x3d\xc8\x9a\x90\x28\xac\xe5\x5e\xd6\xf6\x4e\x5e\x7f\xa0\xc1\xf7\x47\xa8\x7e\x7b\x8b\xa4\x68\xfa\x19\xad\x42\x61\x1e\x6d\x1b\xbb\xec\x3e\x53\x9f\xc4\x88\x09\xfd\xf2\x31\x39\xff\x68\xb3\xed\x05\xcb\xff\xd6\x68\xae\x31\xb2\xfc\x6e\x3d\x79\xf1\xee\x14\xb0\xfe\x82\x98\x75\x5c\x4e\x5a\xd5\x46\x69\xca\x1d\x02\xb6\xff\xe6\xf2\x8c\xdd\x34\x8b\x39\xf2\x53\xce\x43\x14\x06\x7f\xf8\xbf\x1c\x1d\x09\xd4\xb6\x2a\x6d\x49\xc5\xe1\xc4\x6d\x7d\x24\xbc\x41\x3d\x72\x2b\x54\x0a\x83\xc2\x84\x29\x27\x16\x63\x47\xe0\x0b\xd6\x41\x79\x42\xc5\xee\x2f\xe2\x7f\x39\xe4\xb2\x24\x49\x9f\xf4\x5b\xbf\xa9\x1e\xf5\xdb\x87\xbb\x77\x8f\x73\x37\x8a\x3f\x3e\x12\x65\x53\x54\x7f\xfd\x8b\xa3\xd5\x09\xd0\x46\x29\x14\x86\x87\x61\x88\x69\x20\x1b\xf7\xe7\xc0\x8a\x90\xbd\x51\x75\xaf\x11\x78\x4f\xc8\xec\xa9\xa1\xce\xd2\x38\x51\x2c\x62\x16\x5a\x16\x61\xf2\xf0\x24\xc0\xe4\xc1\xf3\x5b\xc1\xf6\xba\xba\xde\x93\xbe\xec\xc9\x38\xb9\x9d\x02\x8a\xa2\x96\x2c\x4f\xa1\xb8\xb6\xa7\x59\xa3\x51\x39\x95\x43\x57\x1d\x51\x32\x4f\x44\x9a\xae\x52\x37\x93\xc6\xac\xe0\x13\x6e\xdb\x3f\x9c\xf6\x9d\x2d\x49\x63\x56\x73\x4b\xf5\xa8\x56\x51\xfd\x4c\x29\x85\xa5\x0d\x53\x0b\x3f\x79\x98\xe5\x79\x58\xfa\x00\xce\xf5\x99\x21\x55\x68\xde\xe2\x76\x5a\x78\xae\xdb\x29\x4c\x5c\x95\xcb\x1a\x50\x47\x65\x65\x9a\xbb\xbe\xf7\xb4\x07\xc3\x73\xbd\x0d\xca\x59\x1c\x72\x08\xc7\x6f\xf4\xaa\x98\xbd\x4b\xf9\x99\xa7\x6f\xb3\x3b\xf1\x2c\x93\x2a\x6d\x07\xfa\x9b\xb7\x07\x86\xd5\x08\xd5\xf3\x26\xb6\x1b\x58\x83\x5e\x86\x94\x20\xbd\x9b\x4b\xb6\x57\xdf\x12\xb5\x4a\x66\xe6\xbb\x0a\xf1\xe2\xbc\x0b\xb4\x22\x7a\x15\x93\xd7\x22\x51\x59\x55\xcc\xf4\xa1\xf8\x9d\x7c\x2e\xee\x7f\xbe\x30\x0a\xd1\xa9\x4a\x39\x12\x01\x9b\x15\x0a\x58\x34\x8c\xf7\xc2\x5a\xe2\xb9\x9d\x22\x70\x57\x8a\x03\xf4\x95\x5d\x94\x4b\xc7\x5b\x74\x79\xdd\xe2\xbc\xf0\x7c\x3f\x65\x7c\xf1\x5f\x6a\xc8\x25\x94\xd2\x86\x7c\xe1\x87\x8f\xaa\x66\x1c\xf7\x64\x90\x89\x7d\x7e\xce\x70\x2e\x3d\x87\x72\x10\x5d\x3e\x1a\x37\x5d\xdd\x4d\xb8\x6e\x39\x31\xd6\x73\xb6\x7b\x75\x46\xf0\x84\x3e\x86\xc7\xa0\x1a\xe1\xfe\xed\x41\x28\x1b\x69\x0b\x17\x19\x93\x17\x86\x41\x47\xa5\x24\x28\xdc\x56\x4f\xac\x04\x6d\xe6\xe9\x13\x6c\x2c\xbe\x83\xff\x04\x00\x00\xff\xff\xc5\xe9\x3f\x38\x31\x23\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 9009, mode: os.FileMode(420), modTime: time.Unix(1528411484, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
