// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x3b\x6b\x73\xdb\x38\x92\xdf\xf5\x2b\xba\xf4\xe5\xe4\xab\x58\x4a\x9c\x64\x6f\xca\xde\xdc\xac\x56\x99\x4d\x54\x89\x1d\x57\xe4\x49\x6a\x3e\xa9\x20\xb2\x45\x61\x0d\x02\x1c\x00\x94\xa2\x99\xca\x7f\xbf\xc2\x83\x24\xc0\x87\x9d\x87\x73\x3b\xae\xda\x8d\x08\x74\x37\x1a\x8d\x7e\x02\x3d\xb3\x19\x2c\x44\x71\x94\x34\xdb\x69\x38\x7b\xfc\xe4\x27\x58\x91\x5c\x95\x3c\x83\xd5\xcb\x15\x2c\x98\x28\x53\xb8\x22\x9a\xee\x11\x16\x22\x2f\x4a\x4d\x79\x06\x37\x48\x72\x20\xa5\xde\x09\xa9\xa6\xa3\xd9\x6c\x34\x9b\xc1\x5b\x9a\x20\x57\x98\x42\xc9\x53\x94\xa0\x77\x08\xf3\x82\x24\x3b\xac\x66\x1e\xc1\x07\x94\x8a\x0a\x0e\x67\xd3\xc7\x30\x31\x00\x63\x3f\x35\x3e\xb9\x30\x24\x8e\xa2\x84\x9c\x1c\x81\x0b\x0d\xa5\x42\xd0\x3b\xaa\x60\x4b\x19\x02\x7e\x4a\xb0\xd0\x40\x39\x24\x22\x2f\x18\x25\x3c\x41\x38\x50\xbd\xb3\xeb\x78\x2a\x86\x13\xf8\xcd\xd3\x10\x1b\x4d\x28\x07\x02\x89\x28\x8e\x20\xb6\x21\x20\x10\xed\x99\x36\x7f\x3b\xad\x8b\xf3\xd9\xec\x70\x38\x4c\x89\x65\x78\x2a\x64\x36\x63\x0e\x54\xcd\xde\x2e\x17\xbf\x5c\xad\x7e\x39\x3d\x9b\x3e\xf6\x48\xbf\x72\x86\x4a\x81\xc4\xdf\x4b\x2a\x31\x85\xcd\x11\x48\x51\x30\x9a\x90\x0d\x43\x60\xe4\x00\x42\x02\xc9\x24\x62\x0a\x5a\x18\xa6\x0f\x92\x1a\xb9\x3d\x02\x25\xb6\xfa\x40\x24\x1a\x32\x29\x55\x5a\xd2\x4d\xa9\x23\x99\x55\x2c\x52\x15\x01\x08\x0e\x84\xc3\x78\xbe\x82\xe5\x6a\x0c\xff\x9c\xaf\x96\xab\x47\x86\xc8\xc7\xe5\xcd\xeb\x77\xbf\xde\xc0\xc7\xf9\xfb\xf7\xf3\xab\x9b\xe5\x2f\x2b\x78\xf7\x1e\x16\xef\xae\x5e\x2e\x6f\x96\xef\xae\x56\xf0\xee\x5f\x30\xbf\xfa\x0d\xde\x2c\xaf\x5e\x3e\x02\xa4\x7a\x87\x12\xf0\x53\x21\xcd\x0e\x84\x04\x6a\xa4\x89\xa9\x15\xdd\x0a\x31\x62\x61\x2b\x1c\x4b\xaa\xc0\x84\x6e\x69\x02\x8c\xf0\xac\x24\x19\x42\x26\xf6\x28\xb9\xd1\x84\x02\x65\x4e\x95\x39\x55\x05\x84\xa7\x86\x0c\xa3\x39\xd5\x44\xdb\xa1\xce\xbe\xa6\x23\x03\x72\x49\x93\x1d\x41\x06\x1f\x90\xe3\x1f\x94\xc0\xdf\xf3\xbd\xfb\xf5\x8f\x2c\x27\x94\x4d\x13\x91\xff\xaf\x81\x9b\x33\x7a\x4b\xe0\x2d\x91\x0a\x39\xfc\x9d\x98\xaf\x29\xb3\x5f\x21\xe0\x48\x1d\xb9\x26\x9f\xe0\x05\x8c\x0b\x29\xb4\x78\x3a\xbe\x18\x8d\x0a\x92\xdc\x1a\x56\x13\x56\x2a\x8d\x72\x9d\x13\x4e\x32\x94\x6b\x52\xd0\x8b\xd1\x88\xe6\x85\x90\x1a\xc6\x99\x10\x19\xc3\x19\x29\xe8\x8c\x70\x2e\x3c\xdb\x53\x4b\x66\x7c\x51\x83\xd9\xef\xe4\x34\x43\x7e\xaa\x0e\x24\xcb\x50\xce\x44\x61\x41\x7b\xd1\x46\x23\x37\x0b\x93\x4c\x16\xc9\x34\x23\x1a\x0f\xe4\xe8\xa6\x93\x75\x86\x7c\xed\xa9\x4c\x3d\x95\xa9\x28\x90\x93\x82\xee\xcf\xaa\x99\x13\x78\x01\x7f\x8e\x00\x28\xdf\x8a\x73\xfb\x0b\x40\x53\xcd\xf0\x1c\xc6\x0b\xb7\x25\xb8\x74\x5b\x82\xf9\xf5\x72\x7c\x61\x21\xf6\xce\xc0\xce\x61\xbc\x7f\x3c\x3d\x9b\x3e\xf6\xc3\x89\xe0\x9a\x24\xba\xa2\x63\xfe\x38\xc9\x0d\xa9\xca\xd6\x17\x57\x8b\x1b\x0f\x6c\xfe\x4a\xc9\xce\x61\x6c\x0c\x43\x9d\xcf\x66\x19\xd5\xbb\x72\x63\x64\x3d\x53\x0e\xfe\x34\xe1\x89\x9e\x79\xd1\x9e\x7a\xd1\x9e\x92\x82\x06\x34\xd0\x1c\xd0\x39\x8c\x49\x9a\x53\xfe\x8f\x10\x71\x4a\x85\x87\xfb\x6c\xfe\xb1\xff\x87\x9f\x34\x4a\x4e\xd8\x3a\x15\x89\xaa\x18\xfd\x5e\x36\x52\x54\x89\xa4\x56\xc4\xe7\x30\xbe\x14\x12\x81\x6c\x44\xa9\x61\x48\x82\x9f\x47\x00\x2a\xd9\x61\x8e\xea\x1c\x5e\xdf\xdc\x5c\xaf\x2e\xda\x23\x66\x20\x11\x5c\x95\x76\x64\xec\x0d\xdf\x2c\x31\xfb\xb7\x12\xdc\x92\x29\xa4\x48\xcb\x64\x68\xfe\xf3\xc5\x68\xa4\x50\xee\x69\x82\x35\x23\x6e\xbf\xc6\x9e\x29\x63\x06\x7f\x4f\xad\xa7\x24\x95\xfe\xda\x79\x59\x24\xb0\x90\x48\x34\x56\x78\x93\xe8\xf3\x52\x65\x27\x20\x51\x97\x92\xab\xd6\xd4\x7b\x2c\xd8\xf1\x24\x50\x80\x5a\x43\xad\x05\x4c\x49\x41\xa7\x46\xd0\x95\xde\x35\x7f\x85\x50\x1a\xce\x61\x6c\x8d\x64\xff\xa4\x12\xf7\x38\x02\xda\x88\xf4\x68\x80\xfe\xbb\x19\xfe\xec\x8f\x38\xda\x99\x44\x2d\x29\xee\x9d\x9f\x51\x9a\xe8\x52\x19\xdf\x5c\x6f\xd3\xf8\x10\xa0\x5a\xc1\x6d\xb9\xc1\x44\xf0\x2d\xcd\xac\x1b\x4a\x04\xe7\x98\x68\xba\xa7\xfa\x58\x8b\xe2\x15\xea\x5a\x0e\xcd\xef\x58\x08\xcd\xf8\xb7\x4b\x20\xc3\xbb\x05\xd0\xbb\xd3\x14\x19\x6a\xec\x39\xc0\x97\x76\xa2\x66\x3c\xfa\x8c\x79\x8f\xa6\xbe\x9d\x7d\xcf\xc9\x57\xef\x80\xa4\xff\x2e\x95\x06\x72\xa7\x3a\xce\x2d\x90\xe7\xf1\x4a\xa4\xa8\x60\x12\x8d\xc5\x5b\x8a\xa6\xbe\x43\x27\xcb\x1f\xa0\x92\x04\x18\x55\xda\xa8\xa3\xa7\xa7\x7a\x34\xed\xad\x01\x99\xc4\xdf\x43\x1a\x67\xe6\x1e\x5a\xeb\x66\x86\xc7\x7b\x76\x44\xb9\xd2\x84\x31\x98\x08\x09\x12\xfd\xd7\x09\x68\xca\x58\x70\x72\xd7\xd5\xa9\xde\xd8\x71\x98\xb4\x06\xe2\x5d\xb5\x26\x1f\xce\x9d\x38\xae\xbe\xed\xe8\x06\x36\xba\x43\x96\x43\xb2\x23\x52\x57\xd0\x37\x26\x91\x3c\x18\x94\x0d\x9a\xa8\xa0\x65\x99\xd8\x94\x96\x5a\xdf\x63\x40\x61\x47\x14\x10\x26\x91\xa4\x47\xd8\x20\x72\x48\xb1\x60\xe2\x88\x69\x93\x67\x2a\x92\xa3\x8d\x9c\xb5\x10\x97\x6e\xcd\xd7\xc8\xf2\x85\xa5\x32\x69\x8f\xc4\x62\x6c\xcf\x3e\x9c\x1c\xcd\xa6\xbf\x4d\x8a\xde\x3f\xd4\xdb\x6d\x89\xaf\xf1\x59\xc1\x2e\x5b\x03\x7d\x7e\xeb\x01\xf6\xd8\xf5\x5c\xf1\x2e\x87\xec\xb9\x94\xbc\x4a\x85\x6c\x02\x25\x73\x1b\x80\x7d\xf0\x27\x05\x05\x13\x7f\x03\x5b\x78\x85\xda\xd7\x26\xcb\x00\x7c\xd2\x0c\x77\x4c\xdc\x8f\x3f\x98\x79\x7b\x76\xbf\x6c\x6f\x65\x91\x49\x92\xa2\x5f\x4c\xd9\x08\x49\x20\xa3\x7b\xe4\x1d\x07\xfd\x0a\xf5\xaf\x0e\xdc\x7b\xa5\xf6\x0e\x07\x67\x3b\x7b\x1e\x84\x7c\x70\x27\xe7\x37\x78\x5f\x80\xd2\x1a\xf3\x42\x9b\x1a\xab\x92\x48\x37\x40\xc5\x4c\xc3\x24\xfe\x8e\xf7\x18\xcf\x3d\x74\x78\xea\xee\xea\x6b\xac\xb4\x2c\x52\x62\xf2\x89\x83\x82\x44\x62\x8a\x5c\x53\xc2\x94\x29\x93\x53\x7f\xfe\xdd\x9d\x1b\x8c\xf9\xc7\xd5\x22\x80\x9f\xf4\x8d\xb6\xa5\xd0\x85\x78\x38\x59\x34\x34\x67\xe4\xa0\xbe\x4f\x16\x7f\x94\x12\xbf\x52\x1a\x06\xa5\x4f\x1e\xad\xf1\x5e\x89\xb4\x60\x7e\x8c\x4c\xcc\x22\x5f\x2e\x95\xcf\xa3\x51\x8e\x4a\x99\x42\xb7\x5d\x09\x34\x35\xc5\x95\x09\x5b\xfe\x06\xa4\xca\xb3\xb5\x30\xa1\xb0\xce\xec\x30\xb5\xc0\x4a\x4b\x53\xd4\x9b\x10\x07\x2f\xe0\xc9\x45\x13\x3f\x3d\xac\xa9\xe6\xab\xeb\x00\x6b\xfa\x16\x22\x5a\xfa\xda\xc3\xad\x0a\x4c\x1a\xa4\x17\x70\x76\x31\xc8\xad\x95\x64\x50\x03\xed\xd0\x5e\x53\x08\x69\x6f\x82\x42\xb6\x0f\x44\x85\x4c\xc3\xe6\xe8\x2e\x89\x24\xfe\x5e\xa2\x72\x01\x6b\x23\x04\x03\x71\xdb\xd9\x40\x8a\x9a\x50\xa6\xda\x92\xf0\xa8\x20\x51\x15\x82\x2b\x17\xdb\x2b\x1f\xa7\x31\xaf\x01\xdb\x5b\x88\x4a\x8e\x2f\x91\x36\x13\xe2\x16\x53\x28\x8b\x3b\x65\x1d\xe2\x57\xe2\x53\x30\x21\x07\x35\x23\xb7\x6a\xb6\xcf\x0f\x44\xe2\x0c\x75\x72\x12\x92\x09\x04\xfd\x6c\x80\xcb\x96\x94\x97\x2a\x62\x91\x72\x97\xe2\x1c\x95\xc6\xbc\x2b\xc7\x50\x2a\x2f\xad\x20\xef\x94\x4d\xbb\xaa\x09\x0f\x97\x68\xa0\xd1\xda\xff\xa5\x9c\x14\xb4\x70\xb9\x99\x38\xfe\x7f\x0a\xa8\x5b\x65\x35\xcc\x2e\x44\xc9\xd2\x48\x4c\x55\xfe\x68\x32\xa5\x41\x6d\x5b\xd5\x85\xad\x41\x0d\x75\xd3\x33\xe3\x2b\xdf\x61\x8d\xf2\x65\x45\xc3\xc9\xfc\xe3\x0a\x02\xdf\x63\x87\x5b\xae\xdd\x84\x86\x90\x0b\xeb\xaf\xba\x48\x6d\x0f\xe8\xbc\xa8\x65\xe5\x47\x6b\x60\x5d\x10\x7d\xab\x16\x7a\xa4\xb7\xbd\x75\x1a\x16\xc6\xa5\xa4\x7d\xb6\xdb\x15\x75\x08\xd4\x30\xf3\xb2\x65\xb8\xe1\xfe\x68\x3a\xa8\x85\x3d\xd0\x5e\x6b\x1b\xa1\x86\x7a\xaf\x22\xfd\xe8\xc1\xae\xf5\xe3\x69\x1f\xd3\x81\xfd\xfd\xb5\x59\xef\xc1\x0f\xee\x75\xb4\xa8\xae\x75\xcc\xcf\x01\x72\x01\x7c\x5b\xaf\x86\xa3\x4e\xaf\xb3\xa9\xf5\xf3\x14\x92\x52\x4a\xe4\x9a\xf9\xe0\x41\x9d\xed\x08\x09\x39\x21\xea\xde\x40\x58\x55\x16\x62\x0b\x6f\xca\x0d\x4a\x8e\x1a\x23\xac\xdb\x9f\xd4\xba\x02\xb2\x72\xb4\x93\x82\xa3\xd8\xd6\x5c\xac\xc3\xba\xa4\xc9\x0e\xfc\x12\xc6\xda\xbb\x61\xb6\x13\x6a\xe7\x1f\x57\x76\xbf\xce\xf2\x9f\x5e\x0c\x40\xbd\xf1\x50\xde\xd0\x9f\x0d\xc0\x7d\xb8\xfc\x48\x24\x5a\x50\x67\xe2\xf0\x02\xfe\xa7\x4a\x34\xbe\x20\x36\x53\x05\xaf\xe7\x8d\xcd\xee\x68\xb6\x5b\x93\x3d\xa1\x8c\x6c\x28\xa3\xfa\x08\x2f\xe0\x79\x24\xc8\x2d\xd9\x48\x9a\xf8\xe0\x68\x52\xb7\x48\xf4\xa8\x0f\x42\xde\xae\x3d\xd0\x0b\xf8\xdb\xc5\x68\xf0\xf4\x2b\x41\xfc\x39\x6a\x09\xf1\x25\xd1\x04\x16\xc8\x2b\xad\x9a\x7f\x5c\x99\x21\x37\x02\x29\xd1\x64\x9d\xb8\xdf\xe1\x29\x87\xee\xd1\x70\x57\xd2\x38\x0a\xf4\x79\xdf\x30\x0d\x0d\x8d\xe7\x9f\xbf\xbd\x03\xaa\x31\xaf\x5d\xf6\xb5\xf4\x0a\x5d\x4a\x4c\x8d\x11\x9b\xec\x45\x89\x52\x26\x18\x9b\x8d\xbd\x2b\xe0\x09\x42\x26\x45\x59\xb4\x9c\xdc\xfc\xe3\xaa\x9a\x7f\x65\xa6\xdd\x5d\x08\x4f\x70\xed\xa0\xdd\x39\x37\xa7\x46\x93\x5d\x47\x18\x95\x28\x63\xa1\x44\xca\xe8\x10\x25\x66\x36\xb1\x2d\xd5\x29\x12\xa5\x4f\x9f\x3c\x02\xd4\xc9\xf4\xa4\x86\xf4\x67\xe6\xe1\x6a\x51\x46\x44\x22\x55\xf8\x43\x70\x54\x01\xc1\xcd\x23\xa8\x7e\x9f\x25\xf6\xf7\x01\xcd\xef\xb4\xbd\x52\x2d\x00\xbf\x64\x48\x75\xed\xa8\xd6\xd2\x6f\xb4\xf6\x5f\x42\xc2\x61\x87\x1c\x94\xc8\xed\xb3\x22\xcf\x14\x18\x0d\xaf\x2e\x7c\x12\xab\x4d\x69\x5b\x2c\x3d\x67\xd5\xb1\xd5\x0f\xd7\x0b\xa0\xe9\x23\xd8\x30\xc2\x6f\x6d\xf1\x61\xfe\x37\x76\x14\x8d\xd5\xdb\xef\xa3\x28\xc7\x8f\x60\x4b\x19\xc3\x14\xe8\xd6\x3e\x75\x1a\x06\x8c\x7a\x7c\xb8\x5e\xb4\x25\xb9\x2f\x92\x75\xe8\xb5\xab\xc4\x02\x93\x52\x1a\xf9\xd9\x43\x6e\x23\x29\x3f\xeb\x54\xc0\xe1\x9f\x5d\xb4\xf9\x5d\xce\x2f\x41\x0a\xd6\x3c\xef\x55\xf6\x3b\x21\x92\x9f\x54\x06\xa5\x94\x48\xa8\x75\x3d\x69\xda\x5e\x87\x92\x7c\x6d\x28\xac\x89\xe4\x8d\xc6\x36\xd2\x6e\x29\x2e\xa4\xb8\xa5\xdc\xd4\xe6\xfa\x58\xa0\xbd\xe1\xe7\x65\xbe\x31\x4e\x64\x5b\xab\xad\x6a\x8b\x3e\xd6\xee\x48\xea\x35\x7d\x4b\x6f\x92\x3f\x9f\x32\x22\x33\x1c\x50\x4a\x0b\xd4\x16\xe4\x25\xe5\x34\x2f\xf3\x3e\x46\x60\x92\xe2\x96\x94\x4c\x5b\xdb\xff\x03\xa5\x68\x48\x52\xae\x9f\x9e\x41\x4e\xf9\xfa\xf7\x92\x70\xed\x9c\x5a\x2c\xe2\x4b\xf2\xe9\x3b\x28\x93\x4f\x21\xe5\xa7\x41\x99\x37\x9b\x99\x44\x2a\x0c\x3e\xf3\xeb\x25\xac\xdc\x3d\x56\x90\x6a\x35\x17\x56\xf0\xa7\xc7\x73\x29\x97\x39\xee\x0a\xbb\x4a\x49\xbb\x78\xed\xf4\x6c\x0b\xa2\x40\xe9\xc2\x94\x29\xbe\xde\xbd\x19\xa8\x0d\x2a\x52\x3d\xf7\x68\x1d\x93\xd1\x24\x03\xe1\x32\xbd\x8c\x9a\xca\xab\x10\x8a\x6a\x21\x8f\xed\xb3\xcb\xa8\x0e\x22\xe9\x93\x8e\x2e\xef\x88\xda\x55\xb9\x88\xa1\x94\x88\x3c\xa7\xba\x8f\x8a\x9b\xe9\x9c\x56\x4f\x38\xd3\x12\xd1\x6e\x35\x61\x48\xb8\x73\x1b\x26\x02\xf4\x92\x35\xc0\x6b\x93\xf2\x60\x1c\x80\x67\x33\xe3\x6d\x6d\x96\x65\xa3\x47\x1b\xd7\x0e\xae\x53\x87\xf7\x2c\xc2\xfb\xd0\x9c\x70\x26\xdc\x8d\x86\xcd\x94\xf2\x82\x32\xec\xf0\x20\x02\xf9\x3c\x8f\xe8\x2c\x1c\x86\x6c\x22\x6b\x80\x97\x54\x93\x36\xae\x06\x58\xd7\x8c\x68\x73\x72\x40\xb5\x13\x82\x03\x74\xb7\x2a\x33\x90\x25\xb7\xcf\xfe\x41\x46\x52\xa5\xff\x15\x62\x4f\xd2\x50\x6d\x29\x50\x0a\x3b\xd5\xa3\x2b\x7e\x37\x51\x7a\x54\xe5\xee\xfe\xd0\x93\x38\x3a\x97\xbe\x53\xc1\x3a\x5c\x6b\xf0\x41\xa0\x0e\x1c\x4a\x18\xac\xa3\x3c\x61\x85\x89\x44\xfd\x06\x8f\x4b\xb7\x4b\x63\x57\xf3\x24\x41\x15\x25\x75\xca\x42\xad\x6f\xf1\xb8\x6e\xa5\xd3\x0d\x0d\x87\xf5\x06\x8f\x35\x1d\x32\x44\xc7\x4d\x18\x72\x51\xb6\x60\x68\xbd\x77\x51\x74\x98\x44\x1d\x66\x5d\x75\xf0\x5d\x72\x69\x57\x83\x71\x06\x55\x14\x77\xca\x84\x14\x45\x9f\x30\x6e\x90\x13\xae\xef\xd8\x80\x76\x00\xed\x8d\x5f\x13\xa5\x0e\x42\xa6\x77\x60\x16\x15\x48\x98\x28\xd9\x03\x28\x37\xf5\x5b\xff\x5d\xd2\x0f\xc0\x1c\xeb\xcf\x2a\xd5\x32\xe2\x21\x49\x22\x4a\xae\x9d\xd5\xd9\xbb\xa5\xe8\x0e\xc7\xc7\x74\x97\x48\x37\x49\xdb\x04\x3f\x9d\x03\x13\x24\x85\x0d\x61\xc6\xd3\xcb\x93\x96\x80\x1d\x89\x95\x7b\xf4\x9f\xfb\x45\x22\x51\x2f\x18\x45\xae\x97\x29\x4c\xc8\x2d\x39\xb7\x92\x7f\x19\x95\xd7\x89\x05\xe8\x13\xb7\x43\x75\x1a\xe8\xd1\x2b\x31\xf5\x51\x70\x0a\x58\x19\x55\x7f\x3a\xfd\xa6\x2f\x9d\xb6\xbb\x6e\xe7\x90\x9e\x36\x13\x49\x65\xab\x5f\x9b\x46\xb7\x35\x70\x28\x91\xae\x6e\xf0\xab\xd6\x89\xe8\xac\x4c\x01\x49\xd8\xad\xf9\xd7\x9d\x8e\x3d\x93\x5a\xf5\x5b\x87\xd3\xac\xdb\x7b\x30\x9e\xbd\xea\xf3\xcb\x73\xf2\x37\x5f\x93\x93\x3f\x40\x96\xd4\x5e\xaf\x13\x68\x79\x50\xe9\xf7\xa6\x8c\x71\x81\xdb\xe6\xcc\xe5\x57\x2b\x4d\x78\x4a\x64\xba\x7e\x79\xb6\xde\x9f\xdd\x9d\x65\x9d\xfd\xb0\x2c\xeb\xe9\x0f\xcb\xb2\x9e\xdd\x77\x99\x1e\x14\xc6\xb5\x45\x5c\x92\x64\x47\x4d\xb5\x71\xb0\xc5\x8d\x09\x93\x92\x2a\xec\xa8\x77\xad\x1c\x8e\x88\x47\xb3\xb4\x12\xc1\xb5\x14\x6c\x5d\x30\xc2\x71\xcd\x6d\xef\x44\xa8\x6b\x0f\xb0\x84\xa9\xa0\x51\xd6\xb4\x9f\x05\x7e\x83\x2a\x50\x3b\x7b\xbd\xb9\x31\x4a\xb7\x27\xac\x44\x60\xf4\x16\x81\x16\xe7\xb6\xeb\x4d\xef\x88\xae\x1f\xcd\x09\xec\xa9\xd4\x25\x61\xb0\xbc\x9e\x99\xe9\x8a\x92\x71\xda\xc6\x59\x92\xc4\x5a\x5f\xd5\xc7\x05\x49\xa9\xb4\xc8\x51\x2a\x5f\xdf\xdb\xde\x48\x97\xc8\xe4\x25\xa7\x89\x71\xa4\xc3\xd7\x3e\xa4\xa0\x6b\xe4\x69\x21\xa8\x35\xc0\xe7\xd1\xc5\x4f\x73\xeb\xf2\x96\x6c\x90\xc5\x6e\xaa\x52\x79\x02\xcc\x4c\xde\x7f\x9b\x63\x37\xde\x8f\xe0\xe6\x5a\xe9\x47\x74\x2f\xe3\x1f\x9b\xea\x0e\x49\x23\xe9\x9a\xcf\xee\x79\x44\x9c\x96\xca\x48\x2a\x77\x51\x7a\xb5\x7a\xdd\x13\xae\x6a\x90\x36\xd7\x3b\xa1\xf4\x1d\x78\x76\xba\x1d\x5e\xed\xa1\xf6\xe0\x38\xa3\xb0\xb3\xed\xa8\x7a\xfb\x93\xaa\x6b\x86\xba\x5c\x74\x6a\x0b\x56\x6d\xa7\x4e\x93\xcc\xb6\x81\x2a\x10\x9c\x1d\x81\x40\x4e\xdc\x85\xd0\xb6\xea\xe0\x45\x96\xda\x86\x56\xeb\xe2\xd2\xe9\x40\x44\x7f\x16\xad\x6d\x4f\x43\xd5\xcb\xe6\xde\x1a\x62\x95\x6f\xab\x82\x47\xaa\x34\xa6\x3e\x8a\x6e\x6f\x4b\x70\xc9\x5f\x05\x78\xd7\x07\xd3\x58\x85\x6f\x28\xb1\xdd\xb7\x71\x20\xad\x1e\x3d\xe2\x3b\x55\x55\x10\xe3\x34\x87\xc9\x50\xde\x56\x47\x87\x12\x9e\x94\xcd\x89\xb9\xb0\x5e\xdb\x52\xb2\x3d\x0f\xae\x8f\xd8\x75\xbb\xcc\xea\xd7\x6e\x2d\x22\x6d\xad\x0b\x81\x20\x5e\xb9\xbb\x4f\xcf\x53\xfd\x2a\x7a\x7a\xa0\x69\x35\xfa\x73\x05\xbb\x72\x1c\x53\x0d\x3b\xb2\xc7\x18\xd4\x36\x71\x42\x21\xe9\x9e\x32\xcc\x50\xfd\xdc\x54\x81\x55\x83\xad\x85\x0b\x0f\xb1\x16\x89\x72\xae\x84\xea\xd0\xe3\x78\x77\xe0\x08\x7b\xf9\x76\x2e\x77\xcc\xe4\x9a\x37\x74\xc2\x1b\xc4\xef\x7e\xa5\xf8\x5b\xe4\x54\xfa\x1a\x9c\x82\x8b\x64\xe2\x04\xd9\x14\xc3\xaa\xb4\x16\xb4\x2d\x59\xb7\x20\x86\xe0\xf6\xd9\xd3\x57\x70\x40\x89\xae\x47\x23\xe4\xa7\x5a\xbe\xfd\x3e\xd1\xd3\x46\xf4\xc0\x1a\xeb\xdb\xbe\x14\x6a\x93\x22\x39\xbb\x7a\x85\x1c\x25\x4d\xdc\xd4\xca\xcd\x54\xab\x44\xb9\x98\xed\x02\x5a\xf5\xa0\x36\x3d\x42\xae\xab\x2a\x54\xc6\x07\x3e\xb1\xde\x5e\xaa\xff\xe0\x91\x75\x7b\xa2\xfe\x72\x27\x76\x55\xf5\xae\x55\xab\xfc\xe8\x33\xea\x6b\x05\xfb\x0f\x1e\x51\xaf\xb4\x7a\x5f\x8b\xbc\x08\x6b\xdf\x33\xe4\xb8\x9f\xf4\xbe\x72\x05\xb7\x74\x81\x13\xef\x77\xd6\xbd\x1c\x36\x66\xd4\xcb\x5d\x98\xd7\xbb\xbe\xbd\x1c\xb9\xbe\x33\xd7\x69\xa3\xfb\x60\x25\x3c\xbe\x2b\x7f\x9b\x66\xf5\x56\x6c\xe9\x8f\x55\xd1\x5b\xbe\xe5\xb6\x75\x95\x57\x5f\x58\x14\x62\xf0\x45\xd0\x21\xf2\x01\xcd\x7c\x16\xe3\x10\x89\x5e\x63\x5c\xe7\xdb\x84\xa3\x32\x01\xe3\x48\x72\x06\xa7\x76\xea\x83\x49\xda\xd4\xd4\x8e\x98\x5c\x05\xb9\x56\x27\x9d\xac\x4e\x75\xb2\xca\x7b\x5a\xe1\xfa\x1b\x3c\xbe\xc9\x44\xfa\x0f\xa5\xbe\x67\xb0\x69\x37\xda\xad\x26\x82\x2b\x83\x64\x08\x98\x44\xc8\x07\xfe\x9e\x83\xee\x3c\xb9\xdf\xdd\xac\x17\x78\x26\xc2\xdb\x0d\x0e\x7e\x95\xe1\xfe\x06\xcb\xb6\xd7\x60\xf7\x8e\x52\x08\xa5\xa8\x09\xe9\xee\xbf\x23\xe3\xe2\xd0\x1b\xd0\x6b\x9c\xb6\xda\x77\xba\xf2\xfe\xfa\xe2\xee\x91\x85\x25\x72\xa8\x04\x68\x3d\xb1\xf8\xb9\xdf\xea\x9f\xdf\xb1\xfd\x5e\x2f\x49\x95\xa9\x33\x6a\xf7\x38\xdc\xf1\x14\x90\x6d\x37\xe2\xdf\xd9\x85\xf3\x8d\x92\x68\xa4\x5b\x3d\xc1\x1b\xdb\xe5\x99\xcf\xd4\x5b\xaf\xde\x7e\xea\x6b\x5e\xbc\x67\xb3\x68\x1b\x83\x6f\xde\x6d\xb8\xe1\x57\xef\x08\xae\xef\xd5\xfb\x79\x74\x81\xdd\x2b\xcd\xce\x9d\x40\x7f\xd1\x7e\x40\x38\x10\xae\x5d\xa6\x9b\xf6\x15\xbc\xf7\x54\xf0\x24\x4d\xeb\xf2\xbd\xf5\x84\x35\xb8\x92\xc4\x5c\xec\x11\xb6\x52\xe4\x5f\xb2\xdc\x7b\x0b\x1e\x2e\xea\x08\xd4\xeb\x9e\xf5\x8a\x63\x08\xb9\x73\xb4\x43\xb5\x2a\x74\xea\xd5\x27\xf5\x42\x43\x4a\xfc\x60\xa6\x31\xd0\x06\xdb\xcd\xd8\xda\x81\xa9\xa3\xf6\x0f\xd2\x2c\x70\x0f\x67\x0f\xbd\xed\x6e\xb7\xeb\x0f\xdb\xf8\xbd\xd7\xbb\xf7\x72\xf7\xdd\x9b\xff\xbf\x00\x00\x00\xff\xff\x8c\x34\x49\x6c\xe3\x3c\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 15587, mode: os.FileMode(420), modTime: time.Unix(1537256528, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
