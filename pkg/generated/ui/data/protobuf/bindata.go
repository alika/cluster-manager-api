// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdd\x73\xdb\x36\x12\x7f\xd7\x5f\xb1\xa3\x97\x73\x6e\x6c\x31\x71\x9a\xbb\x8e\x5d\xdf\x54\x95\xd3\x44\x93\xf8\x63\x22\x37\x9e\x3c\x69\x56\xe0\x8a\xc2\x19\x04\x58\x00\x94\xac\x64\xfc\xbf\xdf\xe0\x83\x14\x49\x51\x49\xaf\xe9\x43\x35\x93\x98\x04\x76\x7f\xdc\xfd\xed\x07\x96\x4c\x12\x98\xa8\x62\xab\x79\xb6\xb2\x70\xfa\xfc\xc5\x8f\x30\xc3\xdc\x94\x32\x83\xd9\xe5\x0c\x26\x42\x95\x29\x5c\xa3\xe5\x6b\x82\x89\xca\x8b\xd2\x72\x99\xc1\x1d\x61\x0e\x58\xda\x95\xd2\x66\x34\x48\x92\x41\x92\xc0\x7b\xce\x48\x1a\x4a\xa1\x94\x29\x69\xb0\x2b\x82\x71\x81\x6c\x45\xd5\xce\x31\x7c\x24\x6d\xb8\x92\x70\x3a\x7a\x0e\x47\x4e\x60\x18\xb7\x86\xcf\xce\x1d\xc4\x56\x95\x90\xe3\x16\xa4\xb2\x50\x1a\x02\xbb\xe2\x06\x96\x5c\x10\xd0\x23\xa3\xc2\x02\x97\xc0\x54\x5e\x08\x8e\x92\x11\x6c\xb8\x5d\xf9\xe7\x44\x14\x67\x09\x7c\x8a\x18\x6a\x61\x91\x4b\x40\x60\xaa\xd8\x82\x5a\x36\x05\x01\x6d\x34\xda\xfd\x56\xd6\x16\x67\x49\xb2\xd9\x6c\x46\xe8\x0d\x1e\x29\x9d\x25\x22\x88\x9a\xe4\xfd\x74\xf2\xfa\x7a\xf6\xfa\xe4\x74\xf4\x3c\x2a\xfd\x26\x05\x19\x03\x9a\x7e\x2f\xb9\xa6\x14\x16\x5b\xc0\xa2\x10\x9c\xe1\x42\x10\x08\xdc\x80\xd2\x80\x99\x26\x4a\xc1\x2a\x67\xf4\x46\x73\xc7\xdb\x31\x18\xb5\xb4\x1b\xd4\xe4\x60\x52\x6e\xac\xe6\x8b\xd2\xb6\x38\xab\x4c\xe4\xa6\x25\xa0\x24\xa0\x84\xe1\x78\x06\xd3\xd9\x10\x7e\x19\xcf\xa6\xb3\x63\x07\x72\x3f\xbd\x7b\x7b\xf3\xdb\x1d\xdc\x8f\x3f\x7c\x18\x5f\xdf\x4d\x5f\xcf\xe0\xe6\x03\x4c\x6e\xae\x2f\xa7\x77\xd3\x9b\xeb\x19\xdc\xfc\x0a\xe3\xeb\x4f\xf0\x6e\x7a\x7d\x79\x0c\xc4\xed\x8a\x34\xd0\x63\xa1\x9d\x07\x4a\x03\x77\x6c\x52\xea\xa9\x9b\x11\xb5\x4c\x58\xaa\x60\x92\x29\x88\xf1\x25\x67\x20\x50\x66\x25\x66\x04\x99\x5a\x93\x96\x2e\x13\x0a\xd2\x39\x37\x2e\xaa\x06\x50\xa6\x0e\x46\xf0\x9c\x5b\xb4\x7e\x69\xcf\xaf\xd1\xc0\x89\x5c\x71\xb6\x42\x12\xf0\x91\x24\x7d\xe6\x08\x3f\xe5\xeb\x70\xf5\x73\x96\x23\x17\x23\xa6\xf2\xff\x38\xb9\xb1\xe0\x0f\x08\xef\x51\x1b\x92\xf0\x13\xba\xbb\x91\xf0\x77\x4d\xc1\x81\xd9\x4a\x8b\x8f\x70\x01\xc3\x42\x2b\xab\x5e\x0e\xcf\x07\x83\x02\xd9\x83\x33\x95\x89\xd2\x58\xd2\xf3\x1c\x25\x66\xa4\xe7\x58\xf0\xf3\xc1\x80\xe7\x85\xd2\x16\x86\x99\x52\x99\xa0\x04\x0b\x9e\xa0\x94\x2a\x9a\x3d\xf2\x30\xc3\xf3\x5a\xcc\xdf\xb3\x93\x8c\xe4\x89\xd9\x60\x96\x91\x4e\x54\xe1\x45\x7b\xd5\x06\x83\xb0\x0b\x47\x99\x2e\xd8\x28\x43\x4b\x1b\xdc\x86\x6d\x36\xcf\x48\xce\x23\xca\x28\xa2\x8c\x54\x41\x12\x0b\xbe\x3e\xad\x76\x9e\xc1\x05\x7c\x19\x00\x70\xb9\x54\x67\xfe\x0a\xc0\x72\x2b\xe8\x0c\x86\x93\xe0\x12\x5c\x05\x97\x60\x7c\x3b\x1d\x9e\x7b\x89\x75\x28\xb0\x33\x18\xae\x9f\x8f\x4e\x47\xcf\xe3\x32\x53\xd2\x22\xb3\x15\x8e\xfb\x49\xcc\x1d\x54\x55\xeb\x93\xeb\xc9\x5d\x14\x76\xbf\x52\x8b\x33\x18\xba\xc2\x30\x67\x49\x92\x71\xbb\x2a\x17\x8e\xeb\xc4\x04\xf9\x13\x26\x99\x4d\x22\xb5\x27\x91\xda\x13\x2c\x78\x03\x83\x5c\x80\xce\x60\x88\x69\xce\xe5\xcf\x4d\xc5\x11\x57\x51\xee\xc9\xfd\xf1\xff\xd1\xa3\x25\x2d\x51\xcc\x53\xc5\x4c\x65\xe8\xf7\x9a\x91\x92\x61\x9a\x7b\x8a\xcf\x60\x78\xa5\x34\x01\x2e\x54\x69\xe1\x10\x83\x4f\x03\x00\xc3\x56\x94\x93\x39\x83\xb7\x77\x77\xb7\xb3\xf3\xee\x8a\x5b\x60\x4a\x9a\xd2\xaf\x0c\x63\xe1\xbb\x47\x24\xff\x35\x4a\x7a\x98\x42\xab\xb4\x64\x87\xf6\x9f\xce\x07\x03\x43\x7a\xcd\x19\xd5\x86\x04\x7f\x5d\x3d\x73\x21\x9c\xfe\x9a\xfb\x4e\x89\x55\xfe\xfa\x7d\x5d\x30\x98\x68\x42\x4b\x95\xde\x51\xeb\xf6\xca\x64\xcf\x40\x93\x2d\xb5\x34\x9d\xad\x0f\x54\x88\xed\xb3\x46\x02\xd4\x19\xea\x2b\x60\x84\x05\x1f\x39\xa2\xab\xbc\xdb\xfd\x8a\xd2\xc2\x19\x0c\x7d\x8d\xac\x5f\x54\x6c\x0f\x5b\x32\x0b\x95\x6e\x9d\xd0\x3f\x77\xcb\x4f\x31\xc2\x2d\xc7\x34\x59\xcd\x69\x1d\xda\x8c\xb1\x68\x4b\xe3\x5a\x73\xed\xa5\x6b\x21\xc0\xad\x81\x87\x72\x41\x4c\xc9\x25\xcf\x7c\x17\x62\x4a\x4a\x62\x96\xaf\xb9\xdd\xd6\x4c\xbc\x21\x5b\xd3\xb0\xbb\x6e\x73\xb0\x5b\xff\xf3\x04\x64\xf4\x75\x02\x7a\x3d\x4d\x49\x90\xa5\x9e\xf8\x5d\xfa\x8d\xda\xf0\xd6\x6d\xdb\xf6\xd6\xd6\x9f\x37\x3f\x5a\xf2\x7f\x7b\x50\xc7\x0a\x41\x70\x63\x5d\x9c\xa2\xa2\xe9\x09\xc1\x7b\x27\x72\xd4\xbe\x3f\x14\x0a\xb7\xf7\x57\x87\x23\x71\x36\x7e\xdb\xa3\x52\xcb\xaa\x49\xfa\xd6\xaa\x73\x5f\x9a\xb1\x2d\x60\xc1\xc1\x55\x66\x23\x5c\x6f\xc8\xc6\xa9\x65\xda\x10\x3f\xda\x2d\xef\x39\x19\xd7\xff\x32\x07\xa3\xb9\x3d\xbe\x3d\x0d\x06\x39\x19\xe3\x4e\xb9\x6e\x1b\xd8\x35\x94\x6b\xcc\xa9\x1a\x7f\xaa\x2a\xb3\x0a\x16\xb4\xeb\x32\x94\x7a\x61\x37\x6c\xc8\xcc\x9f\x0c\x70\x01\x2f\xce\x2b\x84\xbb\x55\x94\x75\x47\x79\x35\x0b\x78\x1e\xbc\x44\xeb\xd1\xb7\x51\x6e\x56\x10\xdb\x29\x5d\xc0\xe9\xf9\x41\x6b\x3d\x51\x8d\x06\xb8\x22\x3f\xa3\x28\xed\xc7\xc0\xa6\xd9\x1b\x34\x4d\xa3\xdd\xdc\xe5\x27\x44\x37\x88\x91\xb1\x83\xd0\x89\x94\x00\xf5\xb0\xe7\x40\x4a\x16\xb9\x30\x5d\x26\xa2\x2a\x68\x32\x85\x92\x86\x82\x47\x61\x73\x6a\x29\xaf\x05\xbb\x2e\xb4\x1a\xce\x1f\x61\x5b\x28\xf5\xe0\x06\xbd\xa2\x9f\xeb\x5e\xe8\x0e\x35\x53\xd3\xc2\xe5\x32\xb4\xd1\xad\xb1\x94\xef\x3b\xdf\x74\xe5\xd2\x7b\xff\x55\x87\xba\x8d\xa8\x19\x11\xb4\x6e\x1c\x6d\x3c\xfb\x1f\x26\x98\x6e\x95\x3b\x63\xad\x56\xdb\x6f\x7a\xb5\xdf\xcd\x76\x4f\x98\xa8\x52\xa4\x2d\xdf\x16\x54\x01\xc7\xe4\xec\x8b\xeb\xac\x3e\x40\x9c\x6a\x33\x0b\xa2\x21\xf1\x84\x39\x1c\xbb\xd8\xa5\xe0\xcb\xe1\xed\xef\x8a\x41\x54\x7a\xdf\xdb\x3f\xa9\x70\x55\x90\xf6\xa5\xdb\xbe\xcd\x4d\xa1\x9d\x31\x97\x9d\x5c\x6b\x3a\xcf\xd3\x96\x0d\x3d\x99\xd9\x13\xb3\xd3\xf3\xbe\xa8\x9b\x16\xd1\x3d\xda\x35\xd1\x2f\xfb\x8c\x6e\x64\xdf\xdf\xdb\xf4\x1e\xfd\xc6\x20\x62\x55\x35\x87\xb8\xcb\x03\x70\x0d\xf9\x0b\xf8\xe1\x70\xd7\x6b\x35\xca\xde\x52\xab\xbb\xe7\x09\xb0\x52\x6b\x92\x56\xc4\x7e\xc7\x0d\xe0\xc6\xbf\xbd\xe5\x88\xe6\x9b\xbd\xbb\x3a\xef\xd4\x12\xde\x95\x0b\xd2\x92\x2c\xb5\xb4\x1e\x7e\x34\xf3\x4a\xc8\xf3\xe8\x37\x95\x24\xb5\xac\xad\x98\x37\x4f\xcb\xdd\x79\x15\x1f\x31\xbe\x9f\xf5\x9c\x0c\x7b\xa7\xc3\xf8\x7e\xe6\xfd\x75\xd6\xd7\x84\x3f\x0d\xfe\x40\xeb\xe7\x06\xde\x8e\x77\xf5\xb5\xe2\xd9\x6a\x8e\x6b\xe4\x02\x17\x5c\x70\xbb\x0d\x64\x37\x2c\x5a\xe2\x42\x73\x16\x7b\x6f\x69\x3a\x47\x1c\xd9\x8d\xd2\x0f\xf3\x28\x74\x01\xaf\xce\x07\x07\x23\x55\x19\xfd\x65\xd0\x71\xf8\x12\x2d\xc2\x84\x64\x95\x01\xe3\xfb\x99\x5b\x0a\x2b\x90\xa2\xc5\x39\x0b\xd7\xcd\x88\x4c\x34\xa5\x24\x2d\x47\x61\xbc\x75\x25\x6f\xb7\xbe\x0a\xaa\x29\xc7\x1a\xd7\xcd\x44\xff\xe5\xd3\x0d\x70\x4b\xb9\xa9\x94\x6e\x75\x4c\xbe\x52\x53\xea\x0a\xce\x1d\x8e\x46\x95\x9a\x51\x3b\xc5\xa7\xd2\x58\xff\x0d\x25\xd3\xaa\x2c\x3a\x0d\x69\x7c\x3f\xab\xf6\xdf\xb8\x6d\xe0\xf1\x6e\x1e\xa4\x03\xd9\xbb\xa8\x71\xb6\xda\x23\xa3\xa2\xb2\x4d\x4a\x2b\x71\x82\xa2\xa6\xcc\x8f\x45\xa5\x39\x21\x34\xf6\xe4\xc5\x31\x90\x65\xa3\x67\xb5\x64\x8c\x59\x94\xab\xa9\x6c\x81\xb4\x52\xe1\xb3\x92\x64\x1a\x80\x8b\x63\xa8\xae\x4f\x99\xbf\xde\x90\xbb\x4e\xbb\x4f\xaa\x09\x88\x8f\x6c\xa2\xce\x03\x6a\xcd\xfe\x2e\x6b\x5d\x3a\xb0\x76\x50\xcb\xf8\xf1\x84\xb9\x3c\x72\x48\xdd\xf8\x36\xd8\x69\xc6\x79\xaf\xae\x66\xc4\x34\xd9\x77\xb4\x9d\xa6\x1e\x70\x7c\x3b\x85\x31\x63\x64\x4c\x97\x1e\xe3\x25\xe7\x0f\xb4\x9d\x37\xbb\xe7\x1e\x56\xd0\x7e\x47\xdb\x1a\x0f\xbf\x86\x17\x36\x1d\x6c\x9f\xeb\xbf\x2a\x0d\x9b\x15\x49\x30\x2a\xf7\x5f\xeb\x64\x66\x00\xdd\x5b\xb6\xd0\x84\xe9\x36\x10\x10\x6b\xaf\xe1\x73\x4f\x9a\xee\xb9\xfe\xf1\x76\x02\x3c\x3d\x86\x85\x40\xf9\xe0\x8d\x75\xff\x86\x01\xd1\x35\x27\x7f\xbf\x55\xe5\xf0\x18\x96\x5c\x08\x4a\x81\x2f\xfd\x17\x44\x67\x80\xab\x8c\x8f\xb7\x93\xae\x57\xeb\x82\xf5\xd1\x33\x23\x56\x6a\x97\x3a\x3e\xbf\x7b\xa8\xf0\xbb\x21\xfb\x83\xfe\xe9\x1e\xbd\xd3\xf1\x15\x68\x25\x76\x5f\xcd\xaa\xd6\x75\x84\x5a\xee\x65\x33\xc7\x7c\xee\xa4\xe7\xa8\x65\x5f\x2b\xec\xd4\x27\xa4\xb4\xe4\xd2\xbd\x8a\xd9\x6d\x41\xfe\x2d\x59\x96\xf9\xc2\xf5\xca\x65\x5d\x9d\xa6\x4b\x73\xbb\x88\x5b\x0c\xd7\xf8\x1e\xef\x28\x7f\x35\x12\xa8\x33\x3a\x50\x7b\x5e\xa8\x4b\xda\x15\x97\x3c\x2f\xf3\x3e\x43\xe0\x28\xa5\x25\x96\xc2\xfa\x6a\xf8\x4c\x5a\xed\x20\xb9\xb4\x2f\x4f\x21\xe7\x72\xfe\x7b\x89\xd2\x86\xde\xdd\xa6\xf3\x0a\x1f\xbf\x03\x19\x1f\x9b\xc8\x2f\x1b\x2f\x4b\x49\xe2\x66\xbb\xe6\x79\xe8\xf2\x7f\x16\x5e\xf8\x1a\xd3\xdf\xee\xcd\x2e\x0c\x86\x49\x02\x61\x0a\x74\xa1\xad\xb4\xab\x71\x73\x5f\xaf\x3b\x31\x2e\x41\x15\xa4\xc3\xc9\xe9\x5e\x61\x6e\xde\x1d\x18\xd6\x2b\xa8\x9e\x17\xce\xbd\xf2\xb0\x98\x81\x0a\xc3\x67\xc6\xdd\xfb\x4b\xa1\x0c\xb7\x4a\x6f\xbb\xb1\xcb\xb8\x6d\x1c\xee\xfb\x6d\x61\x85\x66\x55\x8d\x47\x0e\x89\xa9\x3c\xe7\xb6\x0f\x25\xec\xec\x45\xab\xe7\xd4\xb6\x9a\xc8\xbb\xca\x04\xa1\x0c\x2d\xc2\x1d\x74\xbd\xb0\x4e\x78\xee\xa6\x30\xda\x85\x2b\x42\x5f\xfa\x52\x5f\x86\x43\xb2\xab\xeb\x17\xe7\x69\xd0\xfb\xa1\xa5\xf7\x71\x17\xe1\xcc\x77\xe3\x34\x0c\x6f\x79\xc1\x05\xed\xd9\xa0\x1a\xfc\xbc\x6a\xe1\x4c\x82\x86\xde\x0d\x10\x0d\x3d\x56\x6d\x5e\xc0\xbf\x5a\x5a\xb7\x02\xad\x8b\x1c\x70\x1b\x48\x08\x82\xa1\x83\x27\xa0\x4b\xe9\xbf\x9c\x37\x86\xa4\x88\x58\x54\x8a\x17\xf0\xef\x6e\x43\xa8\x5c\x6a\x24\x85\xdf\xea\xc9\x95\xe8\x4d\x6b\x62\xab\x5e\x27\x06\xff\x0b\x00\x00\xff\xff\x73\x1b\xac\x2d\xef\x19\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 6639, mode: os.FileMode(420), modTime: time.Unix(1535575932, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
