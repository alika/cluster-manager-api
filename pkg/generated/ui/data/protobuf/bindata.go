// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x6b\x6f\xdb\xc6\xd2\xfe\xae\x5f\x31\xd0\x97\xd7\x7e\x61\x8b\xb1\x9c\x9e\x53\x48\xf5\x41\x55\x39\x4d\x04\xc7\x17\x44\x6e\x8c\x7c\x12\x56\xcb\x11\xb5\xc7\xe4\x2e\xbb\xbb\x94\xac\x04\xf9\xef\x07\x7b\x21\xb9\xa4\x28\x37\xb7\x02\x15\xd0\x86\xe4\xce\x0c\x67\x9f\xb9\x3d\x4b\x47\x11\x4c\x45\xbe\x93\x2c\x59\x6b\x18\xbe\x38\xfb\x19\xe6\x24\x53\x05\x4f\x60\x7e\x39\x87\x69\x2a\x8a\x18\x6e\x88\x66\x1b\x84\xa9\xc8\xf2\x42\x33\x9e\xc0\x3d\x92\x0c\x48\xa1\xd7\x42\xaa\x41\x2f\x8a\x7a\x51\x04\x6f\x19\x45\xae\x30\x86\x82\xc7\x28\x41\xaf\x11\x26\x39\xa1\x6b\x2c\x57\x4e\xe0\x3d\x4a\xc5\x04\x87\xe1\xe0\x05\x1c\x19\x81\xbe\x5f\xea\x1f\x8f\x8d\x89\x9d\x28\x20\x23\x3b\xe0\x42\x43\xa1\x10\xf4\x9a\x29\x58\xb1\x14\x01\x9f\x28\xe6\x1a\x18\x07\x2a\xb2\x3c\x65\x84\x53\x84\x2d\xd3\x6b\xfb\x1e\x6f\xc5\x78\x02\x1f\xbc\x0d\xb1\xd4\x84\x71\x20\x40\x45\xbe\x03\xb1\x0a\x05\x81\x68\xef\xb4\xf9\xad\xb5\xce\x47\x51\xb4\xdd\x6e\x07\xc4\x3a\x3c\x10\x32\x89\x52\x27\xaa\xa2\xb7\xb3\xe9\xab\x9b\xf9\xab\xd3\xe1\xe0\x85\x57\xfa\x83\xa7\xa8\x14\x48\xfc\xb3\x60\x12\x63\x58\xee\x80\xe4\x79\xca\x28\x59\xa6\x08\x29\xd9\x82\x90\x40\x12\x89\x18\x83\x16\xc6\xe9\xad\x64\x06\xb7\x13\x50\x62\xa5\xb7\x44\xa2\x31\x13\x33\xa5\x25\x5b\x16\xba\x81\x59\xe9\x22\x53\x0d\x01\xc1\x81\x70\xe8\x4f\xe6\x30\x9b\xf7\xe1\xb7\xc9\x7c\x36\x3f\x31\x46\x1e\x66\xf7\x6f\x6e\xff\xb8\x87\x87\xc9\xbb\x77\x93\x9b\xfb\xd9\xab\x39\xdc\xbe\x83\xe9\xed\xcd\xe5\xec\x7e\x76\x7b\x33\x87\xdb\xdf\x61\x72\xf3\x01\xae\x66\x37\x97\x27\x80\x4c\xaf\x51\x02\x3e\xe5\xd2\xec\x40\x48\x60\x06\x4d\x8c\x2d\x74\x73\xc4\x86\x0b\x2b\xe1\x5c\x52\x39\x52\xb6\x62\x14\x52\xc2\x93\x82\x24\x08\x89\xd8\xa0\xe4\x26\x13\x72\x94\x19\x53\x26\xaa\x0a\x08\x8f\x8d\x99\x94\x65\x4c\x13\x6d\x1f\xed\xed\x6b\xd0\x33\x22\xd7\x8c\xae\x09\xa6\xf0\x1e\x39\x7e\x64\x04\x7e\xc9\x36\xee\xea\xd7\x24\x23\x2c\x1d\x50\x91\xfd\xc7\xc8\x4d\x52\xf6\x48\xe0\x2d\x91\x0a\x39\xfc\x42\xcc\xdd\x20\xb5\x77\xa1\x60\x4f\xed\xb8\x26\x4f\x70\x01\xfd\x5c\x0a\x2d\xce\xfb\xe3\x5e\x2f\x27\xf4\xd1\xb8\x4a\xd3\x42\x69\x94\x8b\x8c\x70\x92\xa0\x5c\x90\x9c\x8d\x7b\x3d\x96\xe5\x42\x6a\xe8\x27\x42\x24\x29\x46\x24\x67\x11\xe1\x5c\x78\xb7\x07\xd6\x4c\x7f\x5c\x89\xd9\x7b\x7a\x9a\x20\x3f\x55\x5b\x92\x24\x28\x23\x91\x5b\xd1\x4e\xb5\x5e\xcf\xad\xc2\x51\x22\x73\x3a\x48\x88\xc6\x2d\xd9\xb9\x65\xba\x48\x90\x2f\xbc\x95\x81\xb7\x32\x10\x39\x72\x92\xb3\xcd\xb0\x5c\x39\x86\x0b\xf8\xd4\x03\x60\x7c\x25\x46\xf6\x0a\x40\x33\x9d\xe2\x08\xfa\x53\xb7\x25\xb8\x76\x5b\x82\xc9\xdd\xac\x3f\xb6\x12\x1b\x57\x60\x23\xe8\x6f\x5e\x0c\x86\x83\x17\xfe\x31\x15\x5c\x13\xaa\x4b\x3b\xe6\xc7\x49\x66\x4c\x95\xb5\x3e\xbd\x99\xde\x7b\x61\xf3\x2b\x64\x3a\x82\xbe\x29\x0c\x35\x8a\xa2\x84\xe9\x75\xb1\x34\x58\x47\xca\xc9\x9f\x52\x4e\x75\xe4\xa1\x3d\xf5\xd0\x9e\x92\x9c\x05\x36\xd0\x04\x68\x04\x7d\x12\x67\x8c\xff\x1a\x2a\x0e\x98\xf0\x72\x9f\xcd\x3f\xf6\x7f\xf8\xa4\x51\x72\x92\x2e\x62\x41\x55\xe9\xe8\xf7\xba\x11\xa3\xa2\x92\x59\x88\x47\xd0\xbf\x16\x12\x81\x2c\x45\xa1\xe1\x10\x82\x9f\x7b\x00\x8a\xae\x31\x43\x35\x82\x37\xf7\xf7\x77\xf3\x71\xfb\x89\x79\x40\x05\x57\x85\x7d\xd2\xf7\x85\x6f\x5e\x11\xfd\x57\x09\x6e\xcd\xe4\x52\xc4\x05\x3d\xb4\xfe\x79\xdc\xeb\x29\x94\x1b\x46\xb1\x72\xc4\xed\xd7\xd4\x33\x4b\x53\xa3\xbf\x61\xb6\x53\x92\x32\x7f\xed\xba\xcc\x29\x4c\x25\x12\x8d\xa5\xde\x51\xe3\xf6\x5a\x25\xc7\x20\x51\x17\x92\xab\xd6\xd2\x3b\xcc\xd3\xdd\x71\x90\x00\x55\x86\xda\x0a\x18\x90\x9c\x0d\x0c\xd0\x65\xde\xd5\xbf\xbc\xd0\x30\x82\xbe\xad\x91\xcd\x59\x89\x76\xbf\x21\xb3\x14\xf1\xce\x08\xfd\x7f\xfd\xf8\xb3\x8f\x70\x63\x63\x12\xb5\x64\xb8\x71\x6d\x46\x69\xa2\x0b\x65\x5a\x73\xb5\x4b\xd3\x42\x80\x69\x05\x8f\xc5\x12\xa9\xe0\x2b\x96\xd8\x2e\x44\x05\xe7\x48\x35\xdb\x30\xbd\xab\x90\x78\x8d\xba\x82\xa1\xbe\x6e\x62\x50\x3f\xff\x76\x00\x12\x7c\x1e\x80\xce\x9d\xc6\x98\xa2\xc6\x8e\xf8\x5d\xda\x85\xca\xf1\xc6\x6d\xd3\xf7\xc6\xd2\xb7\xbb\xef\x3d\xf9\xea\x1d\x54\xb1\x22\x90\x32\xa5\x4d\x9c\xbc\xa2\xea\x08\xc1\x5b\x23\x72\xd4\xbc\x3f\x14\x0a\xb3\xf6\xa3\xc3\x11\x19\x1f\xff\x7a\x47\x85\xe4\x65\x93\xb4\xad\x55\x66\xb6\x34\x7d\x5b\x20\x39\x03\x53\x99\x41\xb8\x5e\xa3\xf6\xac\x65\x16\x88\x1f\xd5\x8f\xf7\x36\xe9\x9f\xff\xb0\x0d\x7a\x77\x3b\xf6\xf6\xb9\xd7\xcb\x50\x29\x33\xe5\xda\x6d\xa0\x6e\x28\x37\x24\xc3\x92\xfe\x94\x55\xa6\x05\x2c\xb1\xee\x32\x18\x5b\x61\x43\x36\x78\x62\x27\x03\x5c\xc0\xd9\xb8\xb4\x70\xbf\xf6\xb2\x66\x94\x97\x5c\xc0\xe2\x60\x25\x1a\xaf\xbe\xf3\x72\xf3\x1c\x69\xad\x74\x01\xc3\xf1\x41\x6f\x2d\x50\x41\x03\x5c\xa3\xe5\x28\x42\x5a\x1a\x18\xba\xbd\x25\x2a\x74\xda\xf0\x2e\xcb\x10\x0d\x11\x43\xa5\x7b\xae\x13\x89\x14\xc4\xe3\xde\x06\x62\xd4\x84\xa5\xaa\x8d\x84\x57\x05\x89\x2a\x17\x5c\xa1\xdb\x91\x5b\x9c\x69\xcc\x2a\xc1\xf6\x16\x1a\x0d\xe7\x4b\xd0\x4e\x85\x78\x34\x44\x2f\x7f\x16\xeb\xc9\xc3\xdc\xa0\x13\x23\xd7\x8c\xa4\xae\xd0\x26\x0f\xf3\xe0\x11\x90\xad\x72\xde\x94\x2a\x1f\x0b\x89\xfb\x4a\xe6\x69\x43\xcd\x8a\x5d\xc0\xf9\x81\x6d\xb4\xc2\x30\x53\x8d\x3d\x30\xee\x5a\xf6\x4e\x69\xcc\xf6\x81\x0e\x61\xbb\xb4\x48\x3f\x0b\x5e\xbb\xe9\x85\xd1\x27\xda\x50\xdf\xe0\xdd\xff\xa7\x1c\x4c\x5a\x98\x79\xae\xa5\xd8\xfd\xa3\x10\xdc\xef\xd2\xf5\x6e\xa6\xa2\x48\xe3\x06\x8e\x4b\x2c\x37\xe1\x8b\xae\x2b\x5f\xe7\xd5\x60\x34\xaa\x61\x76\xfb\x4d\xfb\xc9\x79\x38\x27\x7d\xf7\xad\x3d\xf9\x62\x54\xce\xbe\x15\x95\xe7\x5c\xf9\xae\xdc\xf2\x4a\x6f\x3b\x67\x10\xe6\xa6\x93\xc4\x5d\x25\xbb\x8f\x4f\x28\x54\x3b\x73\xd9\xaa\xd7\x10\x68\x16\x37\x7c\xe8\xa8\xee\x8e\x5c\xac\x13\x2b\xcc\x66\xd5\x08\x6a\x87\x76\x15\xd4\xf3\x2e\xa7\x83\xaa\xfa\x67\xbb\xde\xa1\x1f\x90\x39\x2d\x4a\x2e\x67\x2e\x0f\x98\x0b\xe4\x2f\xe0\xe5\xe1\xc9\xd1\x18\x36\x9d\x2d\xa4\x9a\x40\xa7\x40\x0b\x29\x91\xeb\xd4\xcf\x0c\xe6\x12\x5e\x48\xc8\x08\x51\x7f\x39\xff\x4a\xce\x20\x56\x70\x55\x2c\x51\x72\xd4\xd8\xd0\x7a\xfc\x59\x2d\x4a\x21\x8b\xa3\x5d\x14\x1c\xc5\xaa\xf2\x62\x11\x32\x8e\x7a\xe6\xfb\x57\x98\x12\xdd\x9f\xae\x7b\x13\x76\xf2\x30\xb7\xfb\x75\xe5\x7a\x3e\x3e\x20\x75\xe5\xa5\x7c\x75\xbe\x2c\x39\xc3\x17\x8c\x59\xa6\xe0\xcd\xa4\xae\xc3\x35\x4b\xd6\x0b\xb2\x21\x2c\x25\x4b\x96\x32\xbd\x83\x0b\xf8\xa9\x01\xce\x8a\x2c\x25\xa3\x7e\xce\x15\xaa\x45\x27\x50\x6f\x85\x7c\x5c\x78\xa1\x0b\xf8\xd7\xb8\x77\x30\xa2\xe5\xe6\x3e\xf5\x5a\xc0\x5c\x12\x4d\x60\x8a\xbc\xcc\x94\xc9\xc3\xdc\x3c\x72\x4f\x20\x26\x9a\x2c\xa8\xbb\x0e\x23\x17\xf6\x29\xe3\x5d\xc1\x9a\xed\xb8\xab\x0d\xd2\xe0\x3a\x2c\x88\xdf\x3e\xdc\x02\xd3\x98\x55\xbd\xf3\x4e\xfa\x24\x2d\x24\xc6\xa6\x30\x0d\x11\x51\xa2\x90\x14\x9b\xa5\x30\xe3\x4a\xdb\xef\x55\x89\x14\x45\xde\x6a\x5c\x93\x87\x79\xb9\xfe\xda\x2c\x03\xf3\x77\x0b\x27\xed\x62\x57\x47\x8d\xd1\xf5\x1e\x18\x25\x94\x4d\x50\x1a\x09\xe6\x14\x25\x26\x96\x82\x16\xea\x14\x89\xd2\xa7\x67\x27\x80\x9a\x0e\x8e\x2b\x49\x1f\x33\x2f\x57\x41\xd9\x30\xd2\x48\x85\x8f\x82\xa3\x0a\x0c\x2e\x4f\xa0\xbc\x1e\x52\x7b\xbd\x45\x73\x1d\xb7\xdf\x54\x01\xe0\x5f\x19\x5a\x5d\x38\xab\x15\xfa\x75\xd6\xfe\x2e\x24\x6c\xd7\xc8\x41\x89\xcc\x7e\x1e\xe4\x89\x02\x62\x8e\xf5\xa9\x44\x12\xef\x4c\xf4\x8c\xd5\x36\x2c\x1d\xb1\xda\xab\xbf\xf7\x77\x53\x60\xf1\x09\x2c\x53\xc2\x1f\xed\xa9\xd3\xfc\xd7\x77\x16\x4d\x25\xdb\xfb\x9d\x28\xfa\x27\xb0\x62\x69\x8a\x31\xb0\x95\xfd\x64\x69\x1c\x30\xe9\xf1\xfe\x6e\xda\x46\x72\x93\xd3\x45\xd8\x89\xcb\x09\x8f\xb4\x90\x06\x3f\x1b\xe4\xb6\x92\xf2\xab\x2e\x05\x9c\xfe\x70\xdc\xf6\x77\x36\xb9\x06\x29\xd2\xfa\x33\x5d\x59\xbf\x47\x44\xf2\xe3\xb2\xa0\x94\x12\x94\xd9\x76\x12\xc7\xed\xf7\x30\x92\x2d\x8c\x85\x05\x91\xbc\xce\xd8\x1a\xed\x56\xe2\x42\x8c\x2b\xc6\xcd\x79\x50\xef\x72\xb4\x47\x75\x5e\x64\x4b\xd3\x44\x56\x55\xda\xaa\x36\xf4\xcd\xec\x6e\xa0\x5e\xd9\xb7\xf6\x8e\xb2\x9f\x06\x29\x91\x09\x1e\x48\x4a\x2b\xd4\x06\xf2\x9a\x71\x96\x15\x59\x97\x23\x70\x14\xe3\x8a\x14\xa9\xb6\xb5\xff\x11\xa5\xa8\x4d\x32\xae\xcf\x87\x90\x31\xbe\xf8\xb3\x20\x5c\xbb\xa6\xd6\x84\xf8\x9a\x3c\x7d\x87\x65\xf2\x14\x5a\x3e\x0f\x4e\x6c\x51\x64\xc8\x51\x38\x50\x26\x77\x33\x98\xbb\x53\x67\x40\x9f\xea\xe3\x25\x7c\xf2\x7a\x8e\x46\x99\x70\x97\xda\x25\x37\xdc\xd7\x6b\x53\xae\x15\x88\x1c\xa5\x1b\x3d\xe6\x1c\x75\x7b\x75\x80\xc5\x97\xa6\x3a\x4e\xbd\x7b\x25\xa3\x49\x02\xc2\xb1\xb7\x84\x99\x43\x54\x2e\x14\xd3\x42\xee\xda\xb1\x4b\x98\x0e\xa6\xe3\xd9\x5e\x2e\xaf\x89\x5a\x97\xfc\xc2\x58\xa2\x22\xcb\x98\xee\xb2\xe2\x56\xf6\xa2\xd5\x31\xce\xb4\x44\xb4\x5b\xa5\x29\x12\xee\xda\x86\x99\x00\x9d\x66\x8d\xf0\xc2\xd0\x18\x6c\x0e\xd5\x28\x32\xdd\xd6\x32\x27\x3b\x3d\xda\xba\xf6\xe1\x22\x76\x7a\x2f\x1b\x7a\xef\xeb\x08\x27\xc2\x8e\x45\xc7\x7e\xb2\x9c\xa5\xb8\xe7\x83\x08\xf0\xf9\xa9\x61\x67\xea\x34\x64\x3d\x59\x03\x3d\x5a\x2e\xda\xb9\x1a\x68\xdd\xa5\x44\x9b\xc8\x01\xd3\x0e\x04\x27\x18\xdb\xf4\x89\x40\x16\xdc\x7e\xbe\x0f\x58\x86\xb7\x98\x97\x8a\x17\xf0\xef\x76\x43\x28\xb7\x14\x24\x85\x5d\xea\xc8\x15\xbf\x9b\x06\xe5\x29\xf9\xb8\x0f\x3a\x6d\x4e\xe7\xc2\xff\xc5\xc1\x36\x5c\x5b\xf0\xc1\xa0\x0e\x1a\x4a\x38\xac\x1b\x3c\x61\x8e\x54\xa2\xbe\xc2\xdd\xcc\xed\xd2\xd4\xd5\x84\x52\x54\x0d\xa2\xa6\xac\xd4\xe2\x11\x77\x8b\x16\x45\xae\x6d\x38\xad\x2b\xdc\x55\x76\xc8\x21\x3b\x6e\xc1\x98\x6b\xb0\x05\x63\xeb\x9d\x9b\xa2\x87\x4d\x54\x63\xd6\x31\xfe\xef\xc2\xa5\x7d\x2c\x6b\x32\xa8\x3c\x7f\x16\x13\x92\xe7\x5d\x60\xdc\x23\x27\x5c\x3f\xb3\x01\xed\x04\xda\x1b\xbf\x23\x4a\x6d\x85\x8c\x9f\xd1\xcc\x4b\x91\x90\x28\xd9\x00\x14\xcb\xea\x9b\xfd\x73\xe8\x07\x62\xce\xf5\x97\x65\x6a\x19\x78\x08\xa5\xa2\xe0\xda\x55\x9d\xfd\x4c\xd4\xf8\x1c\xe3\x67\xba\x23\xc7\x35\x69\x3b\xc2\xa7\x11\xa4\x82\xc4\xb0\x24\xa9\xe9\xf4\xf2\xb8\x05\xb0\x33\x31\x77\x1f\xef\x27\xfe\x25\x0d\xa8\xa7\x29\x43\xae\x67\x31\x1c\x91\x47\x32\xb2\xc8\x5f\x1e\x87\x9e\x53\x2b\xd0\x05\xb7\x53\x75\x19\xe8\xd5\x4b\x98\xba\x2c\xb8\x04\x2c\x8b\xaa\x9b\x4e\x5f\x75\xd1\x69\xbb\xeb\x36\x87\xf4\xb6\x53\x41\xcb\x5a\xfd\x5a\x1a\xdd\xce\xc0\x43\x44\xba\xfc\xf4\x5d\xfe\x09\xa4\x11\x2b\x73\x28\x24\xe9\xa3\xf9\xd7\x45\xc7\xc6\xa4\x4a\xfd\x56\x70\xea\xf7\x76\x06\xc6\xbb\x57\xde\x7e\x39\x27\xbf\xfa\x1a\x4e\xfe\x03\x58\x52\xfb\x7d\x7b\x83\x96\x07\xa7\xf7\x4e\xca\xd8\x3c\xb4\xb6\x3d\x73\xfc\x6a\xae\x09\x8f\x89\x8c\x17\x97\xc3\xc5\x66\xf8\x3c\xcb\x1a\xfe\x6d\x2c\xeb\xfc\x6f\x63\x59\x2f\x03\x96\xd5\xfb\x5f\x00\x00\x00\xff\xff\x4a\x14\xa7\x66\xd7\x20\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 8407, mode: os.FileMode(420), modTime: time.Unix(1536706808, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
