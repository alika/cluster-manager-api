// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3b\x5d\x73\xdb\x38\x92\xef\xfa\x15\x5d\x7a\x39\xf9\x2a\x96\xe2\x8f\xcc\xe4\xec\xcd\xcd\x6a\xe5\xd9\x44\x95\xd8\x71\x45\x9e\xa4\xe6\x49\x05\x91\x2d\x0a\x6b\x12\xe0\x00\xa0\x14\xcd\x56\xfe\xfb\x15\x3e\x48\x02\x24\x25\x3b\x8a\x73\xb9\x9a\x3a\x57\xcd\x44\x02\xba\x1b\x8d\xfe\x42\x37\xd0\x1a\x8d\x60\xc2\xf3\xad\xa0\xc9\x4a\xc1\xe9\xf3\x93\x97\x30\x23\x99\x2c\x58\x02\xb3\xab\x19\x4c\x52\x5e\xc4\x70\x43\x14\x5d\x23\x4c\x78\x96\x17\x8a\xb2\x04\xee\x90\x64\x40\x0a\xb5\xe2\x42\x0e\x7b\xa3\x51\x6f\x34\x82\x77\x34\x42\x26\x31\x86\x82\xc5\x28\x40\xad\x10\xc6\x39\x89\x56\x58\xce\x3c\x83\x8f\x28\x24\xe5\x0c\x4e\x87\xcf\x61\xa0\x01\xfa\x6e\xaa\x7f\x74\xa9\x49\x6c\x79\x01\x19\xd9\x02\xe3\x0a\x0a\x89\xa0\x56\x54\xc2\x92\xa6\x08\xf8\x39\xc2\x5c\x01\x65\x10\xf1\x2c\x4f\x29\x61\x11\xc2\x86\xaa\x95\x59\xc7\x51\xd1\x9c\xc0\xef\x8e\x06\x5f\x28\x42\x19\x10\x88\x78\xbe\x05\xbe\xf4\x01\x81\x28\xc7\xb4\xfe\x5b\x29\x95\x5f\x8c\x46\x9b\xcd\x66\x48\x0c\xc3\x43\x2e\x92\x51\x6a\x41\xe5\xe8\xdd\x74\xf2\xeb\xcd\xec\xd7\xe3\xd3\xe1\x73\x87\xf4\x1b\x4b\x51\x4a\x10\xf8\x47\x41\x05\xc6\xb0\xd8\x02\xc9\xf3\x94\x46\x64\x91\x22\xa4\x64\x03\x5c\x00\x49\x04\x62\x0c\x8a\x6b\xa6\x37\x82\x6a\xb9\x3d\x03\xc9\x97\x6a\x43\x04\x6a\x32\x31\x95\x4a\xd0\x45\xa1\x02\x99\x95\x2c\x52\x19\x00\x70\x06\x84\x41\x7f\x3c\x83\xe9\xac\x0f\xff\x18\xcf\xa6\xb3\x67\x9a\xc8\xa7\xe9\xdd\x9b\xf7\xbf\xdd\xc1\xa7\xf1\x87\x0f\xe3\x9b\xbb\xe9\xaf\x33\x78\xff\x01\x26\xef\x6f\xae\xa6\x77\xd3\xf7\x37\x33\x78\xff\x4f\x18\xdf\xfc\x0e\x6f\xa7\x37\x57\xcf\x00\xa9\x5a\xa1\x00\xfc\x9c\x0b\xbd\x03\x2e\x80\x6a\x69\x62\x6c\x44\x37\x43\x0c\x58\x58\x72\xcb\x92\xcc\x31\xa2\x4b\x1a\x41\x4a\x58\x52\x90\x04\x21\xe1\x6b\x14\x4c\x5b\x42\x8e\x22\xa3\x52\x6b\x55\x02\x61\xb1\x26\x93\xd2\x8c\x2a\xa2\xcc\x50\x6b\x5f\xc3\x9e\x06\xb9\xa6\xd1\x8a\x60\x0a\x1f\x91\xe1\x9f\x94\xc0\xdf\xb2\xb5\xfd\xf4\xf7\x24\x23\x34\x1d\x46\x3c\xfb\x6f\x0d\x37\x4e\xe9\x3d\x81\x77\x44\x48\x64\xf0\x37\xa2\xbf\x0d\x53\xf3\xcd\x07\xec\xc9\x2d\x53\xe4\x33\xbc\x82\x7e\x2e\xb8\xe2\x67\xfd\xcb\x5e\x2f\x27\xd1\xbd\x66\x35\x4a\x0b\xa9\x50\xcc\x33\xc2\x48\x82\x62\x4e\x72\x7a\xd9\xeb\xd1\x2c\xe7\x42\x41\x3f\xe1\x3c\x49\x71\x44\x72\x3a\x22\x8c\x71\xc7\xf6\xd0\x90\xe9\x5f\x56\x60\xe6\x7b\x74\x9c\x20\x3b\x96\x1b\x92\x24\x28\x46\x3c\x37\xa0\x9d\x68\xbd\x9e\x9d\x85\x41\x22\xf2\x68\x98\x10\x85\x1b\xb2\xb5\xd3\xd1\x3c\x41\x36\x77\x54\x86\x8e\xca\x90\xe7\xc8\x48\x4e\xd7\xa7\xe5\xcc\x11\xbc\x82\x7f\xf7\x00\x28\x5b\xf2\x0b\xf3\x09\x40\x51\x95\xe2\x05\xf4\x27\x76\x4b\x70\x6d\xb7\x04\xe3\xdb\x69\xff\xd2\x40\xac\xad\x83\x5d\x40\x7f\xfd\x7c\x78\x3a\x7c\xee\x86\x23\xce\x14\x89\x54\x49\x47\xff\x31\x92\x69\x52\xa5\xaf\x4f\x6e\x26\x77\x0e\x58\xff\x15\x22\xbd\x80\xbe\x76\x0c\x79\x31\x1a\x25\x54\xad\x8a\x85\x96\xf5\x48\x5a\xf8\xe3\x88\x45\x6a\xe4\x44\x7b\xec\x44\x7b\x4c\x72\xea\xd1\x40\xad\xa0\x0b\xe8\x93\x38\xa3\xec\xef\x3e\xe2\x90\x72\x07\xf7\x45\xff\x63\xfe\x87\x9f\x15\x0a\x46\xd2\x79\xcc\x23\x59\x32\xfa\xad\x6c\xc4\x28\x23\x41\x8d\x88\x2f\xa0\x7f\xcd\x05\x02\x59\xf0\x42\xc1\x2e\x09\x7e\xe9\x01\xc8\x68\x85\x19\xca\x0b\x78\x73\x77\x77\x3b\xbb\x6c\x8e\xe8\x81\x88\x33\x59\x98\x91\xbe\x73\x7c\xbd\xc4\xe8\x5f\x92\x33\x43\x26\x17\x3c\x2e\xa2\x5d\xf3\x5f\x2e\x7b\x3d\x89\x62\x4d\x23\xac\x18\xb1\xfb\xd5\xfe\x4c\xd3\x54\xe3\xaf\xa9\x89\x94\xa4\xb4\x5f\x33\x2f\xf2\x08\x26\x02\x89\xc2\x12\x6f\x10\x7c\xbd\x96\xc9\x11\x08\x54\x85\x60\xb2\x31\xf5\x01\xf3\x74\x7b\xe4\x19\x40\x65\xa1\xc6\x03\x86\x24\xa7\x43\x2d\xe8\xd2\xee\xea\xbf\x9c\x4b\x05\x17\xd0\x37\x4e\xb2\x3e\x29\xc5\xdd\x0f\x80\x16\x3c\xde\x6a\xa0\xff\xac\x87\xbf\x38\x15\x07\x3b\x13\xa8\x04\xc5\xb5\x8d\x33\x52\x11\x55\x48\x1d\x9b\xab\x6d\xea\x18\x02\x54\x49\xb8\x2f\x16\x18\x71\xb6\xa4\x89\x09\x43\x11\x67\x0c\x23\x45\xd7\x54\x6d\x2b\x51\xbc\x46\x55\xc9\xa1\xfe\x1c\x0a\xa1\x1e\x3f\x5c\x02\x09\xee\x17\x40\xe7\x4e\x63\x4c\x51\x61\x87\x02\xaf\xcc\x44\xc5\x78\xf0\x35\xe4\x3d\x98\x3a\x9c\x7d\xc7\xc9\x57\xef\x80\xc4\xff\x2a\xa4\x02\xb2\xd7\x1c\xc7\x06\xc8\xf1\x78\xc3\x63\x94\x30\x08\xc6\xc2\x2d\x05\x53\xdf\x60\x93\xc5\x77\x30\x49\x02\x29\x95\x4a\x9b\xa3\xa3\x27\x3b\x2c\xed\x9d\x06\x19\x84\xdf\x77\x59\x9c\x9e\x7b\x6a\xab\x1b\x69\x1e\x1f\xd8\x11\x65\x52\x91\x34\x85\x01\x17\x20\xd0\x7d\x3b\x02\x45\xd3\xd4\xd3\xdc\x6d\xa9\xd5\x3b\x33\x0e\x83\xc6\x40\xb8\xab\xc6\xe4\xd3\x85\x13\xcb\xd5\x61\xaa\xdb\xb1\xd1\x15\xa6\x19\x44\x2b\x22\x54\x09\x7d\xa7\x13\xc9\x8d\x46\x59\xa0\x3e\x15\x94\x28\x22\x93\xd2\x52\x13\x7b\x34\x28\xac\x88\x04\x92\x0a\x24\xf1\x16\x16\x88\x0c\x62\xcc\x53\xbe\xc5\xb8\xce\x33\x25\xc9\xd0\x9c\x9c\x95\x10\xa7\x76\xcd\x37\x98\x66\x13\x43\x65\xd0\x1c\x09\xc5\xd8\x9c\x7d\x3a\x39\xea\x4d\x1f\x26\x45\x17\x1f\xaa\xed\x36\xc4\x57\xc7\x2c\x6f\x97\x8d\x81\xae\xb8\xf5\x04\x7b\x6c\x47\xae\x70\x97\xbb\xfc\xb9\x10\xac\x4c\x85\x4c\x02\x25\x32\x73\x00\xbb\xc3\x9f\xe4\x14\xf4\xf9\xeb\xf9\xc2\x6b\x54\xae\x36\x99\x7a\xe0\x83\x7a\xb8\xe5\xe2\x6e\xfc\xc9\xdc\xdb\xb1\xfb\xb8\xbd\x15\x79\x22\x48\x8c\x6e\x31\x69\x4e\x48\x02\x09\x5d\x23\x6b\x05\xe8\xd7\xa8\x7e\xb3\xe0\x2e\x2a\x35\x77\xb8\x73\xb6\xb5\xe7\x9d\x90\x4f\x1e\xe4\xdc\x06\x1f\x3a\xa0\x94\xc2\x2c\x57\xba\xc6\x2a\x25\xd2\x3e\xa0\x42\xa6\x61\x10\x7e\x0f\xf7\x18\xce\x3d\xf5\xf1\xd4\xde\xd5\xd7\x78\x69\x91\xc7\x44\xe7\x13\x1b\x09\x91\xc0\x18\x99\xa2\x24\x95\xba\x4c\x8e\x9d\xfe\xdb\x3b\xd7\x18\xe3\x4f\xb3\x89\x07\x3f\xe8\x1a\x6d\x4a\xa1\x0d\xf1\x74\xb2\xa8\x69\x8e\xc8\x46\x7e\x9b\x2c\xfe\x2c\x04\x7e\xa5\x34\x34\x4a\x97\x3c\x1a\xe3\x9d\x12\x69\xc0\x7c\x1f\x99\xe8\x45\x1e\x2f\x95\x2f\xbd\x1e\xb2\x22\xb3\x87\x79\x5c\x15\x12\xba\xec\x5e\x52\x86\x31\xbc\x82\xe7\x16\x56\x1b\xce\x2b\x38\x71\x5f\x8c\xe4\x5e\xc1\xa9\x2b\x1b\xb3\x0d\x31\xdf\xcf\x2e\x35\xc5\x0c\xa5\xd4\xa5\xf3\x84\xa4\xe9\x82\x44\xf7\x75\x75\x72\xb7\x42\xf8\xed\xc3\x3b\xed\x71\x91\x3e\x78\xcd\xac\xe2\x66\x5a\x2a\x41\x59\xa2\x6b\xb6\x7a\x1d\x87\x32\xbd\x2a\x2f\x60\x04\xfe\x51\xa0\x54\x3e\x82\x1b\x9a\xd3\xd8\x32\xe4\x33\xd0\x28\x6e\x6a\x46\x6e\xf4\x49\xec\x68\x96\xa5\x83\xe2\xfa\x74\xaf\x92\x55\x8c\xfd\x55\xf4\xa9\xdd\xe2\x2b\x2f\xa5\x56\xde\x70\x98\x68\x66\x20\x82\xa5\x4b\xe9\xce\x72\x8c\x6a\xa4\x4a\x7c\xa3\x51\x2d\x2a\xef\xb8\xb1\x74\xca\x89\xa8\xfc\xd0\x92\x72\xab\x4c\xf3\xaa\xc1\x15\x9a\x0b\x1b\x2e\xcc\x9d\x98\xbf\xdb\x0d\x91\xfe\x5e\x61\xb1\xb5\xd7\x65\xbe\x84\x17\x9c\xa7\xc0\xef\x5b\xfb\x8e\x51\x11\x9a\xca\xa6\x00\x1d\x2a\x08\x94\x39\x67\xd2\x66\x39\x65\xb4\x57\x98\x55\x80\x4d\x3d\x05\xc5\xd7\x63\x94\x94\x72\x7e\x8f\x31\x14\xf9\x5e\x15\x8d\x3f\xcd\xc0\xf3\x37\x33\xdc\x08\x67\xd6\xaa\x6b\x3d\x18\x1f\x6d\x23\x35\xbd\xbe\xb4\xff\xb3\xcb\x2e\x5e\x4b\x0d\x4b\x18\x90\x8d\x73\xc9\x91\xf5\x91\x11\xaa\xe8\xc8\xe0\x54\x1e\xe7\xd9\xc3\xf9\x0e\xa9\x34\xb4\x3a\x95\x81\x48\x28\xb3\xc9\xe5\x56\x2a\xcc\xda\x7a\xf3\xb5\x70\x65\x14\xb7\x57\x17\xcd\x7a\xd2\x37\x26\xa2\x80\x06\x6b\xff\x87\xb4\x52\x57\xdc\x66\xc5\x7c\xfb\x97\x53\xc8\x21\x0e\xfa\x62\xb7\x44\x1b\xaa\x9c\xf0\x22\x8d\x03\x6d\x96\x05\x86\x4e\xa5\x77\x3a\xe1\xac\xba\xf9\xd8\x11\x14\xdd\xd5\xc8\x6e\x47\x73\x75\x67\xcd\xc9\xa3\x75\x73\x72\xa8\x6e\x4e\xff\x77\x9c\xa5\xaa\x9a\x0f\x75\x18\x87\xf4\xae\xb3\x98\xc7\x5c\x47\xdb\xb8\x2b\xac\xb5\xc5\xed\x03\xd5\xcc\x5c\x35\x62\x9a\xaf\x37\x73\x88\x9d\x74\x0a\xaa\x03\xda\x39\x58\x2d\x58\xdf\x45\x65\x60\x23\x1d\xd8\x95\x8d\x9c\x75\x31\xed\x85\x8a\xff\xdb\xac\x77\xe0\x7b\x97\x7f\x3a\xd3\xb0\x77\x7f\xfa\xe3\x0e\x72\x1e\x7c\xd3\xae\x76\x9f\xe3\x9d\x71\xb1\xb2\xcf\x63\x88\x0a\x21\x90\xa9\xd4\x9d\xab\xd4\xfa\x0f\x17\x90\x11\x22\x1f\x4c\x2d\xca\xf2\x93\x2f\xe1\x6d\xb1\x40\xc1\x50\x61\x80\x75\xff\x52\xce\x4b\x20\x23\x47\x33\xc9\x19\xf2\x65\xc5\xc5\xdc\x2f\x5e\xeb\x14\xd2\x2d\xa1\x3d\xbe\x9d\xb8\xb4\x92\x97\xf1\xa7\x99\xd9\xaf\xf5\xfe\xb3\xcb\x1d\x50\x6f\x1d\x94\x73\xf6\xf3\x1d\x70\x1f\xaf\x3f\x11\x81\x06\xb4\xca\x1a\x7f\x2e\xb3\xd1\x47\xa4\x2d\x54\xc2\x9b\x71\xed\xb3\x2b\x9a\xac\xe6\x64\x4d\x68\x4a\x16\x34\xa5\x6a\x6b\xa3\xaf\xb7\xcb\x25\x59\x08\x1a\xb9\xbc\x41\xe7\xf7\x81\xe8\x51\x6d\xb8\xb8\x9f\x3b\xa0\x57\xf0\xd3\x65\x6f\xa7\xf6\x4b\x41\x04\xd9\xac\x16\xe2\x15\x51\x04\x26\xc8\x4a\xab\x1a\x7f\x9a\xe9\x21\x3b\x02\x31\x51\x64\x1e\xd9\xcf\xbe\x96\xfd\x10\xa9\xb9\x2b\x68\x78\x12\x74\x45\x60\xbf\x56\xf1\x9d\xe7\x1f\xbf\xbf\x07\xaa\x30\xab\xc2\xf6\xad\x70\x06\x5d\x08\x8c\xb5\x13\xeb\xc4\x4e\xf2\x42\x44\x18\xba\x8d\xb9\x50\x62\x11\x42\x22\x78\x91\x37\x82\xdc\xf8\xd3\xac\x9c\x7f\xad\xa7\xed\x85\x19\x8b\x70\x6e\xa1\xad\x9e\x6b\xad\xd1\x68\xd5\x12\x46\x29\xca\x50\x28\x81\x31\x5a\x44\x81\x89\xa9\x7e\x0a\x79\x8c\x44\xaa\xe3\x93\x67\x80\x2a\x1a\x1e\x55\x90\x55\xbe\x9f\x58\x9b\x3f\xb9\x6c\x13\x09\x4c\xe1\x4f\xce\x50\x7a\x04\x17\xcf\xa0\xfc\x7c\x1a\x99\xcf\x1b\xd4\x9f\xe3\xe6\x4a\x95\x00\xdc\x92\x3e\xd5\xb9\xa5\x5a\x49\xbf\xb6\xda\x7f\x72\x01\x9b\x15\x32\x90\x3c\x33\x6f\xcf\x2c\x91\xa0\x2d\xbc\xbc\x15\x8c\x8c\x35\xc5\x4d\xb1\x74\xe8\xaa\xe5\xab\x1f\x6f\x27\x40\xe3\x67\xb0\x48\x09\xbb\x37\x15\xaa\xfe\xaf\x6f\x29\x6a\xaf\x37\xdf\xb7\xbc\xe8\x3f\x83\x25\x4d\x53\x8c\x81\x2e\xcd\x7b\xb8\x66\x40\x9b\xc7\xc7\xdb\x49\x53\x92\xeb\x3c\x9a\xfb\x51\xbb\x4c\x2e\x30\x2a\x84\x96\x9f\x51\x72\x13\x49\xba\x59\x6b\x02\x55\xd5\xd5\xe0\x77\x3a\xbe\x06\xc1\xd3\xfa\x0d\xb8\xf4\xdf\x01\x11\xec\xa8\x74\x28\x29\x79\x44\x4d\xe8\x89\xe3\xe6\x3a\x94\x64\x73\x4d\x61\x4e\x04\xab\x2d\xb6\x96\x76\xc3\x70\xc1\x16\xac\x40\x40\x6d\x73\x34\xcf\x40\xac\xc8\x16\x3a\x88\x2c\x2b\xb3\x95\x4d\xd1\x87\xd6\x1d\x48\xbd\xa2\x6f\xe8\x0d\xb2\x17\xc3\x94\x88\x04\x77\x18\xa5\x01\x6a\x0a\xf2\x9a\x32\x9a\x15\x59\x17\x23\x30\x88\x71\x49\x8a\x54\x19\xdf\xff\x13\x05\xaf\x49\x52\xa6\xce\x4e\x21\xa3\x6c\xfe\x47\x41\x98\xb2\x41\x2d\x14\xf1\x35\xf9\xfc\x0d\x94\xc9\x67\x9f\xf2\x99\x77\x17\x30\x1a\xe9\x44\xca\x3f\x7c\xc6\xb7\x53\x98\xd9\xcb\x4e\x2f\xd5\xaa\x6f\x35\xe1\xdf\x0e\xcf\xa6\x5c\x5a\xdd\x25\x76\x99\x96\xb6\xf1\x9a\xe9\xd9\x12\x78\x8e\xc2\x1e\x53\xba\x2e\x7d\xff\x76\x47\x19\x53\x92\xea\xb8\x6c\x6d\xb9\x8c\x22\x09\x70\x9b\xe9\x25\x54\x17\xa5\x39\x97\x54\x71\xb1\x6d\xea\x2e\xa1\xca\x3b\x49\x4f\x5a\xb6\xbc\x22\x72\x55\xe6\x22\x9a\x52\xc4\xb3\x8c\xaa\x2e\x2a\x76\xa6\xa5\xad\x8e\xe3\x4c\x09\x44\xb3\xd5\x28\x45\xc2\x6c\xd8\xd0\x27\x40\x27\x59\x0d\x3c\xd7\x29\x0f\x86\x07\xf0\x68\xa4\xa3\xad\xc9\xb2\xcc\xe9\xd1\xc4\x35\x83\xf3\xd8\xe2\x9d\x07\x78\x1f\x6b\x0d\x27\xdc\x5e\x7b\x99\x4c\x29\xcb\x69\x8a\x2d\x1e\xb8\x27\x9f\x17\x01\x9d\x89\xc5\x10\xf5\xc9\xea\xe1\x45\xe5\xa4\x39\x57\x3d\xac\xdb\x94\x28\xad\x39\xa0\xca\x0a\xc1\x02\xda\xab\xb7\x11\x88\x82\x99\xde\x10\x2f\x23\x71\x14\xf3\x12\xb1\x23\x69\x28\xb7\x34\x6d\x14\x68\x1d\xb6\xe2\x76\x13\xa4\x47\x65\xee\xee\x94\x1e\x85\xa7\x73\xe1\xda\x59\x4c\xc0\x35\x0e\xef\x1d\xd4\x5e\x40\xf1\x0f\xeb\x20\x4f\x98\x61\x24\x50\xbd\xc5\xed\xd4\xee\x52\xfb\xd5\x38\x8a\x50\x06\x49\x9d\x34\x50\xf3\x7b\xdc\xce\x1b\xe9\x74\x4d\xc3\x62\xbd\xc5\x6d\x45\x87\xec\xa2\x63\x27\x34\xb9\x20\x5b\xd0\xb4\x3e\xd8\x53\x74\x37\x89\xea\x98\xb5\xd5\xc1\x37\xc9\xa5\x59\x11\x86\x19\x54\x9e\xef\x95\x09\xc9\xf3\x2e\x61\xdc\x21\x23\x4c\xed\xd9\x80\xb2\x00\xcd\x8d\xdf\x12\x29\x37\x5c\xc4\x7b\x30\xf3\x12\xc4\x4f\x94\x8c\x02\x8a\x45\xd5\x10\xb2\x4f\xfa\x1e\x98\x65\xfd\xbc\x34\x2d\x2d\x1e\x12\x45\xbc\x60\xca\x7a\x9d\xb9\x76\x0b\xae\xb7\xdc\x99\x6e\x13\xe9\x3a\x69\x1b\xe0\xe7\x0b\x48\x39\x89\x61\x41\x52\x1d\xe9\xc5\x51\x43\xc0\x96\xc4\xcc\x76\x86\x8c\xdd\x22\x81\xa8\x27\x29\x45\xa6\xa6\x31\x0c\xc8\x3d\xb9\x30\x92\xbf\x3a\xf2\x39\x8f\x0c\x40\x97\xb8\x2d\xaa\xb5\x40\x87\x5e\x8a\xa9\x8b\x82\x35\xc0\xd2\xa9\xba\xd3\xe9\xb7\x5d\xe9\xb4\xd9\x75\x33\x87\x74\xb4\x53\x1e\x95\xbe\xfa\xb5\x69\x74\xd3\x02\x77\x25\xd2\xe5\x33\x4f\xd9\x5f\x13\xe8\x4a\x17\x90\x24\xbd\xd7\xff\x5a\xed\x18\x9d\x54\xa6\xdf\x50\x4e\xbd\x6e\xa7\x62\x1c\x7b\xe5\xd7\xc7\xe7\xe4\x6f\xbf\x26\x27\x7f\x82\x2c\xa9\xb9\x5e\xeb\xa0\x65\x5e\xa5\xdf\x99\x32\x86\x05\x6e\x93\x33\x9b\x5f\xcd\x14\x61\x31\x11\xf1\xfc\xea\x74\xbe\x3e\xdd\x9f\x65\x9d\x7e\xb7\x2c\xeb\xec\xbb\x65\x59\xe7\x5e\x96\xd5\xe9\x0e\x5e\x61\x5c\x79\xc4\x35\x89\x56\x54\x57\x1b\x1b\x53\xdc\xe8\x63\x52\x50\x89\x2d\xf3\xae\x8c\xc3\x12\x71\x68\x86\x56\xc4\x99\x12\x3c\x9d\xe7\x29\x61\x38\x67\xa6\xc1\xc6\xb7\xb5\x27\x58\x42\x57\xd0\x28\x2a\xda\xe7\x5e\xdc\xa0\x12\xe4\xca\x5c\x71\x2e\xb4\xd1\xad\x49\x5a\x20\xa4\xf4\x1e\x81\xe6\x17\xa6\x35\x52\xad\x88\xaa\x3a\x2b\x08\xac\xa9\x50\x05\x49\x61\x7a\x3b\xd2\xd3\x25\x25\x1d\xb4\x75\xb0\xb4\xcf\x45\x55\xb3\x1f\x44\x85\x54\x3c\x43\x21\x5d\x7d\x6f\x1a\x68\x6d\x22\x93\x15\x8c\x46\x3a\x90\xee\xbe\xf6\x21\x39\x9d\x23\x8b\x73\x4e\x8d\x03\x86\xb7\xb6\xf5\xad\xcb\x3b\xb2\xc0\x34\x0c\x53\xa5\xc9\x13\x48\xf5\xe4\xc3\xb7\x39\x66\xe3\xdd\x08\x76\xae\x91\x7e\x04\xf7\x32\xee\x45\xb2\x6a\xa3\xd5\x92\xae\xf8\x6c\xeb\x23\xe0\xb4\x90\x5a\x52\x99\x3d\xa5\x67\xb3\x37\x1d\xc7\x55\x05\xd2\xe4\x7a\xc5\xa5\xda\x83\x67\xa6\x9b\xc7\xab\x51\x6a\x07\x8e\x75\x0a\x33\xdb\x3c\x55\xef\x5f\xca\xaa\x66\xa8\xca\x45\x6b\xb6\x60\xcc\x76\x68\x2d\x49\x6f\x1b\xa8\x04\xce\xd2\x2d\x10\xc8\x88\xbd\x10\x5a\x96\x6d\xde\x98\xc6\xa6\xeb\xd9\xbe\x5c\x0e\x77\x9c\xe8\xe7\xc1\xda\x46\x1b\xb2\x5a\x36\x73\xde\x10\x9a\x7c\xd3\x14\x1c\x52\xd3\x62\xda\xfd\x4f\xde\x3d\x7f\x79\xbe\xdb\x5e\xa9\xda\x29\x5c\xd3\x91\xe9\xd0\x0e\xcf\xd1\xf2\x79\x26\xbc\x52\x95\x39\xd1\x31\x73\x37\x19\xca\x9a\xd6\x68\x51\x7c\x45\x99\x94\x98\x71\x13\xb4\x0d\x25\xd3\x17\x63\x7b\xcd\x6d\x47\xd4\xa8\xea\x88\x08\x5f\x67\xeb\x3a\xc0\x3b\xae\xec\xd5\xa7\xe3\xa9\x7a\x39\x3f\xde\xd0\xb8\x1c\xfd\xa5\x84\x9d\x59\x8e\xa9\x82\x15\x59\x63\x08\x6a\x1a\x7d\x21\x17\x74\x4d\x53\x4c\x50\xfe\x52\x17\x81\x65\x13\xb6\x81\xf3\x75\x58\x89\x44\xda\x48\x42\x95\x1f\x70\x5c\x34\xb0\x84\x9d\x7c\x5b\x77\x3b\x7a\x72\xce\x6a\x3a\xfe\x05\xe2\xa3\x1f\x45\x7e\x3a\xf4\x51\xe4\xe7\xa7\x7d\x14\x79\x79\xd8\x83\xd5\x7f\xed\x33\xe4\xe6\x9b\x32\xb1\xfa\xae\x4b\x76\x59\x18\x3f\x5f\x16\x69\xbb\x6c\x07\xef\x8e\xdc\xd1\x97\xb0\x41\x81\xb6\xdd\xc8\xb7\xad\x72\xf9\xe6\x2b\x4a\x47\x47\xdc\x13\x3b\x96\xe1\xae\x45\xa1\x79\x59\xec\x7e\x11\x30\xcf\x08\x4b\x9a\xcf\xf7\xa6\xab\x6d\x86\x4a\x27\x82\x56\xe3\xaf\x91\xa1\xa0\x51\xdd\xf3\x66\xbb\x04\x7d\xc7\x79\xb4\x75\x9d\x1f\x6a\x5d\x2f\x9e\xd6\xba\x7e\x3a\xcc\xba\x7e\xde\xab\xce\x1f\x6d\x5e\xed\x56\xc4\x1f\x6d\x5d\xa4\xdb\xbc\x6e\xca\xc6\xd1\x72\xad\xbf\x92\x41\x8d\xa1\x60\xf4\x8f\x02\x81\xba\xdf\x3c\xc5\x2e\x7b\x6b\xf6\xa4\x74\x75\xfd\xfc\x7c\x98\x5d\xbe\xdc\x67\x07\x3f\xda\x2c\x5b\xf1\xa3\xf3\xbd\xd1\xaf\xbd\x6c\x03\x6e\x86\x4c\xed\xcd\x47\x9b\xe8\x2e\xa3\xe0\x0e\xdf\x5e\x51\xd4\xbf\x3a\x69\x24\x00\xdd\x09\x45\xd0\x1a\x62\xb8\x6d\x5c\xb7\x56\x5a\xcb\xf9\xce\x57\x5b\x8b\xc8\x76\x58\xf9\x79\x88\x43\x04\x3a\x7d\xd8\x16\xd6\x01\x43\xa9\x4f\xf5\x2d\xc9\x52\x38\x36\x53\x1f\x75\x62\x2d\x87\x66\x44\xe7\x93\xc8\x94\x3c\x6a\x65\xde\xed\x3c\xee\x81\x9e\xd6\xee\xfe\xa4\x83\x5d\xe0\xc7\x74\xc7\x74\xf4\xf2\xb8\x52\x0c\x8d\x68\x23\xce\xa4\x66\x50\x8b\x49\x27\xc7\x2e\x1b\xec\x30\xac\x56\x1b\xc6\xfe\x2e\x5f\x2f\xb6\x12\xd6\x6c\x7c\x71\xab\xec\xee\x7b\x31\x6c\xbb\x1c\xd4\xbe\xad\xe5\x5c\x4a\xaa\xf3\x3c\xfb\x03\x54\xc6\x37\x9d\x59\x5e\x85\xd3\x74\xb3\x56\x3b\xef\xff\xab\xb7\xa9\xde\x0e\xd9\x1b\x22\x9b\x52\x61\xe6\x6a\x86\xff\xd2\x5d\x27\xbc\x38\x2c\x36\xff\xb4\x47\x4b\x9d\xa1\x99\x4a\x5d\x22\x57\x31\x79\x77\x1f\xa3\x47\xb6\xf9\x43\xa3\xbd\xbd\x6e\x07\x0a\xb0\xbb\x23\xe6\x60\x7b\x3a\xfd\x7a\x7b\x3a\x3b\xd4\x9e\x6a\xdd\x57\x9c\x44\x2b\x9d\xfc\x5a\xbc\x46\xaf\x89\x9b\xfa\x9a\x3e\x93\xd1\x28\xd0\x40\xd8\x69\x12\x3c\x34\x85\x70\x8d\x5e\x13\xef\x71\x29\x80\xdb\xdb\x6b\x72\x60\xc2\x60\xe6\x3a\xed\xa7\x75\x81\x07\x9d\x37\x6c\x1b\x84\x0d\x61\xca\xd6\xa5\x71\xd7\xed\x14\xec\xbf\x6e\x23\x71\x5c\xdd\xb5\x35\xde\x9b\x77\xae\x24\x30\xe3\x6b\x84\xa5\xe0\xd9\x63\x96\xfb\x60\xc0\xfd\x45\x2d\x81\x6a\xdd\xb0\xf7\x21\xbc\x8a\x6a\x23\xb7\x2c\x62\xd7\xc5\x12\xb4\x2e\x97\x4e\x3a\xae\x4d\xdb\xbf\x01\x7c\x8a\x58\xb0\xe3\x77\x0d\xed\x5a\xa0\x99\xa0\xb4\xfc\xfc\x49\x1a\x7b\x1e\xe0\xec\xa9\xb7\xdd\xfe\xf9\xc2\x77\xdb\xf8\x83\x4f\x31\x0f\x72\xf7\xcd\x9b\xff\x9f\x00\x00\x00\xff\xff\xe7\x29\x99\x9b\xb4\x42\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 17076, mode: os.FileMode(420), modTime: time.Unix(1537432619, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": {apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
