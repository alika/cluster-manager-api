// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x6d\x6f\xdb\xb6\xb7\x7f\xef\x4f\x71\xe0\x37\x37\xb9\x48\xec\x36\xe9\xee\x1d\x92\xe5\x62\x9e\xb3\xad\x46\x9a\x07\x54\x59\x83\xbd\x32\x68\xea\x58\xe6\x35\x45\x6a\x24\x65\xc7\x1d\xfa\xdd\xff\xe0\x83\x24\x4a\x96\xd3\x76\xdd\x80\x05\xd8\x2a\x89\xe7\x1c\x1d\xfe\xce\xd3\x8f\x4a\xc6\x63\x98\xca\x62\xa7\x58\xb6\x32\x70\xf6\xea\xf5\xf7\x90\x90\x5c\x97\x22\x83\xe4\x3a\x81\x29\x97\x65\x0a\x77\xc4\xb0\x0d\xc2\x54\xe6\x45\x69\x98\xc8\xe0\x11\x49\x0e\xa4\x34\x2b\xa9\xf4\x68\x30\x1e\x0f\xc6\x63\x78\xc7\x28\x0a\x8d\x29\x94\x22\x45\x05\x66\x85\x30\x29\x08\x5d\x61\xb5\x72\x02\x1f\x50\x69\x26\x05\x9c\x8d\x5e\xc1\x91\x15\x18\x86\xa5\xe1\xf1\xa5\x35\xb1\x93\x25\xe4\x64\x07\x42\x1a\x28\x35\x82\x59\x31\x0d\x4b\xc6\x11\xf0\x99\x62\x61\x80\x09\xa0\x32\x2f\x38\x23\x82\x22\x6c\x99\x59\xb9\xf7\x04\x2b\xd6\x13\xf8\x3d\xd8\x90\x0b\x43\x98\x00\x02\x54\x16\x3b\x90\xcb\x58\x10\x88\x09\x4e\xdb\x9f\x95\x31\xc5\xc5\x78\xbc\xdd\x6e\x47\xc4\x39\x3c\x92\x2a\x1b\x73\x2f\xaa\xc7\xef\x66\xd3\x9f\xef\x92\x9f\x4f\xcf\x46\xaf\x82\xd2\x6f\x82\xa3\xd6\xa0\xf0\x8f\x92\x29\x4c\x61\xb1\x03\x52\x14\x9c\x51\xb2\xe0\x08\x9c\x6c\x41\x2a\x20\x99\x42\x4c\xc1\x48\xeb\xf4\x56\x31\x8b\xdb\x09\x68\xb9\x34\x5b\xa2\xd0\x9a\x49\x99\x36\x8a\x2d\x4a\xd3\xc2\xac\x72\x91\xe9\x96\x80\x14\x40\x04\x0c\x27\x09\xcc\x92\x21\xfc\x34\x49\x66\xc9\x89\x35\xf2\x34\x7b\x7c\x7b\xff\xdb\x23\x3c\x4d\xde\xbf\x9f\xdc\x3d\xce\x7e\x4e\xe0\xfe\x3d\x4c\xef\xef\xae\x67\x8f\xb3\xfb\xbb\x04\xee\x7f\x81\xc9\xdd\xef\x70\x33\xbb\xbb\x3e\x01\x64\x66\x85\x0a\xf0\xb9\x50\x76\x07\x52\x01\xb3\x68\x62\xea\xa0\x4b\x10\x5b\x2e\x2c\xa5\x77\x49\x17\x48\xd9\x92\x51\xe0\x44\x64\x25\xc9\x10\x32\xb9\x41\x25\x6c\x26\x14\xa8\x72\xa6\x6d\x54\x35\x10\x91\x5a\x33\x9c\xe5\xcc\x10\xe3\x1e\xed\xed\x6b\x34\xb0\x22\xb7\x8c\xae\x08\x72\xf8\x80\x02\x3f\x32\x02\x3f\xe4\x1b\x7f\xf5\x63\x96\x13\xc6\x47\x54\xe6\xff\x67\xe5\x26\x9c\xad\x09\xbc\x23\x4a\xa3\x80\x1f\x88\xbd\x1b\x71\x77\x17\x0b\x0e\xf4\x4e\x18\xf2\x0c\x57\x30\x2c\x94\x34\xf2\x7c\x78\x39\x18\x14\x84\xae\xad\xab\x94\x97\xda\xa0\x9a\xe7\x44\x90\x0c\xd5\x9c\x14\xec\x72\x30\x60\x79\x21\x95\x81\x61\x26\x65\xc6\x71\x4c\x0a\x36\x26\x42\xc8\xe0\xf6\xc8\x99\x19\x5e\xd6\x62\xee\x9e\x9e\x66\x28\x4e\xf5\x96\x64\x19\xaa\xb1\x2c\x9c\x68\xaf\xda\x60\xe0\x57\xe1\x28\x53\x05\x1d\x65\xc4\xe0\x96\xec\xfc\x32\x9d\x67\x28\xe6\xc1\xca\x28\x58\x19\xc9\x02\x05\x29\xd8\xe6\xac\x5a\x39\x86\x2b\xf8\x73\x00\xc0\xc4\x52\x5e\xb8\x2b\x00\xc3\x0c\xc7\x0b\x18\x4e\xfd\x96\xe0\xd6\x6f\x09\x26\x0f\xb3\xe1\xa5\x93\xd8\xf8\x02\xbb\x80\xe1\xe6\xd5\xe8\x6c\xf4\x2a\x3c\xa6\x52\x18\x42\x4d\x65\xc7\xfe\x08\x92\x5b\x53\x55\xad\x4f\xef\xa6\x8f\x41\xd8\xfe\x94\x8a\x5f\xc0\xd0\x16\x86\xbe\x18\x8f\x33\x66\x56\xe5\xc2\x62\x3d\xd6\x5e\xfe\x94\x0a\x6a\xc6\x01\xda\xd3\x00\xed\x29\x29\x58\x64\x03\x6d\x80\x2e\x60\x48\xd2\x9c\x89\x1f\x63\xc5\x11\x93\x41\xee\x93\xfd\xc7\xfd\x0f\x9f\x0d\x2a\x41\xf8\x3c\x95\x54\x57\x8e\x7e\xab\x1b\x29\x6a\xaa\x98\x83\xf8\x02\x86\xb7\x52\x21\x90\x85\x2c\x0d\x1c\x42\xf0\xd3\x00\x40\xd3\x15\xe6\xa8\x2f\xe0\xed\xe3\xe3\x43\x72\xd9\x7d\x62\x1f\x50\x29\x74\xe9\x9e\x0c\x43\xe1\xdb\x57\x8c\xff\x5f\x4b\xe1\xcc\x14\x4a\xa6\x25\x3d\xb4\xfe\xe9\x72\x30\xd0\xa8\x36\x8c\x62\xed\x88\xdf\xaf\xad\x67\xc6\xb9\xd5\xdf\x30\xd7\x29\x49\x95\xbf\x6e\x5d\x15\x14\xa6\x0a\x89\xc1\x4a\xef\xa8\x75\x7b\xab\xb3\x63\x50\x68\x4a\x25\x74\x67\xe9\x3d\x16\x7c\x77\x1c\x25\x40\x9d\xa1\xae\x02\x46\xa4\x60\x23\x0b\x74\x95\x77\xcd\x4f\x51\x1a\xb8\x80\xa1\xab\x91\xcd\xeb\x0a\xed\x61\x4b\x66\x21\xd3\x9d\x15\xfa\xef\xe6\xf1\xa7\x10\xe1\xd6\xc6\x14\x1a\xc5\x70\xe3\xdb\x8c\x36\xc4\x94\xda\xb6\xe6\x7a\x97\xb6\x85\x00\x33\x1a\xd6\xe5\x02\xa9\x14\x4b\x96\xb9\x2e\x44\xa5\x10\x48\x0d\xdb\x30\xb3\xab\x91\xf8\x15\x4d\x0d\x43\x73\xdd\xc6\xa0\x79\xfe\xd7\x01\xc8\xf0\x65\x00\x7a\x77\x9a\x22\x47\x83\x3d\xf1\xbb\x76\x0b\xb5\xe3\xad\xdb\xb6\xef\xad\xa5\xbf\xee\x7e\xf0\xe4\xab\x77\x50\xc7\x8a\x00\x67\xda\xd8\x38\x05\x45\xdd\x13\x82\x77\x56\xe4\xa8\x7d\x7f\x28\x14\x76\xed\xef\x0e\xc7\xd8\xfa\xf8\xf9\x1d\x95\x4a\x54\x4d\xd2\xb5\x56\x95\xbb\xd2\x0c\x6d\x81\x14\x0c\x6c\x65\x46\xe1\xfa\x15\x4d\x60\x2d\xb3\x48\xfc\xa8\x79\xbc\xb7\xc9\xf0\xfc\x6f\xdb\x60\x70\xb7\x67\x6f\x9f\x06\x83\x1c\xb5\xb6\x53\xae\xdb\x06\x9a\x86\x72\x47\x72\xac\xe8\x4f\x55\x65\x46\xc2\x02\x9b\x2e\x83\xa9\x13\xb6\x64\x43\x64\x6e\x32\xc0\x15\xbc\xbe\xac\x2c\x3c\xae\x82\xac\x1d\xe5\x15\x17\x70\x38\x38\x89\xd6\xab\x1f\x82\x5c\x52\x20\x6d\x94\xae\xe0\xec\xf2\xa0\xb7\x0e\xa8\xa8\x01\xae\xd0\x71\x14\xa9\x1c\x0d\x8c\xdd\xde\x12\x1d\x3b\x6d\x79\x97\x63\x88\x96\x88\xa1\x36\x03\xdf\x89\x24\x07\xb9\xde\xdb\x40\x8a\x86\x30\xae\xbb\x48\x04\x55\x50\xa8\x0b\x29\x34\xfa\x1d\xf9\xc5\x99\xc1\xbc\x16\xec\x6e\xa1\xd5\x70\xbe\x04\x6d\x2e\xe5\xda\x12\xbd\xe2\x45\xac\x27\x4f\x89\x45\x27\x45\x61\x18\xe1\xbe\xd0\x26\x4f\x49\xf4\x08\xc8\x56\x7b\x6f\x2a\x95\x8f\xa5\xc2\x7d\x25\xfb\xb4\xa5\xe6\xc4\xae\xe0\xfc\xc0\x36\x3a\x61\x98\xe9\xd6\x1e\x98\xf0\x2d\x7b\xa7\x0d\xe6\xfb\x40\xc7\xb0\x5d\x3b\xa4\x5f\x04\xaf\xdb\xf4\xe2\xe8\x13\x63\xa9\x6f\xf4\xee\xff\xd2\x1e\x26\x23\xed\x3c\x37\x4a\xee\xfe\x55\x08\xee\x77\xe9\x66\x37\x53\x59\xf2\xb4\x85\xe3\x02\xab\x4d\x84\xa2\xeb\xcb\xd7\xa4\x1e\x8c\x56\x35\xce\xee\xb0\xe9\x30\x39\x0f\xe7\x64\xe8\xbe\x8d\x27\x5f\x8c\xca\xeb\xbf\x8a\xca\x4b\xae\x7c\x53\x6e\x05\xa5\x77\xbd\x33\x08\x0b\xdb\x49\xd2\xbe\x92\xdd\xc7\x27\x16\x6a\x9c\xb9\xee\xd4\x6b\x0c\x34\x4b\x5b\x3e\xf4\x54\x77\x4f\x2e\x36\x89\x15\x67\xb3\x6e\x05\xb5\x47\xbb\x0e\xea\x79\x9f\xd3\x51\x55\xfd\xbb\x5d\xef\xd1\x8f\xc8\x9c\x91\x15\x97\xb3\x97\x07\xcc\x45\xf2\x57\xf0\xe6\xf0\xe4\x68\x0d\x9b\xde\x16\x52\x4f\xa0\x53\xa0\xa5\x52\x28\x0c\x0f\x33\x83\xf9\x84\x97\x0a\x72\x42\xf4\x67\xe7\x5f\xc5\x19\xe4\x12\x6e\xca\x05\x2a\x81\x06\x5b\x5a\xeb\xef\xf5\xbc\x12\x72\x38\xba\x45\x29\x50\x2e\x6b\x2f\xe6\x31\xe3\x68\x66\x7e\x78\x85\x2d\xd1\xfd\xe9\xba\x37\x61\x27\x4f\x89\xdb\xaf\x2f\xd7\xf3\xcb\x03\x52\x37\x41\x2a\x54\xe7\x9b\x03\x72\x1f\x6e\x9f\x88\x42\x27\xba\xc9\xb7\xc4\xc9\xfe\x6f\xc5\x2f\xbe\x60\x24\x33\x0d\x6f\x27\x4d\xcd\xae\x58\xb6\x9a\x93\x0d\x61\x9c\x2c\x18\x67\x66\x07\x57\xf0\x5d\x0b\xc8\x25\x59\x28\x46\xc3\x4c\x2c\x75\x87\x7a\xa0\xd9\x4a\xb5\x9e\x07\xa1\x2b\xf8\x9f\xcb\xc1\xc1\xe8\x57\x40\xfc\x39\xe8\x80\x78\x4d\x0c\x81\x29\x8a\x2a\xab\x26\x4f\x89\x7d\xe4\x9f\x40\x4a\x0c\x99\x53\x7f\x1d\x47\x39\xee\x69\xd6\xbb\x92\xb5\x5b\x77\x5f\xcb\xa4\xd1\x75\x5c\x3c\x3f\xfd\x7e\x0f\xcc\x60\x5e\xf7\xd9\x07\x15\x12\xba\x54\x98\xda\x22\xb6\xa4\x45\xcb\x52\x51\x6c\x97\xcd\x4c\x68\xe3\xbe\x6d\x65\x4a\x96\x45\xa7\xc9\x4d\x9e\x92\x6a\xfd\x57\xbb\x0c\x2c\xdc\xcd\xbd\xb4\x8f\x73\x13\x35\x46\x57\x7b\x60\x54\x50\xb6\x41\x69\x25\xa3\x57\x54\x98\x39\xba\x5a\xea\x53\x24\xda\x9c\xbe\x3e\x01\x34\x74\x74\x5c\x4b\x86\x98\x05\xb9\x1a\xca\x96\x91\x56\x2a\x7c\x94\x02\x75\x64\x70\x71\x02\xd5\xf5\x19\x75\xd7\x5b\xb4\xd7\x69\xf7\x4d\x35\x00\xe1\x95\xb1\xd5\xb9\xb7\x5a\xa3\xdf\x64\xed\x2f\x52\xc1\x76\x85\x02\xb4\xcc\xdd\xa7\x44\x91\x69\xb0\x19\x4e\xb8\x42\x92\xee\x6c\xf4\xac\xd5\x2e\x2c\x3d\xb1\xda\xab\xd5\x0f\x0f\x53\x60\xe9\x09\x2c\x38\x11\x6b\x77\x42\xb5\xff\x0d\xbd\x45\x5b\xf5\xee\x7e\x27\xcb\xe1\x09\x2c\x19\xe7\x98\x02\x5b\xba\xcf\x9b\xd6\x01\x9b\x1e\x1f\x1e\xa6\x5d\x24\x37\x05\x9d\xc7\x5d\xbb\x62\x03\x48\x4b\x65\xf1\x73\x41\xee\x2a\xe9\xb0\xea\x53\xc0\xeb\x9f\x5d\x76\xfd\x9d\x4d\x6e\x41\x49\xde\x7c\xd2\xab\xea\xf7\x88\x28\x71\x5c\x15\x94\xd6\x92\x32\xd7\x7a\xd2\xb4\xfb\x1e\x46\xf2\xb9\xb5\x30\x27\x4a\x34\x19\xdb\xa0\xdd\x49\x5c\x48\x71\xc9\x84\x3d\x3b\x9a\x5d\x81\xee\x58\x2f\xca\x7c\x61\x9b\xc8\xb2\x4e\x5b\xdd\x85\xbe\x9d\xdd\x2d\xd4\x6b\xfb\xce\xde\x51\xfe\xdd\x88\x13\x95\xe1\x81\xa4\x74\x42\x5d\x20\x6f\x99\x60\x79\x99\xf7\x39\x02\x47\x29\x2e\x49\xc9\x8d\xab\xfd\x8f\xa8\x64\x63\x92\x09\x73\x7e\x06\x39\x13\xf3\x3f\x4a\x22\x8c\x6f\x6a\x6d\x88\x6f\xc9\xf3\x37\x58\x26\xcf\xb1\xe5\xf3\xe8\x74\x37\x1e\x5b\x22\x15\x0f\x9f\xc9\xc3\x0c\x12\x7f\x42\x8d\xa8\x56\x73\x14\x85\x3f\x83\x9e\xa7\x5c\x36\xdc\x95\x76\xc5\x23\xf7\xf5\xba\xf4\x6c\x09\xb2\x40\xe5\xc7\x94\x3d\x73\xdd\xdf\x1c\x60\xfc\x95\xa9\x9e\x13\xf2\x5e\xc9\x18\x92\x81\xf4\x4c\x2f\x63\xf6\xc0\x55\x48\xcd\x8c\x54\xbb\x6e\xec\x32\x66\xa2\x49\xfa\x7a\x2f\x97\x57\x44\xaf\x2a\x2e\x62\x2d\x51\x99\xe7\xcc\xf4\x59\xf1\x2b\x7b\xd1\xea\x19\x67\x46\x21\xba\xad\x52\x8e\x44\xf8\xb6\x61\x27\x40\xaf\x59\x2b\x3c\xb7\x94\x07\xdb\x03\x78\x3c\xb6\xdd\xd6\xb1\x2c\x37\x3d\xba\xba\xee\xe1\x3c\xf5\x7a\x6f\x5a\x7a\x1f\x9a\x08\x67\xd2\x8d\x45\xcf\x94\xf2\x82\x71\xdc\xf3\x41\x46\xf8\x7c\xd7\xb2\x33\xf5\x1a\xaa\x99\xac\x91\x1e\xad\x16\xdd\x5c\x8d\xb4\x1e\x38\x31\x36\x72\xc0\x8c\x07\xc1\x0b\xa6\x2e\x7d\xc6\xa0\x4a\xe1\x3e\xf5\x47\x8c\x24\x58\x2c\x2a\xc5\x1e\xd2\x50\x6d\x29\x4a\x0a\xb7\xd4\x93\x2b\x61\x37\x2d\x7a\x54\x71\xf7\x10\x74\xda\x9e\xce\x65\xf8\xed\x84\x6b\xb8\xae\xe0\xa3\x41\x1d\x35\x94\x78\x58\xb7\x78\x42\x82\x54\xa1\xb9\xc1\xdd\xcc\xef\xd2\xd6\xd5\x84\x52\xd4\x2d\x52\xa7\x9d\xd4\x7c\x8d\xbb\x79\x87\x4e\x37\x36\xbc\xd6\x0d\xee\x6a\x3b\xe4\x90\x1d\xbf\x60\xcd\xb5\xd8\x82\xb5\xf5\xde\x4f\xd1\xc3\x26\xea\x31\xeb\x4f\x07\xdf\x84\x4b\xf7\x08\xd7\x66\x50\x45\xf1\x22\x26\xa4\x28\xfa\xc0\x78\x44\x41\x84\x79\x61\x03\xc6\x0b\x74\x37\xfe\x40\xb4\xde\x4a\x95\xbe\xa0\x59\x54\x22\x31\x51\x72\x01\x28\x17\xf5\xf7\xfd\x97\xd0\x8f\xc4\xbc\xeb\x6f\xaa\xd4\xb2\xf0\x10\x4a\x65\x29\x8c\xaf\x3a\xf7\x49\xa9\xf5\xe9\x26\xcc\x74\x4f\xa4\x1b\xd2\x76\x84\xcf\x17\xc0\x25\x49\x61\x41\xb8\xed\xf4\xea\xb8\x03\xb0\x37\x91\xf8\x0f\xfd\x93\xf0\x92\x16\xd4\x53\xce\x50\x98\x59\x0a\x47\x64\x4d\x2e\x1c\xf2\xd7\xc7\xb1\xe7\xd4\x09\xf4\xc1\xed\x55\x7d\x06\x06\xf5\x0a\xa6\x3e\x0b\x3e\x01\xab\xa2\xea\xa7\xd3\x37\x7d\x74\xda\xed\xba\xcb\x21\x83\x6d\x2e\x69\x55\xab\x5f\x4b\xa3\xbb\x19\x78\x88\x48\x57\x9f\xc9\xab\x5f\x97\xb4\x62\x65\x0f\x90\x84\xaf\xed\xbf\x3e\x3a\x2e\x26\x75\xea\x77\x82\xd3\xbc\xb7\x37\x30\xc1\xbd\xea\xf6\xcb\x39\xf9\xcd\xd7\x70\xf2\xbf\x81\x25\x75\xdf\xb7\x37\x68\x45\x74\xd2\xef\xa5\x8c\xed\x03\x6e\xd7\x33\xcf\xaf\x12\x43\x44\x4a\x54\x3a\xbf\x3e\x9b\x6f\xce\x5e\x66\x59\x67\xff\x18\xcb\x3a\xff\xc7\x58\xd6\x9b\xcf\x7d\x43\x8f\x0e\xc6\xad\x8a\xf8\x9a\x86\x1b\xc7\xcd\xdb\xbb\x25\x74\xc5\x44\x6c\x36\x32\x5d\x6a\x54\x2e\x36\xd6\x60\x92\xbc\x8d\x5b\x59\x84\x7a\x2d\xd6\x4b\x8e\xa4\x36\x9f\xd1\x77\x22\x7d\x87\x04\xf7\xab\xee\x03\xba\x1e\x44\x27\xd1\x0d\x8b\x55\x5d\x7f\xaf\x6b\x9e\x59\x1f\x31\xa4\x30\x4a\x72\x4b\x12\x04\x8e\xe0\x71\xc5\x34\x08\x99\xba\xbf\x6c\x90\x82\xef\x80\x40\x4e\xfc\x47\x84\x65\xf5\x97\x1e\xc8\x53\xf7\x87\x0f\xae\x2c\xd2\xd1\x3e\x83\x71\x26\xe7\xce\x64\x44\x82\xde\x74\xc9\x87\x7f\x19\xc9\x51\x17\xc4\xb6\x0d\x2e\x45\xd6\xfc\xb9\x48\x88\x8f\x03\xd1\x3d\x3c\xfc\x55\xa9\x14\xec\x8f\x12\xf9\x0e\x98\x8b\xfa\xd2\x7b\x2d\x48\x86\xe9\xa1\xcf\x68\xfe\x95\x71\x4f\x7c\x50\x6c\x63\x67\xc8\x3a\x90\x04\xc2\xb9\x43\x42\x57\x9f\x3e\x83\xa5\x4b\xcb\x47\xed\x51\x95\x98\x6a\xa5\x6a\x80\x8e\xf7\x27\x6f\x9b\x0f\x5a\x66\x85\x1a\x81\x12\x01\x8b\xfa\x0f\x34\xec\x29\x53\xa4\x58\xa0\x48\xdd\x97\xae\x51\x6b\x8a\x7a\x27\xf6\xd8\x47\x48\x49\x0d\x5b\x77\x62\xb7\xdc\x4f\x31\x8d\x7b\x89\x5c\x77\xbc\xfd\x4c\xce\x2b\x13\x81\x9d\xfc\x27\x00\x00\xff\xff\x4a\xdd\xb3\x9d\x53\x24\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 9299, mode: os.FileMode(420), modTime: time.Unix(1537144128, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": {apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
