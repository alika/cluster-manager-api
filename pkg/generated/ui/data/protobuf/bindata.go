// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x6f\xdb\x38\xb6\x7f\xf7\x5f\x71\xe0\x97\x9b\x5c\x34\x76\x9b\xb6\xbb\x83\x64\x7b\x67\xbd\xc9\x6c\x6b\xb4\x49\x83\x3a\xd3\x62\x9e\x0c\x9a\x3a\x96\x79\x43\x91\x5a\x92\xb2\xeb\x19\xf4\x7f\xbf\xe0\x87\x24\x52\x92\xd3\x4e\x9a\xc1\x2c\x16\x37\xc0\x6e\x2d\xf1\x9c\xa3\xc3\xf3\xf9\xe3\xc7\x4c\xa7\x70\x21\xcb\xbd\x62\xf9\xc6\xc0\xe9\xd3\x67\x3f\xc0\x82\x14\xba\x12\x39\x2c\x2e\x17\x70\xc1\x65\x95\xc1\x35\x31\x6c\x8b\x70\x21\x8b\xb2\x32\x4c\xe4\x70\x8b\xa4\x00\x52\x99\x8d\x54\x7a\x32\x9a\x4e\x47\xd3\x29\xbc\x63\x14\x85\xc6\x0c\x2a\x91\xa1\x02\xb3\x41\x98\x95\x84\x6e\xb0\x1e\x79\x02\x1f\x51\x69\x26\x05\x9c\x4e\x9e\xc2\x91\x25\x18\x87\xa1\xf1\xf1\xb9\x15\xb1\x97\x15\x14\x64\x0f\x42\x1a\xa8\x34\x82\xd9\x30\x0d\x6b\xc6\x11\xf0\x33\xc5\xd2\x00\x13\x40\x65\x51\x72\x46\x04\x45\xd8\x31\xb3\x71\xdf\x09\x52\xac\x26\xf0\x4b\x90\x21\x57\x86\x30\x01\x04\xa8\x2c\xf7\x20\xd7\x31\x21\x10\x13\x94\xb6\x7f\x1b\x63\xca\xb3\xe9\x74\xb7\xdb\x4d\x88\x53\x78\x22\x55\x3e\xe5\x9e\x54\x4f\xdf\xcd\x2f\x7e\xba\x5e\xfc\x74\x72\x3a\x79\x1a\x98\x7e\x16\x1c\xb5\x06\x85\xff\xaa\x98\xc2\x0c\x56\x7b\x20\x65\xc9\x19\x25\x2b\x8e\xc0\xc9\x0e\xa4\x02\x92\x2b\xc4\x0c\x8c\xb4\x4a\xef\x14\xb3\x76\x7b\x02\x5a\xae\xcd\x8e\x28\xb4\x62\x32\xa6\x8d\x62\xab\xca\x24\x36\xab\x55\x64\x3a\x21\x90\x02\x88\x80\xf1\x6c\x01\xf3\xc5\x18\xfe\x31\x5b\xcc\x17\x4f\xac\x90\x4f\xf3\xdb\x37\xef\x7f\xbe\x85\x4f\xb3\x0f\x1f\x66\xd7\xb7\xf3\x9f\x16\xf0\xfe\x03\x5c\xbc\xbf\xbe\x9c\xdf\xce\xdf\x5f\x2f\xe0\xfd\x3f\x61\x76\xfd\x0b\xbc\x9d\x5f\x5f\x3e\x01\x64\x66\x83\x0a\xf0\x73\xa9\xec\x0c\xa4\x02\x66\xad\x89\x99\x33\xdd\x02\x31\x51\x61\x2d\xbd\x4a\xba\x44\xca\xd6\x8c\x02\x27\x22\xaf\x48\x8e\x90\xcb\x2d\x2a\x61\x23\xa1\x44\x55\x30\x6d\xbd\xaa\x81\x88\xcc\x8a\xe1\xac\x60\x86\x18\xf7\xaa\x37\xaf\xc9\xc8\x92\x5c\x31\xba\x21\xc8\xe1\x23\x0a\xfc\x95\x11\xf8\x5b\xb1\xf5\xbf\xfe\x9e\x17\x84\xf1\x09\x95\xc5\xff\x58\xba\x19\x67\x77\x04\xde\x11\xa5\x51\xc0\xdf\x88\x7d\x9a\x70\xf7\x14\x13\x8e\xf4\x5e\x18\xf2\x19\x5e\xc1\xb8\x54\xd2\xc8\xe7\xe3\xf3\xd1\xa8\x24\xf4\xce\xaa\x4a\x79\xa5\x0d\xaa\x65\x41\x04\xc9\x51\x2d\x49\xc9\xce\x47\x23\x56\x94\x52\x19\x18\xe7\x52\xe6\x1c\xa7\xa4\x64\x53\x22\x84\x0c\x6a\x4f\x9c\x98\xf1\x79\x43\xe6\x9e\xe9\x49\x8e\xe2\x44\xef\x48\x9e\xa3\x9a\xca\xd2\x91\x0e\xb2\x8d\x46\x7e\x14\x8e\x72\x55\xd2\x49\x4e\x0c\xee\xc8\xde\x0f\xd3\x65\x8e\x62\x19\xa4\x4c\x82\x94\x89\x2c\x51\x90\x92\x6d\x4f\xeb\x91\x63\x78\x05\xbf\x8d\x00\x98\x58\xcb\x33\xf7\x0b\xc0\x30\xc3\xf1\x0c\xc6\x17\x7e\x4a\x70\xe5\xa7\x04\xb3\x9b\xf9\xf8\xdc\x51\x6c\x7d\x82\x9d\xc1\x78\xfb\x74\x72\x3a\x79\x1a\x5e\x53\x29\x0c\xa1\xa6\x96\x63\xff\x04\x29\xac\xa8\x3a\xd7\x2f\xae\x2f\x6e\x03\xb1\xfd\xab\x14\x3f\x83\xb1\x4d\x0c\x7d\x36\x9d\xe6\xcc\x6c\xaa\x95\xb5\xf5\x54\x7b\xfa\x13\x2a\xa8\x99\x06\xd3\x9e\x04\xd3\x9e\x90\x92\x45\x32\xd0\x3a\xe8\x0c\xc6\x24\x2b\x98\xf8\x7b\xcc\x38\x61\x32\xd0\x7d\xb1\xff\xb8\xff\xc3\xcf\x06\x95\x20\x7c\x99\x49\xaa\x6b\x45\xbf\x57\x8d\x0c\x35\x55\xcc\x99\xf8\x0c\xc6\x57\x52\x21\x90\x95\xac\x0c\x1c\xb2\xe0\x97\x11\x80\xa6\x1b\x2c\x50\x9f\xc1\x9b\xdb\xdb\x9b\xc5\x79\xf7\x8d\x7d\x41\xa5\xd0\x95\x7b\x33\x0e\x89\x6f\x3f\x31\xfd\x5f\x2d\x85\x13\x53\x2a\x99\x55\xf4\xd0\xf8\x97\xf3\xd1\x48\xa3\xda\x32\x8a\x8d\x22\x7e\xbe\x36\x9f\x19\xe7\x96\x7f\xcb\x5c\xa5\x24\x75\xfc\xba\x71\x55\x52\xb8\x50\x48\x0c\xd6\x7c\x47\xc9\xe3\x95\xce\x8f\x41\xa1\xa9\x94\xd0\x9d\xa1\x0f\x58\xf2\xfd\x71\x14\x00\x4d\x84\xba\x0c\x98\x90\x92\x4d\xac\xa1\xeb\xb8\x6b\xff\xca\xca\xc0\x19\x8c\x5d\x8e\x6c\x9f\xd5\xd6\x1e\x27\x34\x2b\x99\xed\x2d\xd1\x7f\xb7\xaf\xbf\x04\x0f\x27\x13\x53\x68\x14\xc3\xad\x2f\x33\xda\x10\x53\x69\x5b\x9a\x9b\x59\xda\x12\x02\xcc\x68\xb8\xab\x56\x48\xa5\x58\xb3\xdc\x55\x21\x2a\x85\x40\x6a\xd8\x96\x99\x7d\x63\x89\xd7\x68\x1a\x33\xb4\xbf\x53\x1b\xb4\xef\x1f\x6e\x80\x1c\xef\x37\xc0\xe0\x4c\x33\xe4\x68\x70\xc0\x7f\x97\x6e\xa0\x51\x3c\x79\x4c\x75\x4f\x86\x1e\xae\x7e\xd0\xe4\x77\xcf\xa0\xf1\x15\x01\xce\xb4\xb1\x7e\x0a\x8c\x7a\xc0\x05\xef\x2c\xc9\x51\xfa\x7c\xc8\x15\x76\xec\xb1\xdd\x31\xb5\x3a\x7e\x65\x46\x4c\x68\x43\x38\x87\x23\xa9\x40\x61\x78\x3a\x06\xc3\x38\x8f\x1c\x74\x53\x27\xdf\xad\x7b\x0f\x47\x9d\x17\xe9\xac\x3a\x83\xdf\x91\x66\x52\x27\xf3\xf2\x5a\x3d\x2c\xcd\x0e\x4c\x74\x83\xbc\x00\xba\x21\xca\xd4\xd4\xb7\x16\x60\xed\x2c\xcb\x0a\x6d\xb5\x34\xaa\xa2\x0e\xea\x31\x97\x94\x96\x14\x36\x44\x03\xe1\x0a\x49\xb6\x87\x15\xa2\x80\x0c\x4b\x2e\xf7\x98\xb5\xf8\x4b\x93\x02\x5d\x47\x69\x8c\x38\xf7\xdf\x7c\x83\xbc\xb8\x70\x52\x8e\xba\x6f\x52\x33\x76\x47\x1f\xad\x5c\xd9\x39\x3f\xcc\x88\x21\x6f\x9a\xd9\x76\xac\xd7\xe6\x72\x34\xc9\xce\x8b\xa1\x7c\x7e\x84\x29\xf6\x33\x3a\x9d\xe5\xa1\x74\xae\x94\xa8\x11\x82\xc3\x15\xaa\x70\x7d\x29\xf4\x44\x52\x32\xb0\x6d\x29\x4a\x85\xd7\x68\x02\x64\x9f\x47\xe4\x47\xed\xeb\x5e\x86\x87\xf7\x8f\x96\xdd\x41\xdd\x6f\x9b\x5b\x55\xe6\x8a\x64\x18\x3e\xa6\x5d\xe7\x20\x90\xb3\x2d\x8a\x5e\x19\x7e\x8d\xe6\x67\x4f\x1e\x8a\x52\x77\x86\x07\x47\x7b\x73\x3e\x48\xf9\xe8\x35\x2e\x4c\xf0\x2b\xd6\x20\xc6\x60\x51\x1a\xbb\xf4\xa8\x2d\xd2\x6f\x43\xa9\xd2\x70\x94\x3e\xa7\x73\x4c\xc7\x1e\xaf\xc4\x1d\x9c\xd6\xd7\xd2\xf4\xcb\x68\x54\xa0\xd6\x16\xde\x77\xf1\x4f\x8b\xa4\xae\x6d\x51\x0a\xeb\xbe\x1a\x5e\x18\x69\x0b\x5d\x03\xaf\x30\x73\xc4\x76\x95\x25\x72\x57\xc0\xe0\x15\x3c\x3b\x6f\xab\x63\xa0\xb5\x6b\x98\x7a\x11\xe4\x3c\xeb\x28\x92\x4f\xdf\x04\xba\x45\x89\xb4\x65\x7a\x05\xa7\xe7\x07\xb5\x75\x86\x8c\x90\xdf\x06\xdd\xe2\x4c\x2a\xb7\xfe\x8d\xd5\xde\x11\x1d\x2b\x6d\x17\x9c\x6e\x69\x6c\x57\xa0\xa8\x7d\x3d\x5a\x49\xc9\x41\xde\xf5\x26\x90\xa1\x21\x8c\xeb\xae\x25\x02\x2b\x28\xd4\xa5\x14\xda\x57\xee\x3a\x84\x0d\x16\x0d\x61\x77\x0a\x09\xd2\xfa\x16\x6b\x73\x29\xef\xec\x0a\xb7\xbc\xd7\xd6\xb3\x4f\x0b\x6b\x9d\x0c\x85\x61\x84\x7b\x84\x31\xfb\xb4\x88\x5e\x01\xd9\x69\xaf\x4d\xcd\xf2\x6b\xa5\xb0\xcf\x64\xdf\x26\x6c\x8e\xec\x15\x3c\x3f\x1f\xd2\xb5\x76\x95\x86\x23\xb2\xd3\x53\x72\xa7\xa7\xdb\xc2\xae\xd0\xa7\x68\xe8\x71\xac\x72\xe4\xd4\x17\x07\x2c\xd2\xf1\xe8\x5c\x27\xe6\x60\xc2\x37\xcb\xbd\x36\x58\xf4\x7d\x16\x7b\xe0\xd2\x39\xed\x5e\x3f\x74\x81\x63\x1c\x48\xc4\x00\x4b\xbe\xfd\x5f\xda\x5b\xdc\x48\xdf\xe5\xe5\xfe\x3f\xd5\x19\x7d\xd0\xdc\x1a\xe6\x42\x56\x3c\x4b\x5c\x52\xa3\x1e\xdb\xe0\x0f\x66\xd1\xa2\x59\xa7\x58\xd6\x38\xe7\x82\x32\x61\x21\x73\x38\x53\x02\x18\x6e\x35\xf9\x66\x03\x3f\x7b\xa8\x81\x4f\xff\xf8\x68\x6f\x60\xfc\x43\x23\x3e\x30\xbd\x1b\x5c\x5d\x60\x69\x4b\x65\x36\x54\x93\xfa\xa6\x8e\x89\x5a\x65\x2e\x3b\x05\x29\x9e\x1f\xcb\x12\x1d\x06\xca\xd7\x40\x86\xb4\x46\x8d\x73\x4c\x27\xf1\x31\xc0\xdd\xc4\xc7\xf3\x21\xa5\xa3\x5c\xff\xf7\x56\x7d\x80\x3f\x5a\xa6\x1b\x59\xaf\xd2\xed\xcf\x03\xe2\x22\xfa\x6e\x5c\x1d\xee\xa6\x83\x85\xad\x89\xcf\x13\xa0\x95\x52\x28\x0c\x0f\x4d\x91\xf9\xdc\x91\x0a\x0a\x42\xf4\x57\x1b\x7c\x0d\x88\xe5\x1a\xde\x56\x2b\x54\x02\x0d\x26\x5c\x77\x3f\xe8\x65\x4d\xe4\xec\xe8\x06\xa5\x40\xb9\x6e\xb4\x58\xc6\x70\xba\x05\x3d\xe1\x13\x36\xdb\xfb\xf0\xa1\x07\x21\x66\x9f\x16\x6e\xbe\x3e\xf3\x9f\x9f\x1f\xa0\x7a\x1b\xa8\x42\xa2\xbf\x38\x40\xf7\xf1\xea\x13\x51\xe8\x48\x7d\x8a\xc3\x2b\xf8\x6b\x0d\xa0\xbe\x01\x73\x30\x0d\x6f\x66\x6d\xce\x6e\x58\xbe\x59\x92\x2d\x61\x9c\xac\x18\x67\x66\x0f\xaf\xe0\x65\x62\xc8\x35\x59\x29\x46\x43\xd3\xaf\x74\x07\x5b\xa1\xd9\x49\x75\xb7\x0c\x44\xaf\xe0\x2f\xe7\xa3\x83\xde\xaf\x0d\xf1\xdb\xa8\x63\xc4\x4b\x62\x08\x5c\xa0\xa8\xa3\x6a\xf6\x69\x61\x5f\xf9\x37\x90\x11\x43\x96\xd4\xff\x8e\xbd\x1c\x97\x47\xab\x5d\xc5\xd2\x2e\x30\x54\x7d\x69\xf4\x3b\x4e\x9e\x7f\xfc\xf2\x1e\x98\xc1\xa2\x29\xd9\x37\x2a\x04\x74\xa5\x30\xb3\x49\x6c\x51\x99\x96\x95\xa2\x98\xa6\x8d\x5b\xe1\x0a\x8a\x90\x2b\x59\x95\x9d\x22\x37\xfb\xb4\xa8\xc7\x5f\xdb\x61\xbf\x82\x17\x14\x97\x9e\xda\xfb\xb9\xf5\x1a\xa3\x9b\x9e\x31\x6a\x53\xa6\x46\x49\x82\xd1\x33\x2a\xcc\x1d\x5e\xaf\xf4\x09\x12\x6d\x4e\x9e\x3d\x01\x34\x74\x72\xdc\x50\x06\x9f\x05\xba\xc6\x94\x89\x90\x24\x14\x7e\x95\x02\x75\x24\x70\xf5\x04\xea\xdf\xa7\xd4\xfd\xde\xa1\xfd\x9d\x75\xbf\xd4\x18\x20\x7c\x32\x96\xba\xf4\x52\x1b\xeb\xb7\x51\xfb\x4f\xa9\x60\xb7\x41\x01\x5a\x16\xee\x90\x48\xe4\x1a\x6c\x84\xd7\xdb\x14\xd4\x45\x53\xd6\x35\xcb\x80\xaf\x7a\xb9\xfa\xf1\xe6\x02\x58\xf6\x04\x56\x9c\x88\x3b\xb7\x82\xb4\xff\x1b\x7b\x89\x36\xeb\xdd\xf3\x5e\x56\xe3\x27\xb0\x66\x9c\x63\x06\x6c\xed\x0e\xae\xac\x02\x36\x3c\x3e\xde\x5c\x74\x2d\xb9\x2d\xe9\x32\xae\xda\x35\xb0\x40\x5a\x29\x6b\x3f\xe7\xe4\x2e\x93\x0e\xa3\x3e\x04\x3c\xff\xe9\x79\x57\xdf\xf9\xec\x0a\x94\xe4\xed\x61\x4d\x9d\xbf\x47\x44\x89\xe3\x3a\xa1\xb4\x96\x94\xb9\xd2\x93\x65\xdd\xef\x30\x52\x2c\xad\x84\x25\x51\xa2\x8d\xd8\xd6\xda\x9d\xc0\x85\x0c\xd7\x4c\xd8\x25\xa5\xd9\x97\xe8\x36\x6c\x45\x55\xac\x6c\x11\x59\x37\x61\xab\xbb\xa6\x4f\xa3\x3b\xb1\x7a\x23\xdf\xc9\x3b\x2a\x5e\x4e\x38\x51\x39\x1e\x08\x4a\x47\xd4\x35\xe4\x15\x13\xac\xa8\x8a\x21\x45\xe0\x28\xc3\x35\xa9\xb8\x71\xb9\xff\x2b\x2a\xd9\x8a\x64\xc2\x3c\x3f\x85\x82\x89\xe5\xbf\x2a\x22\x8c\x2f\x6a\xa9\x89\xaf\xc8\xe7\xef\x90\x4c\x3e\xc7\x92\x9f\x47\xcb\xd7\xe9\xd4\x02\xa9\xb8\xf9\xcc\x6e\xe6\xb0\xf0\xdb\x2f\x11\xd4\x6a\xf7\x59\xe0\xb7\xc0\xe7\x21\x97\x75\x77\xcd\x5d\x43\xd2\x3e\x5f\x17\x9e\xad\x41\x96\xa8\x7c\x9b\xb2\x8b\xca\xf7\x6f\x0f\xac\x43\x6a\x51\x03\xdb\x3f\xbd\x94\x31\x24\x07\xe9\x91\x5e\xce\xec\x8a\xb2\x94\x9a\x19\xa9\xf6\x5d\xdf\xe5\xcc\x44\x9d\xf4\x59\x2f\x96\x37\x44\x6f\x6a\x2c\x62\x25\x51\x59\x14\xcc\x0c\x49\xf1\x23\x3d\x6f\x0d\xb4\x33\xa3\x10\xdd\x54\x29\x47\x22\x7c\xd9\xb0\x1d\x60\x50\xac\x25\x5e\x5a\xc8\x83\x69\x03\x9e\x4e\x6d\xb5\x75\x28\xcb\x75\x8f\x2e\xaf\x7b\xb9\xcc\x3c\xdf\x8b\x84\xef\x63\xeb\xe1\x5c\xba\xb6\xe8\x91\x52\x51\x32\x8e\x3d\x1d\x64\x64\x9f\x97\x89\x9c\x0b\xcf\xa1\xda\xce\x1a\xf1\xd1\x7a\xd0\xf5\xd5\x88\xeb\x86\x13\x63\x3d\x07\xcc\x78\x23\x78\xc2\xcc\x85\xcf\x14\x54\x25\xdc\x21\x6e\x84\x48\x6a\xf8\x5f\x33\x0e\x80\x86\x7a\x4a\x51\x50\xb8\xa1\x81\x58\x09\xb3\x49\xe0\x51\x8d\xdd\x83\xd3\x69\xda\x9d\xab\x70\xee\xec\x0a\xae\x4b\xf8\xa8\x51\x47\x05\x25\x6e\xd6\x09\x4e\x58\x20\x55\x68\xde\xe2\x7e\xee\x67\x69\xf3\x6a\x46\x29\xea\x04\xd4\x69\x47\xb5\xbc\xc3\xfd\xb2\x03\xa7\x5b\x19\x9e\xeb\x2d\xee\x1b\x39\xe4\x90\x1c\x3f\x60\xc5\x25\x68\xc1\xca\xfa\xe0\xbb\xe8\x61\x11\x4d\x9b\xf5\xab\x83\xef\xb2\x4b\x77\x35\x98\x22\xa8\xb2\xbc\xd7\x26\xa4\x2c\x87\x8c\x71\x8b\x82\x08\x73\xcf\x04\x8c\x27\xe8\x4e\xfc\x86\x68\xbd\x93\x2a\xbb\x87\xb3\xac\x49\x62\xa0\xe4\x1c\x50\xad\x9a\x93\xdb\xfb\xac\x1f\x91\x79\xd5\x5f\xd4\xa1\x65\xcd\x43\x28\x95\x95\x30\x3e\xeb\xdc\x9e\x59\xb2\x37\x15\x7a\xba\x07\xd2\x2d\x68\x3b\xc2\xcf\x67\xc0\x25\xc9\x60\x45\xb8\xad\xf4\xea\xb8\x63\x60\x2f\x62\xe1\x8f\x70\x67\xe1\x23\x89\xa9\x2f\x38\x43\x61\xe6\x19\x1c\x91\x3b\x72\xe6\x2c\x7f\x99\x2c\xaf\xa9\x23\x18\x32\xb7\x67\xf5\x11\x18\xd8\x6b\x33\x0d\x49\xf0\x01\x58\x27\xd5\x30\x9c\x7e\x3b\x04\xa7\xdd\xac\xbb\x18\x32\xc8\xe6\x92\xd6\xb9\xfa\x7b\x61\x74\x37\x02\x0f\x01\xe9\x7a\xe3\xb9\x3e\x08\x4f\x7c\x65\x17\x90\x84\xdf\xd9\x7f\xbd\x77\x9c\x4f\x9a\xd0\xef\x38\xa7\xfd\xee\xa0\x63\x82\x7a\xf5\xe3\xb7\x63\xf2\xb7\xbf\x07\x93\x3f\x02\x4a\xea\x7e\xaf\xd7\x68\x45\xb4\xd2\x1f\x84\x8c\xe9\x02\xb7\xab\x99\xc7\x57\x0b\x43\x44\x46\x54\xb6\xbc\x3c\x5d\x6e\x4f\xef\x47\x59\xa7\x7f\x18\xca\x7a\xfe\x87\xa1\xac\x17\x5f\x3b\x24\x88\x16\xc6\xbf\x25\x0e\x68\x97\xff\xef\xc8\x0a\xf9\x61\xfb\x13\xe0\x96\xe0\x9b\xac\xef\xb6\x18\x08\xaf\xee\x63\xf4\xe3\x03\x0b\x9d\xdb\xe8\xf2\x15\x69\x6a\x21\x69\x2f\x64\x09\x99\x61\x8a\xd7\xdc\xe4\xae\x08\xdd\x30\x11\xcf\x31\x12\x58\x69\x54\x4e\x55\x2b\x6b\xb1\x78\x13\xd7\xd5\x48\xa9\x86\x6c\x10\xa9\x49\x6d\xbe\xc2\xef\x48\x86\x56\x2c\xee\x46\xd5\x01\x5e\xef\x51\x47\xd1\x8d\x11\xcb\x7a\xf7\x83\x6e\x40\x6f\xb3\xde\x91\xc2\x28\xc9\x2d\x62\x11\x38\xf1\x27\xda\xd6\x2c\xc0\x34\x48\xc1\xf7\x40\xa0\x20\x7e\x47\x63\x5d\x5f\x28\x44\x9e\xb9\xfb\x75\x2e\x47\xb3\x49\x0f\xfc\xb4\x6d\xe9\x45\x4f\x07\xe7\x41\xdd\x7c\xbe\xf0\xa6\xd6\xfd\x25\x6d\x37\x9c\x02\x63\x03\xec\x5a\x37\x07\x77\x69\xd8\xb9\xa5\xb5\x05\x69\x8a\x69\xec\x15\xd7\x46\x74\xdf\xcb\xc1\x0a\x4b\x67\x85\xa5\x9d\x7f\xba\xfb\xf0\x08\x9f\xd8\x49\x75\x87\xaa\x91\xfd\x22\xea\x5a\x4c\x83\xde\xb8\xcd\xf5\x95\x2d\x79\x3e\x9e\x39\xbb\x43\x60\xe5\x99\xf3\xa6\xd9\x10\xd3\x5c\x34\x20\xb0\x65\xca\x54\x84\xc3\xfc\x66\x6a\x87\x6b\x49\x16\x32\xd8\x56\x4d\xa8\xab\xfd\xf5\x9d\x30\xa0\x95\x36\xb2\x40\xa5\xc3\xee\x92\xbb\x67\xe9\x61\x74\x51\x09\x9b\x1b\x78\xcf\xa6\x23\x29\xd9\x12\x45\x56\x4a\xe6\xca\xff\xcb\x64\xdb\xb1\x7f\xb9\x23\x3a\x2f\xa8\xb1\x82\xbf\x08\xd2\x4e\x31\xdc\xa8\x70\xd7\x32\xd3\x9e\x5c\x9f\xd5\xa4\xdb\xb3\xba\x24\xb6\xfe\x1e\x16\xc3\x12\x31\xa2\x61\x89\x3b\xa6\x83\xd7\x42\xba\x06\xe0\x24\xb9\x53\x7f\x7f\xc1\xd4\x5f\xf7\x98\x36\xe7\xbd\x46\xc6\xf2\xda\x35\x45\xd4\xfa\xfc\x36\x6a\xd0\xa9\x39\x1f\x3e\xd9\xb1\xac\x7e\xfb\x63\x4d\xbb\xf0\x1a\x33\x03\x1b\xb2\xc5\x94\xd4\xdd\xee\x83\x52\xb1\x2d\xe3\x98\xa3\xfe\xb1\x5d\x50\xd6\x37\x2f\x1d\x5d\x1c\x30\x8d\x49\xb4\x8f\x0b\x66\xe2\xf0\x09\xbe\xf5\x82\x83\x7d\x7b\xfb\x44\x76\x70\x29\x5a\x39\xf1\x66\xe4\x77\x1f\x78\xfc\xe5\xf7\x1f\x84\xfd\xf5\xa1\xe7\x34\x3f\xdc\x17\x8d\xdd\x13\x62\xe2\x9d\xd6\xae\xe1\x75\xe5\xea\xe7\xba\xe2\xfd\x75\x3c\x44\x9b\xe6\x41\xbe\x86\x1d\x2a\xf4\x37\x22\xe2\xb9\xd7\x9f\xef\x1e\xab\x0c\xdc\xd9\x79\xe4\xec\x08\x77\xac\x34\x1a\x8b\xec\xbc\xad\x5e\xa3\x40\xc5\xa8\x1f\x5a\xf8\x91\xfa\x2b\x09\x84\x74\x77\x6e\x16\x03\xac\xed\x8d\x1c\x7f\x85\xe9\x51\xcf\x1b\xff\xbc\xe8\x18\xbc\x24\xf5\x27\x86\x47\xff\xb6\xd3\xbf\x5d\x74\x5c\xd7\x97\xd2\xea\xaf\xfc\x27\xc5\xc3\xd0\x85\xb2\x3f\x31\x1c\x06\x3d\x33\x78\x78\x17\xdc\xd5\xd4\xef\x43\xcd\xef\xd9\xe0\xa1\x63\xb4\x69\x1a\x35\xc2\xe1\x86\x37\xa8\x61\x5b\x1e\x06\xb5\x8b\x97\x59\xfe\xf6\x5f\x81\xc2\x74\x75\x3c\xa8\x5e\x3b\x01\x77\xdb\xc2\xf2\xfb\xdd\x88\xf6\x26\x78\xa7\x3f\x0f\xf7\xfb\xe4\x1a\x87\xd3\xb6\xb3\xb3\xda\xec\x1f\x95\xf2\xe0\x01\xad\x67\x14\x07\xb2\xe0\x45\xca\x43\x14\x86\x88\xf1\xf7\xe7\x8e\x04\x6a\xdb\x74\xf7\xa4\xe0\x70\xe2\x86\x3e\x5a\x68\xa7\x27\xee\x8d\xc5\x9c\x28\x8c\x4e\x12\xc3\x61\x3f\xdd\x83\x59\x5f\xb9\x50\x37\x7c\x8f\xe8\x41\xe9\xf8\xe7\xdc\x62\x19\xb8\x73\x13\x30\x2f\x3a\xb3\x52\x29\xb4\x55\xd0\x2a\x6b\x97\x0e\x01\xa8\x0d\x04\x55\xef\xb6\xc5\xfd\xd7\x0b\xa3\x8a\x4b\x44\xf7\x6e\x4b\xf8\xca\xe1\xab\x2d\x4e\xed\x90\x2d\xfe\x08\xad\x94\x5a\x33\x0b\xc1\xfc\x7f\x10\x26\xe4\x6e\x10\x80\x35\x3c\xdd\x14\xeb\xdd\x23\xfc\x7f\xd7\xc6\xae\x1d\xb0\xbb\x13\xb2\xab\x9d\xe5\xba\x99\xfc\x71\xb8\x9a\xbd\xbc\xc7\xd4\x83\xd5\x9f\x69\x20\x51\xd9\x3f\x7c\x61\xf0\xcb\xe8\xff\x02\x00\x00\xff\xff\xbe\x2e\x68\x92\x08\x38\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 14344, mode: os.FileMode(420), modTime: time.Unix(1537160155, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": {apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
