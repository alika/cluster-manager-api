// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package cluster_manager_api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The Hello World request
type HelloWorldMsg struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloWorldMsg) Reset()         { *m = HelloWorldMsg{} }
func (m *HelloWorldMsg) String() string { return proto.CompactTextString(m) }
func (*HelloWorldMsg) ProtoMessage()    {}
func (*HelloWorldMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{0}
}
func (m *HelloWorldMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloWorldMsg.Unmarshal(m, b)
}
func (m *HelloWorldMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloWorldMsg.Marshal(b, m, deterministic)
}
func (dst *HelloWorldMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloWorldMsg.Merge(dst, src)
}
func (m *HelloWorldMsg) XXX_Size() int {
	return xxx_messageInfo_HelloWorldMsg.Size(m)
}
func (m *HelloWorldMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloWorldMsg.DiscardUnknown(m)
}

var xxx_messageInfo_HelloWorldMsg proto.InternalMessageInfo

func (m *HelloWorldMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response to Hello World
type HelloWorldReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloWorldReply) Reset()         { *m = HelloWorldReply{} }
func (m *HelloWorldReply) String() string { return proto.CompactTextString(m) }
func (*HelloWorldReply) ProtoMessage()    {}
func (*HelloWorldReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{1}
}
func (m *HelloWorldReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloWorldReply.Unmarshal(m, b)
}
func (m *HelloWorldReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloWorldReply.Marshal(b, m, deterministic)
}
func (dst *HelloWorldReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloWorldReply.Merge(dst, src)
}
func (m *HelloWorldReply) XXX_Size() int {
	return xxx_messageInfo_HelloWorldReply.Size(m)
}
func (m *HelloWorldReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloWorldReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloWorldReply proto.InternalMessageInfo

func (m *HelloWorldReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetPodCountMsg struct {
	// Namespace to fetch the pod count
	// Leave empty to query all namespaces
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPodCountMsg) Reset()         { *m = GetPodCountMsg{} }
func (m *GetPodCountMsg) String() string { return proto.CompactTextString(m) }
func (*GetPodCountMsg) ProtoMessage()    {}
func (*GetPodCountMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{2}
}
func (m *GetPodCountMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPodCountMsg.Unmarshal(m, b)
}
func (m *GetPodCountMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPodCountMsg.Marshal(b, m, deterministic)
}
func (dst *GetPodCountMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPodCountMsg.Merge(dst, src)
}
func (m *GetPodCountMsg) XXX_Size() int {
	return xxx_messageInfo_GetPodCountMsg.Size(m)
}
func (m *GetPodCountMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPodCountMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GetPodCountMsg proto.InternalMessageInfo

func (m *GetPodCountMsg) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type GetPodCountReply struct {
	// Number of pods in the namespace (or all namespaces)
	Pods                 int32    `protobuf:"varint,1,opt,name=pods" json:"pods,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPodCountReply) Reset()         { *m = GetPodCountReply{} }
func (m *GetPodCountReply) String() string { return proto.CompactTextString(m) }
func (*GetPodCountReply) ProtoMessage()    {}
func (*GetPodCountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{3}
}
func (m *GetPodCountReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPodCountReply.Unmarshal(m, b)
}
func (m *GetPodCountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPodCountReply.Marshal(b, m, deterministic)
}
func (dst *GetPodCountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPodCountReply.Merge(dst, src)
}
func (m *GetPodCountReply) XXX_Size() int {
	return xxx_messageInfo_GetPodCountReply.Size(m)
}
func (m *GetPodCountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPodCountReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetPodCountReply proto.InternalMessageInfo

func (m *GetPodCountReply) GetPods() int32 {
	if m != nil {
		return m.Pods
	}
	return 0
}

type CreateClusterMsg struct {
	// Name of the cluster to be provisioned
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The provider specification
	Provider             *CreateClusterProviderSpec `protobuf:"bytes,2,opt,name=provider" json:"provider,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *CreateClusterMsg) Reset()         { *m = CreateClusterMsg{} }
func (m *CreateClusterMsg) String() string { return proto.CompactTextString(m) }
func (*CreateClusterMsg) ProtoMessage()    {}
func (*CreateClusterMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{4}
}
func (m *CreateClusterMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterMsg.Unmarshal(m, b)
}
func (m *CreateClusterMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterMsg.Marshal(b, m, deterministic)
}
func (dst *CreateClusterMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterMsg.Merge(dst, src)
}
func (m *CreateClusterMsg) XXX_Size() int {
	return xxx_messageInfo_CreateClusterMsg.Size(m)
}
func (m *CreateClusterMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterMsg.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterMsg proto.InternalMessageInfo

func (m *CreateClusterMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateClusterMsg) GetProvider() *CreateClusterProviderSpec {
	if m != nil {
		return m.Provider
	}
	return nil
}

type CreateClusterReply struct {
	// Whether or not the cluster was provisioned by this request
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	// The state of the cluster generation
	Status               string   `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateClusterReply) Reset()         { *m = CreateClusterReply{} }
func (m *CreateClusterReply) String() string { return proto.CompactTextString(m) }
func (*CreateClusterReply) ProtoMessage()    {}
func (*CreateClusterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{5}
}
func (m *CreateClusterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterReply.Unmarshal(m, b)
}
func (m *CreateClusterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterReply.Marshal(b, m, deterministic)
}
func (dst *CreateClusterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterReply.Merge(dst, src)
}
func (m *CreateClusterReply) XXX_Size() int {
	return xxx_messageInfo_CreateClusterReply.Size(m)
}
func (m *CreateClusterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterReply proto.InternalMessageInfo

func (m *CreateClusterReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *CreateClusterReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type GetClusterMsg struct {
	// Name of the cluster to be looked up
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetClusterMsg) Reset()         { *m = GetClusterMsg{} }
func (m *GetClusterMsg) String() string { return proto.CompactTextString(m) }
func (*GetClusterMsg) ProtoMessage()    {}
func (*GetClusterMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{6}
}
func (m *GetClusterMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterMsg.Unmarshal(m, b)
}
func (m *GetClusterMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterMsg.Marshal(b, m, deterministic)
}
func (dst *GetClusterMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterMsg.Merge(dst, src)
}
func (m *GetClusterMsg) XXX_Size() int {
	return xxx_messageInfo_GetClusterMsg.Size(m)
}
func (m *GetClusterMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterMsg proto.InternalMessageInfo

func (m *GetClusterMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetClusterReply struct {
	// Is the cluster in the system
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	// What is the status of the cluster
	Status string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	// What is the kubeconfig to connect to the cluster
	Kubeconfig           string   `protobuf:"bytes,3,opt,name=kubeconfig" json:"kubeconfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetClusterReply) Reset()         { *m = GetClusterReply{} }
func (m *GetClusterReply) String() string { return proto.CompactTextString(m) }
func (*GetClusterReply) ProtoMessage()    {}
func (*GetClusterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{7}
}
func (m *GetClusterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterReply.Unmarshal(m, b)
}
func (m *GetClusterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterReply.Marshal(b, m, deterministic)
}
func (dst *GetClusterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterReply.Merge(dst, src)
}
func (m *GetClusterReply) XXX_Size() int {
	return xxx_messageInfo_GetClusterReply.Size(m)
}
func (m *GetClusterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterReply proto.InternalMessageInfo

func (m *GetClusterReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *GetClusterReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GetClusterReply) GetKubeconfig() string {
	if m != nil {
		return m.Kubeconfig
	}
	return ""
}

type DeleteClusterMsg struct {
	// What is the cluster's name to destroy
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClusterMsg) Reset()         { *m = DeleteClusterMsg{} }
func (m *DeleteClusterMsg) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterMsg) ProtoMessage()    {}
func (*DeleteClusterMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{8}
}
func (m *DeleteClusterMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterMsg.Unmarshal(m, b)
}
func (m *DeleteClusterMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterMsg.Marshal(b, m, deterministic)
}
func (dst *DeleteClusterMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterMsg.Merge(dst, src)
}
func (m *DeleteClusterMsg) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterMsg.Size(m)
}
func (m *DeleteClusterMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterMsg proto.InternalMessageInfo

func (m *DeleteClusterMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteClusterReply struct {
	// Could the cluster be destroyed
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	// Status of the request
	Status               string   `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClusterReply) Reset()         { *m = DeleteClusterReply{} }
func (m *DeleteClusterReply) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterReply) ProtoMessage()    {}
func (*DeleteClusterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{9}
}
func (m *DeleteClusterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterReply.Unmarshal(m, b)
}
func (m *DeleteClusterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterReply.Marshal(b, m, deterministic)
}
func (dst *DeleteClusterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterReply.Merge(dst, src)
}
func (m *DeleteClusterReply) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterReply.Size(m)
}
func (m *DeleteClusterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterReply proto.InternalMessageInfo

func (m *DeleteClusterReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *DeleteClusterReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type GetClusterListMsg struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetClusterListMsg) Reset()         { *m = GetClusterListMsg{} }
func (m *GetClusterListMsg) String() string { return proto.CompactTextString(m) }
func (*GetClusterListMsg) ProtoMessage()    {}
func (*GetClusterListMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{10}
}
func (m *GetClusterListMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterListMsg.Unmarshal(m, b)
}
func (m *GetClusterListMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterListMsg.Marshal(b, m, deterministic)
}
func (dst *GetClusterListMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterListMsg.Merge(dst, src)
}
func (m *GetClusterListMsg) XXX_Size() int {
	return xxx_messageInfo_GetClusterListMsg.Size(m)
}
func (m *GetClusterListMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterListMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterListMsg proto.InternalMessageInfo

type GetClusterListReply struct {
	// Is the cluster in the system
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	// List of clusters
	Clusters             []*ClusterListItem `protobuf:"bytes,2,rep,name=clusters" json:"clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetClusterListReply) Reset()         { *m = GetClusterListReply{} }
func (m *GetClusterListReply) String() string { return proto.CompactTextString(m) }
func (*GetClusterListReply) ProtoMessage()    {}
func (*GetClusterListReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{11}
}
func (m *GetClusterListReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterListReply.Unmarshal(m, b)
}
func (m *GetClusterListReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterListReply.Marshal(b, m, deterministic)
}
func (dst *GetClusterListReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterListReply.Merge(dst, src)
}
func (m *GetClusterListReply) XXX_Size() int {
	return xxx_messageInfo_GetClusterListReply.Size(m)
}
func (m *GetClusterListReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterListReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterListReply proto.InternalMessageInfo

func (m *GetClusterListReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *GetClusterListReply) GetClusters() []*ClusterListItem {
	if m != nil {
		return m.Clusters
	}
	return nil
}

type ClusterListItem struct {
	// Name of the cluster
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// What is the status of the cluster
	Status               string   `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClusterListItem) Reset()         { *m = ClusterListItem{} }
func (m *ClusterListItem) String() string { return proto.CompactTextString(m) }
func (*ClusterListItem) ProtoMessage()    {}
func (*ClusterListItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{12}
}
func (m *ClusterListItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterListItem.Unmarshal(m, b)
}
func (m *ClusterListItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterListItem.Marshal(b, m, deterministic)
}
func (dst *ClusterListItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterListItem.Merge(dst, src)
}
func (m *ClusterListItem) XXX_Size() int {
	return xxx_messageInfo_ClusterListItem.Size(m)
}
func (m *ClusterListItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterListItem.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterListItem proto.InternalMessageInfo

func (m *ClusterListItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClusterListItem) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type ProvisionTillerMsg struct {
	// Cluster tiller should be installed on
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	// Namespace tiller should be installed in
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	// Versino of tiller/helm to install / upgrade to
	Version string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	// Is the tiller a cluster-wide tiller?
	// Should it have cluster-wide admin privileges?
	ClusterWide bool `protobuf:"varint,4,opt,name=cluster_wide,json=clusterWide" json:"cluster_wide,omitempty"`
	// Namespaces that it should be able to admin on
	AdminNamespaces      []string `protobuf:"bytes,5,rep,name=admin_namespaces,json=adminNamespaces" json:"admin_namespaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProvisionTillerMsg) Reset()         { *m = ProvisionTillerMsg{} }
func (m *ProvisionTillerMsg) String() string { return proto.CompactTextString(m) }
func (*ProvisionTillerMsg) ProtoMessage()    {}
func (*ProvisionTillerMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{13}
}
func (m *ProvisionTillerMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProvisionTillerMsg.Unmarshal(m, b)
}
func (m *ProvisionTillerMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProvisionTillerMsg.Marshal(b, m, deterministic)
}
func (dst *ProvisionTillerMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvisionTillerMsg.Merge(dst, src)
}
func (m *ProvisionTillerMsg) XXX_Size() int {
	return xxx_messageInfo_ProvisionTillerMsg.Size(m)
}
func (m *ProvisionTillerMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvisionTillerMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ProvisionTillerMsg proto.InternalMessageInfo

func (m *ProvisionTillerMsg) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ProvisionTillerMsg) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ProvisionTillerMsg) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ProvisionTillerMsg) GetClusterWide() bool {
	if m != nil {
		return m.ClusterWide
	}
	return false
}

func (m *ProvisionTillerMsg) GetAdminNamespaces() []string {
	if m != nil {
		return m.AdminNamespaces
	}
	return nil
}

type ProvisionTillerReply struct {
	// Was the operation successful
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	// What messages were given
	Message              string   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProvisionTillerReply) Reset()         { *m = ProvisionTillerReply{} }
func (m *ProvisionTillerReply) String() string { return proto.CompactTextString(m) }
func (*ProvisionTillerReply) ProtoMessage()    {}
func (*ProvisionTillerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{14}
}
func (m *ProvisionTillerReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProvisionTillerReply.Unmarshal(m, b)
}
func (m *ProvisionTillerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProvisionTillerReply.Marshal(b, m, deterministic)
}
func (dst *ProvisionTillerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvisionTillerReply.Merge(dst, src)
}
func (m *ProvisionTillerReply) XXX_Size() int {
	return xxx_messageInfo_ProvisionTillerReply.Size(m)
}
func (m *ProvisionTillerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvisionTillerReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProvisionTillerReply proto.InternalMessageInfo

func (m *ProvisionTillerReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ProvisionTillerReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type InstallHelmChartMsg struct {
	// Cluster tiller should be installed on
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	// Tiller settings
	Tiller *GenericTillerSetting `protobuf:"bytes,2,opt,name=tiller" json:"tiller,omitempty"`
	// Chart Settings
	Chart                *GenericHelmChart `protobuf:"bytes,3,opt,name=chart" json:"chart,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *InstallHelmChartMsg) Reset()         { *m = InstallHelmChartMsg{} }
func (m *InstallHelmChartMsg) String() string { return proto.CompactTextString(m) }
func (*InstallHelmChartMsg) ProtoMessage()    {}
func (*InstallHelmChartMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{15}
}
func (m *InstallHelmChartMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallHelmChartMsg.Unmarshal(m, b)
}
func (m *InstallHelmChartMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallHelmChartMsg.Marshal(b, m, deterministic)
}
func (dst *InstallHelmChartMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallHelmChartMsg.Merge(dst, src)
}
func (m *InstallHelmChartMsg) XXX_Size() int {
	return xxx_messageInfo_InstallHelmChartMsg.Size(m)
}
func (m *InstallHelmChartMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallHelmChartMsg.DiscardUnknown(m)
}

var xxx_messageInfo_InstallHelmChartMsg proto.InternalMessageInfo

func (m *InstallHelmChartMsg) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *InstallHelmChartMsg) GetTiller() *GenericTillerSetting {
	if m != nil {
		return m.Tiller
	}
	return nil
}

func (m *InstallHelmChartMsg) GetChart() *GenericHelmChart {
	if m != nil {
		return m.Chart
	}
	return nil
}

type InstallHelmChartReply struct {
	// Was the operation successful
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	// What messages were given
	Message              string   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstallHelmChartReply) Reset()         { *m = InstallHelmChartReply{} }
func (m *InstallHelmChartReply) String() string { return proto.CompactTextString(m) }
func (*InstallHelmChartReply) ProtoMessage()    {}
func (*InstallHelmChartReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{16}
}
func (m *InstallHelmChartReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallHelmChartReply.Unmarshal(m, b)
}
func (m *InstallHelmChartReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallHelmChartReply.Marshal(b, m, deterministic)
}
func (dst *InstallHelmChartReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallHelmChartReply.Merge(dst, src)
}
func (m *InstallHelmChartReply) XXX_Size() int {
	return xxx_messageInfo_InstallHelmChartReply.Size(m)
}
func (m *InstallHelmChartReply) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallHelmChartReply.DiscardUnknown(m)
}

var xxx_messageInfo_InstallHelmChartReply proto.InternalMessageInfo

func (m *InstallHelmChartReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *InstallHelmChartReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteHelmChartMsg struct {
	// Cluster tiller should be installed on
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	// Tiller settings
	Tiller *GenericTillerSetting `protobuf:"bytes,2,opt,name=tiller" json:"tiller,omitempty"`
	// Chart Name
	Chart                string   `protobuf:"bytes,3,opt,name=chart" json:"chart,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteHelmChartMsg) Reset()         { *m = DeleteHelmChartMsg{} }
func (m *DeleteHelmChartMsg) String() string { return proto.CompactTextString(m) }
func (*DeleteHelmChartMsg) ProtoMessage()    {}
func (*DeleteHelmChartMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{17}
}
func (m *DeleteHelmChartMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteHelmChartMsg.Unmarshal(m, b)
}
func (m *DeleteHelmChartMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteHelmChartMsg.Marshal(b, m, deterministic)
}
func (dst *DeleteHelmChartMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteHelmChartMsg.Merge(dst, src)
}
func (m *DeleteHelmChartMsg) XXX_Size() int {
	return xxx_messageInfo_DeleteHelmChartMsg.Size(m)
}
func (m *DeleteHelmChartMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteHelmChartMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteHelmChartMsg proto.InternalMessageInfo

func (m *DeleteHelmChartMsg) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *DeleteHelmChartMsg) GetTiller() *GenericTillerSetting {
	if m != nil {
		return m.Tiller
	}
	return nil
}

func (m *DeleteHelmChartMsg) GetChart() string {
	if m != nil {
		return m.Chart
	}
	return ""
}

type DeleteHelmChartReply struct {
	// Was the operation successful
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	// What messages were given
	Message              string   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteHelmChartReply) Reset()         { *m = DeleteHelmChartReply{} }
func (m *DeleteHelmChartReply) String() string { return proto.CompactTextString(m) }
func (*DeleteHelmChartReply) ProtoMessage()    {}
func (*DeleteHelmChartReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{18}
}
func (m *DeleteHelmChartReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteHelmChartReply.Unmarshal(m, b)
}
func (m *DeleteHelmChartReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteHelmChartReply.Marshal(b, m, deterministic)
}
func (dst *DeleteHelmChartReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteHelmChartReply.Merge(dst, src)
}
func (m *DeleteHelmChartReply) XXX_Size() int {
	return xxx_messageInfo_DeleteHelmChartReply.Size(m)
}
func (m *DeleteHelmChartReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteHelmChartReply.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteHelmChartReply proto.InternalMessageInfo

func (m *DeleteHelmChartReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *DeleteHelmChartReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GenericTillerSetting struct {
	// What is the tiller namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	// What is the version of tiller/helm
	Version              string   `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenericTillerSetting) Reset()         { *m = GenericTillerSetting{} }
func (m *GenericTillerSetting) String() string { return proto.CompactTextString(m) }
func (*GenericTillerSetting) ProtoMessage()    {}
func (*GenericTillerSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{19}
}
func (m *GenericTillerSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericTillerSetting.Unmarshal(m, b)
}
func (m *GenericTillerSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericTillerSetting.Marshal(b, m, deterministic)
}
func (dst *GenericTillerSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericTillerSetting.Merge(dst, src)
}
func (m *GenericTillerSetting) XXX_Size() int {
	return xxx_messageInfo_GenericTillerSetting.Size(m)
}
func (m *GenericTillerSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericTillerSetting.DiscardUnknown(m)
}

var xxx_messageInfo_GenericTillerSetting proto.InternalMessageInfo

func (m *GenericTillerSetting) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GenericTillerSetting) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type GenericHelmChart struct {
	// What is the name of the deployment
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// What is the namespace to deploy the application to
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	// What is the chart repository
	Repo string `protobuf:"bytes,3,opt,name=repo" json:"repo,omitempty"`
	// What is the chart name
	Chart string `protobuf:"bytes,4,opt,name=chart" json:"chart,omitempty"`
	// What are the options (nested yaml - the Values.yaml contents)
	Values               string   `protobuf:"bytes,5,opt,name=values" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenericHelmChart) Reset()         { *m = GenericHelmChart{} }
func (m *GenericHelmChart) String() string { return proto.CompactTextString(m) }
func (*GenericHelmChart) ProtoMessage()    {}
func (*GenericHelmChart) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{20}
}
func (m *GenericHelmChart) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericHelmChart.Unmarshal(m, b)
}
func (m *GenericHelmChart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericHelmChart.Marshal(b, m, deterministic)
}
func (dst *GenericHelmChart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericHelmChart.Merge(dst, src)
}
func (m *GenericHelmChart) XXX_Size() int {
	return xxx_messageInfo_GenericHelmChart.Size(m)
}
func (m *GenericHelmChart) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericHelmChart.DiscardUnknown(m)
}

var xxx_messageInfo_GenericHelmChart proto.InternalMessageInfo

func (m *GenericHelmChart) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GenericHelmChart) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GenericHelmChart) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *GenericHelmChart) GetChart() string {
	if m != nil {
		return m.Chart
	}
	return ""
}

func (m *GenericHelmChart) GetValues() string {
	if m != nil {
		return m.Values
	}
	return ""
}

type CreateClusterProviderSpec struct {
	// What is the provider - currently this is aws or maas
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The MaaS specification
	Maas *CreateClusterMaaSSpec `protobuf:"bytes,2,opt,name=maas" json:"maas,omitempty"`
	// The AWS specification
	Aws                  *CreateClusterAWSSpec `protobuf:"bytes,3,opt,name=aws" json:"aws,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CreateClusterProviderSpec) Reset()         { *m = CreateClusterProviderSpec{} }
func (m *CreateClusterProviderSpec) String() string { return proto.CompactTextString(m) }
func (*CreateClusterProviderSpec) ProtoMessage()    {}
func (*CreateClusterProviderSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{21}
}
func (m *CreateClusterProviderSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterProviderSpec.Unmarshal(m, b)
}
func (m *CreateClusterProviderSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterProviderSpec.Marshal(b, m, deterministic)
}
func (dst *CreateClusterProviderSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterProviderSpec.Merge(dst, src)
}
func (m *CreateClusterProviderSpec) XXX_Size() int {
	return xxx_messageInfo_CreateClusterProviderSpec.Size(m)
}
func (m *CreateClusterProviderSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterProviderSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterProviderSpec proto.InternalMessageInfo

func (m *CreateClusterProviderSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateClusterProviderSpec) GetMaas() *CreateClusterMaaSSpec {
	if m != nil {
		return m.Maas
	}
	return nil
}

func (m *CreateClusterProviderSpec) GetAws() *CreateClusterAWSSpec {
	if m != nil {
		return m.Aws
	}
	return nil
}

type CreateClusterMaaSSpec struct {
	// The MaaS API endpoint
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint" json:"endpoint,omitempty"`
	// The username in the MaaS API
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	// The OAuth key for the endpoint
	OauthKey             string   `protobuf:"bytes,3,opt,name=oauth_key,json=oauthKey" json:"oauth_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateClusterMaaSSpec) Reset()         { *m = CreateClusterMaaSSpec{} }
func (m *CreateClusterMaaSSpec) String() string { return proto.CompactTextString(m) }
func (*CreateClusterMaaSSpec) ProtoMessage()    {}
func (*CreateClusterMaaSSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{22}
}
func (m *CreateClusterMaaSSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterMaaSSpec.Unmarshal(m, b)
}
func (m *CreateClusterMaaSSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterMaaSSpec.Marshal(b, m, deterministic)
}
func (dst *CreateClusterMaaSSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterMaaSSpec.Merge(dst, src)
}
func (m *CreateClusterMaaSSpec) XXX_Size() int {
	return xxx_messageInfo_CreateClusterMaaSSpec.Size(m)
}
func (m *CreateClusterMaaSSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterMaaSSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterMaaSSpec proto.InternalMessageInfo

func (m *CreateClusterMaaSSpec) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *CreateClusterMaaSSpec) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CreateClusterMaaSSpec) GetOauthKey() string {
	if m != nil {
		return m.OauthKey
	}
	return ""
}

type CreateClusterAWSSpec struct {
	// The region for AWS
	Region string `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
	// The SecretKeyId for API Access
	SecretKeyId string `protobuf:"bytes,2,opt,name=secret_key_id,json=secretKeyId" json:"secret_key_id,omitempty"`
	// The SecretAccessKey for API access
	SecretAccessKey      string   `protobuf:"bytes,3,opt,name=secret_access_key,json=secretAccessKey" json:"secret_access_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateClusterAWSSpec) Reset()         { *m = CreateClusterAWSSpec{} }
func (m *CreateClusterAWSSpec) String() string { return proto.CompactTextString(m) }
func (*CreateClusterAWSSpec) ProtoMessage()    {}
func (*CreateClusterAWSSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_8bfcf4a379dabe56, []int{23}
}
func (m *CreateClusterAWSSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterAWSSpec.Unmarshal(m, b)
}
func (m *CreateClusterAWSSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterAWSSpec.Marshal(b, m, deterministic)
}
func (dst *CreateClusterAWSSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterAWSSpec.Merge(dst, src)
}
func (m *CreateClusterAWSSpec) XXX_Size() int {
	return xxx_messageInfo_CreateClusterAWSSpec.Size(m)
}
func (m *CreateClusterAWSSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterAWSSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterAWSSpec proto.InternalMessageInfo

func (m *CreateClusterAWSSpec) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *CreateClusterAWSSpec) GetSecretKeyId() string {
	if m != nil {
		return m.SecretKeyId
	}
	return ""
}

func (m *CreateClusterAWSSpec) GetSecretAccessKey() string {
	if m != nil {
		return m.SecretAccessKey
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloWorldMsg)(nil), "cluster_manager_api.HelloWorldMsg")
	proto.RegisterType((*HelloWorldReply)(nil), "cluster_manager_api.HelloWorldReply")
	proto.RegisterType((*GetPodCountMsg)(nil), "cluster_manager_api.GetPodCountMsg")
	proto.RegisterType((*GetPodCountReply)(nil), "cluster_manager_api.GetPodCountReply")
	proto.RegisterType((*CreateClusterMsg)(nil), "cluster_manager_api.CreateClusterMsg")
	proto.RegisterType((*CreateClusterReply)(nil), "cluster_manager_api.CreateClusterReply")
	proto.RegisterType((*GetClusterMsg)(nil), "cluster_manager_api.GetClusterMsg")
	proto.RegisterType((*GetClusterReply)(nil), "cluster_manager_api.GetClusterReply")
	proto.RegisterType((*DeleteClusterMsg)(nil), "cluster_manager_api.DeleteClusterMsg")
	proto.RegisterType((*DeleteClusterReply)(nil), "cluster_manager_api.DeleteClusterReply")
	proto.RegisterType((*GetClusterListMsg)(nil), "cluster_manager_api.GetClusterListMsg")
	proto.RegisterType((*GetClusterListReply)(nil), "cluster_manager_api.GetClusterListReply")
	proto.RegisterType((*ClusterListItem)(nil), "cluster_manager_api.ClusterListItem")
	proto.RegisterType((*ProvisionTillerMsg)(nil), "cluster_manager_api.ProvisionTillerMsg")
	proto.RegisterType((*ProvisionTillerReply)(nil), "cluster_manager_api.ProvisionTillerReply")
	proto.RegisterType((*InstallHelmChartMsg)(nil), "cluster_manager_api.InstallHelmChartMsg")
	proto.RegisterType((*InstallHelmChartReply)(nil), "cluster_manager_api.InstallHelmChartReply")
	proto.RegisterType((*DeleteHelmChartMsg)(nil), "cluster_manager_api.DeleteHelmChartMsg")
	proto.RegisterType((*DeleteHelmChartReply)(nil), "cluster_manager_api.DeleteHelmChartReply")
	proto.RegisterType((*GenericTillerSetting)(nil), "cluster_manager_api.GenericTillerSetting")
	proto.RegisterType((*GenericHelmChart)(nil), "cluster_manager_api.GenericHelmChart")
	proto.RegisterType((*CreateClusterProviderSpec)(nil), "cluster_manager_api.CreateClusterProviderSpec")
	proto.RegisterType((*CreateClusterMaaSSpec)(nil), "cluster_manager_api.CreateClusterMaaSSpec")
	proto.RegisterType((*CreateClusterAWSSpec)(nil), "cluster_manager_api.CreateClusterAWSSpec")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClusterClient is the client API for Cluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterClient interface {
	// Simple Hello World Service - will repeat a greeting to the name provided
	HelloWorld(ctx context.Context, in *HelloWorldMsg, opts ...grpc.CallOption) (*HelloWorldReply, error)
	// Simple pod count response.  Will respond with the number of pods in the namespace provided
	GetPodCount(ctx context.Context, in *GetPodCountMsg, opts ...grpc.CallOption) (*GetPodCountReply, error)
	// Will provision a cluster
	CreateCluster(ctx context.Context, in *CreateClusterMsg, opts ...grpc.CallOption) (*CreateClusterReply, error)
	// Will retrieve the status of a cluster and its kubeconfig for connectivity
	GetCluster(ctx context.Context, in *GetClusterMsg, opts ...grpc.CallOption) (*GetClusterReply, error)
	// Will delete a cluster
	DeleteCluster(ctx context.Context, in *DeleteClusterMsg, opts ...grpc.CallOption) (*DeleteClusterReply, error)
	// Will retrieve a list of clusters
	GetClusterList(ctx context.Context, in *GetClusterListMsg, opts ...grpc.CallOption) (*GetClusterListReply, error)
	// Will install (or reinstall) tiller
	ProvisionTiller(ctx context.Context, in *ProvisionTillerMsg, opts ...grpc.CallOption) (*ProvisionTillerReply, error)
	// Will install (or reinstall) helm chart
	// This will be destructive if a chart has already been deployed with the same name
	InstallHelmChart(ctx context.Context, in *InstallHelmChartMsg, opts ...grpc.CallOption) (*InstallHelmChartReply, error)
	// Will delete deployed helm chart
	DeleteHelmChart(ctx context.Context, in *DeleteHelmChartMsg, opts ...grpc.CallOption) (*DeleteHelmChartReply, error)
}

type clusterClient struct {
	cc *grpc.ClientConn
}

func NewClusterClient(cc *grpc.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) HelloWorld(ctx context.Context, in *HelloWorldMsg, opts ...grpc.CallOption) (*HelloWorldReply, error) {
	out := new(HelloWorldReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/HelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetPodCount(ctx context.Context, in *GetPodCountMsg, opts ...grpc.CallOption) (*GetPodCountReply, error) {
	out := new(GetPodCountReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/GetPodCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) CreateCluster(ctx context.Context, in *CreateClusterMsg, opts ...grpc.CallOption) (*CreateClusterReply, error) {
	out := new(CreateClusterReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/CreateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetCluster(ctx context.Context, in *GetClusterMsg, opts ...grpc.CallOption) (*GetClusterReply, error) {
	out := new(GetClusterReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) DeleteCluster(ctx context.Context, in *DeleteClusterMsg, opts ...grpc.CallOption) (*DeleteClusterReply, error) {
	out := new(DeleteClusterReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/DeleteCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetClusterList(ctx context.Context, in *GetClusterListMsg, opts ...grpc.CallOption) (*GetClusterListReply, error) {
	out := new(GetClusterListReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/GetClusterList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) ProvisionTiller(ctx context.Context, in *ProvisionTillerMsg, opts ...grpc.CallOption) (*ProvisionTillerReply, error) {
	out := new(ProvisionTillerReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/ProvisionTiller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) InstallHelmChart(ctx context.Context, in *InstallHelmChartMsg, opts ...grpc.CallOption) (*InstallHelmChartReply, error) {
	out := new(InstallHelmChartReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/InstallHelmChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) DeleteHelmChart(ctx context.Context, in *DeleteHelmChartMsg, opts ...grpc.CallOption) (*DeleteHelmChartReply, error) {
	out := new(DeleteHelmChartReply)
	err := c.cc.Invoke(ctx, "/cluster_manager_api.Cluster/DeleteHelmChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cluster service

type ClusterServer interface {
	// Simple Hello World Service - will repeat a greeting to the name provided
	HelloWorld(context.Context, *HelloWorldMsg) (*HelloWorldReply, error)
	// Simple pod count response.  Will respond with the number of pods in the namespace provided
	GetPodCount(context.Context, *GetPodCountMsg) (*GetPodCountReply, error)
	// Will provision a cluster
	CreateCluster(context.Context, *CreateClusterMsg) (*CreateClusterReply, error)
	// Will retrieve the status of a cluster and its kubeconfig for connectivity
	GetCluster(context.Context, *GetClusterMsg) (*GetClusterReply, error)
	// Will delete a cluster
	DeleteCluster(context.Context, *DeleteClusterMsg) (*DeleteClusterReply, error)
	// Will retrieve a list of clusters
	GetClusterList(context.Context, *GetClusterListMsg) (*GetClusterListReply, error)
	// Will install (or reinstall) tiller
	ProvisionTiller(context.Context, *ProvisionTillerMsg) (*ProvisionTillerReply, error)
	// Will install (or reinstall) helm chart
	// This will be destructive if a chart has already been deployed with the same name
	InstallHelmChart(context.Context, *InstallHelmChartMsg) (*InstallHelmChartReply, error)
	// Will delete deployed helm chart
	DeleteHelmChart(context.Context, *DeleteHelmChartMsg) (*DeleteHelmChartReply, error)
}

func RegisterClusterServer(s *grpc.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloWorldMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/HelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).HelloWorld(ctx, req.(*HelloWorldMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetPodCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodCountMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetPodCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/GetPodCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetPodCount(ctx, req.(*GetPodCountMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/CreateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).CreateCluster(ctx, req.(*CreateClusterMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetCluster(ctx, req.(*GetClusterMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/DeleteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).DeleteCluster(ctx, req.(*DeleteClusterMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetClusterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterListMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetClusterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/GetClusterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetClusterList(ctx, req.(*GetClusterListMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_ProvisionTiller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionTillerMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ProvisionTiller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/ProvisionTiller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ProvisionTiller(ctx, req.(*ProvisionTillerMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_InstallHelmChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallHelmChartMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).InstallHelmChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/InstallHelmChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).InstallHelmChart(ctx, req.(*InstallHelmChartMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_DeleteHelmChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHelmChartMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).DeleteHelmChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/DeleteHelmChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).DeleteHelmChart(ctx, req.(*DeleteHelmChartMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cluster_manager_api.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld",
			Handler:    _Cluster_HelloWorld_Handler,
		},
		{
			MethodName: "GetPodCount",
			Handler:    _Cluster_GetPodCount_Handler,
		},
		{
			MethodName: "CreateCluster",
			Handler:    _Cluster_CreateCluster_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _Cluster_GetCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _Cluster_DeleteCluster_Handler,
		},
		{
			MethodName: "GetClusterList",
			Handler:    _Cluster_GetClusterList_Handler,
		},
		{
			MethodName: "ProvisionTiller",
			Handler:    _Cluster_ProvisionTiller_Handler,
		},
		{
			MethodName: "InstallHelmChart",
			Handler:    _Cluster_InstallHelmChart_Handler,
		},
		{
			MethodName: "DeleteHelmChart",
			Handler:    _Cluster_DeleteHelmChart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_api_8bfcf4a379dabe56) }

var fileDescriptor_api_8bfcf4a379dabe56 = []byte{
	// 1183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0x4f, 0x73, 0xdb, 0x44,
	0x14, 0x1f, 0x39, 0x6e, 0x6a, 0x3f, 0x37, 0x71, 0xba, 0x76, 0x5b, 0x57, 0x94, 0x8e, 0xd9, 0x36,
	0x25, 0x31, 0xc4, 0x6e, 0xdd, 0x5b, 0x0a, 0x4c, 0x4c, 0x98, 0x49, 0x43, 0x48, 0x27, 0xe3, 0x00,
	0x19, 0x4e, 0x61, 0x23, 0x2f, 0xb2, 0x88, 0xa4, 0xd5, 0x68, 0xd7, 0x0e, 0x86, 0x19, 0xa6, 0x70,
	0x80, 0x3b, 0x7c, 0x0d, 0x66, 0xb8, 0xf0, 0x4d, 0xf8, 0x04, 0xcc, 0xc0, 0x85, 0x4f, 0xc1, 0xec,
	0x6a, 0x65, 0x5b, 0x8a, 0x6c, 0x27, 0x17, 0x4e, 0xd6, 0xae, 0x7e, 0xef, 0xfd, 0x7e, 0xef, 0xcf,
	0x6a, 0x9f, 0xa1, 0x48, 0x02, 0xa7, 0x19, 0x84, 0x4c, 0x30, 0x54, 0xb1, 0xdc, 0x01, 0x17, 0x34,
	0x3c, 0xf5, 0x88, 0x4f, 0x6c, 0x1a, 0x9e, 0x92, 0xc0, 0x31, 0x1f, 0xd8, 0x8c, 0xd9, 0x2e, 0x6d,
	0x91, 0xc0, 0x69, 0x11, 0xdf, 0x67, 0x82, 0x08, 0x87, 0xf9, 0x3c, 0x32, 0x31, 0xdf, 0x55, 0x3f,
	0xd6, 0x96, 0x4d, 0xfd, 0x2d, 0x7e, 0x41, 0x6c, 0x9b, 0x86, 0x2d, 0x16, 0x28, 0xc4, 0x65, 0x34,
	0x7e, 0x04, 0x2b, 0x2f, 0xa9, 0xeb, 0xb2, 0x13, 0x16, 0xba, 0xbd, 0x43, 0x6e, 0x23, 0x04, 0x79,
	0x9f, 0x78, 0xb4, 0x66, 0xd4, 0x8d, 0x8d, 0x62, 0x57, 0x3d, 0xe3, 0x77, 0xa0, 0x3c, 0x01, 0x75,
	0x69, 0xe0, 0x8e, 0x50, 0x0d, 0x6e, 0x7a, 0x94, 0x73, 0x62, 0xc7, 0xc8, 0x78, 0x89, 0x9b, 0xb0,
	0xba, 0x47, 0xc5, 0x11, 0xeb, 0xed, 0xb2, 0x81, 0x2f, 0xa4, 0xcb, 0x07, 0x50, 0x94, 0x6e, 0x78,
	0x40, 0xac, 0x18, 0x3d, 0xd9, 0xc0, 0x4f, 0x60, 0x6d, 0x0a, 0x1f, 0x79, 0x47, 0x90, 0x0f, 0x58,
	0x8f, 0x2b, 0xf0, 0x8d, 0xae, 0x7a, 0xc6, 0x21, 0xac, 0xed, 0x86, 0x94, 0x08, 0xba, 0x1b, 0xa5,
	0x64, 0x86, 0x58, 0xf4, 0x31, 0x14, 0x82, 0x90, 0x0d, 0x9d, 0x1e, 0x0d, 0x6b, 0xb9, 0xba, 0xb1,
	0x51, 0x6a, 0x37, 0x9b, 0x19, 0x59, 0x6c, 0x26, 0x9c, 0x1d, 0x69, 0x8b, 0xe3, 0x80, 0x5a, 0xdd,
	0xb1, 0x3d, 0x7e, 0x0f, 0x50, 0x02, 0x16, 0xa9, 0x5b, 0x85, 0x1c, 0x3b, 0x57, 0x9c, 0x85, 0x6e,
	0x8e, 0x9d, 0xa3, 0xbb, 0xb0, 0xcc, 0x05, 0x11, 0x03, 0xae, 0xf8, 0x8a, 0x5d, 0xbd, 0x92, 0xb9,
	0xdd, 0xa3, 0x62, 0xbe, 0x5c, 0xfc, 0x05, 0x94, 0x27, 0xa0, 0x6b, 0xf9, 0x47, 0x0f, 0x01, 0xce,
	0x07, 0x67, 0xd4, 0x62, 0xfe, 0x57, 0x8e, 0x5d, 0x5b, 0x52, 0xef, 0xa6, 0x76, 0x64, 0x66, 0x3f,
	0xa2, 0x2e, 0x5d, 0x94, 0x31, 0x19, 0x65, 0x02, 0x77, 0xbd, 0x28, 0x2b, 0x70, 0x7b, 0x12, 0xc0,
	0x27, 0x0e, 0x97, 0x25, 0xc7, 0x36, 0x54, 0x92, 0x9b, 0xd9, 0x3e, 0x77, 0xa0, 0xa0, 0x4b, 0x23,
	0xbd, 0x2e, 0x6d, 0x94, 0xda, 0x8f, 0xb3, 0x6b, 0x35, 0x71, 0xb4, 0x2f, 0xa8, 0xd7, 0x1d, 0x5b,
	0xe1, 0xf7, 0xa1, 0x9c, 0x7a, 0x99, 0xd9, 0x14, 0xb3, 0xc4, 0xff, 0x61, 0x00, 0x52, 0xb5, 0xe7,
	0x0e, 0xf3, 0x3f, 0x75, 0x5c, 0x37, 0xca, 0x52, 0x0d, 0x6e, 0x6a, 0x86, 0xb8, 0xbb, 0xf5, 0x32,
	0xd9, 0xcb, 0xb9, 0x54, 0x2f, 0x4b, 0xbb, 0x21, 0x0d, 0xa5, 0x2f, 0x5d, 0x8e, 0x78, 0x89, 0xde,
	0x82, 0x5b, 0x71, 0x60, 0x17, 0x4e, 0x8f, 0xd6, 0xf2, 0x2a, 0x07, 0x25, 0xbd, 0x77, 0xe2, 0xf4,
	0x28, 0xda, 0x84, 0x35, 0xd2, 0xf3, 0x1c, 0xff, 0x74, 0xec, 0x8f, 0xd7, 0x6e, 0xd4, 0x97, 0x36,
	0x8a, 0xdd, 0xb2, 0xda, 0x7f, 0x35, 0xde, 0xc6, 0x3b, 0x50, 0x4d, 0xa9, 0xce, 0xce, 0xef, 0xd4,
	0x29, 0xcd, 0x25, 0x4f, 0xe9, 0xef, 0x06, 0x54, 0xf6, 0x7d, 0x2e, 0x88, 0xeb, 0xbe, 0xa4, 0xae,
	0xb7, 0xdb, 0x27, 0xa1, 0x98, 0x1f, 0x79, 0x07, 0x96, 0x85, 0xa2, 0xd2, 0xa7, 0x6a, 0x33, 0xb3,
	0x52, 0x7b, 0xd4, 0xa7, 0xa1, 0x63, 0x45, 0xa2, 0x8e, 0xa9, 0x10, 0x8e, 0x6f, 0x77, 0xb5, 0x21,
	0x7a, 0x01, 0x37, 0x2c, 0x49, 0xa4, 0x92, 0x53, 0x6a, 0xaf, 0xcf, 0xf3, 0x30, 0x56, 0xd5, 0x8d,
	0x6c, 0x70, 0x07, 0xee, 0xa4, 0x05, 0x5f, 0x37, 0xe8, 0x9f, 0x8d, 0xb8, 0xd3, 0xff, 0xbf, 0x98,
	0xab, 0xd3, 0x31, 0x17, 0xe3, 0x60, 0x76, 0xa0, 0x9a, 0x12, 0x72, 0xdd, 0x58, 0x5e, 0x41, 0x35,
	0x8b, 0x77, 0xfe, 0xc7, 0x76, 0xba, 0x41, 0x73, 0x89, 0x06, 0xc5, 0x3f, 0x19, 0xf2, 0x3b, 0x9c,
	0x4c, 0x7d, 0xe6, 0x51, 0x9a, 0x7f, 0x02, 0x10, 0xe4, 0x43, 0x1a, 0x30, 0x1d, 0xad, 0x7a, 0x9e,
	0xa4, 0x20, 0x3f, 0x95, 0x02, 0x79, 0x24, 0x87, 0xc4, 0x1d, 0xa8, 0x26, 0x57, 0x47, 0x32, 0x5a,
	0xe1, 0xdf, 0x0c, 0xb8, 0x3f, 0xf3, 0xdb, 0x9c, 0xa9, 0xe8, 0x03, 0xc8, 0x7b, 0x84, 0x70, 0x5d,
	0xa3, 0xc6, 0xe2, 0xaf, 0xfd, 0x21, 0x21, 0xc7, 0xea, 0x4b, 0xaf, 0xec, 0xd0, 0x0b, 0x58, 0x22,
	0x17, 0x5c, 0x37, 0xe5, 0xe6, 0x62, 0xf3, 0xce, 0x49, 0x64, 0x2d, 0xad, 0xb0, 0x0b, 0x77, 0x32,
	0x7d, 0x23, 0x13, 0x0a, 0xd4, 0xef, 0x05, 0xcc, 0xf1, 0x85, 0x56, 0x3b, 0x5e, 0xcb, 0x77, 0x03,
	0x4e, 0x43, 0x15, 0x49, 0x94, 0xc2, 0xf1, 0x1a, 0xbd, 0x01, 0x45, 0x46, 0x06, 0xa2, 0x7f, 0x7a,
	0x4e, 0x47, 0x3a, 0x8d, 0x05, 0xb5, 0x71, 0x40, 0x47, 0xf8, 0x7b, 0xa8, 0x66, 0x49, 0x91, 0xc9,
	0x0c, 0xa9, 0x2d, 0xcb, 0x1a, 0x51, 0xe9, 0x15, 0xc2, 0xb0, 0xc2, 0xa9, 0x15, 0x52, 0x21, 0xbd,
	0x9d, 0x3a, 0x3d, 0xcd, 0x56, 0x8a, 0x36, 0x0f, 0xe8, 0x68, 0xbf, 0x87, 0x1a, 0x70, 0x5b, 0x63,
	0x88, 0x65, 0x51, 0xce, 0xa7, 0x88, 0xcb, 0xd1, 0x8b, 0x8e, 0xda, 0x3f, 0xa0, 0xa3, 0xf6, 0xbf,
	0x05, 0xb8, 0xa9, 0xa9, 0xd1, 0x00, 0x60, 0x32, 0x15, 0x20, 0x9c, 0x99, 0xb7, 0xc4, 0x6c, 0x61,
	0x3e, 0x5e, 0x80, 0x51, 0x67, 0x00, 0xbf, 0xf9, 0xe3, 0x9f, 0x7f, 0xff, 0x9a, 0xbb, 0x87, 0x91,
	0x1a, 0x70, 0x86, 0xcf, 0x5a, 0x7d, 0x09, 0xb8, 0x90, 0x80, 0x6d, 0xa3, 0x81, 0x46, 0x50, 0x9a,
	0x9a, 0x17, 0xd0, 0xa3, 0x19, 0x47, 0x72, 0x7a, 0x02, 0x31, 0xd7, 0x17, 0x81, 0x22, 0xe6, 0x87,
	0x8a, 0xb9, 0x86, 0x2b, 0x31, 0xb3, 0x4d, 0x45, 0xc0, 0x7a, 0x96, 0x44, 0x48, 0xea, 0xef, 0x60,
	0x25, 0x91, 0x7d, 0xb4, 0x7e, 0x85, 0x5e, 0xe3, 0xb6, 0xf9, 0xf6, 0x62, 0x58, 0x24, 0xc0, 0x54,
	0x02, 0xaa, 0x66, 0x39, 0x16, 0xa0, 0xed, 0x24, 0x39, 0x03, 0x98, 0x5c, 0xa9, 0x33, 0xd2, 0x9d,
	0x18, 0x37, 0x66, 0xa4, 0x3b, 0x35, 0x6d, 0xe0, 0x7b, 0x8a, 0xf3, 0x36, 0x4a, 0x73, 0xa2, 0x6f,
	0x60, 0x25, 0x31, 0x16, 0xcc, 0x88, 0x36, 0x3d, 0x62, 0xcc, 0x88, 0xf6, 0xf2, 0x84, 0x11, 0x33,
	0x37, 0x2e, 0x31, 0xbf, 0x36, 0xd4, 0x0c, 0x39, 0x75, 0xb1, 0xa3, 0x27, 0x0b, 0x62, 0xd1, 0x83,
	0x87, 0xb9, 0x71, 0x05, 0x5c, 0xc4, 0xfe, 0x40, 0xb1, 0xdf, 0x45, 0xd5, 0x14, 0x7b, 0xcb, 0x95,
	0x7c, 0xaf, 0x0d, 0x28, 0xa7, 0xae, 0x58, 0x94, 0x1d, 0xd8, 0xe5, 0xf1, 0xc1, 0xdc, 0xbc, 0x0a,
	0x30, 0x52, 0x71, 0x5f, 0xa9, 0xa8, 0xe0, 0xd5, 0x58, 0x45, 0x74, 0x6d, 0xc8, 0x82, 0xff, 0x60,
	0xc0, 0x5a, 0xfa, 0xc6, 0x43, 0xd9, 0xf1, 0x65, 0xdc, 0xe4, 0x66, 0xe3, 0x4a, 0xc8, 0x44, 0x25,
	0xcc, 0x5b, 0x53, 0x47, 0xce, 0x8b, 0x3a, 0xbe, 0x9c, 0xba, 0xa7, 0xd0, 0xbc, 0xf2, 0x26, 0x04,
	0x6c, 0x5e, 0x05, 0x18, 0xf1, 0x57, 0x15, 0xff, 0x6a, 0x23, 0xc1, 0xff, 0xe1, 0x3f, 0xc6, 0x2f,
	0x9d, 0xbf, 0x0c, 0xf4, 0x25, 0x54, 0x74, 0xf1, 0xea, 0x87, 0x91, 0xa3, 0x7a, 0xe7, 0x68, 0x1f,
	0x77, 0xa0, 0x7c, 0xe8, 0x58, 0x7d, 0x42, 0xdd, 0xfa, 0xe7, 0xd4, 0xa7, 0xdf, 0x3a, 0x04, 0x99,
	0x7d, 0x21, 0x02, 0xbe, 0xdd, 0x6a, 0xd9, 0x8e, 0xe8, 0x0f, 0xce, 0x9a, 0x16, 0xf3, 0x5a, 0xc3,
	0xe8, 0x9d, 0x89, 0x3c, 0xfd, 0xb4, 0x63, 0x7b, 0xc4, 0x71, 0xe5, 0xbb, 0xf6, 0xf2, 0xf0, 0x69,
	0xf3, 0x59, 0xf3, 0x69, 0x23, 0x67, 0xe4, 0xda, 0x6b, 0x24, 0x08, 0x5c, 0xc7, 0x52, 0x7f, 0x8e,
	0x5a, 0x5f, 0x73, 0xe6, 0x6f, 0x5f, 0xda, 0x09, 0x3f, 0x83, 0x87, 0x87, 0x2c, 0xa4, 0x75, 0x72,
	0xc6, 0x06, 0xa2, 0x9e, 0x21, 0x0a, 0x3d, 0xcf, 0x50, 0xc0, 0x89, 0xc7, 0x07, 0xbe, 0xbd, 0x65,
	0xf9, 0x96, 0x88, 0x9b, 0x6c, 0x4b, 0xa7, 0x64, 0x8b, 0x04, 0xce, 0xd9, 0xb2, 0xfa, 0x2b, 0xf6,
	0xfc, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xba, 0xd3, 0x50, 0xf8, 0x0d, 0x00, 0x00,
}
