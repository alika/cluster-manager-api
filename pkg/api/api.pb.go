// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package cluster_manager_api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	HelloWorldMsg
	HelloWorldReply
	GetPodCountMsg
	GetPodCountReply
	CreateClusterMsg
	CreateClusterReply
	GetClusterMsg
	GetClusterReply
	DeleteClusterMsg
	DeleteClusterReply
	ProvisionTillerMsg
	ProvisionTillerReply
	InstallHelmChartMsg
	InstallHelmChartReply
	DeleteHelmChartMsg
	DeleteHelmChartReply
	GenericTillerSetting
	GenericHelmChart
*/
package cluster_manager_api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The Hello World request
type HelloWorldMsg struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloWorldMsg) Reset()                    { *m = HelloWorldMsg{} }
func (m *HelloWorldMsg) String() string            { return proto.CompactTextString(m) }
func (*HelloWorldMsg) ProtoMessage()               {}
func (*HelloWorldMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloWorldMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response to Hello World
type HelloWorldReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloWorldReply) Reset()                    { *m = HelloWorldReply{} }
func (m *HelloWorldReply) String() string            { return proto.CompactTextString(m) }
func (*HelloWorldReply) ProtoMessage()               {}
func (*HelloWorldReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloWorldReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GetPodCountMsg struct {
	// Namespace to fetch the pod count
	// Leave empty to query all namespaces
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *GetPodCountMsg) Reset()                    { *m = GetPodCountMsg{} }
func (m *GetPodCountMsg) String() string            { return proto.CompactTextString(m) }
func (*GetPodCountMsg) ProtoMessage()               {}
func (*GetPodCountMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetPodCountMsg) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type GetPodCountReply struct {
	// Number of pods in the namespace (or all namespaces)
	Pods int32 `protobuf:"varint,1,opt,name=pods" json:"pods,omitempty"`
}

func (m *GetPodCountReply) Reset()                    { *m = GetPodCountReply{} }
func (m *GetPodCountReply) String() string            { return proto.CompactTextString(m) }
func (*GetPodCountReply) ProtoMessage()               {}
func (*GetPodCountReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetPodCountReply) GetPods() int32 {
	if m != nil {
		return m.Pods
	}
	return 0
}

type CreateClusterMsg struct {
	// Name of the cluster to be provisioned
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *CreateClusterMsg) Reset()                    { *m = CreateClusterMsg{} }
func (m *CreateClusterMsg) String() string            { return proto.CompactTextString(m) }
func (*CreateClusterMsg) ProtoMessage()               {}
func (*CreateClusterMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateClusterMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateClusterReply struct {
	// Whether or not the cluster was provisioned by this request
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	// The state of the cluster generation
	Status string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *CreateClusterReply) Reset()                    { *m = CreateClusterReply{} }
func (m *CreateClusterReply) String() string            { return proto.CompactTextString(m) }
func (*CreateClusterReply) ProtoMessage()               {}
func (*CreateClusterReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateClusterReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *CreateClusterReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type GetClusterMsg struct {
	// Name of the cluster to be looked up
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetClusterMsg) Reset()                    { *m = GetClusterMsg{} }
func (m *GetClusterMsg) String() string            { return proto.CompactTextString(m) }
func (*GetClusterMsg) ProtoMessage()               {}
func (*GetClusterMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetClusterMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetClusterReply struct {
	// Is the cluster in the system
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	// What is the status of the cluster
	Status string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	// What is the kubeconfig to connect to the cluster
	Kubeconfig string `protobuf:"bytes,3,opt,name=kubeconfig" json:"kubeconfig,omitempty"`
}

func (m *GetClusterReply) Reset()                    { *m = GetClusterReply{} }
func (m *GetClusterReply) String() string            { return proto.CompactTextString(m) }
func (*GetClusterReply) ProtoMessage()               {}
func (*GetClusterReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetClusterReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *GetClusterReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GetClusterReply) GetKubeconfig() string {
	if m != nil {
		return m.Kubeconfig
	}
	return ""
}

type DeleteClusterMsg struct {
	// What is the cluster's name to destroy
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DeleteClusterMsg) Reset()                    { *m = DeleteClusterMsg{} }
func (m *DeleteClusterMsg) String() string            { return proto.CompactTextString(m) }
func (*DeleteClusterMsg) ProtoMessage()               {}
func (*DeleteClusterMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeleteClusterMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DeleteClusterReply struct {
	// Could the cluster be destroyed
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	// Status of the request
	Status string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *DeleteClusterReply) Reset()                    { *m = DeleteClusterReply{} }
func (m *DeleteClusterReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteClusterReply) ProtoMessage()               {}
func (*DeleteClusterReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteClusterReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *DeleteClusterReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type ProvisionTillerMsg struct {
	// Cluster tiller should be installed on
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	// Namespace tiller should be installed in
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	// Versino of tiller/helm to install / upgrade to
	Version string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	// Is the tiller a cluster-wide tiller?
	// Should it have cluster-wide admin privileges?
	ClusterWide bool `protobuf:"varint,4,opt,name=cluster_wide,json=clusterWide" json:"cluster_wide,omitempty"`
	// Namespaces that it should be able to admin on
	AdminNamespaces []string `protobuf:"bytes,5,rep,name=admin_namespaces,json=adminNamespaces" json:"admin_namespaces,omitempty"`
}

func (m *ProvisionTillerMsg) Reset()                    { *m = ProvisionTillerMsg{} }
func (m *ProvisionTillerMsg) String() string            { return proto.CompactTextString(m) }
func (*ProvisionTillerMsg) ProtoMessage()               {}
func (*ProvisionTillerMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ProvisionTillerMsg) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ProvisionTillerMsg) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ProvisionTillerMsg) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ProvisionTillerMsg) GetClusterWide() bool {
	if m != nil {
		return m.ClusterWide
	}
	return false
}

func (m *ProvisionTillerMsg) GetAdminNamespaces() []string {
	if m != nil {
		return m.AdminNamespaces
	}
	return nil
}

type ProvisionTillerReply struct {
	// Was the operation successful
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	// What messages were given
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ProvisionTillerReply) Reset()                    { *m = ProvisionTillerReply{} }
func (m *ProvisionTillerReply) String() string            { return proto.CompactTextString(m) }
func (*ProvisionTillerReply) ProtoMessage()               {}
func (*ProvisionTillerReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ProvisionTillerReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ProvisionTillerReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type InstallHelmChartMsg struct {
	// Cluster tiller should be installed on
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	// Tiller settings
	Tiller *GenericTillerSetting `protobuf:"bytes,2,opt,name=tiller" json:"tiller,omitempty"`
	// Chart Settings
	Chart *GenericHelmChart `protobuf:"bytes,3,opt,name=chart" json:"chart,omitempty"`
}

func (m *InstallHelmChartMsg) Reset()                    { *m = InstallHelmChartMsg{} }
func (m *InstallHelmChartMsg) String() string            { return proto.CompactTextString(m) }
func (*InstallHelmChartMsg) ProtoMessage()               {}
func (*InstallHelmChartMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *InstallHelmChartMsg) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *InstallHelmChartMsg) GetTiller() *GenericTillerSetting {
	if m != nil {
		return m.Tiller
	}
	return nil
}

func (m *InstallHelmChartMsg) GetChart() *GenericHelmChart {
	if m != nil {
		return m.Chart
	}
	return nil
}

type InstallHelmChartReply struct {
	// Was the operation successful
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	// What messages were given
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *InstallHelmChartReply) Reset()                    { *m = InstallHelmChartReply{} }
func (m *InstallHelmChartReply) String() string            { return proto.CompactTextString(m) }
func (*InstallHelmChartReply) ProtoMessage()               {}
func (*InstallHelmChartReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *InstallHelmChartReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *InstallHelmChartReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DeleteHelmChartMsg struct {
	// Cluster tiller should be installed on
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	// Tiller settings
	Tiller *GenericTillerSetting `protobuf:"bytes,2,opt,name=tiller" json:"tiller,omitempty"`
	// Chart Name
	Chart string `protobuf:"bytes,3,opt,name=chart" json:"chart,omitempty"`
}

func (m *DeleteHelmChartMsg) Reset()                    { *m = DeleteHelmChartMsg{} }
func (m *DeleteHelmChartMsg) String() string            { return proto.CompactTextString(m) }
func (*DeleteHelmChartMsg) ProtoMessage()               {}
func (*DeleteHelmChartMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DeleteHelmChartMsg) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *DeleteHelmChartMsg) GetTiller() *GenericTillerSetting {
	if m != nil {
		return m.Tiller
	}
	return nil
}

func (m *DeleteHelmChartMsg) GetChart() string {
	if m != nil {
		return m.Chart
	}
	return ""
}

type DeleteHelmChartReply struct {
	// Was the operation successful
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	// What messages were given
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *DeleteHelmChartReply) Reset()                    { *m = DeleteHelmChartReply{} }
func (m *DeleteHelmChartReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteHelmChartReply) ProtoMessage()               {}
func (*DeleteHelmChartReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *DeleteHelmChartReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *DeleteHelmChartReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GenericTillerSetting struct {
	// What is the tiller namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	// What is the version of tiller/helm
	Version string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *GenericTillerSetting) Reset()                    { *m = GenericTillerSetting{} }
func (m *GenericTillerSetting) String() string            { return proto.CompactTextString(m) }
func (*GenericTillerSetting) ProtoMessage()               {}
func (*GenericTillerSetting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GenericTillerSetting) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GenericTillerSetting) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type GenericHelmChart struct {
	// What is the name of the deployment
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// What is the namespace to deploy the application to
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	// What is the chart repository
	Repo string `protobuf:"bytes,3,opt,name=repo" json:"repo,omitempty"`
	// What is the chart name
	Chart string `protobuf:"bytes,4,opt,name=chart" json:"chart,omitempty"`
	// What are the options (nested yaml - the Values.yaml contents)
	Values string `protobuf:"bytes,5,opt,name=values" json:"values,omitempty"`
}

func (m *GenericHelmChart) Reset()                    { *m = GenericHelmChart{} }
func (m *GenericHelmChart) String() string            { return proto.CompactTextString(m) }
func (*GenericHelmChart) ProtoMessage()               {}
func (*GenericHelmChart) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GenericHelmChart) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GenericHelmChart) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GenericHelmChart) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *GenericHelmChart) GetChart() string {
	if m != nil {
		return m.Chart
	}
	return ""
}

func (m *GenericHelmChart) GetValues() string {
	if m != nil {
		return m.Values
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloWorldMsg)(nil), "cluster_manager_api.HelloWorldMsg")
	proto.RegisterType((*HelloWorldReply)(nil), "cluster_manager_api.HelloWorldReply")
	proto.RegisterType((*GetPodCountMsg)(nil), "cluster_manager_api.GetPodCountMsg")
	proto.RegisterType((*GetPodCountReply)(nil), "cluster_manager_api.GetPodCountReply")
	proto.RegisterType((*CreateClusterMsg)(nil), "cluster_manager_api.CreateClusterMsg")
	proto.RegisterType((*CreateClusterReply)(nil), "cluster_manager_api.CreateClusterReply")
	proto.RegisterType((*GetClusterMsg)(nil), "cluster_manager_api.GetClusterMsg")
	proto.RegisterType((*GetClusterReply)(nil), "cluster_manager_api.GetClusterReply")
	proto.RegisterType((*DeleteClusterMsg)(nil), "cluster_manager_api.DeleteClusterMsg")
	proto.RegisterType((*DeleteClusterReply)(nil), "cluster_manager_api.DeleteClusterReply")
	proto.RegisterType((*ProvisionTillerMsg)(nil), "cluster_manager_api.ProvisionTillerMsg")
	proto.RegisterType((*ProvisionTillerReply)(nil), "cluster_manager_api.ProvisionTillerReply")
	proto.RegisterType((*InstallHelmChartMsg)(nil), "cluster_manager_api.InstallHelmChartMsg")
	proto.RegisterType((*InstallHelmChartReply)(nil), "cluster_manager_api.InstallHelmChartReply")
	proto.RegisterType((*DeleteHelmChartMsg)(nil), "cluster_manager_api.DeleteHelmChartMsg")
	proto.RegisterType((*DeleteHelmChartReply)(nil), "cluster_manager_api.DeleteHelmChartReply")
	proto.RegisterType((*GenericTillerSetting)(nil), "cluster_manager_api.GenericTillerSetting")
	proto.RegisterType((*GenericHelmChart)(nil), "cluster_manager_api.GenericHelmChart")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cluster service

type ClusterClient interface {
	// Simple Hello World Service - will repeat a greeting to the name provided
	HelloWorld(ctx context.Context, in *HelloWorldMsg, opts ...grpc.CallOption) (*HelloWorldReply, error)
	// Simple pod count response.  Will respond with the number of pods in the namespace provided
	GetPodCount(ctx context.Context, in *GetPodCountMsg, opts ...grpc.CallOption) (*GetPodCountReply, error)
	// Will provision a cluster
	CreateCluster(ctx context.Context, in *CreateClusterMsg, opts ...grpc.CallOption) (*CreateClusterReply, error)
	// Will retrieve the status of a cluster and its kubeconfig for connectivity
	GetCluster(ctx context.Context, in *GetClusterMsg, opts ...grpc.CallOption) (*GetClusterReply, error)
	// Will delete a cluster
	DeleteCluster(ctx context.Context, in *DeleteClusterMsg, opts ...grpc.CallOption) (*DeleteClusterReply, error)
	// Will install (or reinstall) tiller
	ProvisionTiller(ctx context.Context, in *ProvisionTillerMsg, opts ...grpc.CallOption) (*ProvisionTillerReply, error)
	// Will install (or reinstall) helm chart
	// This will be destructive if a chart has already been deployed with the same name
	InstallHelmChart(ctx context.Context, in *InstallHelmChartMsg, opts ...grpc.CallOption) (*InstallHelmChartReply, error)
	// Will delete deployed helm chart
	DeleteHelmChart(ctx context.Context, in *DeleteHelmChartMsg, opts ...grpc.CallOption) (*DeleteHelmChartReply, error)
}

type clusterClient struct {
	cc *grpc.ClientConn
}

func NewClusterClient(cc *grpc.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) HelloWorld(ctx context.Context, in *HelloWorldMsg, opts ...grpc.CallOption) (*HelloWorldReply, error) {
	out := new(HelloWorldReply)
	err := grpc.Invoke(ctx, "/cluster_manager_api.Cluster/HelloWorld", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetPodCount(ctx context.Context, in *GetPodCountMsg, opts ...grpc.CallOption) (*GetPodCountReply, error) {
	out := new(GetPodCountReply)
	err := grpc.Invoke(ctx, "/cluster_manager_api.Cluster/GetPodCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) CreateCluster(ctx context.Context, in *CreateClusterMsg, opts ...grpc.CallOption) (*CreateClusterReply, error) {
	out := new(CreateClusterReply)
	err := grpc.Invoke(ctx, "/cluster_manager_api.Cluster/CreateCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) GetCluster(ctx context.Context, in *GetClusterMsg, opts ...grpc.CallOption) (*GetClusterReply, error) {
	out := new(GetClusterReply)
	err := grpc.Invoke(ctx, "/cluster_manager_api.Cluster/GetCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) DeleteCluster(ctx context.Context, in *DeleteClusterMsg, opts ...grpc.CallOption) (*DeleteClusterReply, error) {
	out := new(DeleteClusterReply)
	err := grpc.Invoke(ctx, "/cluster_manager_api.Cluster/DeleteCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) ProvisionTiller(ctx context.Context, in *ProvisionTillerMsg, opts ...grpc.CallOption) (*ProvisionTillerReply, error) {
	out := new(ProvisionTillerReply)
	err := grpc.Invoke(ctx, "/cluster_manager_api.Cluster/ProvisionTiller", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) InstallHelmChart(ctx context.Context, in *InstallHelmChartMsg, opts ...grpc.CallOption) (*InstallHelmChartReply, error) {
	out := new(InstallHelmChartReply)
	err := grpc.Invoke(ctx, "/cluster_manager_api.Cluster/InstallHelmChart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) DeleteHelmChart(ctx context.Context, in *DeleteHelmChartMsg, opts ...grpc.CallOption) (*DeleteHelmChartReply, error) {
	out := new(DeleteHelmChartReply)
	err := grpc.Invoke(ctx, "/cluster_manager_api.Cluster/DeleteHelmChart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cluster service

type ClusterServer interface {
	// Simple Hello World Service - will repeat a greeting to the name provided
	HelloWorld(context.Context, *HelloWorldMsg) (*HelloWorldReply, error)
	// Simple pod count response.  Will respond with the number of pods in the namespace provided
	GetPodCount(context.Context, *GetPodCountMsg) (*GetPodCountReply, error)
	// Will provision a cluster
	CreateCluster(context.Context, *CreateClusterMsg) (*CreateClusterReply, error)
	// Will retrieve the status of a cluster and its kubeconfig for connectivity
	GetCluster(context.Context, *GetClusterMsg) (*GetClusterReply, error)
	// Will delete a cluster
	DeleteCluster(context.Context, *DeleteClusterMsg) (*DeleteClusterReply, error)
	// Will install (or reinstall) tiller
	ProvisionTiller(context.Context, *ProvisionTillerMsg) (*ProvisionTillerReply, error)
	// Will install (or reinstall) helm chart
	// This will be destructive if a chart has already been deployed with the same name
	InstallHelmChart(context.Context, *InstallHelmChartMsg) (*InstallHelmChartReply, error)
	// Will delete deployed helm chart
	DeleteHelmChart(context.Context, *DeleteHelmChartMsg) (*DeleteHelmChartReply, error)
}

func RegisterClusterServer(s *grpc.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloWorldMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/HelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).HelloWorld(ctx, req.(*HelloWorldMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetPodCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodCountMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetPodCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/GetPodCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetPodCount(ctx, req.(*GetPodCountMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/CreateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).CreateCluster(ctx, req.(*CreateClusterMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).GetCluster(ctx, req.(*GetClusterMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/DeleteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).DeleteCluster(ctx, req.(*DeleteClusterMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_ProvisionTiller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionTillerMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).ProvisionTiller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/ProvisionTiller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).ProvisionTiller(ctx, req.(*ProvisionTillerMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_InstallHelmChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallHelmChartMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).InstallHelmChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/InstallHelmChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).InstallHelmChart(ctx, req.(*InstallHelmChartMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_DeleteHelmChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHelmChartMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).DeleteHelmChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster_manager_api.Cluster/DeleteHelmChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).DeleteHelmChart(ctx, req.(*DeleteHelmChartMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cluster_manager_api.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld",
			Handler:    _Cluster_HelloWorld_Handler,
		},
		{
			MethodName: "GetPodCount",
			Handler:    _Cluster_GetPodCount_Handler,
		},
		{
			MethodName: "CreateCluster",
			Handler:    _Cluster_CreateCluster_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _Cluster_GetCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _Cluster_DeleteCluster_Handler,
		},
		{
			MethodName: "ProvisionTiller",
			Handler:    _Cluster_ProvisionTiller_Handler,
		},
		{
			MethodName: "InstallHelmChart",
			Handler:    _Cluster_InstallHelmChart_Handler,
		},
		{
			MethodName: "DeleteHelmChart",
			Handler:    _Cluster_DeleteHelmChart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 923 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4f, 0x73, 0xe3, 0x34,
	0x14, 0x1f, 0x7b, 0xd3, 0x96, 0xbc, 0x6e, 0x9b, 0xa2, 0x04, 0x36, 0x78, 0x96, 0x4e, 0xf0, 0xb2,
	0xd0, 0x06, 0x92, 0xec, 0x66, 0x6f, 0x85, 0x43, 0x43, 0x99, 0xe9, 0xee, 0xa1, 0x3b, 0x9d, 0xf0,
	0x67, 0x87, 0x53, 0x51, 0x1d, 0xe1, 0x88, 0xda, 0x92, 0xc7, 0x92, 0x53, 0x16, 0x2e, 0xc0, 0x01,
	0xee, 0xf0, 0x41, 0xb8, 0xf0, 0x4d, 0xf8, 0x04, 0xcc, 0xc0, 0xf0, 0x35, 0x18, 0x49, 0x76, 0x63,
	0x3b, 0x4e, 0xd3, 0x5e, 0xf6, 0x14, 0x49, 0xfe, 0xe9, 0xfd, 0x7e, 0xef, 0xe9, 0xe9, 0xa7, 0x40,
	0x1d, 0x47, 0xb4, 0x1f, 0xc5, 0x5c, 0x72, 0xd4, 0xf4, 0x82, 0x44, 0x48, 0x12, 0x9f, 0x85, 0x98,
	0x61, 0x9f, 0xc4, 0x67, 0x38, 0xa2, 0xce, 0x7d, 0x9f, 0x73, 0x3f, 0x20, 0x03, 0x1c, 0xd1, 0x01,
	0x66, 0x8c, 0x4b, 0x2c, 0x29, 0x67, 0xc2, 0x6c, 0x71, 0x3e, 0xd4, 0x3f, 0x5e, 0xcf, 0x27, 0xac,
	0x27, 0x2e, 0xb1, 0xef, 0x93, 0x78, 0xc0, 0x23, 0x8d, 0x58, 0x44, 0xbb, 0x0f, 0x60, 0xeb, 0x29,
	0x09, 0x02, 0xfe, 0x82, 0xc7, 0xc1, 0xe4, 0x44, 0xf8, 0x08, 0x41, 0x8d, 0xe1, 0x90, 0xb4, 0xad,
	0x8e, 0xb5, 0x57, 0x1f, 0xeb, 0xb1, 0xfb, 0x01, 0x34, 0xe6, 0xa0, 0x31, 0x89, 0x82, 0x97, 0xa8,
	0x0d, 0x1b, 0x21, 0x11, 0x02, 0xfb, 0x19, 0x32, 0x9b, 0xba, 0x7d, 0xd8, 0x3e, 0x26, 0xf2, 0x94,
	0x4f, 0x8e, 0x78, 0xc2, 0xa4, 0x0a, 0x79, 0x1f, 0xea, 0x2a, 0x8c, 0x88, 0xb0, 0x97, 0xa1, 0xe7,
	0x0b, 0xee, 0x7b, 0xb0, 0x93, 0xc3, 0x9b, 0xe8, 0x08, 0x6a, 0x11, 0x9f, 0x08, 0x0d, 0x5e, 0x1b,
	0xeb, 0xb1, 0xc2, 0x1d, 0xc5, 0x04, 0x4b, 0x72, 0x64, 0x4a, 0xb2, 0x4c, 0xec, 0xc7, 0x80, 0x0a,
	0x38, 0x13, 0x71, 0x1b, 0x6c, 0x7e, 0xa1, 0x71, 0xaf, 0x8d, 0x6d, 0x7e, 0x81, 0xde, 0x84, 0x75,
	0x21, 0xb1, 0x4c, 0x44, 0xdb, 0xd6, 0x7b, 0xd3, 0x99, 0xaa, 0xc7, 0x31, 0x91, 0x2b, 0x28, 0xbe,
	0x82, 0xc6, 0x1c, 0x74, 0xab, 0xf8, 0x68, 0x17, 0xe0, 0x22, 0x39, 0x27, 0x1e, 0x67, 0xdf, 0x50,
	0xbf, 0x7d, 0x47, 0x7f, 0xcb, 0xad, 0xa8, 0x2c, 0x3f, 0x25, 0x01, 0xb9, 0x49, 0x96, 0x05, 0xdc,
	0xed, 0xb2, 0xfc, 0xd3, 0x02, 0x74, 0x1a, 0xf3, 0x19, 0x15, 0x94, 0xb3, 0xcf, 0x69, 0x10, 0x18,
	0xa2, 0x36, 0x6c, 0xa4, 0xfd, 0x96, 0x1d, 0x6a, 0x3a, 0x2d, 0x1e, 0xa1, 0x5d, 0x3a, 0x42, 0xb5,
	0x6f, 0x46, 0x62, 0x15, 0x2b, 0xcd, 0x28, 0x9b, 0xa2, 0x77, 0xe0, 0x6e, 0xd6, 0xc1, 0x97, 0x74,
	0x42, 0xda, 0x35, 0x2d, 0x6d, 0x33, 0x5d, 0x7b, 0x41, 0x27, 0x04, 0xed, 0xc3, 0x0e, 0x9e, 0x84,
	0x94, 0x9d, 0x5d, 0xc5, 0x13, 0xed, 0xb5, 0xce, 0x9d, 0xbd, 0xfa, 0xb8, 0xa1, 0xd7, 0x9f, 0x5f,
	0x2d, 0xbb, 0x87, 0xd0, 0x2a, 0xa9, 0xae, 0x4e, 0x3b, 0xd7, 0x9c, 0x76, 0xb1, 0x39, 0xff, 0xb0,
	0xa0, 0xf9, 0x8c, 0x09, 0x89, 0x83, 0xe0, 0x29, 0x09, 0xc2, 0xa3, 0x29, 0x8e, 0xe5, 0xf5, 0x99,
	0x8f, 0x60, 0x5d, 0x6a, 0x2a, 0x1d, 0x6a, 0x73, 0xb8, 0xdf, 0xaf, 0xb8, 0x92, 0xfd, 0x63, 0xc2,
	0x48, 0x4c, 0x3d, 0x23, 0xea, 0x33, 0x22, 0x25, 0x65, 0xfe, 0x38, 0xdd, 0x88, 0x3e, 0x82, 0x35,
	0x4f, 0x11, 0xe9, 0xe2, 0x6c, 0x0e, 0x1f, 0x5e, 0x17, 0xe1, 0x4a, 0xd5, 0xd8, 0xec, 0x71, 0x47,
	0xf0, 0x46, 0x59, 0xf0, 0x6d, 0x93, 0xfe, 0xd5, 0xca, 0x9a, 0xe5, 0xd5, 0xe5, 0xdc, 0xca, 0xe7,
	0x5c, 0xcf, 0x92, 0x39, 0x84, 0x56, 0x49, 0xc8, 0x6d, 0x73, 0x79, 0x0e, 0xad, 0x2a, 0xde, 0xeb,
	0x3d, 0x26, 0xdf, 0xa0, 0x76, 0xa1, 0x41, 0xdd, 0x5f, 0x2c, 0x65, 0x3f, 0xc5, 0xd2, 0x57, 0x5d,
	0xb8, 0x15, 0x37, 0x00, 0x41, 0x2d, 0x26, 0x11, 0x4f, 0xb3, 0xd5, 0xe3, 0x79, 0x09, 0x6a, 0xb9,
	0x12, 0xa8, 0x2b, 0x39, 0xc3, 0x41, 0xa2, 0x9b, 0x5c, 0x5f, 0x49, 0x33, 0x1b, 0xfe, 0xb7, 0x01,
	0x1b, 0xe9, 0x5d, 0x46, 0x09, 0xc0, 0xdc, 0x6f, 0x91, 0x5b, 0x59, 0xfd, 0x82, 0x6b, 0x3b, 0xef,
	0xae, 0xc0, 0xe8, 0x32, 0xbb, 0x6f, 0xff, 0xfc, 0xd7, 0x3f, 0xbf, 0xdb, 0xf7, 0x5c, 0xa4, 0x9f,
	0x8e, 0xd9, 0xe3, 0xc1, 0x54, 0x01, 0x2e, 0x15, 0xe0, 0xc0, 0xea, 0xa2, 0x97, 0xb0, 0x99, 0x73,
	0x62, 0xf4, 0x60, 0xc9, 0xa9, 0xe7, 0xbd, 0xdd, 0x79, 0xb8, 0x0a, 0x64, 0x98, 0x77, 0x35, 0x73,
	0xdb, 0x6d, 0x66, 0xcc, 0x3e, 0x91, 0x11, 0x9f, 0x78, 0x0a, 0xa1, 0xa8, 0x7f, 0x80, 0xad, 0x82,
	0x69, 0xa3, 0xea, 0xb8, 0xe5, 0x07, 0xc0, 0x79, 0x7f, 0x35, 0xcc, 0x08, 0x70, 0xb4, 0x80, 0x96,
	0xd3, 0xc8, 0x04, 0xa4, 0xfb, 0x14, 0x39, 0x07, 0x98, 0xdb, 0xf9, 0x92, 0x72, 0x17, 0x1e, 0x85,
	0x25, 0xe5, 0x2e, 0xbd, 0x09, 0xee, 0x3d, 0xcd, 0xf9, 0x3a, 0x2a, 0x73, 0xa2, 0xef, 0x60, 0xab,
	0x60, 0xde, 0x4b, 0xb2, 0x2d, 0x3f, 0x04, 0x4b, 0xb2, 0x5d, 0x7c, 0x07, 0x32, 0xe6, 0xee, 0x02,
	0xf3, 0x8f, 0x16, 0x34, 0x4a, 0x16, 0x8a, 0xaa, 0xa3, 0x2e, 0x3e, 0x0f, 0xce, 0xfe, 0x4d, 0x80,
	0x46, 0xc0, 0x5b, 0x5a, 0x40, 0xd3, 0xdd, 0xce, 0x04, 0x18, 0x5b, 0x50, 0xd5, 0xfe, 0xc9, 0x82,
	0x9d, 0xb2, 0xa3, 0xa1, 0xbd, 0xca, 0xd0, 0x15, 0x4e, 0xed, 0x74, 0x6f, 0x84, 0x2c, 0x94, 0xc1,
	0xb9, 0x9b, 0xeb, 0xf7, 0xd0, 0xb4, 0x5b, 0xa3, 0xe4, 0x43, 0xe8, 0xba, 0xda, 0x16, 0x04, 0xec,
	0xdf, 0x04, 0x68, 0xf8, 0x5b, 0x9a, 0x7f, 0xbb, 0x5b, 0xe0, 0xff, 0xe4, 0x5f, 0xeb, 0xb7, 0xd1,
	0xdf, 0x16, 0xfa, 0x1a, 0x9a, 0xe9, 0x99, 0x75, 0x4e, 0x4c, 0xa0, 0xce, 0xe8, 0xf4, 0x99, 0x3b,
	0x82, 0xc6, 0x09, 0xf5, 0xa6, 0x98, 0x04, 0x9d, 0x2f, 0x09, 0x23, 0xdf, 0x53, 0x8c, 0x9c, 0xa9,
	0x94, 0x91, 0x38, 0x18, 0x0c, 0x7c, 0x2a, 0xa7, 0xc9, 0x79, 0xdf, 0xe3, 0xe1, 0x60, 0x66, 0xbe,
	0x39, 0x28, 0x4c, 0x47, 0x87, 0x7e, 0x88, 0x69, 0xa0, 0xbe, 0x0d, 0xd7, 0x67, 0x8f, 0xfa, 0x8f,
	0xfb, 0x8f, 0xba, 0xb6, 0x65, 0x0f, 0x77, 0x70, 0x14, 0x05, 0xd4, 0xd3, 0xff, 0xf9, 0x06, 0xdf,
	0x0a, 0xce, 0x0e, 0x16, 0x56, 0xe2, 0x2f, 0x60, 0xf7, 0x84, 0xc7, 0xa4, 0x83, 0xcf, 0x79, 0x22,
	0x3b, 0x15, 0xa2, 0xd0, 0x93, 0x0a, 0x05, 0x02, 0x87, 0x22, 0x61, 0x7e, 0xcf, 0x63, 0x9e, 0xcc,
	0xfa, 0xab, 0x97, 0x96, 0xa4, 0x87, 0x23, 0x7a, 0xbe, 0xae, 0xff, 0x61, 0x3e, 0xf9, 0x3f, 0x00,
	0x00, 0xff, 0xff, 0xe8, 0xd1, 0xbd, 0x78, 0xcf, 0x0a, 0x00, 0x00,
}
