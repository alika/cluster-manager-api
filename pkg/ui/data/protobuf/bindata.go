// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x41\x6f\xe3\x36\x10\x85\xef\xfa\x15\x0f\x3a\x25\x85\x23\x25\xe9\xa5\x88\x91\x83\xeb\xa4\x58\xa1\x5b\x1b\xb0\xbc\x0d\xf6\xb4\xa0\xa5\x31\x45\x94\xe2\xb0\x24\x65\x45\x28\xf6\xbf\x17\x94\xe4\xd4\x46\x97\x17\x9b\xe4\x9b\xc7\x6f\x46\x2f\xcf\xb1\x66\x3b\x38\x25\x9b\x80\xc7\xfb\x87\x5f\x50\x8a\xd6\x77\x46\xa2\x7c\x29\xb1\xd6\xdc\xd5\xd8\x88\xa0\x4e\x84\x35\xb7\xb6\x0b\xca\x48\xec\x49\xb4\x10\x5d\x68\xd8\xf9\x2c\xc9\xf3\x24\xcf\xf1\x59\x55\x64\x3c\xd5\xe8\x4c\x4d\x0e\xa1\x21\xac\xac\xa8\x1a\x3a\xdf\x2c\xf0\x27\x39\xaf\xd8\xe0\x31\xbb\xc7\x4d\x14\xa4\xf3\x55\x7a\xbb\x8c\x16\x03\x77\x68\xc5\x00\xc3\x01\x9d\x27\x84\x46\x79\x1c\x95\x26\xd0\x7b\x45\x36\x40\x19\x54\xdc\x5a\xad\x84\xa9\x08\xbd\x0a\xcd\xf8\xce\xec\x12\x49\xf0\x75\xf6\xe0\x43\x10\xca\x40\xa0\x62\x3b\x80\x8f\x97\x42\x88\x30\x43\xc7\xd5\x84\x60\x9f\xf2\xbc\xef\xfb\x4c\x8c\xc0\x19\x3b\x99\xeb\x49\xea\xf3\xcf\xc5\xfa\x75\x53\xbe\xde\x3d\x66\xf7\x73\xd1\x17\xa3\xc9\x7b\x38\xfa\xbb\x53\x8e\x6a\x1c\x06\x08\x6b\xb5\xaa\xc4\x41\x13\xb4\xe8\xc1\x0e\x42\x3a\xa2\x1a\x81\x23\x74\xef\x54\x9c\xdb\x02\x9e\x8f\xa1\x17\x8e\xa2\x4d\xad\x7c\x70\xea\xd0\x85\xab\x99\x9d\x11\x95\xbf\x12\xb0\x81\x30\x48\x57\x25\x8a\x32\xc5\xaf\xab\xb2\x28\x17\xd1\xe4\xad\xd8\x7f\xda\x7e\xd9\xe3\x6d\xb5\xdb\xad\x36\xfb\xe2\xb5\xc4\x76\x87\xf5\x76\xf3\x52\xec\x8b\xed\xa6\xc4\xf6\x37\xac\x36\x5f\xf1\x7b\xb1\x79\x59\x80\x54\x68\xc8\x81\xde\xad\x8b\x1d\xb0\x83\x8a\xd3\xa4\x7a\x1c\x5d\x49\x74\x85\x70\xe4\x09\xc9\x5b\xaa\xd4\x51\x55\xd0\xc2\xc8\x4e\x48\x82\xe4\x13\x39\x13\x93\x60\xc9\xb5\xca\xc7\xaf\xea\x21\x4c\x1d\x6d\xb4\x6a\x55\x10\x61\x3c\xfa\x5f\x5f\x59\x92\xf8\xc1\x04\xf1\x8e\x67\xa4\xd6\x71\xe0\x9f\xd3\x65\x92\x58\x51\xfd\x15\x8d\x2b\xdd\xf9\x40\xee\x5b\x2b\x8c\x90\xe4\xbe\x09\xab\x96\x49\xa2\x5a\xcb\x2e\x20\x95\xcc\x52\x53\x2e\xac\xca\x85\x31\x3c\x3f\x92\x8d\x36\xe9\xf2\x43\x36\xee\xab\x3b\x49\xe6\xce\xf7\x42\x4a\x72\x39\xdb\x51\xfa\xc3\xb2\xc8\xbc\x6f\x08\x0d\x69\xcd\xe8\xd9\xe9\x1a\x9e\xdc\x49\x55\x84\x9a\x8e\xca\xa8\xa8\xcf\x92\xf3\xd9\x7a\x62\xc4\x3f\x49\x4c\x8f\xb3\x15\x3e\xc5\xca\xb7\xb1\xf0\xe6\xbf\xff\x7f\x78\x79\x0b\x47\xa1\x73\xc6\x5f\x9e\xef\xc8\xea\xe1\x76\x2e\x8f\x6b\x82\xc3\xcd\xd4\x5e\x26\xac\xca\x62\x26\x6f\xf1\xfc\x21\xb2\xec\x03\x9e\x90\x8e\xbd\x9f\x1e\xf2\x91\x75\x44\x4d\x67\xc5\x81\xeb\xe1\x09\xe9\x4f\xd3\xfe\xfb\x72\xfa\x49\xbe\x7f\xb4\x37\x02\x60\xa2\x8c\xd1\x25\x1f\x92\x96\xbc\x8f\x63\xbf\x82\x9e\x1f\x8d\xd9\x33\x12\x46\xb4\x84\x67\x3c\x2c\x2f\xac\x1c\x79\xcb\x31\x21\x81\x2f\x6d\x7f\x60\x37\xf6\x7a\x6d\x78\x16\x4d\x9e\xff\x06\x00\x00\xff\xff\x8e\x97\x75\x03\x7f\x04\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 1151, mode: os.FileMode(420), modTime: time.Unix(1525287944, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
