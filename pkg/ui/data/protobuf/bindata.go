// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x6f\xdb\x38\x12\x7f\xf7\xa7\x18\xe8\xe5\x92\x43\x6d\xa5\xe9\x1e\x70\x70\x10\xec\xe5\xdc\xde\xd6\xb8\xd6\x29\x6a\x6f\x83\x7d\x0a\x68\x6a\x2c\xf1\x4a\x91\x5c\x92\xb2\xeb\x3b\xf4\xbb\x1f\xf8\x47\xb2\x68\xcb\x29\x36\x5b\x60\x57\x0f\x89\x45\x0e\x7f\x9c\xdf\xcc\x70\x66\xa8\x3c\x87\x99\x54\x7b\xcd\xca\xca\xc2\xf5\xd5\xcb\xbf\xc3\x92\xd4\xa6\x11\x25\x2c\x5f\x2f\x61\xc6\x65\x53\xc0\x82\x58\xb6\x45\x98\xc9\x5a\x35\x96\x89\x12\x56\x48\x6a\x20\x8d\xad\xa4\x36\x93\x51\x9e\x8f\xf2\x1c\xde\x31\x8a\xc2\x60\x01\x8d\x28\x50\x83\xad\x10\xee\x14\xa1\x15\xb6\x33\x2f\xe0\x13\x6a\xc3\xa4\x80\xeb\xc9\x15\x5c\x38\x81\x2c\x4e\x65\x97\x37\x0e\x62\x2f\x1b\xa8\xc9\x1e\x84\xb4\xd0\x18\x04\x5b\x31\x03\x1b\xc6\x11\xf0\x0b\x45\x65\x81\x09\xa0\xb2\x56\x9c\x11\x41\x11\x76\xcc\x56\x7e\x9f\x88\xe2\x34\x81\x5f\x22\x86\x5c\x5b\xc2\x04\x10\xa0\x52\xed\x41\x6e\xfa\x82\x40\x6c\x54\xda\x3d\x95\xb5\x6a\x9a\xe7\xbb\xdd\x6e\x42\xbc\xc2\x13\xa9\xcb\x9c\x07\x51\x93\xbf\x9b\xcf\xde\x2c\x96\x6f\xc6\xd7\x93\xab\xb8\xe8\x67\xc1\xd1\x18\xd0\xf8\x6b\xc3\x34\x16\xb0\xde\x03\x51\x8a\x33\x4a\xd6\x1c\x81\x93\x1d\x48\x0d\xa4\xd4\x88\x05\x58\xe9\x94\xde\x69\xe6\xec\xf6\x02\x8c\xdc\xd8\x1d\xd1\xe8\x60\x0a\x66\xac\x66\xeb\xc6\x26\x36\x6b\x55\x64\x26\x11\x90\x02\x88\x80\xec\x6e\x09\xf3\x65\x06\xff\xbc\x5b\xce\x97\x2f\x1c\xc8\xc3\x7c\xf5\xf6\xfe\xe7\x15\x3c\xdc\x7d\xfc\x78\xb7\x58\xcd\xdf\x2c\xe1\xfe\x23\xcc\xee\x17\xaf\xe7\xab\xf9\xfd\x62\x09\xf7\xff\x82\xbb\xc5\x2f\xf0\xef\xf9\xe2\xf5\x0b\x40\x66\x2b\xd4\x80\x5f\x94\x76\x0c\xa4\x06\xe6\xac\x89\x85\x37\xdd\x12\x31\x51\x61\x23\x83\x4a\x46\x21\x65\x1b\x46\x81\x13\x51\x36\xa4\x44\x28\xe5\x16\xb5\x70\x91\xa0\x50\xd7\xcc\x38\xaf\x1a\x20\xa2\x70\x30\x9c\xd5\xcc\x12\xeb\x87\x4e\x78\x4d\x46\x23\xb3\x17\x96\x7c\x81\x5b\xc8\x94\x96\x56\xbe\xca\x6e\x46\x23\x45\xe8\x67\x07\x4c\x79\x63\x2c\xea\xc7\x9a\x08\x52\xa2\x7e\x24\x8a\xdd\x8c\x46\xac\x56\x52\x5b\xc8\x4a\x29\x4b\x8e\x39\x51\x2c\x27\x42\xc8\xb8\xc9\xc4\xc3\x64\x37\x9d\x98\x7f\xa7\xe3\x12\xc5\xd8\xec\x48\x59\xa2\xce\xa5\xf2\xa2\x83\xcb\x46\xa3\x30\x0b\x17\xa5\x56\x74\x52\x12\x8b\x3b\xb2\x0f\xd3\xf4\xb1\x44\xf1\x18\x51\x26\x11\x65\x22\x15\x0a\xa2\xd8\xf6\xba\x9d\xb9\x84\x5b\xf8\xdf\x08\x80\x89\x8d\x9c\xfa\x5f\x00\x96\x59\x8e\x53\xc8\x66\x81\x12\xbc\x0f\x94\xe0\xee\xc3\x3c\xbb\xf1\x12\xdb\x70\x1c\xa6\x90\x6d\xaf\x26\x2f\x27\x57\x71\x98\x4a\x61\x09\xb5\x2d\x8e\x7b\x04\xa9\x1d\xd4\x7b\x46\x2b\x82\x1c\x3e\xa1\xc0\xff\x32\x12\xe5\xdd\xd3\x68\x3e\x85\xcc\x45\xb2\x99\xe6\x79\xc9\x6c\xd5\xac\x27\x54\xd6\xf9\xf6\x44\x14\x6b\xc2\x9c\x70\x1d\xa7\xfe\x51\xba\x01\x27\x1c\x85\xbe\xba\x7f\xfe\x0f\x7e\xb1\xa8\x05\xe1\x8f\x85\xa4\xa6\xd5\xe7\xec\x56\x26\xe4\x8d\x31\x15\xd4\xe6\xd1\x91\xe3\xe8\xc8\x31\x51\x2c\xc2\x17\x68\xa8\x66\xde\x92\x8e\x92\xd4\x08\x64\x2d\x1b\x0b\xe7\x0c\xf5\x75\x04\x60\x68\x85\x35\x9a\x29\xbc\x5d\xad\x3e\xdc\x1c\x0f\x2c\xdd\x08\x95\xc2\x34\x7e\x28\x8b\xa7\xd1\x6d\x91\xff\xc7\x48\xe1\x61\x94\x96\x45\x43\xcf\xcd\x7f\xbd\x19\x8d\x0c\xea\x2d\xa3\xd8\x29\x12\xf8\xba\x83\xe1\x4e\x09\xc2\x5b\xe4\x5c\xc2\x83\xd4\xbc\x80\x65\x94\x1d\xc3\x8e\x71\x0e\x1a\x15\x12\x0b\x04\xdc\xa9\xf7\x29\xd2\x4a\x1f\xf6\xce\x73\x6e\xeb\x2d\x2b\xb0\xf0\x78\x5a\xd1\x80\x14\x80\x2e\x0e\xbf\xdf\x9b\xf2\x12\x34\xda\x46\x0b\xd3\x1f\xff\x88\x8a\xef\x2f\x7b\xe1\xd0\xc5\xab\x3f\x0f\x13\xa2\xd8\xc4\xf9\xa3\x8d\x42\xf7\x28\x69\x2c\x4c\x21\xf3\x87\x65\xfb\x32\xaf\x1c\xda\xce\xa1\x65\x51\x62\x2d\x8b\xfd\x14\xb2\xbf\x66\x07\xa7\x07\x5b\xf7\x29\x2b\x59\x00\x95\x8d\xb0\xa0\xd1\x28\xe9\x0e\x30\xc0\x43\x60\xec\xde\x8b\x43\x12\x16\x4d\xbd\x46\xed\x32\xad\x92\x85\x71\x59\xaf\xe5\x6f\x14\xa1\x03\x46\xf8\x09\xed\x07\x59\xcc\x3c\xfa\x45\xef\x25\x35\x43\x6f\xe2\x39\x76\x18\xb6\x46\x89\x56\xc9\xc2\x13\xcb\x12\x41\x67\x14\x38\x58\x65\xc8\x32\x9e\xbd\x27\xe3\x6b\x19\x69\x73\x56\xc7\x6b\xa6\x91\x58\x6c\x83\xe8\x22\x79\x4d\xb9\x25\x53\xbf\x83\x5d\x93\x90\x8b\xfa\x3c\x8f\x98\x46\xab\x19\x6e\x43\x21\x30\x96\xd8\xc6\x38\x97\x76\x2c\x5d\x92\x07\x66\x0d\x7c\x6e\xd6\x48\xa5\xd8\xb0\xd2\xd7\x09\x2a\x85\x40\x6a\xd9\x96\xd9\x7d\xdf\xc3\x9d\x19\x0e\xbf\x4f\xfc\xfb\xbb\x0d\x50\xe2\xd3\x06\x18\x64\x5a\x20\x47\x8b\x03\xfe\x7b\xed\x27\x3a\xc5\x93\xd7\x54\xf7\x64\xea\xf9\xea\x47\x4d\x7e\x33\x03\x26\x8c\x25\x9c\xc3\x85\xd4\xa0\x31\xbe\x5d\x82\x65\x9c\xf7\xe8\x7c\x68\x43\x75\xe5\xc7\xe1\xe2\x68\x20\xa5\x74\x34\xf9\xfd\x8e\x5c\xd0\xea\x79\x41\x79\x86\x68\x85\xbc\x06\x5a\x11\x6d\x5b\xe9\x95\x6b\x18\x7d\x42\x5e\xa3\x2b\x34\x56\x37\xd4\xb7\xae\xcc\x87\xb0\x13\x85\x8a\x18\x20\x5c\x23\x29\xf6\xb0\x46\x14\x50\xa0\xe2\x72\x8f\xbd\x54\x66\x5c\xd2\x76\x99\xab\x33\xe2\x3c\xec\xf9\x16\x79\x3d\xf3\x28\x17\xc7\x23\xa9\x19\x8f\x67\xbf\xdb\xe1\x76\x9c\x9f\x67\xc4\x18\x65\x1d\xdb\x23\xeb\x1d\x22\xbf\x47\xf2\x68\x60\x28\xfa\xbf\x03\xc5\xd3\xf8\x4f\x59\x76\x74\xbe\x8e\x46\xde\xc9\x69\x29\x76\x7d\x38\x1a\x3b\xaa\xd1\x18\xd7\x43\x26\x05\x35\x6e\xe5\x1a\x69\x51\x86\x6a\x7c\x0b\x2f\x6f\x7a\x50\x6d\x61\x73\x15\xbb\x07\x3b\x00\xe7\x19\xa6\x80\xad\x50\x8b\xd9\xbe\xa7\xe5\xec\xd0\x49\x2c\xba\x72\x68\x25\x6c\xd0\xd2\x10\x70\x5d\x99\x6d\xe5\xde\x21\xd9\x22\x60\xad\xec\xde\x49\xfe\xda\xa0\xde\x83\x3b\x02\x5d\x3d\x35\xc7\xbc\x02\xec\x13\x8a\xf4\xd5\x77\xaa\x7c\xa3\x5e\xbb\xc3\x96\xee\x78\xe9\x97\x32\x61\x5f\x5d\x87\x35\xc7\x9b\x1d\x97\xba\x94\x77\x7b\x09\x6b\x2b\x89\x95\xee\x94\x76\x95\x34\x76\x06\x43\x9e\x1a\xc4\x3f\xa2\xf3\x50\xa1\xbf\xdb\x48\xed\xaf\x8f\xfd\x8d\x76\xc4\xf4\xb7\x71\xf7\x35\x7f\xb3\x6c\x03\x27\x9c\x22\xc9\x41\x7e\x0e\x5b\x76\xd9\x24\x94\xc0\x13\xcd\x4b\x14\xa8\x7d\xfb\xd8\x57\x39\x56\xcb\x5b\xb8\x3e\xf6\xc0\x6f\xb3\x08\x97\xf2\xb3\xbb\x12\xaa\x6f\xda\xe3\xa8\x76\x1e\xc0\xe7\x26\xc1\x8d\xbe\x35\x7b\x63\xb1\x3e\x4b\xf7\xa1\x22\xd6\x5d\x3b\xd3\xca\xdf\xc3\x39\x47\x76\x60\x7d\xaf\x3b\xb0\xb2\x6d\x0e\xda\x9e\x78\x00\xae\x27\x7f\x0b\xaf\x12\x92\xc7\xf5\xb7\xef\xf2\xc3\x86\x11\xf3\x2f\x26\x58\xca\xca\x90\xfe\xe5\xfe\x9b\x46\x3c\x2d\xe2\x87\x1d\x66\xb2\xe1\x45\x62\xca\xb6\xae\xb8\x14\x7a\xd6\x92\xcb\xc4\x7a\xfd\x30\x7b\x3a\x54\x4e\x2b\x73\x4f\x95\x36\x46\x42\x15\x37\x95\x57\x6d\x8d\x6d\x71\xf4\xdf\x08\xfa\x7b\xb4\x1a\xf7\x15\xeb\xa5\x9f\xf3\x30\x4c\x9c\x4b\x2d\x07\x5f\xfb\x2f\x39\x42\x7a\x8a\x1e\xc9\xa7\xec\xf0\xb5\x23\xd4\xea\x1c\x1a\x55\x6a\x52\x38\x5f\xf4\xf1\xe2\xa5\x37\xb8\x39\x0d\xd7\xa8\x53\xd7\x91\x8d\x77\xac\x68\x47\x7f\xec\x6c\x1b\x34\x66\xae\x90\x6f\x31\x15\x25\x45\xcd\x04\x28\xcd\xb6\x8c\x63\x89\xe6\xc7\x83\x87\xda\x0f\x0b\x5e\xee\x16\x7e\x38\x35\x89\xd3\xc1\xc5\x93\xed\x19\xc5\x7f\xd0\xb1\x32\x02\x47\xfb\x86\xbb\x1e\x16\x2d\x23\x3f\xf9\x78\x48\x93\x70\x0b\x7f\x7b\xca\xad\xc7\x89\x8b\x04\xf6\x52\xc5\x9c\x02\xa6\xa1\x14\x8d\xd9\x34\xfc\xe9\xb3\x1a\xf1\x0d\xec\x50\x23\x94\x6c\x8b\x62\xb8\x36\xa5\x51\x36\xd0\xb9\x7c\xe7\x30\x8b\x9d\xa6\x41\xeb\xae\xc2\xa1\x52\xfd\xe4\x72\x26\xa3\x61\x6a\x19\x66\xda\x5d\xfa\x91\x15\x3a\x8f\xe5\xc0\xd2\x43\x5f\x12\x1a\xb9\xe3\x44\x31\xd8\x73\xfd\x81\x76\x3e\x6d\x9e\xfe\x74\x66\x5e\xb4\x3d\x6e\xbb\xcb\xa0\x61\x87\x1a\xbd\x3f\xd0\xae\x83\x14\x07\x8b\x42\xe4\xdd\x1d\xcd\x27\x5a\xa6\x81\xd5\x6d\xa6\x4a\x73\xdc\x70\x2e\x1b\xd4\xf0\x10\xb0\x83\xda\x89\x5e\x07\x10\xba\xf2\x1a\x85\x1d\xae\x57\x67\x96\x77\xad\x64\x58\xef\xc7\x7b\x1f\xb7\x8e\x52\xef\x70\x2a\x4f\xaa\xa8\xd7\x56\xa3\x92\x86\x59\xa9\x93\xe2\xe9\x46\x93\xac\x7d\xba\x50\x9c\x09\xa7\x1f\xd2\x35\x44\x63\x8c\x98\xf0\x91\xf8\x42\xa0\x71\xf9\x74\x4f\x6a\x0e\x63\x3f\xf5\x89\xf0\x06\xcd\xc4\x8f\x50\x29\x2c\x0a\x1b\xdb\xcf\xd6\xf4\x5e\x20\xa6\xda\xff\x07\x00\x00\xff\xff\x62\x69\x26\xf6\xc4\x18\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 6340, mode: os.FileMode(420), modTime: time.Unix(1525756269, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
