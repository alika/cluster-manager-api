// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x41\x6f\xdb\x38\x13\xbd\xeb\x57\x0c\x74\xf9\x92\x0f\x89\x95\xa4\x97\x85\x8d\x00\x9b\x75\xba\xad\xb1\xad\x13\xc4\x6e\x83\x9e\x02\x9a\x1a\x4b\xdc\x48\x1c\x96\x1c\xd9\xf1\x2e\xf2\xdf\x17\xa4\x24\x5b\x72\x9c\x76\xb7\xd5\x21\x31\xc9\xd1\xe3\xbc\x37\xe4\xd3\x24\x09\x8c\xc9\x6c\xac\xca\x72\x86\x8b\xb3\xf3\x5f\x60\x26\x4a\x57\xe9\x0c\x66\xd7\x33\x18\x17\x54\xa5\x30\x15\xac\x56\x08\x63\x2a\x4d\xc5\x4a\x67\x30\x47\x51\x82\xa8\x38\x27\xeb\x06\x51\x92\x44\x49\x02\x1f\x94\x44\xed\x30\x85\x4a\xa7\x68\x81\x73\x84\x2b\x23\x64\x8e\xed\xca\x09\x7c\x46\xeb\x14\x69\xb8\x18\x9c\xc1\x91\x0f\x88\x9b\xa5\xf8\x78\xe4\x21\x36\x54\x41\x29\x36\xa0\x89\xa1\x72\x08\x9c\x2b\x07\x4b\x55\x20\xe0\x93\x44\xc3\xa0\x34\x48\x2a\x4d\xa1\x84\x96\x08\x6b\xc5\x79\xd8\xa7\x41\xf1\x99\xc0\x97\x06\x83\x16\x2c\x94\x06\x01\x92\xcc\x06\x68\xd9\x0d\x04\xc1\x4d\xd2\xfe\xc9\x99\xcd\x30\x49\xd6\xeb\xf5\x40\x84\x84\x07\x64\xb3\xa4\xa8\x43\x5d\xf2\x61\x32\x7e\x3b\x9d\xbd\x3d\xbd\x18\x9c\x35\x2f\x7d\xd2\x05\x3a\x07\x16\xbf\x56\xca\x62\x0a\x8b\x0d\x08\x63\x0a\x25\xc5\xa2\x40\x28\xc4\x1a\xc8\x82\xc8\x2c\x62\x0a\x4c\x3e\xe9\xb5\x55\x5e\xb7\x13\x70\xb4\xe4\xb5\xb0\xe8\x61\x52\xe5\xd8\xaa\x45\xc5\x3d\xcd\xda\x14\x95\xeb\x05\x90\x06\xa1\x21\xbe\x9a\xc1\x64\x16\xc3\x6f\x57\xb3\xc9\xec\xc4\x83\xdc\x4f\xe6\xef\x6f\x3e\xcd\xe1\xfe\xea\xee\xee\x6a\x3a\x9f\xbc\x9d\xc1\xcd\x1d\x8c\x6f\xa6\xd7\x93\xf9\xe4\x66\x3a\x83\x9b\xdf\xe1\x6a\xfa\x05\xfe\x98\x4c\xaf\x4f\x00\x15\xe7\x68\x01\x9f\x8c\xf5\x0c\xc8\x82\xf2\x6a\x62\x1a\xa4\x9b\x21\xf6\x52\x58\x52\x9d\x92\x33\x28\xd5\x52\x49\x28\x84\xce\x2a\x91\x21\x64\xb4\x42\xab\xfd\x49\x30\x68\x4b\xe5\x7c\x55\x1d\x08\x9d\x7a\x98\x42\x95\x8a\x05\x87\xa9\x17\xbc\x06\x51\xe4\x36\x9a\xc5\x13\x5c\x42\x6c\x2c\x31\xbd\x89\x47\x51\x64\x84\x7c\xf4\xc0\xb2\xa8\x1c\xa3\x7d\x28\x85\x16\x19\xda\x07\x61\xd4\x28\x8a\x54\x69\xc8\x32\xc4\x19\x51\x56\x60\x22\x8c\x4a\x84\xd6\xd4\x6c\x32\x08\x30\xf1\x68\x1b\x16\xc6\xf2\x34\x43\x7d\xea\xd6\x22\xcb\xd0\x26\x64\x42\xe8\xc1\xd7\xa2\xa8\x5e\x85\xa3\xcc\x1a\x39\xc8\x04\xe3\x5a\x6c\xea\x65\xf9\x90\xa1\x7e\x68\x50\x06\x0d\xca\x80\x0c\x6a\x61\xd4\xea\xa2\x5d\x39\x86\x4b\xf8\x3b\x02\x50\x7a\x49\xc3\xf0\x0b\x80\x15\x17\x38\x84\x78\x5c\x53\x82\x8f\x35\x25\xb8\xba\x9d\xc4\xa3\x10\xb1\xaa\xaf\xc3\x10\xe2\xd5\xd9\xe0\x7c\x70\xd6\x4c\x4b\xd2\x2c\x24\xb7\x38\xfe\xd1\xa2\xf4\x50\x1f\x95\xcc\x05\x16\xf0\x19\x35\xfe\xa5\x44\x13\xef\x9f\xca\x16\x43\x88\xfd\x49\x76\xc3\x24\xc9\x14\xe7\xd5\x62\x20\xa9\x4c\x56\x2f\x42\xb1\x14\xca\x07\x97\xcd\xd2\xaf\x99\x9f\xf0\xc1\x4d\xd0\xb3\xff\x17\xfe\xe0\x13\xa3\xd5\xa2\x78\x48\x49\xba\x36\x9f\x57\xb7\xf2\xea\x9d\xa2\x24\xb7\x71\x8c\xcd\xb0\x11\xb3\x41\x4e\xd1\x49\xab\x82\x88\x9e\x0d\x59\x04\xb1\xa0\x8a\x21\xbb\xbb\x1d\x9f\xbe\xeb\xc4\x3e\x47\x00\x4e\xe6\x58\xa2\x1b\xc2\xfb\xf9\xfc\x76\xb4\x3f\x31\xf3\x33\x92\xb4\xab\xc2\x54\xdc\xdc\x40\x8f\x9d\xfc\xe9\x48\x07\x18\x63\x29\xad\xe4\x6b\xeb\xcf\xa3\x28\x72\x68\x57\x4a\x22\xb4\x55\xaa\x39\xfa\xcb\xe0\x6f\x06\xc2\x7b\x2c\x0a\x82\x7b\xb2\x45\x0a\xb3\x26\xf6\x14\xd6\xaa\x28\xc0\xa2\x41\xc1\x20\xc0\xdf\xf4\x60\x8b\x4c\xe1\xa8\xfb\x6a\xf9\xad\x57\x2a\xc5\x34\xe0\x59\x23\x6b\xa4\x1a\xe8\x68\xf7\xfb\xa3\xcb\x8e\xc1\x22\x57\x56\xbb\xee\xfc\x1d\x9a\x62\x73\xdc\x39\x02\xdb\x33\x1a\xee\xc0\x40\x18\x35\xf0\x35\x68\x4f\x9e\x7f\x0c\x39\x86\x21\xc4\xe1\x82\xac\xce\x93\xdc\xa3\xad\x3d\x5a\xdc\x44\x2c\x28\xdd\x0c\x21\xfe\x7f\xbc\x2b\x74\xad\x75\x97\xb2\xa1\x14\x24\x55\x9a\xc1\xa2\x33\xe4\x2f\x2d\xc0\x7d\xcd\xd8\x8f\xd3\x9d\xf1\xea\xaa\x5c\xa0\xf5\xee\x6a\x28\x75\xde\xe9\x5a\xfe\xce\x08\x79\x40\x84\x77\xc8\xb7\x94\x8e\x03\xfa\x51\x67\xd0\x97\xa1\xb3\xf0\x23\x3a\x1c\x56\x23\x43\x36\x94\x06\x62\x71\x2f\xd0\x8b\x02\x3b\x55\x0e\x29\x13\xd8\x07\x32\xe1\xfb\x25\x5a\x9f\xda\xf2\x1a\x5b\x14\x8c\xed\x21\x3a\xea\x0d\xfb\xdc\x7a\x4b\x3f\xc1\xae\xea\x91\x6b\xf2\xf9\x31\x62\x16\xd9\x2a\x5c\xd5\xe6\xef\x58\x70\xe5\x7c\x49\xb7\x2c\xbd\xb1\x83\x62\x07\x8f\xd5\x02\x25\xe9\xa5\xca\xc2\xb7\x41\x92\xd6\x28\x59\xad\x14\x6f\xba\x15\xde\xca\xb0\xfb\xfd\xa2\xbe\x3f\x2d\x40\x86\xdf\x16\xe0\x20\xd3\x14\x0b\x64\x3c\x50\xbf\xeb\xb0\xb0\x4d\xbc\x37\xec\xe7\xde\x5b\xfa\xf1\xf4\x9b\x4c\xfe\x15\x83\xe7\xc8\x7f\x56\xe7\x79\xdf\x8d\x7c\xfb\x81\x8e\xa3\x12\x9d\xf3\x9f\xce\x9e\xa7\x34\xbb\xf9\xfe\x41\x67\xb5\x21\x5d\xc2\xf9\xa8\x03\xd5\xde\x6d\x6f\x5a\x1d\xd8\x03\x70\x81\x64\x1f\xb0\x0d\x6a\x31\xdb\x71\xff\x46\xef\xcc\x74\xba\x75\x04\x26\x58\x22\xcb\xda\x3e\xb6\x4e\xd3\xc6\x7d\x40\xb1\x42\xc0\xd2\xf0\xc6\x47\x7e\xad\xd0\x6e\x40\x14\xc5\xce\x52\xdc\x3e\xaf\x1a\xf6\x1b\x89\x74\xd3\xf7\xa9\x7c\xc7\xb2\x8e\x7c\xef\xd6\xdb\xf1\x38\xbc\xaa\x34\xbf\xb9\xa8\xdf\xd9\xdf\x6c\xff\xb6\xf7\x79\xb7\xbd\x67\x7b\x99\x98\x60\x81\x3b\x33\x69\xcc\xf1\x50\xa5\x0e\xe2\xef\xd1\xb9\xcf\x31\xb4\x74\x64\x43\xd7\xdc\xdd\x68\x2d\x5c\x77\x1b\xdf\xa6\x86\x86\xba\x3d\x38\xb5\x45\x50\x01\xf4\x58\x6f\xd9\x40\xce\x1b\x17\x78\x91\x79\x86\x1a\x6d\xf8\x82\x76\x53\x6e\x0c\xe3\x12\x2e\xf6\x2b\xf0\xdf\x14\x29\x88\x1e\x7d\x27\x6c\xbe\xab\xc7\x9e\x7d\xec\xc0\x27\xae\x87\xdb\xd4\xb6\xee\x47\x5e\xa5\x7b\x9f\x0b\xf6\xdd\x76\xdf\xfc\x3a\x38\xaf\x91\x3d\xf0\x7e\xc7\x20\x99\x5a\x7f\x6c\xdb\x82\x03\x70\x9d\xf8\x4b\x78\xd3\x23\xb9\x6f\x41\xdd\x92\xef\x36\x6c\x30\xff\xe7\x6a\xa5\x98\x7c\x8f\xc5\x96\x36\xdf\x15\xf1\xa5\x8f\xed\x76\x18\x53\x55\xa4\x3d\x29\x17\xd8\x02\x37\xe7\xf5\x90\x92\xb3\x9e\x7a\xdd\x63\x76\xf0\xa8\xfc\x13\x00\x00\xff\xff\x90\xd2\x2b\x1a\x7a\x0e\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 3706, mode: os.FileMode(420), modTime: time.Unix(1525746590, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
