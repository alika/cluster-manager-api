// Code generated by go-bindata.
// sources:
// api/api.proto
// DO NOT EDIT!

package protobuf

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiProto = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\x41\x6f\xe3\x36\x10\x85\xef\xfa\x15\x0f\x3a\x25\x45\x22\x25\xd9\x4b\x11\x23\x07\xd7\x49\xbb\x46\xb7\x76\x11\x79\x1b\xec\x69\x41\x4b\x63\x8a\x28\xc5\x61\x49\xca\x8a\x51\xec\x7f\x2f\x28\xc9\x5e\x0b\x09\x7a\x58\x5d\x6c\x92\x6f\x1e\xbf\x79\x1a\xe5\x39\x16\x6c\x0f\x4e\xc9\x3a\xe0\xee\xe6\xf6\x67\x14\xa2\xf1\xad\x91\x28\x1e\x0b\x2c\x34\xb7\x15\x56\x22\xa8\x3d\x61\xc1\x8d\x6d\x83\x32\x12\x1b\x12\x0d\x44\x1b\x6a\x76\x3e\x4b\xf2\x3c\xc9\x73\x7c\x52\x25\x19\x4f\x15\x5a\x53\x91\x43\xa8\x09\x73\x2b\xca\x9a\x8e\x27\x57\xf8\x8b\x9c\x57\x6c\x70\x97\xdd\xe0\x22\x0a\xd2\xf1\x28\xbd\x9c\x45\x8b\x03\xb7\x68\xc4\x01\x86\x03\x5a\x4f\x08\xb5\xf2\xd8\x29\x4d\xa0\xd7\x92\x6c\x80\x32\x28\xb9\xb1\x5a\x09\x53\x12\x3a\x15\xea\xfe\x9e\xd1\x25\x92\xe0\xcb\xe8\xc1\xdb\x20\x94\x81\x40\xc9\xf6\x00\xde\x9d\x0b\x21\xc2\x08\x1d\x9f\x3a\x04\x7b\x9f\xe7\x5d\xd7\x65\xa2\x07\xce\xd8\xc9\x5c\x0f\x52\x9f\x7f\x5a\x2e\x9e\x56\xc5\xd3\xf5\x5d\x76\x33\x16\x7d\x36\x9a\xbc\x87\xa3\x7f\x5a\xe5\xa8\xc2\xf6\x00\x61\xad\x56\xa5\xd8\x6a\x82\x16\x1d\xd8\x41\x48\x47\x54\x21\x70\x84\xee\x9c\x8a\xb9\x5d\xc1\xf3\x2e\x74\xc2\x51\xb4\xa9\x94\x0f\x4e\x6d\xdb\x30\xc9\xec\x88\xa8\xfc\x44\xc0\x06\xc2\x20\x9d\x17\x58\x16\x29\x7e\x99\x17\xcb\xe2\x2a\x9a\xbc\x2c\x37\x1f\xd7\x9f\x37\x78\x99\x3f\x3f\xcf\x57\x9b\xe5\x53\x81\xf5\x33\x16\xeb\xd5\xe3\x72\xb3\x5c\xaf\x0a\xac\x7f\xc5\x7c\xf5\x05\xbf\x2f\x57\x8f\x57\x20\x15\x6a\x72\xa0\x57\xeb\x62\x07\xec\xa0\x62\x9a\x54\xf5\xd1\x15\x44\x13\x84\x1d\x0f\x48\xde\x52\xa9\x76\xaa\x84\x16\x46\xb6\x42\x12\x24\xef\xc9\x99\x38\x09\x96\x5c\xa3\x7c\x7c\xab\x1e\xc2\x54\xd1\x46\xab\x46\x05\x11\xfa\xad\x37\x7d\x65\x49\xe2\x0f\x26\x88\x57\x3c\x20\xb5\x8e\x03\x7f\x48\x67\x49\x62\x45\xf9\x77\x34\x2e\x75\xeb\x03\xb9\xaf\x8d\x30\x42\x92\xfb\x2a\xac\x9a\x25\x89\x6a\x2c\xbb\x80\x54\x32\x4b\x4d\xb9\xb0\x2a\x17\xc6\xf0\x78\x49\xd6\xdb\xa4\xb3\x93\xac\x5f\x97\xd7\x92\xcc\xb5\xef\x84\x94\xe4\x72\xb6\xbd\xf4\xdd\xb2\xc8\xbc\xa9\x09\x35\x69\xcd\xe8\xd8\xe9\x0a\x9e\xdc\x5e\x95\x84\x8a\x76\xca\xa8\xa8\xcf\x92\xe3\xde\x62\x60\xc4\xbf\x49\x9c\x1e\x67\x4b\x7c\x8c\x95\x2f\x7d\xe1\xc5\xf7\xff\x7f\x78\x79\x09\x47\xa1\x75\xc6\x9f\xef\x3f\x93\xd5\x87\xcb\xb1\x3c\x3e\x03\x1c\x2e\x86\xf6\x32\x61\x55\x16\x67\xf2\x12\x0f\x27\x91\x65\x1f\x70\x8f\xb4\xef\x7d\x7f\x9b\xf7\xac\x3d\x6a\x3a\x2a\xb6\x5c\x1d\xee\x91\xfe\x34\xac\xbf\xcd\x86\x9f\x13\xe2\x6f\x14\xfe\xe4\x6a\xc1\xad\x09\xb8\x38\x5b\x4c\x21\xcf\x0e\x7e\x84\xf2\x7d\x56\x49\xc1\x72\x55\x46\xd3\x74\x22\x8c\xc8\xf8\xce\x3c\xe1\xfe\x76\x7a\x2d\x7d\x70\x18\xd2\x8d\x9f\x1c\xf9\x90\x34\xe4\x7d\x1c\x97\x49\xd8\x23\x46\xfc\x66\x8c\x84\x11\x0d\xe1\x01\xb7\xb3\x33\x2b\x47\xde\x72\x9c\xec\xc0\xe7\xb6\xef\xd8\xf5\xdd\x4f\x0d\x8f\xa2\xa3\xe7\x71\x3d\x0d\xf3\x2d\x84\xb7\xa2\xfc\xdf\xaa\xf3\xbb\x94\x09\x1f\xee\x60\xb9\xf2\xa7\x8a\xff\x02\x00\x00\xff\xff\xe2\x9c\x49\x3e\xa1\x05\x00\x00")

func apiProtoBytes() ([]byte, error) {
	return bindataRead(
		_apiProto,
		"api.proto",
	)
}

func apiProto() (*asset, error) {
	bytes, err := apiProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.proto", size: 1441, mode: os.FileMode(420), modTime: time.Unix(1525366966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.proto": apiProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.proto": &bintree{apiProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
