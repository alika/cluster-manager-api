// Code generated by go-bindata.
// sources:
// api/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x6f\xdc\xb8\x11\x7f\xf7\x5f\x31\x50\x0b\x34\x07\xc4\xde\x5c\xfa\x96\x97\xab\xe1\x03\xee\x8c\x6b\xae\x46\x37\x88\x1f\x9a\xc0\xe0\x52\xb3\x12\xcf\x14\xc9\x23\x47\xbb\xdd\x16\xfe\xdf\x0b\x52\x1f\x4b\x69\x25\x7b\xbf\x1a\xaf\xeb\xe6\x25\xb6\xf8\x31\x5f\x3f\xce\x0c\x67\xe8\x7f\x9f\x01\x24\x6e\xc9\xb2\x0c\x6d\xf2\x01\x92\xf7\x17\xef\x92\xb7\xfe\x9b\x50\x73\x9d\x7c\x00\x3f\x0e\x90\x90\x20\x89\x7e\xfc\x4a\x96\x8e\xd0\xc2\x47\xa6\x58\x86\x16\x2e\x6f\xae\xc3\x7c\x80\x64\x81\xd6\x09\xad\xfc\xac\xc5\xbb\x8b\xef\xeb\x8d\x00\x12\xae\x15\x31\x4e\xed\x6e\x00\x89\x62\x45\xd8\xee\xa3\xe0\x39\x43\x09\x9f\x51\xe1\xbf\x04\xab\x57\x00\x24\xa5\x95\x7e\x3c\x27\x32\xee\xc3\x64\x92\x09\xca\xcb\xd9\x05\xd7\xc5\x64\xd1\x9f\x8a\x05\x13\x61\x72\x51\x0f\xfd\x25\xf3\x5f\xfc\xe4\x24\xcc\x79\x38\x03\x78\x08\x42\x39\x9e\x63\x81\x2e\xf9\x00\xff\xa8\x58\xf3\xfb\x37\x6c\x06\x5a\x7e\xc5\xd7\x30\x97\x6b\xe5\xca\xce\x64\x66\x8c\x14\x9c\x91\xd0\x6a\xf2\x9b\xd3\x6a\x3d\xd7\x58\x9d\x96\x7c\xcb\xb9\x8c\x72\xb7\xd6\xec\x84\x19\x31\x59\x7c\x3f\xe1\x95\x62\x63\x25\x65\x18\xeb\xcc\xb3\x5f\x16\x05\xb3\x2b\x2f\xeb\xad\x90\x12\x2c\x92\x15\xb8\x40\xa0\x1c\xc1\x11\xa3\xd2\x81\x9e\x03\x83\x7a\x33\x60\x2a\x05\x41\x0e\xee\xcb\x19\x72\xad\xe6\x22\x83\xb9\xb6\xc0\xb5\x52\xc8\x49\x2c\x04\xad\x5a\x3d\x02\x24\xda\xa0\x0d\x2c\x5f\xa7\x9e\xc6\x4f\x48\xb5\xb9\xe3\x49\x16\x9d\xd1\xca\xa1\xeb\xf0\x06\x90\xbc\x7f\xf7\xae\xf7\x09\x20\x49\xd1\x71\x2b\x0c\xd5\xc0\x88\x36\xaa\x24\xf2\x06\x61\x1b\xcb\x00\x92\x3f\x5a\x9c\xfb\x15\x7f\x98\xa4\x38\x17\x4a\xf8\x1d\x5c\xa3\xa5\xbb\xa2\x82\xdf\x1d\x33\x62\xcd\xe5\xdf\xd1\xc8\x55\xd2\xd9\xe8\xe1\x6c\xe8\xe7\x87\x48\x1c\xc3\x2c\x2b\x90\xd0\xae\x8d\x57\xfd\xeb\x09\xd2\x20\x36\xfc\xff\xf6\x51\x21\x7f\x65\x05\x7a\x3b\x78\xab\x34\x96\x20\x0d\x33\x04\xa9\xf5\x3d\xa6\x50\x9a\x8b\xfe\x16\x22\xac\xfc\xbd\x44\xbb\xea\x0f\x59\xfc\xbd\x14\x16\xbd\x49\xe6\x4c\x3a\xec\x0d\xd3\xca\x04\xc6\x1c\x59\xa1\xb2\x64\x50\xe0\xaf\x91\xc0\xc4\xb2\xbe\xa8\xcd\xa9\x5e\x2f\xfe\x7a\xd6\xd3\x54\x92\xa2\x44\xc2\xc7\xf1\x58\xcd\x59\xe3\xef\x11\x6c\xfd\x18\xa6\xbe\x00\x78\x75\x18\x3d\x15\x84\xdd\xe6\x8c\x40\xb8\x18\x61\x7f\x72\xe0\x17\x7a\xa0\xa5\xe8\xc8\xea\xd5\xcb\xc3\x98\x29\x9f\x70\x78\xc6\xea\x85\xf0\x41\x66\x2b\x8c\x5d\x59\x64\x2f\x02\x63\x1d\x46\xbf\x09\xc6\x66\x3a\xdd\xc0\x40\x05\x8f\xa1\x91\x08\x1d\x64\xcb\x3e\x38\x8e\xad\x80\x8f\x2e\xdb\x46\xfc\xfd\xf1\x76\x16\x69\xaf\x8d\xbf\x19\x92\xd1\x29\xd7\xa5\xea\x24\x2a\x46\xbb\x71\x4c\x4e\x45\x61\x24\x82\xd1\x29\x84\x85\xd0\x00\xeb\x02\xa0\x0e\xd0\xfe\xf7\x14\x96\x82\xf2\x70\x58\x55\x59\xcc\xd0\xfa\xe0\x60\x74\xea\x40\xa8\xea\x2b\x2b\xd0\x19\xc6\xb1\x02\x78\x8a\xe9\xe3\x51\xf9\x46\xa7\x57\x81\xd1\x13\xc6\x74\xc4\xe6\x6b\x44\x74\x24\xfe\xf3\xe0\x39\x47\x29\xf5\x52\x5b\x99\xee\x0a\xe7\x9f\xfd\x4a\xb8\xf5\x4b\x61\x8a\x76\x21\x38\xc2\x39\x2c\x2b\x3c\x1b\x64\x04\x0c\x32\x8b\x48\x42\x65\x3e\xdc\x34\x08\xde\x06\xbc\x61\xef\xb0\xf5\x29\x63\x77\xcd\xe5\x6b\x84\xee\x5a\xfa\x67\x43\x6e\x11\x63\x76\x87\xcc\x33\x45\x23\xf5\x0a\x53\xf0\x7b\x00\xcf\x99\xa5\x27\x73\xd0\x9f\x51\x16\x57\xfd\x99\xa7\x86\xc8\x1e\xab\xdf\x04\x96\x9b\x09\xd6\x90\xb0\x4d\x41\x80\x84\x94\x68\xc1\xe5\xba\x94\xa9\xbf\xeb\x08\xe5\x88\x49\x89\x29\x68\xf5\x6d\x52\xd1\xb7\x4f\xcb\x54\x71\x79\xd1\x06\xdc\x1d\xf2\xec\x5a\xc0\x76\xe9\xa9\xc9\xd4\x94\x5f\xb6\x97\xa8\x5e\x11\xae\xaa\x61\x8f\x70\xf4\x4e\x46\xae\xfe\xf1\x1d\x12\x27\x9c\x06\xf0\x17\xee\xff\xc1\xdb\x4e\x7d\x82\xe0\x8d\xb6\x60\xb1\xfe\xed\xbb\xc8\xb7\x7d\x51\x9f\x72\xe1\xaa\xd0\x3c\xc3\xea\xde\x57\x72\x12\x0b\x04\x11\xca\x40\x41\x3b\x39\x73\xc0\xa4\x45\x96\xae\x60\x86\xa8\xd6\x5e\xb2\x4d\x4b\x9d\x0f\xdf\xbd\x7b\x67\xdf\x5b\x5e\x57\xf4\x5f\x84\xbb\xec\xf3\xfa\x1a\xc3\x78\x5f\x07\xcf\x13\xcc\x2b\xc7\xb2\x75\x0a\xfa\x18\xee\xeb\xad\xc6\x11\x7a\xd3\x54\x07\x3e\x6d\xcc\x3c\x35\x80\xf6\x58\x7d\x8d\xf8\xec\xa9\xe0\x1b\xc1\xb3\x6d\x05\x44\xdc\xad\x8b\xf1\x4f\x95\x26\x2e\x6f\xa7\x53\x83\x3c\x86\x73\x13\x2c\xf4\xec\x37\xe4\x6b\xa7\x98\x18\xeb\xd1\x49\xa2\x07\xb9\xc4\x62\x56\xc1\xaa\x03\xc3\x5e\xc8\x79\xdb\x19\x6b\x7a\x2f\x9f\x72\x84\x6a\x79\xa8\xe2\x5f\xde\x4e\x93\x41\x60\x38\xe4\x16\xe9\xee\x1e\x57\x77\x22\xdd\x9b\xd2\x34\xec\xf2\x0b\xae\xae\xd3\x8a\xdc\xcd\x35\x5c\x72\x8e\xce\x3d\x4a\x95\x85\x29\x9e\xf8\x81\x94\x2b\x5a\xbf\xe0\xaa\xa5\xce\xfa\xd4\x07\x3d\xcf\x93\xe5\x25\xc6\x0e\x36\x22\xaa\xd4\x68\xa1\x68\x6f\x11\x3d\x13\x41\xa6\x76\xa7\x41\x9d\x96\x0e\x6d\x7d\x7c\xf7\xa3\xd3\x6c\xd0\x54\x9a\x1a\xba\xc3\xe4\x34\x2b\x29\x3f\xc8\x74\x7f\xbb\x2c\x29\x87\xfb\xda\x68\x9e\xe2\x80\x80\xfb\x99\xcd\x65\x87\x58\x6c\x6f\x2d\x8e\x37\x73\xda\x62\x34\xa6\xc3\xea\xac\xeb\x21\xb6\x4f\x77\xbf\xb2\xe8\x4d\xbd\x5b\xc0\xee\xb8\x05\x1a\xa2\xe0\x0c\x72\x31\xaf\x7b\x90\x87\x6a\xbf\x43\xfc\x39\xcc\x10\xdf\x5b\x5a\x11\xcf\x81\x97\xd6\xa2\x22\xb9\x02\xf2\x99\xb0\x70\xc0\x96\x0e\xb4\x85\x82\xb1\x11\x3f\x15\x46\x8e\x62\x91\xd6\x93\x3c\x71\xce\xc7\x2c\x11\x31\xc5\x96\x47\xe2\xa9\x89\x50\xe3\x2c\x5d\xde\x8e\x73\xb4\x17\x36\xaa\xe4\xe5\x00\x50\xe8\xfb\x31\x48\xcc\xb4\x96\xc8\xba\x77\xda\x64\xae\x6d\xc1\x68\x74\x38\x82\x0c\x52\x8e\xd6\xa3\x41\x69\xea\x1c\xe0\x25\x73\xf1\xf1\x85\x59\x8d\x1f\x9f\xf4\xa0\x1b\x71\xc6\x55\x83\x7d\x6f\xd7\xe8\x97\x6f\x78\x92\x0c\x55\x9d\xc2\xee\x61\x85\x81\xd6\xe4\xe9\x59\xe1\x2a\xd4\x83\x62\x99\x9b\x9b\xaa\xbf\x82\x1e\x5d\xd3\xd3\xf6\x15\x04\x85\x6c\xa9\x6f\xcf\xdd\x74\xdb\xbb\x40\x9e\x9e\x76\x6f\x59\xe5\x12\xdb\x9b\x10\xb8\x32\x64\x49\xf3\x52\x8e\xb8\x3f\x74\x8e\x65\x07\x38\xe1\x7a\x03\x07\x4b\xb4\x08\x99\x58\xe0\x3e\xd8\xfd\xc9\x03\x5f\xf0\x75\x35\xe1\xb9\x83\x8a\x8a\xe2\x7c\x55\x20\x29\x70\x2c\x2d\x5b\x97\x0f\x8f\x41\xb5\xea\xfc\x85\xbe\xbd\x27\x1b\xbe\x47\xcf\x87\x80\xf4\x30\x17\x16\x8d\x3e\x98\x81\xaa\x44\xe4\xb7\x72\x82\xb4\x5d\x0d\x93\xe2\x3d\x13\x1d\x42\x2b\x58\x6b\x90\xca\x82\xc9\x72\xf3\x86\xbe\x3d\x19\x66\xb1\x3e\x0c\x21\x56\xc2\x1b\x85\x8e\x30\x85\x15\x2b\x24\x9c\x87\xa1\xcf\x81\xc4\x45\xf8\xc2\xb5\x22\x54\xe4\xbe\xdb\x1f\xbe\xd5\xd5\x75\x8a\x44\x9e\xb5\x03\x21\x7c\x1c\x44\xf5\xcb\xd4\x23\xaa\x6e\xdf\xea\x1d\x46\x6d\xb8\x84\xbc\x97\x42\xe9\xc4\x03\xd9\x75\xe7\xb9\x4d\x73\xa1\x72\x2b\x47\x58\x1c\x3d\x8c\xc5\x3a\x76\x9d\x90\xc6\xfb\x05\x8e\x98\xe2\xfa\x9d\xdf\xc1\x54\xa3\x27\x83\xa4\x9b\x17\x83\x4d\xbb\x77\x93\x89\x1d\xec\x1c\xf7\xc5\x9f\xed\xc8\xfc\x1a\x3b\xde\x39\x12\xaf\x0a\xe1\xed\x53\x8e\x2f\xea\xaf\xc8\x16\x08\x58\x18\x5a\xf9\x39\xa1\x91\x00\x4c\xca\xf5\xd1\xda\xa7\x14\xb1\xf1\x2c\xe2\x00\x0d\x18\x9d\x8e\xa2\x4b\x28\xc2\xac\xd7\xbc\x8b\xa0\x2e\x14\xfd\xf9\xfd\x98\x6a\x9e\x78\xa3\xf2\x46\xdb\x9e\x1e\xf6\xf1\xa0\xdd\x2e\xf3\x7f\x37\xfa\x6f\x72\xd7\xee\xda\x49\xd1\xe3\x97\x0f\x9d\xd4\x71\x2b\x39\x0e\xb6\xe7\x76\xa9\xd9\xb6\xc2\x34\x25\x6f\x0f\xde\x48\xb0\x27\x05\x1a\xea\x1b\x1c\x20\xd4\xe6\xbb\xe6\x21\xa1\x46\xee\x0e\xdb\xf4\x96\x87\x3d\xe1\x46\xdf\x01\x76\xba\x53\x0f\xc6\xf7\x91\xbb\x5d\xcd\x5c\x35\x69\xa4\xe8\x30\x98\x40\xed\xca\xcd\x50\xeb\xad\xa3\xae\x90\x5f\x4d\x37\x19\xd9\xf6\x4c\x0e\xb7\xcd\x4e\x2f\x14\xbf\xd8\x5b\xcf\x40\xcf\xe3\xe5\x1d\xad\xa3\x05\xde\x71\xd2\x62\x84\xf4\x21\x69\xeb\x67\xbf\x56\xe9\x5e\xaa\xea\xbd\x63\xd3\x6f\x9c\x40\x69\x32\xcb\x52\x1c\xbd\x72\x35\x26\x5d\x8a\x74\x54\xfa\x63\x24\x99\xb5\x6a\xda\x47\xce\xe7\x9e\x60\xfd\xf5\x87\x2f\x6a\x5a\xa9\x4c\x10\xe4\x3e\x47\xe9\x4c\x62\x69\x21\x14\x18\x2b\x16\x42\x62\x86\xee\x87\x91\x82\xa3\x9f\x76\x17\xa5\x32\x23\xd2\x30\x6b\x59\xb7\x37\x98\x08\xc2\xa2\x3f\x7f\xfb\xc7\x1e\x03\x48\xf0\x32\xfb\xc4\x93\x22\x2c\xb0\x99\x0c\x91\xab\x12\x67\xaf\xf2\xd8\x60\x8f\xf5\xff\xce\x6c\x47\x67\xd6\x36\x4c\xf1\x9f\x84\x56\x31\xf9\xa3\xe6\x51\xc7\xb4\xd7\x2a\xff\xa8\xad\xb7\x9d\x2e\x09\x1e\xf9\x4b\xb1\xf1\x3f\xee\x72\xac\x70\xa5\xca\xce\xb9\xe2\xd4\x44\xc2\xf3\xda\xa6\xe7\xcc\x08\xcf\xe6\xc3\xd9\xc3\xd9\x7f\x02\x00\x00\xff\xff\xeb\x62\x51\xa0\xb7\x36\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 14007, mode: os.FileMode(420), modTime: time.Unix(1526491263, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
