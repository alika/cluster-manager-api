// Code generated by go-bindata.
// sources:
// api/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x55\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x46\x86\xe3\x6a\x53\xca\xad\xd7\x3d\x00\x07\x24\x84\x90\x38\xa0\x6a\xe5\x4d\xa6\x89\x57\x89\xc7\x78\x26\xbb\xaa\x50\xfe\x1d\xd9\x6d\x63\x37\xbb\x88\x96\x02\x42\xa2\x27\x37\x33\xf3\x32\xef\xe5\xcd\xf8\x5b\x01\xa0\xf8\x51\x37\x0d\x7a\xb5\x02\xb5\xbc\x5e\xa8\xab\xf0\xcc\xd8\x0d\xa9\x15\x84\x38\x80\x12\x23\x1d\x86\xb8\x76\xe6\xda\x79\x12\x8a\x59\x00\xea\x01\x3d\x1b\xb2\x21\xb6\x3f\x82\x25\x01\x46\x51\x05\xc0\x18\xb1\xb8\x6a\xb1\x47\x56\x2b\xf8\xb2\x2b\x6a\x45\xdc\x01\x20\x9c\x39\xe4\xae\x63\x6e\x45\x96\x87\xa3\x64\xed\x5c\x67\x2a\x2d\x86\x6c\x79\xcf\x64\x53\xae\xf3\x54\x0f\xd5\x89\xb9\x5a\x5a\x4e\x84\x4a\xed\x4c\xf9\xf0\xaa\x6c\x50\x1c\xd5\x15\x0d\x56\xa6\x60\xc8\x26\xce\xff\x03\x28\x72\xe8\x23\xee\xbb\x3a\x70\x7d\x83\xf2\x81\xea\x9b\x58\x77\x95\xb2\x3c\xb2\x23\xcb\xc8\x47\xc5\x00\x6a\xb9\x58\xcc\x1e\x01\xa8\x1a\xb9\xf2\xc6\xc9\x5e\xbf\x0c\x28\x86\xa3\x6c\xfa\x49\x19\x80\x7a\xe9\x71\x13\x2a\x5e\x94\x35\x6e\x8c\x35\x01\x81\xcb\xaa\x1b\x58\xd0\xdf\xf6\xda\xea\x06\xfd\xad\x76\x26\x6b\xf3\x23\xba\x6e\xab\x8e\x90\xc6\xe2\xb9\xf3\x98\xf1\x71\xda\xeb\x1e\x05\x7d\xd2\x78\xf7\x9b\x31\xb1\xba\x8f\xf6\xb8\xa3\x7a\x3b\xa7\x61\xec\x8f\x22\x1e\xbf\x0e\xc6\x63\x10\x54\xfc\x80\x7f\x94\xfe\x7b\x6e\x4e\x21\xbf\xce\xc8\x8b\x6e\xe6\xb4\xd5\xcd\xee\x25\x09\x6a\x5d\xe4\x10\x7b\xed\x26\x7b\xb5\xd8\x75\xf4\x48\xbe\xab\xcf\x72\xd7\xdb\x50\xf6\x39\x96\xfd\xc3\xe6\x4a\x5d\xfe\x8f\xde\x4a\xec\xff\x92\xb5\xa6\x75\x9a\x35\x96\x16\xda\xcf\xdd\x9f\x19\x50\xb6\x2e\x4a\x4a\x77\xf7\x58\xa5\x05\x16\x16\xaa\x43\x2f\x66\x66\xb1\xf8\x09\xd8\xe9\x0a\xe7\xce\x3b\x00\xb1\x78\x63\x33\x15\xc6\x67\xa7\xe2\x94\x05\x75\x41\x97\x8e\xea\x27\xa3\x71\xc0\x30\x56\x30\x5c\x71\xb9\x0f\xd4\x86\x7c\xaf\x65\x1f\x7e\xbd\xfc\x85\xf6\x8f\x4d\x70\xa1\xc2\x67\x8b\x3b\xa1\x4e\xd7\xf3\xa7\x16\x21\xf6\x04\xb1\x29\x08\x53\x80\x2c\xea\x74\x1e\x17\x7f\x85\x1e\x99\x75\xf3\xbb\xc8\x1c\x76\x1e\x08\xe5\xc4\x54\x1a\x89\x62\x2c\xbe\x07\x00\x00\xff\xff\xd0\x71\x6d\x5f\xc5\x08\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 2245, mode: os.FileMode(420), modTime: time.Unix(1525366981, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
