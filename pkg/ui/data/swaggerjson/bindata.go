// Code generated by go-bindata.
// sources:
// api/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x18\xe8\x0e\xb8\x16\x48\xe2\xb4\xf7\x96\x97\xde\x21\x05\xda\x00\x9b\x22\x68\x8a\xe6\x61\x5b\x14\xb4\x34\x96\xd8\x52\x24\x4b\x8e\xec\xf5\x2e\xf2\xdd\x17\xa4\xfe\x98\x92\xa5\x44\xb6\xb3\x89\xb3\xd9\xbe\x34\x96\x86\xe4\xfc\x66\x7e\x9c\x19\x0e\xf5\xc7\x01\x40\x64\x17\x2c\x4d\xd1\x44\xa7\x10\xbd\x3e\x3e\x89\x0e\xdd\x33\x2e\x67\x2a\x3a\x05\xf7\x1e\x20\x22\x4e\x02\xdd\xfb\x33\x51\x58\x42\x03\x17\x4c\xb2\x14\x0d\xfc\xff\xf2\xdc\xcb\x03\x44\x73\x34\x96\x2b\xe9\xa4\xe6\x27\xc7\xaf\xaa\x89\x00\xa2\x58\x49\x62\x31\x35\xb3\x01\x44\x92\xe5\x7e\xba\x0b\x1e\x67\x0c\x05\x7c\x46\x89\xbf\x73\x56\x8d\x00\x88\x0a\x23\xdc\xfb\x8c\x48\xdb\xd3\xc9\x24\xe5\x94\x15\xd3\xe3\x58\xe5\x93\x79\x57\x14\x73\xc6\xbd\x70\x5e\xbd\xfa\x5f\xea\x9e\x38\xe1\xc8\xcb\xdc\x1c\x00\xdc\x78\x50\x36\xce\x30\x47\x1b\x9d\xc2\xaf\xa5\x6a\x6e\xfe\x5a\x4d\xbf\x96\x1b\xf1\xd5\xcb\xc6\x4a\xda\xa2\x25\xcc\xb4\x16\x3c\x66\xc4\x95\x9c\x7c\xb7\x4a\xae\x64\xb5\x51\x49\x11\x8f\x94\x65\x94\xd9\x95\x65\x27\x4c\xf3\xc9\xfc\xd5\x24\x2e\x0d\x1b\x1a\x29\xc5\xd0\x66\x4e\xfd\x22\xcf\x99\x59\x3a\xac\xd7\x5c\x08\x30\x48\x86\xe3\x1c\x81\x32\x04\x4b\x8c\x0a\x0b\x6a\x06\x0c\xaa\xc9\x80\xc9\x04\x38\x59\xf8\x51\x4c\x31\x56\x72\xc6\x53\x98\x29\x03\xb1\x92\x12\x63\xe2\x73\x4e\xcb\xc6\x8e\x00\x91\xd2\x68\xbc\xca\xe7\x89\x5b\xe3\x1d\x52\xe5\xee\x50\xc8\xa0\xd5\x4a\x5a\xb4\x2d\xdd\x00\xa2\xd7\x27\x27\x9d\x47\x00\x51\x82\x36\x36\x5c\x53\x45\x8c\x60\xa2\x12\x91\x73\x08\x5b\x1b\x06\x10\xfd\xdb\xe0\xcc\x8d\xf8\xd7\x24\xc1\x19\x97\xdc\xcd\x60\x6b\x2b\x7d\xcb\x4b\xfa\x7d\x63\x9a\xaf\xb4\xfc\x88\x5a\x2c\xa3\xd6\x44\x37\x07\x7d\x7f\xdf\x04\x70\x34\x33\x2c\x47\x42\xb3\x72\x5e\xf9\xaf\x03\xa4\x66\xac\xff\xff\xf0\x56\x90\x1f\x58\x8e\xce\x0f\xce\x2b\xb5\x27\x48\xc1\x14\x41\x28\xf5\x03\x13\x28\xf4\x71\x77\x0a\xee\x47\xfe\x2c\xd0\x2c\xbb\xaf\x0c\xfe\x2c\xb8\x41\xe7\x92\x19\x13\x16\x3b\xaf\x69\xa9\xbd\x62\x96\x0c\x97\x69\xd4\x0b\xf8\x6b\x00\x98\x58\xda\x85\x5a\xef\xea\xd5\xe0\xaf\x07\x1d\x4b\x45\x09\x0a\x24\xbc\x9d\x8f\xa5\xcc\x8a\x7f\xb7\x70\xeb\xad\x17\x7d\x02\xf4\x6a\x29\xba\x2f\x0c\xbb\xce\x18\x01\xb7\x21\xc3\xfe\x63\xc1\x0d\x74\x44\x4b\xd0\x92\x51\xcb\xa7\xc7\x31\x5d\xdc\x11\xf0\xb4\x51\x73\xee\x92\xcc\x28\x8e\x9d\x19\x64\x4f\x82\x63\x2d\x45\x1f\x84\x63\x53\x95\xac\x71\xa0\xa4\x47\xdf\x9b\x80\x1d\x64\x8a\x2e\x39\xee\xdb\x00\x17\x36\x1d\x03\x7f\x7b\xbe\x1d\x04\xd6\x6b\xf2\x6f\x8a\xa4\x55\x12\xab\x42\xb6\x0a\x15\xad\xec\x30\x27\xaf\x78\xae\x05\x82\x56\x09\xf8\x81\x50\x13\xeb\x18\xa0\x4a\xd0\xee\x77\x02\x0b\x4e\x99\xdf\xac\xb2\xc8\xa7\x68\x5c\x72\xd0\x2a\xb1\xc0\x65\xf9\x94\xe5\x68\x35\x8b\xb1\x24\x78\x82\xc9\xed\x59\xf9\x52\x25\x67\x5e\xd1\x3d\xe6\x74\xa0\xe6\x73\x64\x74\x00\xff\x71\xf8\x9c\xa1\x10\x6a\xa1\x8c\x48\x36\xa5\xf3\x7b\x37\x12\xae\xdd\x50\xb8\x42\x33\xe7\x31\xc2\x11\x2c\x4a\x3e\x6b\x64\x04\x0c\x52\x83\x48\x5c\xa6\x2e\xdd\xd4\x0c\x1e\x43\x5e\x3f\xb7\x9f\x7a\x9f\xb9\xbb\xd2\xf2\x39\x52\x77\x85\xfe\xd1\x98\x9b\x87\x9c\xdd\xa0\xf2\x4c\x50\x0b\xb5\xc4\x04\xdc\x1c\x10\x67\xcc\xd0\x9d\x35\xe8\x7b\x14\xf9\x59\x57\x72\xdf\x18\xd9\x51\xf5\x41\x68\xb9\x5e\x60\xf5\x81\xad\x1b\x02\xc4\x85\x40\x03\x36\x53\x85\x48\xdc\x59\x87\x4b\x4b\x4c\x08\x4c\x40\xc9\x87\x29\x45\x0f\xef\xc6\x54\x6a\x79\xdc\x24\xdc\x0d\xea\xec\x0a\x60\x33\x74\xdf\x30\xd5\xed\x97\xf1\x88\xaa\x11\xfe\xa8\xea\xe7\xf0\x5b\x6f\x6f\x70\x75\xb7\x6f\x1f\x1c\xbf\x1b\xc0\x1d\xb8\xff\x86\xa7\x9d\x6a\x07\xc1\x0b\x65\xc0\x60\xf5\xeb\x65\x10\xdb\xbe\xc8\x4f\x19\xb7\x65\x6a\x9e\x62\x79\xee\x2b\x62\xe2\x73\x04\xee\xdb\x40\xde\x3a\x19\xb3\xc0\x84\x41\x96\x2c\x61\x8a\x28\x57\x51\xb2\x29\x4b\xad\x4b\xdf\x9d\x73\x67\x37\x5a\x9e\x97\xeb\x3f\x89\x70\xd9\xd5\xf5\x39\xa6\xf1\xae\x0d\x1e\x27\x99\x97\x81\x65\x74\x09\x7a\x1b\xef\xab\xa9\x86\x19\x7a\x59\x77\x07\x3e\xad\x49\xee\x1b\x41\x3b\xaa\x3e\x47\x7e\x76\x4c\xf0\x40\xf4\x6c\xae\x02\x02\xed\x56\xcd\xf8\x31\xad\x89\x80\xca\x75\xa2\x50\xd3\xef\x18\xaf\x02\x62\xa4\x8d\x63\x26\xf1\x0e\xdd\x6a\x4f\xb4\x08\xd8\x49\x36\x87\xad\x77\xf5\xad\xcb\x70\x47\xb9\xe9\x88\x61\xb2\xc2\x7c\xd3\xbb\x25\xc7\x35\x9e\x76\x80\xa7\x7e\x0c\x81\x9b\x2a\x25\x90\xb5\x6b\x93\x68\xa6\x4c\xce\x68\xf0\x75\x03\xfe\x3a\x43\xca\xd0\x80\x32\x20\x15\xb5\x6c\xb0\x60\x36\xb4\x00\x4c\x97\x40\x2e\x23\x3a\xf2\xa2\xa5\xa8\x77\xdf\x94\x17\x25\x5b\xf9\xe1\x53\x75\xcf\xb2\xe6\x8c\x14\x65\x15\x8a\xb6\xf0\x42\x4f\x8b\x79\xff\xbc\x70\xe6\xeb\xfa\x10\x73\x5d\x71\xb8\x52\xe2\xde\x2d\x7d\xd5\xdc\x66\xb9\x25\xd7\xfd\xb9\x99\x6d\x3b\x85\xc0\xfe\x59\xf7\x9a\x95\x25\x79\x93\xd1\xc0\x16\x71\x8c\xd6\xce\x0a\xd1\x6f\xdb\x1c\xad\x65\xe9\x76\xe1\xc4\x1f\x02\xaa\x09\x2c\x2c\xd0\x20\xa4\x7c\x8e\xdb\x70\xf7\x9d\x23\x3e\x8f\x57\x55\xe1\x63\x84\xc7\xf0\x50\x23\x83\x50\x59\x16\xba\x39\xca\x81\x48\xb0\x3a\x06\xde\xc7\xaa\x65\x07\xd7\xdf\xbf\xb8\x65\xfd\xf3\xe0\x1a\x18\x48\xf5\x6b\x61\x50\xab\x9d\x15\x28\x4b\x7d\x37\x95\xe5\xa4\xcc\xb2\x7f\xa9\xb8\xe3\xa2\x5d\xd6\xf2\xde\xea\x5d\x65\xce\x44\xb1\x5e\x69\x8d\x5f\x86\x19\xac\x36\x83\x4f\xcf\xf0\x42\xa2\x25\x4c\x60\xc9\x72\x01\x47\xfe\xd5\x67\xbf\xc4\xb1\x7f\x12\x2b\x49\x28\xc9\xbe\xdc\x9e\xbe\x65\x09\x72\x85\x44\x4e\xb5\x1d\x29\x7c\x3f\x8c\xea\xb6\x1b\x06\x4c\xdd\x7c\x73\xb1\xdb\x6a\xfd\xad\x80\xad\x0c\x4a\x7b\x9e\xc8\xce\x5b\xd7\xa6\xf5\x15\x8c\x5d\x5a\xc2\xfc\xde\xd3\x58\x68\x63\xdb\x4a\x69\x71\xb7\x50\x0d\x57\x5c\x7d\xaf\xb1\xf3\xaa\xc1\xa7\x1f\xa4\xea\x2f\x3f\xea\xb6\xfd\xba\x12\x1b\xf8\x39\xbc\xdf\x78\xb4\x2d\xf3\x21\x0c\xbc\x33\xa4\xb8\x6c\x68\x34\x57\x72\x5f\xe4\x2f\xc8\xe6\x08\x98\x6b\x5a\x3a\x19\xdf\x10\x02\x77\xbc\x6c\x16\xb6\xbb\xe1\xdf\x99\xe8\x5a\x25\x83\xec\xe2\x92\x30\xed\x34\x61\x03\xaa\x73\x49\xff\x7d\x3d\x64\x9a\x3b\xee\x1a\xdd\xf1\xba\x6d\x87\x6d\x22\x68\xfb\xb6\xe0\xaf\xcd\xfe\xeb\xda\x35\xb3\xb6\x4a\xf4\xf0\x06\xab\x55\x3a\x8e\xc2\xb1\xb3\x3f\xc7\x95\x66\x63\xc1\xd4\xad\x0b\x47\xde\x00\xd8\x9d\x80\xfa\xfa\x3f\x3b\x80\x5a\xff\x3e\xad\x0f\xd4\xc0\xd9\x61\xcc\x1d\x41\x7f\x24\x5c\xeb\x1f\xc1\x46\x4d\x86\xde\xfc\x3e\x70\xb6\xab\x94\x2b\x85\xec\x06\x05\xd4\xa6\xda\xf4\xb5\x50\x5b\xe6\xf2\xf5\xd5\xd5\xba\x22\x63\xf7\x64\x7f\xfb\x73\xff\x52\xf1\x93\x3d\xf5\xf4\xf4\xae\x9e\xde\xd6\xba\xb7\xc4\x3b\xbc\x34\x1f\x58\x7a\x97\xb2\xf5\xb3\x1b\x2b\x55\xa7\x54\x75\xd1\xb1\xee\x1b\x4f\xa0\xd0\xa9\x61\x09\x0e\x1e\xb9\x6a\x97\x2e\x78\x32\x88\xfe\x3e\x8a\xcc\xca\x34\xcd\xc7\x6a\x47\x6e\xc1\xea\xe9\x9b\x2f\xf2\xaa\x34\x19\x27\xc8\x5c\x8d\xd2\x12\x62\x49\xce\x25\x68\xc3\xe7\x5c\x60\x8a\xf6\x4d\x3f\x12\x2f\xf6\x2d\x28\x65\x06\xd0\x30\x63\x58\xbb\xc7\x1b\x71\xc2\xbc\x2b\x3f\xfe\xd2\xae\x87\x09\x0e\xb3\x2b\x3c\x29\xe0\x02\x9b\x0a\x9f\xb9\x4a\x38\x5b\xb5\xc7\x7a\x7b\xe5\xff\x04\xb3\x0d\x83\x59\xd3\xf8\xc6\xdf\x08\x8d\x64\xe2\xad\x8a\x83\xce\x77\xe7\xca\xe3\x42\x19\xe7\x3b\x55\x10\xa4\x1f\x2f\xcf\x8e\xde\x31\xc2\x45\x43\xa0\x5b\xbe\xce\x4f\x8d\x8e\x8f\x30\x56\xe5\x79\xaa\xfc\x99\x56\x83\x9d\x0a\x07\x37\x07\x7f\x06\x00\x00\xff\xff\x8a\x7a\xfc\xeb\x73\x30\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 12403, mode: os.FileMode(420), modTime: time.Unix(1525750687, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
