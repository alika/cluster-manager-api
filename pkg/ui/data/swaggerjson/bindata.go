// Code generated by go-bindata.
// sources:
// ../../api/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\x3d\x8f\xdb\x30\x0c\xdd\xfd\x2b\x08\xb5\xe3\xe1\x9c\xde\x98\xb5\x4b\x3b\x74\x29\x0a\x74\x28\x82\x83\xce\x66\x6c\x1d\x6c\x51\x25\xe9\x3b\x04\x85\xff\x7b\x21\x39\x8e\x14\xf7\xeb\x80\xb6\x99\x14\xf1\xbd\x67\x3e\xf2\xe9\x5b\x05\x60\xe4\xd9\x76\x1d\xb2\xd9\x83\xb9\xbb\xdd\x99\x9b\x78\xe7\xfc\x91\xcc\x1e\x62\x1d\xc0\xa8\xd3\x01\x63\xdd\x06\x77\x1b\x98\x94\x12\x0a\xc0\x3c\x21\x8b\x23\x1f\x6b\xe7\x23\x78\x52\x10\x54\x53\x01\xcc\x49\x4b\x9a\x1e\x47\x14\xb3\x87\x2f\x0b\xa9\x57\x0d\xab\x40\x3c\x4b\xc4\x1e\x12\xb6\x21\x2f\xd3\x15\xd8\x86\x30\xb8\xc6\xaa\x23\x5f\x3f\x0a\xf9\x8c\x0d\x4c\xed\xd4\xbc\x10\x6b\xb5\x97\x6c\xa8\xb6\xc1\xd5\x4f\x6f\xea\x1e\x87\x81\x9e\x89\x87\xf6\x52\x8b\x60\x12\x2d\xfe\x03\x18\x0a\xc8\x49\xf6\x7d\x04\x9a\x77\x91\xf6\x39\xd1\x6e\x32\x88\x51\x02\x79\x41\xb9\xe2\x02\x98\xbb\xdd\x6e\x73\x05\x60\x5a\x94\x86\x5d\xd0\xf3\xf4\x0a\xa1\x54\x4e\x43\xb3\x3f\xd0\x00\xcc\x6b\xc6\x63\x64\xbc\xaa\x5b\x3c\x3a\xef\xa2\x82\xd4\xcd\x30\x89\x22\xdf\x8f\xd6\xdb\x0e\xf9\xde\x06\x97\xbb\xfc\x88\x61\x38\x99\x2b\xa1\xb9\xfa\xd9\x79\x2e\xec\x04\xcb\x76\x44\x45\xce\x03\x5e\x7e\x1b\x23\xde\x8e\x29\x1b\x0f\xd4\x9e\xb6\x2e\x9c\xff\x55\x85\xf1\xeb\xe4\x18\xe3\x38\x95\x27\xfc\x9f\xee\x3f\x48\xf7\x12\xef\x87\xc2\xbb\xda\x6e\xeb\xda\xbc\x5d\xbe\x91\xa5\x0e\x55\x29\x31\x5f\xf2\x5e\x34\x96\x13\xf7\xc7\x0e\x8b\xfc\xe9\x29\xa4\x89\xd2\xc3\x23\x36\x7a\x99\x5c\x0c\x7c\x40\x56\xb7\x49\xd8\xba\x81\xab\xcc\xad\x1a\xa2\xec\x7c\xe1\x7f\xf5\x7b\xd9\x74\x7e\xdc\x9f\x7a\x84\xd4\x13\xa4\xa6\x20\xae\x08\x45\x17\xee\x19\xff\x7b\x1f\x4b\xce\xfe\xc2\xc9\x88\x22\xb6\xfb\x57\x66\xd6\x07\x09\x4a\xa5\x31\x93\xf7\x55\xcd\xd5\xf7\x00\x00\x00\xff\xff\xe6\x71\x35\x89\x03\x05\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 1283, mode: os.FileMode(420), modTime: time.Unix(1525287970, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
