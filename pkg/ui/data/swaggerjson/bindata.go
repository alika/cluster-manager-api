// Code generated by go-bindata.
// sources:
// api/swagger/api.swagger.json
// DO NOT EDIT!

package swaggerjson

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x18\xe8\x0e\xb8\x16\x48\xe2\xb4\xf7\x96\x97\xde\x21\x05\xda\x00\x97\xa2\xb8\x14\xcd\xc3\xb6\x28\x68\x69\x2c\xb1\xa5\x48\x96\x1c\x39\xeb\x5d\xe4\xbb\x2f\x48\xfd\xa3\x64\x29\x91\xed\x6c\xe2\x6c\xb6\x2f\x8d\xa5\x21\x39\xbf\x99\x1f\x67\x86\x43\xfd\x7e\x00\x10\xd9\x6b\x96\xa6\x68\xa2\x53\x88\x5e\x1f\x9f\x44\x87\xee\x19\x97\x0b\x15\x9d\x82\x7b\x0f\x10\x11\x27\x81\xee\xfd\x99\x28\x2c\xa1\x81\x0b\x26\x59\x8a\x06\xfe\xfb\xf1\xdc\xcb\x03\x44\x4b\x34\x96\x2b\xe9\xa4\x96\x27\xc7\xaf\xaa\x89\x00\xa2\x58\x49\x62\x31\x35\xb3\x01\x44\x92\xe5\x7e\xba\x0b\x1e\x67\x0c\x05\x7c\x46\x89\xbf\x71\x56\x8d\x00\x88\x0a\x23\xdc\xfb\x8c\x48\xdb\xd3\xd9\x2c\xe5\x94\x15\xf3\xe3\x58\xe5\xb3\x65\x5f\x14\x73\xc6\xbd\x70\x5e\xbd\xfa\x4f\xea\x9e\x38\xe1\xc8\xcb\xdc\x1c\x00\xdc\x78\x50\x36\xce\x30\x47\x1b\x9d\xc2\x2f\xa5\x6a\x6e\xfe\x5a\x4d\xbf\x96\x1b\xf1\xd5\xcb\xc6\x4a\xda\xa2\x23\xcc\xb4\x16\x3c\x66\xc4\x95\x9c\x7d\xb7\x4a\xb6\xb2\xda\xa8\xa4\x88\x27\xca\x32\xca\x6c\x6b\xd9\x19\xd3\x7c\xb6\x7c\x35\x8b\x4b\xc3\x86\x46\x4a\x31\xb4\x99\x53\xbf\xc8\x73\x66\x56\x0e\xeb\x15\x17\x02\x0c\x92\xe1\xb8\x44\xa0\x0c\xc1\x12\xa3\xc2\x82\x5a\x00\x83\x6a\x32\x60\x32\x01\x4e\x16\x7e\x14\x73\x8c\x95\x5c\xf0\x14\x16\xca\x40\xac\xa4\xc4\x98\xf8\x92\xd3\xaa\xb1\x23\x40\xa4\x34\x1a\xaf\xf2\x79\xe2\xd6\x78\x87\x54\xb9\x3b\x14\x32\x68\xb5\x92\x16\x6d\x47\x37\x80\xe8\xf5\xc9\x49\xef\x11\x40\x94\xa0\x8d\x0d\xd7\x54\x11\x23\x98\xa8\x44\xe4\x1c\xc2\xd6\x86\x01\x44\xff\x34\xb8\x70\x23\xfe\x31\x4b\x70\xc1\x25\x77\x33\xd8\xda\x4a\xdf\xf2\x92\x7e\xdf\x98\xe6\xad\x96\xff\x47\x2d\x56\x51\x67\xa2\x9b\x83\xa1\xbf\x6f\x02\x38\x9a\x19\x96\x23\xa1\x69\x9d\x57\xfe\xeb\x01\xa9\x19\xeb\xff\x3f\xbc\x15\xe4\x07\x96\xa3\xf3\x83\xf3\x4a\xed\x09\x52\x30\x47\x10\x4a\xfd\xc0\x04\x0a\x7d\xdc\x9f\x82\xfb\x91\x3f\x0b\x34\xab\xfe\x2b\x83\x3f\x0b\x6e\xd0\xb9\x64\xc1\x84\xc5\xde\x6b\x5a\x69\xaf\x98\x25\xc3\x65\x1a\x0d\x02\xfe\x1a\x00\x26\x96\xf6\xa1\xd6\xbb\xba\x1d\xfc\xf5\xa0\x67\xa9\x28\x41\x81\x84\xb7\xf3\xb1\x94\x69\xf9\x77\x0b\xb7\xde\x7a\xd1\x27\x40\xaf\x8e\xa2\xfb\xc2\xb0\xab\x8c\x11\x70\x1b\x32\xec\x5f\x16\xdc\x40\x47\xb4\x04\x2d\x19\xb5\x7a\x7a\x1c\xd3\xc5\x1d\x01\x4f\x1b\xb5\xe4\x2e\xc9\x4c\xe2\xd8\x99\x41\xf6\x24\x38\xd6\x51\xf4\x41\x38\x36\x57\xc9\x1a\x07\x4a\x7a\x0c\xbd\x09\xd8\x41\xa6\xe8\x93\xe3\xbe\x0d\x70\x61\xd3\x29\xf0\xb7\xe7\xdb\x41\x60\xbd\x26\xff\xa6\x48\x5a\x25\xb1\x2a\x64\xa7\x50\xd1\xca\x8e\x73\xf2\x92\xe7\x5a\x20\x68\x95\x80\x1f\x08\x35\xb1\x8e\x01\xaa\x04\xed\x7e\x27\x70\xcd\x29\xf3\x9b\x55\x16\xf9\x1c\x8d\x4b\x0e\x5a\x25\x16\xb8\x2c\x9f\xb2\x1c\xad\x66\x31\x96\x04\x4f\x30\xb9\x3d\x2b\x7f\x54\xc9\x99\x57\x74\x8f\x39\x1d\xa8\xf9\x1c\x19\x1d\xc0\x7f\x1c\x3e\x67\x28\x84\xba\x56\x46\x24\x9b\xd2\xf9\xbd\x1b\x09\x57\x6e\x28\x5c\xa2\x59\xf2\x18\xe1\x08\xae\x4b\x3e\x6b\x64\x04\x0c\x52\x83\x48\x5c\xa6\x2e\xdd\xd4\x0c\x9e\x42\x5e\x3f\xb7\x9f\x7a\x9f\xb9\xdb\x6a\xf9\x1c\xa9\xdb\xa2\x7f\x34\xe6\xe6\x21\x67\x37\xa8\x3c\x13\xd4\x42\xad\x30\x01\x37\x07\xc4\x19\x33\x74\x67\x0d\xfa\x1e\x45\x7e\xd6\x97\xdc\x37\x46\xf6\x54\x7d\x10\x5a\xae\x17\x58\x43\x60\xeb\x86\x00\x71\x21\xd0\x80\xcd\x54\x21\x12\x77\xd6\xe1\xd2\x12\x13\x02\x13\x50\xf2\x61\x4a\xd1\xc3\xbb\x31\x95\x5a\x1e\x37\x09\x77\x83\x3a\xbb\x02\xd8\x0c\xdd\x37\x4c\x75\xfb\x65\x3a\xa2\x6a\x84\x3f\xaa\xfa\x39\xfc\xd6\xdb\x1b\x5c\xfd\xed\x3b\x04\xc7\xef\x06\x70\x07\xee\xbf\xe0\x69\xa7\xda\x41\xf0\x42\x19\x30\x58\xfd\x7a\x19\xc4\xb6\x2f\xf2\x53\xc6\x6d\x99\x9a\xe7\x58\x9e\xfb\x8a\x98\xf8\x12\x81\xfb\x36\x90\xb7\x4e\xc6\x2c\x30\x61\x90\x25\x2b\x98\x23\xca\x36\x4a\x36\x65\xa9\x75\xe9\xbb\x77\xee\xec\x47\xcb\xf3\x72\xfd\x27\x11\x2e\xfb\xba\x3e\xc7\x34\xde\xb7\xc1\xe3\x24\xf3\x32\xb0\x4c\x2e\x41\x6f\xe3\x7d\x35\xd5\x38\x43\x3f\xd6\xdd\x81\x4f\x6b\x92\xfb\x46\xd0\x9e\xaa\xcf\x91\x9f\x3d\x13\x3c\x10\x3d\x9b\xab\x80\x40\xbb\xb6\x19\x3f\xa5\x35\x11\x50\xb9\x4e\x14\x6a\xfe\x1d\xe3\x36\x20\x46\xda\x38\x66\x12\xef\xd1\xad\xf6\x44\x87\x80\xbd\x64\x73\xd8\x79\x57\xdf\xba\x8c\x77\x94\x9b\x8e\x18\x26\x2d\xe6\x9b\xc1\x2d\x39\xad\xf1\xb4\x03\x3c\xf5\x63\x0c\xdc\x5c\x29\x81\xac\x5b\x9b\x44\x0b\x65\x72\x46\xa3\xaf\x1b\xf0\x57\x19\x52\x86\x06\x94\x01\xa9\xa8\x63\x83\x6b\x66\x43\x0b\xc0\x7c\x05\xe4\x32\xa2\x23\x2f\x5a\x8a\x06\xf7\x4d\x79\x51\xb2\x95\x1f\x3e\x55\xf7\x2c\x6b\xce\x48\x51\x56\xa1\x68\x0b\x2f\x0c\xb4\x98\xf7\xcf\x0b\x67\xbe\xae\x0f\x31\xd7\x15\x87\x2b\x25\xee\xdd\xd2\x97\xcd\x6d\x96\x5b\x72\xdd\x9f\x9b\xd9\xb6\x57\x08\xec\x9f\x75\xaf\x58\x59\x92\x37\x19\x0d\x6c\x11\xc7\x68\xed\xa2\x10\xc3\xb6\xcd\xd1\x5a\x96\x6e\x17\x4e\xfc\x21\xa0\x9a\xc0\xc2\x35\x1a\x84\x94\x2f\x71\x1b\xee\xbe\x73\xc4\xe7\x71\x5b\x15\x3e\x46\x78\x0c\x0f\x35\x32\x08\x95\x65\xa1\x9b\xa3\x1c\x89\x04\xed\x31\xf0\x3e\x56\x2d\x3b\xb8\xfe\xfe\xc5\x2d\xeb\x9f\x07\xd7\xc0\x40\x6a\x58\x0b\x83\x5a\xed\xac\x40\x59\xea\xbb\xa9\x2c\x27\x65\x56\xc3\x4b\xc5\x3d\x17\xed\xb2\x96\xf7\xd6\xe0\x2a\x4b\x26\x8a\xf5\x4a\x6b\xfa\x32\xcc\x60\xb5\x19\x7c\x7a\x86\x17\x12\x2d\x61\x02\x2b\x96\x0b\x38\xf2\xaf\x3e\xfb\x25\x8e\xfd\x93\x58\x49\x42\x49\xf6\xe5\xf6\xf4\x2d\x4b\x90\x4b\x24\x72\xaa\xed\x48\xe1\xfb\x61\x54\xbf\xdd\x30\x62\xea\xe6\x9b\x8b\xdd\x56\x1b\x6e\x05\x6c\x65\x50\xda\xf3\x44\x76\xde\xb9\x36\xad\xaf\x60\xec\xca\x12\xe6\xf7\x9e\xc6\x42\x1b\xdb\x4e\x4a\x8b\xfb\x85\x6a\xb8\x62\xfb\xbd\xc6\xce\xab\x06\x9f\x7e\x90\xaa\xbf\xfc\xa8\xdb\xf6\xeb\x4a\x6c\xe0\xe7\xf0\x7e\xe3\xd1\xb6\xcc\x87\x30\xf0\x2e\x90\xe2\xb2\xa1\xd1\x5c\xc9\x7d\x91\xff\x43\xb6\x44\xc0\x5c\xd3\xca\xc9\xf8\x86\x10\xb8\xe3\x65\xb3\xb0\xdd\x0d\xff\xce\x44\xd7\x2a\x19\x65\x17\x97\x84\x69\xaf\x09\x1b\x50\x9d\x4b\xfa\xf7\xeb\x31\xd3\xdc\x71\xd7\xe8\x8e\xd7\x5d\x3b\x6c\x13\x41\xbb\xb7\x05\x7f\x6e\xf6\x5f\xd7\xae\x99\xb5\x53\xa2\x87\x37\x58\x9d\xd2\x71\x12\x8e\x9d\xfd\x39\xad\x34\x9b\x0a\xa6\x6e\x5d\x38\xf2\x06\xc0\xee\x04\x34\xd4\xff\xd9\x01\xd4\xfa\xf7\x69\x43\xa0\x46\xce\x0e\x53\xee\x08\x86\x23\xe1\x5a\xff\x08\x36\x6a\x32\x0c\xe6\xf7\x91\xb3\x5d\xa5\x5c\x29\x64\x37\x28\xa0\x36\xd5\x66\xa8\x85\xda\x31\x97\xaf\xaf\x2e\xd7\x15\x99\xba\x27\x87\xdb\x9f\xfb\x97\x8a\x9f\xec\xa9\x67\xa0\x77\xf5\xf4\xb6\xd6\xbd\x25\xde\xf1\xa5\xf9\xc8\xd2\xbb\x94\xad\x9f\xdd\x58\xa9\x7a\xa5\xaa\x8b\x8e\x75\xdf\x78\x06\x85\x4e\x0d\x4b\x70\xf4\xc8\x55\xbb\xf4\x9a\x27\xa3\xe8\xef\xa3\xc8\xac\x4c\xd3\x7c\xac\x76\xe4\x16\xac\x9e\xbe\xf9\x22\x2f\x4b\x93\x71\x82\xcc\xd5\x28\x1d\x21\x96\xe4\x5c\x82\x36\x7c\xc9\x05\xa6\x68\xdf\x0c\x23\xf1\x62\xdf\x82\x52\x66\x04\x0d\x33\x86\x75\x7b\xbc\x11\x27\xcc\xfb\xf2\xd3\x2f\xed\x06\x98\xe0\x30\xbb\xc2\x93\x02\x2e\xb0\xb9\xf0\x99\xab\x84\xb3\x55\x7b\x6c\xb0\x57\xfe\x77\x30\xdb\x30\x98\x35\x8d\x6f\xfc\x95\xd0\x48\x26\xde\xaa\x38\xe8\x7c\xf7\xae\x3c\x2e\x94\x71\xbe\x53\x05\xc1\x2d\x5f\xfc\x8f\x7f\xa4\x6f\x59\x6e\x0b\x99\x1e\xc5\x32\xa6\x3a\x13\x1e\x55\x3e\x3d\x62\x9a\x3b\x35\x6f\x0e\x6e\x0e\xfe\x08\x00\x00\xff\xff\x82\x9a\xa3\xe7\x7f\x30\x00\x00")

func apiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apiSwaggerJson,
		"api.swagger.json",
	)
}

func apiSwaggerJson() (*asset, error) {
	bytes, err := apiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.swagger.json", size: 12415, mode: os.FileMode(420), modTime: time.Unix(1525756290, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.swagger.json": apiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.swagger.json": &bintree{apiSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
