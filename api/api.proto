// Copyright 2018 Samsung SDS Cloud Native Computing Team authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package cluster_manager_api;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";


option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "Cluster Manager API";
    version: "v0.1.0";
    contact: {
        name: "Michael Venezia";
        url: "https://github.com/venezia";
        email: "mvenezia@gmail.com";
    };
  };
  external_docs: {
    url: "https://github.com/samsung-cnct/cluster-manager-api";
    description: "More about Cluster Manager API";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

service Cluster {
    // Simple Hello World Service - will repeat a greeting to the name provided
    rpc HelloWorld (HelloWorldMsg) returns (HelloWorldReply) {
        option (google.api.http) = {
      post : "/api/v1/helloworld"
      body: "*"
    };
    }
    // Simple pod count response.  Will respond with the number of pods in the namespace provided
    rpc GetPodCount (GetPodCountMsg) returns (GetPodCountReply) {
        option (google.api.http) = {
            post : "/api/v1/getpodcount"
            body : "*"
        };
    }
    // Will provision a cluster
    rpc CreateCluster (CreateClusterMsg) returns (CreateClusterReply) {
        option (google.api.http) = {
            put : "/api/v1/cluster"
            body : "*"
        };
    }
    // Will retrieve the status of a cluster and its kubeconfig for connectivity
    rpc GetCluster (GetClusterMsg) returns (GetClusterReply) {
        option (google.api.http) = {
            get : "/api/v1/cluster"
        };
    }
    // Will delete a cluster
    rpc DeleteCluster (DeleteClusterMsg) returns (DeleteClusterReply) {
        option (google.api.http) = {
            delete : "/api/v1/cluster"
        };
    }
    // Will install (or reinstall) tiller
    rpc ProvisionTiller (ProvisionTillerMsg) returns (ProvisionTillerReply) {
        option (google.api.http) = {
            post : "/api/v1/tiller"
            body : "*"
        };
    }
    // Will install (or reinstall) helm chart
    // This will be destructive if a chart has already been deployed with the same name
    rpc InstallHelmChart (InstallHelmChartMsg) returns (InstallHelmChartReply) {
        option (google.api.http) = {
            put : "/api/v1/helm"
            body : "*"
        };
    }
    // Will delete deployed helm chart
    rpc DeleteHelmChart (DeleteHelmChartMsg) returns (DeleteHelmChartReply) {
        option (google.api.http) = {
            delete : "/api/v1/helm"
        };
    }
}

// The Hello World request
message HelloWorldMsg {
    string name = 1;
}

// The response to Hello World
message HelloWorldReply {
    string message = 1;
}

message GetPodCountMsg {
    // Namespace to fetch the pod count
    // Leave empty to query all namespaces
    string namespace = 1;
}

message GetPodCountReply {
    // Number of pods in the namespace (or all namespaces)
    int32 pods = 1;
}

message CreateClusterMsg {
    // Name of the cluster to be provisioned
    string name = 1;
}

message CreateClusterReply {
    // Whether or not the cluster was provisioned by this request
    bool ok = 1;
    // The state of the cluster generation
    string status = 2;
}

message GetClusterMsg {
    // Name of the cluster to be looked up
    string name = 1;
}

message GetClusterReply {
    // Is the cluster in the system
    bool ok = 1;
    // What is the status of the cluster
    string status = 2;
    // What is the kubeconfig to connect to the cluster
    string kubeconfig = 3;
}

message DeleteClusterMsg {
    // What is the cluster's name to destroy
    string name = 1;
}

message DeleteClusterReply {
    // Could the cluster be destroyed
    bool ok = 1;
    // Status of the request
    string status = 2;
}

message ProvisionTillerMsg {
    // Cluster tiller should be installed on
    string cluster = 1;
    // Namespace tiller should be installed in
    string namespace = 2;
    // Versino of tiller/helm to install / upgrade to
    string version = 3;
    // Is the tiller a cluster-wide tiller?
    // Should it have cluster-wide admin privileges?
    bool cluster_wide = 4;
    // Namespaces that it should be able to admin on
    repeated string admin_namespaces = 5;
}

message ProvisionTillerReply {
    // Was the operation successful
    bool ok = 1;
    // What messages were given
    string message = 2;
}

message InstallHelmChartMsg {
    // Cluster tiller should be installed on
    string cluster = 1;
    // Tiller settings
    GenericTillerSetting tiller = 2;
    // Chart Settings
    GenericHelmChart chart = 3;
}

message InstallHelmChartReply {
    // Was the operation successful
    bool ok = 1;
    // What messages were given
    string message = 2;
}

message DeleteHelmChartMsg {
    // Cluster tiller should be installed on
    string cluster = 1;
    // Tiller settings
    GenericTillerSetting tiller = 2;
    // Chart Name
    string chart = 3;
}

message DeleteHelmChartReply {
    // Was the operation successful
    bool ok = 1;
    // What messages were given
    string message = 2;
}

message GenericTillerSetting {
    // What is the tiller namespace
    string namespace = 1;
    // What is the version of tiller/helm
    string version = 2;
}

message GenericHelmChart {
    // What is the name of the deployment
    string name = 1;
    // What is the namespace to deploy the application to
    string namespace = 2;
    // What is the chart repository
    string repo = 3;
    // What is the chart name
    string chart = 4;
    // What are the options (nested yaml - the Values.yaml contents)
    string values = 5;
}